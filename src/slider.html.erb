<!DOCTYPE html>
<html>
<head>
<!-- Probably always a good idea to be utf-8 -->
<meta charset="utf-8"> 
<!-- So iPads can view the app in full screen -->
<meta name="apple-mobile-web-app-capable" content="yes">

<link href='http://fonts.googleapis.com/css?family=Muli' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Josefin+Sans' rel='stylesheet' type='text/css'>
<!-- This prevents Internet Explorer from entering 'quirks' mode -->
<meta content='IE=edge' http-equiv='X-UA-Compatible'>
<title>Global Calculator</title>
<!-- assets is a function definied in the Helper module in src/server.rb --> 
<link href='/assets/<%= assets['application.css']%>' media='screen' rel='stylesheet' type='text/css' />
<script src='/assets/<%= assets['application.js']%>' type='text/javascript'></script>
</head>
<style>
text {
  font-size: 0.72em;
}

.axis path, 
.axis line {
  fill: none;
  stroke: #000;
  stroke-width: 1px; }

.axis text {
  fill: #000; }

text.unit {
  text-anchor: end;
}

.label circle {
  fill: #ccc;
  stroke: black;
}

.label text {
  fill: #333;
  text-anchor: middle;
}

.label line {
  fill: none;
  stroke: #333;
  stroke-width: 1px; 
  marker-end: url(#arrowHead);
  shape-rendering: crispedges;
}

.range {
  fill-opacity: 1.0;
}

text.range {
  font-size: 0.4em;
}

text.range.level2 {
  fill: black;
  stroke: none;
}

.range.level1 {
  fill: green;
}

.range.level2 {
  fill: yellow;
}

.range.level3 {
  fill: orange;
}

.range.level4 {
  fill: red;
}

circle.validpoint {
  fill: black;
  stroke: none;
}


.chosen line {
  stroke: black;
  fill: none;
  stroke-width: 2px;
  marker-end: url(#arrowHead);
  shape-rendering: crispedges;
}

.chosen text {
  text-anchor: middle;
  fill: white;
}

.chosen.moving circle {
  fill: red;
} 

text.moveme {
  opacity: 0;
  font-size: 0.5em;
  fill: black;
}


.chosen.hover text.moveme {
  opacity: 1.0;
}

svg {
  cursor: pointer;
}

</style>
<body>
<div id='background'></div>
<div id='title'><a href='http://www.globalcalculator.org'>The Draft Global Calculator</a></div>
<div id='jump'>Quickly jump to:</div>
<div id='consequences'>
  <h3>Consequences</h3>
  <p>By 2100, it could be <span id='lowtemp'> </span>&ndash;<span id='hightemp'> </span>&deg;C warmer than pre-industrial times</p>
</div>
<div id='controls'>
  <h1>Live the dream & avoid climate change</h2>
  <div class='intro'>
    <div id='video'>
      <img src="/assets/images/play.png" alt="Play video" tabindex="0">
    </div>
    <div id='intro'>
      <p>Could we all live a 'dream' lifestyle and yet avoid climate change? Even if there end up being 11 billion of us on this planet?</p>
      <p>The future is uncertain, but not completly. Below are a series of possibilities for the way we live, for the power stations we build, for the way we uses our land. They (should, but may not yet) cover the extremes of what might happen.<p>
      <p>Choose the future you want and see the consequences on the right.</p>
      <p>If you don't like the consequences, make a different choice.</p>
      <p>If you like the consequences, <a href='#share'>go make your future happen</a>.</p>
    </div>
    <div style='clear:both'></div>
</div>
<div class='group'>
  <h2>Where next?</h2>
</div>

<script>
var code_for_choice = {
  0.0: "0",
  "": "0",
  1.0: "1",
  1.1: "b",
  1.2: "c",
  1.3: "d",
  1.4: "e",
  1.5: "f",
  1.6: "g",
  1.7: "h",
  1.8: "i",
  1.9: "j",
  2.0: "2",
  2.1: "l",
  2.2: "m",
  2.3: "n",
  2.4: "o",
  2.5: "p",
  2.6: "q",
  2.7: "r",
  2.8: "s",
  2.9: "t",
  3.0: "3",
  3.1: "v",
  3.2: "w",
  3.3: "x",
  3.4: "y",
  3.5: "z",
  3.6: "A",
  3.7: "B",
  3.8: "C",
  3.9: "D",
  4.0: "4"
};

var choice_for_code = {};
var name, c;

for (name in code_for_choice) {
  if (code_for_choice.hasOwnProperty(name)) {
    c = code_for_choice[name];
    choice_for_code[c] = +name;
  }
};

var choice_data;
var choices = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var implications;
var implications_cache = d3.map();

function set_choice_to_level(choice_index, level) {
  choices[choice_index] = level;
  updateUrl();
  setSliders();
  loadImplications();
};

function updateUrl() {
  if(history['pushState'] == null) { return; }
  history.pushState(choices, code(), "/"+code());
}

function setSliders() {
  d3.selectAll("g.chosen")
    .transition()
    .attr("transform", function(d,i) {
        var level = choices[d.index];
        var value = d.valid_points[(level*10)-10];
        return "translate("+d.scale(value)+",0)";
      });
};

function code() {
  var c = [];
  var i;
  var l = choices.length;
  for(i=0; i<l; i++) {
    c.push(code_for_choice[choices[i]]);
  }
  return c.join('');
};

function loadImplications() {
  cached_implication = implications_cache.get(code());

  d3.select("#consequences").classed("loading",true);

  if(cached_implication != undefined) { 
    implications = cached_implication;
    updateImplications();
  }


  d3.json("/"+code()+"/data", function(error, data) {
      if(error != undefined) {
        console.log("Error loading", error);
        return;
        };
        implications_cache.set(data.code, data);

        if(data.code == code()) {
          implications = data;
          updateImplications();
          }
      });
}

function openInComplexTool() {
  window.location = "http://tool.globalcalculator.org/glob-calc-v11.html?levers="+code().substr(0,57)+"/dashboard";;
};

var temperature_format = d3.format(".1f");

function updateImplications() {
  d3.select("#consequences").classed("loading",false);
  d3.select('#lowtemp').transition().text( temperature_format(implications.warming[1]));
  d3.select('#hightemp').transition().text(temperature_format(implications.warming[0]));
}
  

function load_choice_data(rows) {
  choice_data = d3.nest()
    .key(function(d) { return d.sector; })
    .entries(rows);
  draw_choices();
  setSliders();
};

var range_labels = ["Easy", "Possible", "Difficult", "Extreme"];

function parse_choice_data(d) {
  console.log(d);
  var i;
  var levels = [+d["level1"], +d["level2"], +d["level3"], +d["level4"]];
  var max = Math.max.apply(this, levels.concat(+d.today));
  var min = 0;
  var low_to_high = (levels[0] < levels[3]);
  var scale = d3.scale.linear().domain([min,max]).range([0,600]).nice();
  
  var ranges = [];
  var r, finish;
  var start = levels[0]; // scale.domain()[0];
  for(i = 1; i < 4; i++) {
    finish = levels[i];
    r = { label: range_labels[i], class: "level"+(i+1)}
    if(finish >= start) { 
      r.start = start;
      r.finish = finish;
    } else {
      r.start = finish;
      r.finish = start;
    }
    ranges.push(r)
    start = finish;
  }

  var valid_points = [].
    concat(ten_points_between(levels[0], levels[1])).
    concat(ten_points_between(levels[1], levels[2])).
    concat(ten_points_between(levels[2], levels[3])).
    concat(levels[3]);

  var labels = [["2011", +d.today]];

  return { index: +d.index, sector: d.sector, name: d.lever, unit: d.unit, min: min, max: max, scale: scale, low_to_high: low_to_high, ranges: ranges, valid_points: valid_points, labels: labels};
};


function ten_points_between(low, high) {
  if(low > high) { return ten_points_between(high, low).reverse() };
  return d3.range(low, high, (high-low)/10);
}

function draw_choices() {
  var groups = d3.select('#controls').selectAll('div.group')
      .data(choice_data);

  var new_groups = groups.enter().append('div').attr('class', 'group');

  new_groups.append('h2')
      .attr('id', function(d) { return d.key.toLowerCase().replace(/[^a-zA-Z]+/g,'-'); })
      .text(function(d) { return d.key; });

  var choices = groups.selectAll('div.choice')
    .data(function(d) { return d.values; });

  var new_choices = choices.enter().append('div')
    .attr('class', 'choice');

  new_choices.append('h3')
    .attr('id', function(d) { return d.name.toLowerCase().replace(/[^a-zA-Z]+/g,'-'); })
    .html(function(d) { return d.name; });


  new_choices.each(new_scale);


  // Draw the jump links
  groups = d3.select('#jump').selectAll('a')
    .data(choice_data);

  groups.enter().append('a')
    .attr('href', function(d) { return "#"+d.key.toLowerCase().replace(/[^a-zA-Z]+/g,'-'); })
    .text(function(d) { return d.key; })

  d3.select('#jump')
    .on('mouseover', function() { d3.select('#jump').transition().attr('style', 'opacity: 1'); })
    .on('mouseout', function() { d3.select('#jump').transition().attr('style', 'opacity: 0'); })

}

var margin = {width: 1000, height: 300, top: 100, right: 30, bottom: 40, left: 150};


function new_scale(d) {
  var choice = d3.select(this);
  var x = d.scale;
  var axis = d3.svg.axis().scale(d.scale).orient("bottom");
  var svg = choice.append("svg")
      .attr("width",margin.width)
      .attr("height",margin.height);

  svg.append("defs")
        .append("svg:marker")
          .attr("id", "arrowHead")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 8)
          .attr("refY", 5)
          .attr("markerWidth", 8)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
        .append("svg:path")
          .attr("d", "M 0 0 L 10 5 L 0 10 Z");

  svg = svg.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


  var ranges = svg.append("g")
        .attr("class", "ranges")
      .selectAll("rect.range")
        .data(function(d) { return d.ranges; });

  ranges.enter().append("rect")
    .attr('class', function(d) { return 'range '+d.class; })
    .attr('height', 30)
    .attr('width', function(d) { return x(d.finish) - x(d.start); })
    .attr('x', function(d) { return x(d.start); })
    .attr('y', -30);

  ranges.enter().append("text")
    .attr('class', function(d) { return 'range '+d.class; })
    .attr('x', function(d) { return x(d.start); })
    .attr('y', -31)
    .text(function(d) { return d.label; });

  var axis_g = svg.append("g")
      .attr("class", "axis")
    .call(axis);

  svg.append("text")
    .attr("class", "unit")
    .attr("x", -10)
    .attr("y", 3)
    .text(d.unit);

  var valid_points = svg.append("g").attr("class", "validpoints").selectAll("circle.validpoint").data(function(d) { return d.valid_points; });

  valid_points.enter().append("circle")
    .attr('class', 'validpoint')
    .attr('r', 1)
    .attr('cx', function(d) { return x(d); })
    .attr('cy', 0);

  var labels = svg.selectAll("g.label").data(function(d) { return d.labels; });

  var new_labels = labels.enter().append("g")
    .attr('class', 'label');

  new_labels.append("circle")
    .attr('cx', function(d) { return x(d[1]); })
    .attr("cy", -65)
    .attr("r", 16);

  new_labels.append('text')
    .attr('x', function(d) { return x(d[1]); })
    .attr('y', -60)
    .text(function(d) { return d[0]; });

  new_labels.append('line')
    .attr('x1',  function(d) { return x(d[1]); })
    .attr('x2',  function(d) { return x(d[1]); })
    .attr('y1', -49)
    .attr('y2', 1);

  var chosen = svg.append("g")
    .attr('class', 'chosen');

  chosen.append("line")
    .attr('x1', 0)
    .attr('x2', 0)
    .attr('y1', -57)
    .attr('y2', 1);

  chosen.append("circle")
    .attr("cx", 0)
    .attr("cy", -65)
    .attr("r", 16);

  chosen.append("text")
    .attr('x',0)
    .attr('y', -60)
    .text("2050");

  chosen.append("text")
    .attr('class', 'moveme')
    .attr('x', 0)
    .attr('y', -85)
    .text("move me");

  var drag = d3.behavior.drag().origin(function(d) { 
        var level = choices[d.index];
        var value = d.valid_points[(level*10)-10];
        return { x: d.scale(value), y: 0 };
        })
        .on('dragstart', function(d) { 
            chosen.classed("moving", true);
            
            })
        .on('drag', function(d) { 
            updateChosen(chosen, d3.event.x, d)
            
            })
        .on('dragend', function(d) { 
            chosen.classed("moving", false);
            });

  var click_rect = svg.append("rect")
      .attr("x", 0)
      .attr("y", -100)
      .attr("width", 600)
      .attr("height",200)
      .attr('style', 'fill: none; pointer-events: all');

  click_rect.call(drag);

  click_rect.on("click", function(d) { 
      var x_pixels = d3.mouse(axis_g.node())[0];
      updateChosen(chosen, x_pixels, d);
      });

  click_rect.on("mouseenter", function(d) {
      chosen.classed("hover", true);
      }).on('mouseleave', function(d) {
        chosen.classed("hover", false);
        });
}

function updateChosen(chosen, x_pixels, d) {
    var x_value = d.scale.invert(x_pixels);
    var nearest_x_index = index_of_nearest(x_value, d.valid_points);
    var level = (nearest_x_index/10)+1;
    set_choice_to_level(d.index, level);
    chosen.transition().attr('transform', "translate("+d.scale(d.valid_points[nearest_x_index])+",0)");
}

function index_of_nearest(value, possible_values) {
  if(possible_values[0] > possible_values[1]) {
    return (possible_values.length - 1 - index_of_nearest(value, possible_values.slice().reverse()))
  };

  if(value <= possible_values[0]) { return 0 };
  var last = possible_values.length-1;
  if(value >= possible_values[last]) { return last };
  var i, above, below;
  for(i = 0; i <= last; i++) {
    if(value == possible_values[i]) { return i };
    if(value > possible_values[i] && value < possible_values[i+1]) { 
      above = possible_values[i];
      below = possible_values[i+1];
      if((value-above) < (below-value)) {
        return i;
      } else {
        return i+1;
      }
    }
  }
  console.log("Error, couldn't find nearest", value, possible_values);
}

// Do the changing background

var backgrounds = [
  'crowd',
  'urban',
  'distance',
  'freight',
  'cars',
  'efficientcars',
  '6',
  'floorarea',
  'warmth',
  'appliances',
  'insulation',
  '11',
  'appliance-efficiency',
  'stuff',
  '14',
  '15',
  '16',
  '17',
  '18',
  '19',
  '20',
  '21',
  '22',
  '23',
  '24',
  '25',
  '26',
  '27',
  '28',
  '29',
  'calories',
  'meat',
];

var current_background = undefined;
var scroll_at_background_change = 0;

function onScroll() {
  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
  var found = false;
  d3.selectAll('.choice').each(function(d) {
      distance = this.offsetTop-scrollTop;
      if(!found && distance > 0 && distance < 250) {
        //window.location.hash = '#'+d.name.toLowerCase().replace(/[^a-zA-Z]+/g,'-');
        changeBackround(backgrounds[d.index]);
        found = true;
        }
      });
  if(!found && scrollTop < 500) {
    changeBackround('earth');
  }
  d3.select("#background")
    .attr("style", "background-position-y: "+(((scroll_at_background_change - scrollTop)/7)-70)+"px");
}

function changeBackround(new_background) {
  if( current_background == new_background ) { return; };
  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
  scroll_at_background_change = scrollTop;
  d3.select("#background")
    .classed(current_background+"-image", false)
    .classed(new_background+"-image", true)
  current_background = new_background;
}
window.onscroll = onScroll;
onScroll();

var url_elements = window.location.pathname.split('/');
if(url_elements[1].length == 57) {
  choices = [];
  c = url_elements[1].split('');
  l = c.length;
  for(i=0; i<l;i++) {
    choices[i] = choice_for_code[c[i]];
  }
}
d3.csv("/slider-choices.csv", load_choice_data).row(parse_choice_data);
loadImplications();


</script>


</body>
</html>
