# coding: utf-8
# Test for global_2050_model
require 'minitest/autorun'
require_relative './model'

class TestModel < Minitest::Unit::TestCase
  def self.runnable_methods
    puts 'Overriding minitest to run tests in a defined order'
    methods = methods_matching(/^test_/)
  end
  def worksheet; @worksheet ||= init_spreadsheet; end
  def init_spreadsheet; Model.new end
  def test_user_inputs_e7; assert_in_epsilon(2.0, worksheet.user_inputs_e7, 0.002); end
  def test_user_inputs_e8; assert_in_epsilon(2.0, worksheet.user_inputs_e8, 0.002); end
  def test_user_inputs_e9; assert_in_epsilon(2.0, worksheet.user_inputs_e9, 0.002); end
  def test_user_inputs_e10; assert_in_epsilon(2.0, worksheet.user_inputs_e10, 0.002); end
  def test_user_inputs_e11; assert_in_epsilon(1.9, worksheet.user_inputs_e11, 0.002); end
  def test_user_inputs_e12; assert_in_epsilon(1.9, worksheet.user_inputs_e12, 0.002); end
  def test_user_inputs_e13; assert_in_epsilon(2.0, worksheet.user_inputs_e13, 0.002); end
  def test_user_inputs_e14; assert_in_delta(1.0, worksheet.user_inputs_e14, 0.002); end
  def test_user_inputs_e15; assert_in_epsilon(2.0, worksheet.user_inputs_e15, 0.002); end
  def test_user_inputs_e16; assert_in_epsilon(2.0, worksheet.user_inputs_e16, 0.002); end
  def test_user_inputs_e17; assert_in_epsilon(2.0, worksheet.user_inputs_e17, 0.002); end
  def test_user_inputs_e18; assert_in_epsilon(1.6, worksheet.user_inputs_e18, 0.002); end
  def test_user_inputs_e19; assert_in_epsilon(1.5, worksheet.user_inputs_e19, 0.002); end
  def test_user_inputs_e20; assert_in_epsilon(1.6, worksheet.user_inputs_e20, 0.002); end
  def test_user_inputs_e21; assert_in_epsilon(1.4, worksheet.user_inputs_e21, 0.002); end
  def test_user_inputs_e22; assert_in_epsilon(1.1, worksheet.user_inputs_e22, 0.002); end
  def test_user_inputs_e23; assert_in_epsilon(1.5, worksheet.user_inputs_e23, 0.002); end
  def test_user_inputs_e24; assert_in_delta(1.0, worksheet.user_inputs_e24, 0.002); end
  def test_user_inputs_e25; assert_in_epsilon(1.9, worksheet.user_inputs_e25, 0.002); end
  def test_user_inputs_e26; assert_in_epsilon(1.6, worksheet.user_inputs_e26, 0.002); end
  def test_user_inputs_e27; assert_in_delta(1.0, worksheet.user_inputs_e27, 0.002); end
  def test_user_inputs_e28; assert_in_epsilon(1.8, worksheet.user_inputs_e28, 0.002); end
  def test_user_inputs_e29; assert_in_epsilon(1.6, worksheet.user_inputs_e29, 0.002); end
  def test_user_inputs_e30; assert_in_epsilon(1.2, worksheet.user_inputs_e30, 0.002); end
  def test_user_inputs_e31; assert_in_epsilon(1.9, worksheet.user_inputs_e31, 0.002); end
  def test_user_inputs_e32; assert_in_epsilon(1.6, worksheet.user_inputs_e32, 0.002); end
  def test_user_inputs_e33; assert_in_epsilon(1.9, worksheet.user_inputs_e33, 0.002); end
  def test_user_inputs_e34; assert_in_epsilon(1.4, worksheet.user_inputs_e34, 0.002); end
  def test_user_inputs_e35; assert_in_epsilon(1.4, worksheet.user_inputs_e35, 0.002); end
  def test_user_inputs_e36; assert_in_epsilon(1.4, worksheet.user_inputs_e36, 0.002); end
  def test_user_inputs_e37; assert_in_epsilon(1.5, worksheet.user_inputs_e37, 0.002); end
  def test_user_inputs_e38; assert_in_epsilon(2.9, worksheet.user_inputs_e38, 0.002); end
  def test_user_inputs_e39; assert_in_epsilon(1.8, worksheet.user_inputs_e39, 0.002); end
  def test_user_inputs_e40; assert_in_epsilon(2.0, worksheet.user_inputs_e40, 0.002); end
  def test_user_inputs_e41; assert_in_epsilon(2.0, worksheet.user_inputs_e41, 0.002); end
  def test_user_inputs_e42; assert_in_epsilon(2.0, worksheet.user_inputs_e42, 0.002); end
  def test_user_inputs_e43; assert_in_epsilon(2.3, worksheet.user_inputs_e43, 0.002); end
  def test_user_inputs_e44; assert_in_epsilon(2.0, worksheet.user_inputs_e44, 0.002); end
  def test_user_inputs_e45; assert_in_epsilon(3.9, worksheet.user_inputs_e45, 0.002); end
  def test_user_inputs_e46; assert_in_delta(1.0, worksheet.user_inputs_e46, 0.002); end
  def test_user_inputs_e47; assert_in_delta(1.0, worksheet.user_inputs_e47, 0.002); end
  def test_user_inputs_e48; assert_in_delta(1.0, worksheet.user_inputs_e48, 0.002); end
  def test_user_inputs_e49; assert_in_delta(1.0, worksheet.user_inputs_e49, 0.002); end
  def test_user_inputs_e50; assert_in_delta(1.0, worksheet.user_inputs_e50, 0.002); end
  def test_user_inputs_e51; assert_in_epsilon(1.3, worksheet.user_inputs_e51, 0.002); end
  def test_user_inputs_e52; assert_in_epsilon(3.8, worksheet.user_inputs_e52, 0.002); end
  def test_user_inputs_e53; assert_in_epsilon(2.0, worksheet.user_inputs_e53, 0.002); end
  def test_user_inputs_e54; assert_equal("B", worksheet.user_inputs_e54); end
  def test_user_inputs_e55; assert_equal("US", worksheet.user_inputs_e55); end
  def test_user_inputs_e56; assert_equal("Point", worksheet.user_inputs_e56); end
  def test_user_inputs_e57; assert_equal("Point", worksheet.user_inputs_e57); end
  def test_user_inputs_e58; assert_equal("Point", worksheet.user_inputs_e58); end
  def test_user_inputs_e59; assert_equal("Point", worksheet.user_inputs_e59); end
  def test_user_inputs_e60; assert_equal("Point", worksheet.user_inputs_e60); end
  def test_user_inputs_e61; assert_equal("Point", worksheet.user_inputs_e61); end
  def test_user_inputs_e62; assert_equal("Point", worksheet.user_inputs_e62); end
  def test_lever_graphs_c2649; assert_equal("1975", worksheet.lever_graphs_c2649); end
  def test_lever_graphs_d2649; assert_equal("1980", worksheet.lever_graphs_d2649); end
  def test_lever_graphs_e2649; assert_equal("1985", worksheet.lever_graphs_e2649); end
  def test_lever_graphs_f2649; assert_equal("1990", worksheet.lever_graphs_f2649); end
  def test_lever_graphs_g2649; assert_equal("1995", worksheet.lever_graphs_g2649); end
  def test_lever_graphs_h2649; assert_equal("2000", worksheet.lever_graphs_h2649); end
  def test_lever_graphs_i2649; assert_equal("2005", worksheet.lever_graphs_i2649); end
  def test_lever_graphs_j2649; assert_equal("2011", worksheet.lever_graphs_j2649); end
  def test_lever_graphs_k2649; assert_equal("2015", worksheet.lever_graphs_k2649); end
  def test_lever_graphs_l2649; assert_equal("2020", worksheet.lever_graphs_l2649); end
  def test_lever_graphs_m2649; assert_equal("2025", worksheet.lever_graphs_m2649); end
  def test_lever_graphs_n2649; assert_equal("2030", worksheet.lever_graphs_n2649); end
  def test_lever_graphs_o2649; assert_equal("2035", worksheet.lever_graphs_o2649); end
  def test_lever_graphs_p2649; assert_equal("2040", worksheet.lever_graphs_p2649); end
  def test_lever_graphs_q2649; assert_equal("2045", worksheet.lever_graphs_q2649); end
  def test_lever_graphs_r2649; assert_equal("2050", worksheet.lever_graphs_r2649); end
  def test_lever_graphs_b2650; assert_equal("Historic data", worksheet.lever_graphs_b2650); end
  def test_lever_graphs_b2651; assert_in_delta(1.0, worksheet.lever_graphs_b2651, 0.002); end
  def test_lever_graphs_j2651; assert_in_delta(0.02, worksheet.lever_graphs_j2651, 0.002); end
  def test_lever_graphs_k2651; assert_in_delta(0.03333333333333333, worksheet.lever_graphs_k2651, 0.002); end
  def test_lever_graphs_l2651; assert_in_delta(0.03142857142857143, worksheet.lever_graphs_l2651, 0.002); end
  def test_lever_graphs_m2651; assert_in_delta(0.029523809523809525, worksheet.lever_graphs_m2651, 0.002); end
  def test_lever_graphs_n2651; assert_in_delta(0.02761904761904762, worksheet.lever_graphs_n2651, 0.002); end
  def test_lever_graphs_o2651; assert_in_delta(0.025714285714285714, worksheet.lever_graphs_o2651, 0.002); end
  def test_lever_graphs_p2651; assert_in_delta(0.023809523809523808, worksheet.lever_graphs_p2651, 0.002); end
  def test_lever_graphs_q2651; assert_in_delta(0.021904761904761906, worksheet.lever_graphs_q2651, 0.002); end
  def test_lever_graphs_r2651; assert_in_delta(0.02, worksheet.lever_graphs_r2651, 0.002); end
  def test_lever_graphs_b2652; assert_in_epsilon(2.0, worksheet.lever_graphs_b2652, 0.002); end
  def test_lever_graphs_j2652; assert_in_delta(0.02, worksheet.lever_graphs_j2652, 0.002); end
  def test_lever_graphs_k2652; assert_in_delta(0.03333333333333333, worksheet.lever_graphs_k2652, 0.002); end
  def test_lever_graphs_l2652; assert_in_delta(0.03571428571428571, worksheet.lever_graphs_l2652, 0.002); end
  def test_lever_graphs_m2652; assert_in_delta(0.0380952380952381, worksheet.lever_graphs_m2652, 0.002); end
  def test_lever_graphs_n2652; assert_in_delta(0.04047619047619048, worksheet.lever_graphs_n2652, 0.002); end
  def test_lever_graphs_o2652; assert_in_delta(0.04285714285714286, worksheet.lever_graphs_o2652, 0.002); end
  def test_lever_graphs_p2652; assert_in_delta(0.045238095238095244, worksheet.lever_graphs_p2652, 0.002); end
  def test_lever_graphs_q2652; assert_in_delta(0.047619047619047616, worksheet.lever_graphs_q2652, 0.002); end
  def test_lever_graphs_r2652; assert_in_delta(0.05, worksheet.lever_graphs_r2652, 0.002); end
  def test_lever_graphs_b2653; assert_in_epsilon(3.0, worksheet.lever_graphs_b2653, 0.002); end
  def test_lever_graphs_j2653; assert_in_delta(0.02, worksheet.lever_graphs_j2653, 0.002); end
  def test_lever_graphs_k2653; assert_in_delta(0.03333333333333333, worksheet.lever_graphs_k2653, 0.002); end
  def test_lever_graphs_l2653; assert_in_delta(0.05, worksheet.lever_graphs_l2653, 0.002); end
  def test_lever_graphs_m2653; assert_in_delta(0.06666666666666667, worksheet.lever_graphs_m2653, 0.002); end
  def test_lever_graphs_n2653; assert_in_delta(0.08333333333333333, worksheet.lever_graphs_n2653, 0.002); end
  def test_lever_graphs_o2653; assert_in_delta(0.1, worksheet.lever_graphs_o2653, 0.002); end
  def test_lever_graphs_p2653; assert_in_delta(0.11666666666666667, worksheet.lever_graphs_p2653, 0.002); end
  def test_lever_graphs_q2653; assert_in_delta(0.13333333333333333, worksheet.lever_graphs_q2653, 0.002); end
  def test_lever_graphs_r2653; assert_in_delta(0.15, worksheet.lever_graphs_r2653, 0.002); end
  def test_lever_graphs_b2654; assert_in_epsilon(4.0, worksheet.lever_graphs_b2654, 0.002); end
  def test_lever_graphs_j2654; assert_in_delta(0.02, worksheet.lever_graphs_j2654, 0.002); end
  def test_lever_graphs_k2654; assert_in_delta(0.03333333333333333, worksheet.lever_graphs_k2654, 0.002); end
  def test_lever_graphs_l2654; assert_in_delta(0.07142857142857142, worksheet.lever_graphs_l2654, 0.002); end
  def test_lever_graphs_m2654; assert_in_delta(0.10952380952380952, worksheet.lever_graphs_m2654, 0.002); end
  def test_lever_graphs_n2654; assert_in_delta(0.14761904761904762, worksheet.lever_graphs_n2654, 0.002); end
  def test_lever_graphs_o2654; assert_in_delta(0.1857142857142857, worksheet.lever_graphs_o2654, 0.002); end
  def test_lever_graphs_p2654; assert_in_delta(0.2238095238095238, worksheet.lever_graphs_p2654, 0.002); end
  def test_lever_graphs_q2654; assert_in_delta(0.2619047619047619, worksheet.lever_graphs_q2654, 0.002); end
  def test_lever_graphs_r2654; assert_in_delta(0.3, worksheet.lever_graphs_r2654, 0.002); end
  def test_lever_graphs_c2639; assert_equal("1975", worksheet.lever_graphs_c2639); end
  def test_lever_graphs_d2639; assert_equal("1980", worksheet.lever_graphs_d2639); end
  def test_lever_graphs_e2639; assert_equal("1985", worksheet.lever_graphs_e2639); end
  def test_lever_graphs_f2639; assert_equal("1990", worksheet.lever_graphs_f2639); end
  def test_lever_graphs_g2639; assert_equal("1995", worksheet.lever_graphs_g2639); end
  def test_lever_graphs_h2639; assert_equal("2000", worksheet.lever_graphs_h2639); end
  def test_lever_graphs_i2639; assert_equal("2005", worksheet.lever_graphs_i2639); end
  def test_lever_graphs_j2639; assert_equal("2011", worksheet.lever_graphs_j2639); end
  def test_lever_graphs_k2639; assert_equal("2015", worksheet.lever_graphs_k2639); end
  def test_lever_graphs_l2639; assert_equal("2020", worksheet.lever_graphs_l2639); end
  def test_lever_graphs_m2639; assert_equal("2025", worksheet.lever_graphs_m2639); end
  def test_lever_graphs_n2639; assert_equal("2030", worksheet.lever_graphs_n2639); end
  def test_lever_graphs_o2639; assert_equal("2035", worksheet.lever_graphs_o2639); end
  def test_lever_graphs_p2639; assert_equal("2040", worksheet.lever_graphs_p2639); end
  def test_lever_graphs_q2639; assert_equal("2045", worksheet.lever_graphs_q2639); end
  def test_lever_graphs_r2639; assert_equal("2050", worksheet.lever_graphs_r2639); end
  def test_lever_graphs_b2640; assert_equal("Historic data", worksheet.lever_graphs_b2640); end
  def test_lever_graphs_b2641; assert_in_delta(1.0, worksheet.lever_graphs_b2641, 0.002); end
  def test_lever_graphs_j2641; assert_in_delta(0.0, (worksheet.lever_graphs_j2641||0), 0.002); end
  def test_lever_graphs_k2641; assert_in_delta(0.030769230769230767, worksheet.lever_graphs_k2641, 0.002); end
  def test_lever_graphs_l2641; assert_in_delta(0.040659340659340654, worksheet.lever_graphs_l2641, 0.002); end
  def test_lever_graphs_m2641; assert_in_delta(0.05054945054945055, worksheet.lever_graphs_m2641, 0.002); end
  def test_lever_graphs_n2641; assert_in_delta(0.06043956043956043, worksheet.lever_graphs_n2641, 0.002); end
  def test_lever_graphs_o2641; assert_in_delta(0.07032967032967033, worksheet.lever_graphs_o2641, 0.002); end
  def test_lever_graphs_p2641; assert_in_delta(0.08021978021978023, worksheet.lever_graphs_p2641, 0.002); end
  def test_lever_graphs_q2641; assert_in_delta(0.09010989010989011, worksheet.lever_graphs_q2641, 0.002); end
  def test_lever_graphs_r2641; assert_in_delta(0.1, worksheet.lever_graphs_r2641, 0.002); end
  def test_lever_graphs_b2642; assert_in_epsilon(2.0, worksheet.lever_graphs_b2642, 0.002); end
  def test_lever_graphs_j2642; assert_in_delta(0.0, (worksheet.lever_graphs_j2642||0), 0.002); end
  def test_lever_graphs_k2642; assert_in_delta(0.030769230769230767, worksheet.lever_graphs_k2642, 0.002); end
  def test_lever_graphs_l2642; assert_in_delta(0.06923076923076922, worksheet.lever_graphs_l2642, 0.002); end
  def test_lever_graphs_m2642; assert_in_delta(0.10769230769230768, worksheet.lever_graphs_m2642, 0.002); end
  def test_lever_graphs_n2642; assert_in_delta(0.14615384615384613, worksheet.lever_graphs_n2642, 0.002); end
  def test_lever_graphs_o2642; assert_in_delta(0.1846153846153846, worksheet.lever_graphs_o2642, 0.002); end
  def test_lever_graphs_p2642; assert_in_delta(0.22307692307692306, worksheet.lever_graphs_p2642, 0.002); end
  def test_lever_graphs_q2642; assert_in_delta(0.2615384615384615, worksheet.lever_graphs_q2642, 0.002); end
  def test_lever_graphs_r2642; assert_in_delta(0.3, worksheet.lever_graphs_r2642, 0.002); end
  def test_lever_graphs_b2643; assert_in_epsilon(3.0, worksheet.lever_graphs_b2643, 0.002); end
  def test_lever_graphs_j2643; assert_in_delta(0.0, (worksheet.lever_graphs_j2643||0), 0.002); end
  def test_lever_graphs_k2643; assert_in_delta(0.030769230769230767, worksheet.lever_graphs_k2643, 0.002); end
  def test_lever_graphs_l2643; assert_in_delta(0.0978021978021978, worksheet.lever_graphs_l2643, 0.002); end
  def test_lever_graphs_m2643; assert_in_delta(0.16483516483516483, worksheet.lever_graphs_m2643, 0.002); end
  def test_lever_graphs_n2643; assert_in_delta(0.23186813186813185, worksheet.lever_graphs_n2643, 0.002); end
  def test_lever_graphs_o2643; assert_in_delta(0.2989010989010989, worksheet.lever_graphs_o2643, 0.002); end
  def test_lever_graphs_p2643; assert_in_delta(0.36593406593406597, worksheet.lever_graphs_p2643, 0.002); end
  def test_lever_graphs_q2643; assert_in_delta(0.4329670329670329, worksheet.lever_graphs_q2643, 0.002); end
  def test_lever_graphs_r2643; assert_in_delta(0.5, worksheet.lever_graphs_r2643, 0.002); end
  def test_lever_graphs_b2644; assert_in_epsilon(4.0, worksheet.lever_graphs_b2644, 0.002); end
  def test_lever_graphs_j2644; assert_in_delta(0.0, (worksheet.lever_graphs_j2644||0), 0.002); end
  def test_lever_graphs_k2644; assert_in_delta(0.030769230769230767, worksheet.lever_graphs_k2644, 0.002); end
  def test_lever_graphs_l2644; assert_in_delta(0.14065934065934066, worksheet.lever_graphs_l2644, 0.002); end
  def test_lever_graphs_m2644; assert_in_delta(0.25054945054945055, worksheet.lever_graphs_m2644, 0.002); end
  def test_lever_graphs_n2644; assert_in_delta(0.36043956043956044, worksheet.lever_graphs_n2644, 0.002); end
  def test_lever_graphs_o2644; assert_in_delta(0.4703296703296703, worksheet.lever_graphs_o2644, 0.002); end
  def test_lever_graphs_p2644; assert_in_delta(0.5802197802197803, worksheet.lever_graphs_p2644, 0.002); end
  def test_lever_graphs_q2644; assert_in_delta(0.6901098901098901, worksheet.lever_graphs_q2644, 0.002); end
  def test_lever_graphs_r2644; assert_in_delta(0.8, worksheet.lever_graphs_r2644, 0.002); end
  def test_lever_graphs_d2254; assert_equal("Title", worksheet.lever_graphs_d2254); end
  def test_lever_graphs_e2254; assert_equal("Global urban refrigerator used by people with access to electricity", worksheet.lever_graphs_e2254); end
  def test_lever_graphs_f2254; assert_equal("Global urban dishwashers used by people with access to electricity", worksheet.lever_graphs_f2254); end
  def test_lever_graphs_g2254; assert_equal("Global urban clothwasher used by people with access to electricity", worksheet.lever_graphs_g2254); end
  def test_lever_graphs_h2254; assert_equal("Global urban clothdryers used by people with access to electricity", worksheet.lever_graphs_h2254); end
  def test_lever_graphs_i2254; assert_equal("Global urban TV used by people with access to electricity", worksheet.lever_graphs_i2254); end
  def test_lever_graphs_j2254; assert_equal("Global urban miscellaneous used by people with access to electricity", worksheet.lever_graphs_j2254); end
  def test_lever_graphs_d2255; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2255, 0.002); end
  def test_lever_graphs_e2255; assert_in_epsilon(99.99999999999999, worksheet.lever_graphs_e2255, 0.002); end
  def test_lever_graphs_f2255; assert_in_epsilon(1500.0, worksheet.lever_graphs_f2255, 0.002); end
  def test_lever_graphs_g2255; assert_in_epsilon(699.9999999999999, worksheet.lever_graphs_g2255, 0.002); end
  def test_lever_graphs_h2255; assert_in_epsilon(1500.0, worksheet.lever_graphs_h2255, 0.002); end
  def test_lever_graphs_i2255; assert_in_epsilon(249.99999999999997, worksheet.lever_graphs_i2255, 0.002); end
  def test_lever_graphs_j2255; assert_in_epsilon(99.99999999999999, worksheet.lever_graphs_j2255, 0.002); end
  def test_lever_graphs_d2256; assert_equal("2050: Level 1", worksheet.lever_graphs_d2256); end
  def test_lever_graphs_e2256; assert_in_epsilon(80.0, worksheet.lever_graphs_e2256, 0.002); end
  def test_lever_graphs_f2256; assert_in_epsilon(1199.9999999999998, worksheet.lever_graphs_f2256, 0.002); end
  def test_lever_graphs_g2256; assert_in_epsilon(560.0, worksheet.lever_graphs_g2256, 0.002); end
  def test_lever_graphs_h2256; assert_in_epsilon(1199.9999999999998, worksheet.lever_graphs_h2256, 0.002); end
  def test_lever_graphs_i2256; assert_in_epsilon(199.99999999999997, worksheet.lever_graphs_i2256, 0.002); end
  def test_lever_graphs_j2256; assert_in_epsilon(80.0, worksheet.lever_graphs_j2256, 0.002); end
  def test_lever_graphs_d2257; assert_equal("2050: Level 2", worksheet.lever_graphs_d2257); end
  def test_lever_graphs_e2257; assert_in_epsilon(65.0, worksheet.lever_graphs_e2257, 0.002); end
  def test_lever_graphs_f2257; assert_in_epsilon(974.9999999999999, worksheet.lever_graphs_f2257, 0.002); end
  def test_lever_graphs_g2257; assert_in_epsilon(454.99999999999994, worksheet.lever_graphs_g2257, 0.002); end
  def test_lever_graphs_h2257; assert_in_epsilon(974.9999999999999, worksheet.lever_graphs_h2257, 0.002); end
  def test_lever_graphs_i2257; assert_in_epsilon(162.5, worksheet.lever_graphs_i2257, 0.002); end
  def test_lever_graphs_j2257; assert_in_epsilon(65.0, worksheet.lever_graphs_j2257, 0.002); end
  def test_lever_graphs_d2258; assert_equal("2050: Level 3", worksheet.lever_graphs_d2258); end
  def test_lever_graphs_e2258; assert_in_epsilon(49.99999999999999, worksheet.lever_graphs_e2258, 0.002); end
  def test_lever_graphs_f2258; assert_in_epsilon(750.0, worksheet.lever_graphs_f2258, 0.002); end
  def test_lever_graphs_g2258; assert_in_epsilon(349.99999999999994, worksheet.lever_graphs_g2258, 0.002); end
  def test_lever_graphs_h2258; assert_in_epsilon(750.0, worksheet.lever_graphs_h2258, 0.002); end
  def test_lever_graphs_i2258; assert_in_epsilon(124.99999999999999, worksheet.lever_graphs_i2258, 0.002); end
  def test_lever_graphs_j2258; assert_in_epsilon(49.99999999999999, worksheet.lever_graphs_j2258, 0.002); end
  def test_lever_graphs_d2259; assert_equal("2050: Level 4", worksheet.lever_graphs_d2259); end
  def test_lever_graphs_e2259; assert_in_epsilon(35.0, worksheet.lever_graphs_e2259, 0.002); end
  def test_lever_graphs_f2259; assert_in_epsilon(524.9999999999999, worksheet.lever_graphs_f2259, 0.002); end
  def test_lever_graphs_g2259; assert_in_epsilon(244.99999999999997, worksheet.lever_graphs_g2259, 0.002); end
  def test_lever_graphs_h2259; assert_in_epsilon(524.9999999999999, worksheet.lever_graphs_h2259, 0.002); end
  def test_lever_graphs_i2259; assert_in_epsilon(104.99999999999999, worksheet.lever_graphs_i2259, 0.002); end
  def test_lever_graphs_j2259; assert_in_epsilon(35.0, worksheet.lever_graphs_j2259, 0.002); end
  def test_lever_graphs_d2197; assert_equal("Title", worksheet.lever_graphs_d2197); end
  def test_lever_graphs_e2197; assert_equal("Global urban refrigerator used by people with access to electricity", worksheet.lever_graphs_e2197); end
  def test_lever_graphs_f2197; assert_equal("Global urban dishwashers used by people with access to electricity", worksheet.lever_graphs_f2197); end
  def test_lever_graphs_g2197; assert_equal("Global urban clothwasher used by people with access to electricity", worksheet.lever_graphs_g2197); end
  def test_lever_graphs_h2197; assert_equal("Global urban clothdryers used by people with access to electricity", worksheet.lever_graphs_h2197); end
  def test_lever_graphs_i2197; assert_equal("Global urban TV used by people with access to electricity", worksheet.lever_graphs_i2197); end
  def test_lever_graphs_j2197; assert_equal("Global urban miscellaneous used by people with access to electricity", worksheet.lever_graphs_j2197); end
  def test_lever_graphs_d2198; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2198, 0.002); end
  def test_lever_graphs_e2198; assert_in_delta(0.9556862861159037, worksheet.lever_graphs_e2198, 0.002); end
  def test_lever_graphs_f2198; assert_in_delta(0.3322490369750295, worksheet.lever_graphs_f2198, 0.002); end
  def test_lever_graphs_g2198; assert_in_delta(0.7803646989372999, worksheet.lever_graphs_g2198, 0.002); end
  def test_lever_graphs_h2198; assert_in_delta(0.25750327590507216, worksheet.lever_graphs_h2198, 0.002); end
  def test_lever_graphs_i2198; assert_in_epsilon(1.63256072650361, worksheet.lever_graphs_i2198, 0.002); end
  def test_lever_graphs_j2198; assert_in_epsilon(2.0, worksheet.lever_graphs_j2198, 0.002); end
  def test_lever_graphs_d2199; assert_equal("2050: Level 1", worksheet.lever_graphs_d2199); end
  def test_lever_graphs_e2199; assert_in_epsilon(1.4335294291738556, worksheet.lever_graphs_e2199, 0.002); end
  def test_lever_graphs_f2199; assert_in_delta(0.49837355546254425, worksheet.lever_graphs_f2199, 0.002); end
  def test_lever_graphs_g2199; assert_in_epsilon(1.17054704840595, worksheet.lever_graphs_g2199, 0.002); end
  def test_lever_graphs_h2199; assert_in_delta(0.38625491385760824, worksheet.lever_graphs_h2199, 0.002); end
  def test_lever_graphs_i2199; assert_in_epsilon(2.448841089755415, worksheet.lever_graphs_i2199, 0.002); end
  def test_lever_graphs_j2199; assert_in_epsilon(3.0, worksheet.lever_graphs_j2199, 0.002); end
  def test_lever_graphs_d2200; assert_equal("2050: Level 2", worksheet.lever_graphs_d2200); end
  def test_lever_graphs_e2200; assert_in_epsilon(1.1468235433390843, worksheet.lever_graphs_e2200, 0.002); end
  def test_lever_graphs_f2200; assert_in_delta(0.3986988443700354, worksheet.lever_graphs_f2200, 0.002); end
  def test_lever_graphs_g2200; assert_in_delta(0.9364376387247598, worksheet.lever_graphs_g2200, 0.002); end
  def test_lever_graphs_h2200; assert_in_delta(0.3090039310860866, worksheet.lever_graphs_h2200, 0.002); end
  def test_lever_graphs_i2200; assert_in_epsilon(1.9590728718043318, worksheet.lever_graphs_i2200, 0.002); end
  def test_lever_graphs_j2200; assert_in_epsilon(2.4, worksheet.lever_graphs_j2200, 0.002); end
  def test_lever_graphs_d2201; assert_equal("2050: Level 3", worksheet.lever_graphs_d2201); end
  def test_lever_graphs_e2201; assert_in_delta(0.9556862861159037, worksheet.lever_graphs_e2201, 0.002); end
  def test_lever_graphs_f2201; assert_in_delta(0.3322490369750295, worksheet.lever_graphs_f2201, 0.002); end
  def test_lever_graphs_g2201; assert_in_delta(0.7803646989372999, worksheet.lever_graphs_g2201, 0.002); end
  def test_lever_graphs_h2201; assert_in_delta(0.25750327590507216, worksheet.lever_graphs_h2201, 0.002); end
  def test_lever_graphs_i2201; assert_in_epsilon(1.63256072650361, worksheet.lever_graphs_i2201, 0.002); end
  def test_lever_graphs_j2201; assert_in_epsilon(2.0, worksheet.lever_graphs_j2201, 0.002); end
  def test_lever_graphs_d2202; assert_equal("2050: Level 4", worksheet.lever_graphs_d2202); end
  def test_lever_graphs_e2202; assert_in_delta(0.764549028892723, worksheet.lever_graphs_e2202, 0.002); end
  def test_lever_graphs_f2202; assert_in_delta(0.2657992295800236, worksheet.lever_graphs_f2202, 0.002); end
  def test_lever_graphs_g2202; assert_in_delta(0.6242917591498399, worksheet.lever_graphs_g2202, 0.002); end
  def test_lever_graphs_h2202; assert_in_delta(0.20600262072405773, worksheet.lever_graphs_h2202, 0.002); end
  def test_lever_graphs_i2202; assert_in_epsilon(1.3060485812028881, worksheet.lever_graphs_i2202, 0.002); end
  def test_lever_graphs_j2202; assert_in_epsilon(1.6, worksheet.lever_graphs_j2202, 0.002); end
  def test_lever_graphs_c2687; assert_equal("1975", worksheet.lever_graphs_c2687); end
  def test_lever_graphs_d2687; assert_equal("1980", worksheet.lever_graphs_d2687); end
  def test_lever_graphs_e2687; assert_equal("1985", worksheet.lever_graphs_e2687); end
  def test_lever_graphs_f2687; assert_equal("1990", worksheet.lever_graphs_f2687); end
  def test_lever_graphs_g2687; assert_equal("1995", worksheet.lever_graphs_g2687); end
  def test_lever_graphs_h2687; assert_equal("2000", worksheet.lever_graphs_h2687); end
  def test_lever_graphs_i2687; assert_equal("2005", worksheet.lever_graphs_i2687); end
  def test_lever_graphs_j2687; assert_equal("2011", worksheet.lever_graphs_j2687); end
  def test_lever_graphs_k2687; assert_equal("2015", worksheet.lever_graphs_k2687); end
  def test_lever_graphs_l2687; assert_equal("2020", worksheet.lever_graphs_l2687); end
  def test_lever_graphs_m2687; assert_equal("2025", worksheet.lever_graphs_m2687); end
  def test_lever_graphs_n2687; assert_equal("2030", worksheet.lever_graphs_n2687); end
  def test_lever_graphs_o2687; assert_equal("2035", worksheet.lever_graphs_o2687); end
  def test_lever_graphs_p2687; assert_equal("2040", worksheet.lever_graphs_p2687); end
  def test_lever_graphs_q2687; assert_equal("2045", worksheet.lever_graphs_q2687); end
  def test_lever_graphs_r2687; assert_equal("2050", worksheet.lever_graphs_r2687); end
  def test_lever_graphs_b2688; assert_equal("Historic data", worksheet.lever_graphs_b2688); end
  def test_lever_graphs_b2689; assert_in_delta(1.0, worksheet.lever_graphs_b2689, 0.002); end
  def test_lever_graphs_j2689; assert_in_delta(0.0, (worksheet.lever_graphs_j2689||0), 0.002); end
  def test_lever_graphs_k2689; assert_in_delta(0.020512820512820513, worksheet.lever_graphs_k2689, 0.002); end
  def test_lever_graphs_l2689; assert_in_delta(0.046153846153846156, worksheet.lever_graphs_l2689, 0.002); end
  def test_lever_graphs_m2689; assert_in_delta(0.07179487179487179, worksheet.lever_graphs_m2689, 0.002); end
  def test_lever_graphs_n2689; assert_in_delta(0.09743589743589744, worksheet.lever_graphs_n2689, 0.002); end
  def test_lever_graphs_o2689; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_o2689, 0.002); end
  def test_lever_graphs_p2689; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_p2689, 0.002); end
  def test_lever_graphs_q2689; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_q2689, 0.002); end
  def test_lever_graphs_r2689; assert_in_delta(0.2, worksheet.lever_graphs_r2689, 0.002); end
  def test_lever_graphs_b2690; assert_in_epsilon(2.0, worksheet.lever_graphs_b2690, 0.002); end
  def test_lever_graphs_j2690; assert_in_delta(0.0, (worksheet.lever_graphs_j2690||0), 0.002); end
  def test_lever_graphs_k2690; assert_in_delta(0.05128205128205128, worksheet.lever_graphs_k2690, 0.002); end
  def test_lever_graphs_l2690; assert_in_delta(0.11538461538461538, worksheet.lever_graphs_l2690, 0.002); end
  def test_lever_graphs_m2690; assert_in_delta(0.1794871794871795, worksheet.lever_graphs_m2690, 0.002); end
  def test_lever_graphs_n2690; assert_in_delta(0.24358974358974358, worksheet.lever_graphs_n2690, 0.002); end
  def test_lever_graphs_o2690; assert_in_delta(0.3076923076923077, worksheet.lever_graphs_o2690, 0.002); end
  def test_lever_graphs_p2690; assert_in_delta(0.3717948717948718, worksheet.lever_graphs_p2690, 0.002); end
  def test_lever_graphs_q2690; assert_in_delta(0.4358974358974359, worksheet.lever_graphs_q2690, 0.002); end
  def test_lever_graphs_r2690; assert_in_delta(0.5, worksheet.lever_graphs_r2690, 0.002); end
  def test_lever_graphs_b2691; assert_in_epsilon(3.0, worksheet.lever_graphs_b2691, 0.002); end
  def test_lever_graphs_j2691; assert_in_delta(0.0, (worksheet.lever_graphs_j2691||0), 0.002); end
  def test_lever_graphs_k2691; assert_in_delta(0.12307692307692307, worksheet.lever_graphs_k2691, 0.002); end
  def test_lever_graphs_l2691; assert_in_delta(0.2769230769230769, worksheet.lever_graphs_l2691, 0.002); end
  def test_lever_graphs_m2691; assert_in_delta(0.43076923076923074, worksheet.lever_graphs_m2691, 0.002); end
  def test_lever_graphs_n2691; assert_in_delta(0.5846153846153845, worksheet.lever_graphs_n2691, 0.002); end
  def test_lever_graphs_o2691; assert_in_delta(0.7384615384615384, worksheet.lever_graphs_o2691, 0.002); end
  def test_lever_graphs_p2691; assert_in_delta(0.8923076923076922, worksheet.lever_graphs_p2691, 0.002); end
  def test_lever_graphs_q2691; assert_in_epsilon(1.046153846153846, worksheet.lever_graphs_q2691, 0.002); end
  def test_lever_graphs_r2691; assert_in_epsilon(1.2, worksheet.lever_graphs_r2691, 0.002); end
  def test_lever_graphs_b2692; assert_in_epsilon(4.0, worksheet.lever_graphs_b2692, 0.002); end
  def test_lever_graphs_j2692; assert_in_delta(0.0, (worksheet.lever_graphs_j2692||0), 0.002); end
  def test_lever_graphs_k2692; assert_in_delta(0.22564102564102567, worksheet.lever_graphs_k2692, 0.002); end
  def test_lever_graphs_l2692; assert_in_delta(0.5076923076923078, worksheet.lever_graphs_l2692, 0.002); end
  def test_lever_graphs_m2692; assert_in_delta(0.7897435897435898, worksheet.lever_graphs_m2692, 0.002); end
  def test_lever_graphs_n2692; assert_in_epsilon(1.071794871794872, worksheet.lever_graphs_n2692, 0.002); end
  def test_lever_graphs_o2692; assert_in_epsilon(1.353846153846154, worksheet.lever_graphs_o2692, 0.002); end
  def test_lever_graphs_p2692; assert_in_epsilon(1.635897435897436, worksheet.lever_graphs_p2692, 0.002); end
  def test_lever_graphs_q2692; assert_in_epsilon(1.9179487179487182, worksheet.lever_graphs_q2692, 0.002); end
  def test_lever_graphs_r2692; assert_in_epsilon(2.2, worksheet.lever_graphs_r2692, 0.002); end
  def test_lever_graphs_c2103; assert_equal("1975", worksheet.lever_graphs_c2103); end
  def test_lever_graphs_d2103; assert_equal("1980", worksheet.lever_graphs_d2103); end
  def test_lever_graphs_e2103; assert_equal("1985", worksheet.lever_graphs_e2103); end
  def test_lever_graphs_f2103; assert_equal("1990", worksheet.lever_graphs_f2103); end
  def test_lever_graphs_g2103; assert_equal("1995", worksheet.lever_graphs_g2103); end
  def test_lever_graphs_h2103; assert_equal("2000", worksheet.lever_graphs_h2103); end
  def test_lever_graphs_i2103; assert_equal("2005", worksheet.lever_graphs_i2103); end
  def test_lever_graphs_j2103; assert_equal("2011", worksheet.lever_graphs_j2103); end
  def test_lever_graphs_k2103; assert_equal("2015", worksheet.lever_graphs_k2103); end
  def test_lever_graphs_l2103; assert_equal("2020", worksheet.lever_graphs_l2103); end
  def test_lever_graphs_m2103; assert_equal("2025", worksheet.lever_graphs_m2103); end
  def test_lever_graphs_n2103; assert_equal("2030", worksheet.lever_graphs_n2103); end
  def test_lever_graphs_o2103; assert_equal("2035", worksheet.lever_graphs_o2103); end
  def test_lever_graphs_p2103; assert_equal("2040", worksheet.lever_graphs_p2103); end
  def test_lever_graphs_q2103; assert_equal("2045", worksheet.lever_graphs_q2103); end
  def test_lever_graphs_r2103; assert_equal("2050", worksheet.lever_graphs_r2103); end
  def test_lever_graphs_b2104; assert_equal("Historic data", worksheet.lever_graphs_b2104); end
  def test_lever_graphs_b2105; assert_in_delta(1.0, worksheet.lever_graphs_b2105, 0.002); end
  def test_lever_graphs_j2105; assert_in_epsilon(78.0, worksheet.lever_graphs_j2105, 0.002); end
  def test_lever_graphs_k2105; assert_in_epsilon(80.25641025641025, worksheet.lever_graphs_k2105, 0.002); end
  def test_lever_graphs_l2105; assert_in_epsilon(83.07692307692308, worksheet.lever_graphs_l2105, 0.002); end
  def test_lever_graphs_m2105; assert_in_epsilon(85.89743589743591, worksheet.lever_graphs_m2105, 0.002); end
  def test_lever_graphs_n2105; assert_in_epsilon(88.71794871794872, worksheet.lever_graphs_n2105, 0.002); end
  def test_lever_graphs_o2105; assert_in_epsilon(91.53846153846155, worksheet.lever_graphs_o2105, 0.002); end
  def test_lever_graphs_p2105; assert_in_epsilon(94.35897435897436, worksheet.lever_graphs_p2105, 0.002); end
  def test_lever_graphs_q2105; assert_in_epsilon(97.17948717948717, worksheet.lever_graphs_q2105, 0.002); end
  def test_lever_graphs_r2105; assert_in_epsilon(100.0, worksheet.lever_graphs_r2105, 0.002); end
  def test_lever_graphs_b2106; assert_in_epsilon(2.0, worksheet.lever_graphs_b2106, 0.002); end
  def test_lever_graphs_j2106; assert_in_epsilon(78.0, worksheet.lever_graphs_j2106, 0.002); end
  def test_lever_graphs_k2106; assert_in_epsilon(79.74358974358975, worksheet.lever_graphs_k2106, 0.002); end
  def test_lever_graphs_l2106; assert_in_epsilon(81.92307692307693, worksheet.lever_graphs_l2106, 0.002); end
  def test_lever_graphs_m2106; assert_in_epsilon(84.1025641025641, worksheet.lever_graphs_m2106, 0.002); end
  def test_lever_graphs_n2106; assert_in_epsilon(86.28205128205128, worksheet.lever_graphs_n2106, 0.002); end
  def test_lever_graphs_o2106; assert_in_epsilon(88.46153846153847, worksheet.lever_graphs_o2106, 0.002); end
  def test_lever_graphs_p2106; assert_in_epsilon(90.64102564102565, worksheet.lever_graphs_p2106, 0.002); end
  def test_lever_graphs_q2106; assert_in_epsilon(92.82051282051283, worksheet.lever_graphs_q2106, 0.002); end
  def test_lever_graphs_r2106; assert_in_epsilon(95.0, worksheet.lever_graphs_r2106, 0.002); end
  def test_lever_graphs_b2107; assert_in_epsilon(3.0, worksheet.lever_graphs_b2107, 0.002); end
  def test_lever_graphs_j2107; assert_in_epsilon(78.0, worksheet.lever_graphs_j2107, 0.002); end
  def test_lever_graphs_k2107; assert_in_epsilon(79.23076923076923, worksheet.lever_graphs_k2107, 0.002); end
  def test_lever_graphs_l2107; assert_in_epsilon(80.76923076923077, worksheet.lever_graphs_l2107, 0.002); end
  def test_lever_graphs_m2107; assert_in_epsilon(82.3076923076923, worksheet.lever_graphs_m2107, 0.002); end
  def test_lever_graphs_n2107; assert_in_epsilon(83.84615384615384, worksheet.lever_graphs_n2107, 0.002); end
  def test_lever_graphs_o2107; assert_in_epsilon(85.38461538461539, worksheet.lever_graphs_o2107, 0.002); end
  def test_lever_graphs_p2107; assert_in_epsilon(86.92307692307692, worksheet.lever_graphs_p2107, 0.002); end
  def test_lever_graphs_q2107; assert_in_epsilon(88.46153846153847, worksheet.lever_graphs_q2107, 0.002); end
  def test_lever_graphs_r2107; assert_in_epsilon(89.99999999999999, worksheet.lever_graphs_r2107, 0.002); end
  def test_lever_graphs_b2108; assert_in_epsilon(4.0, worksheet.lever_graphs_b2108, 0.002); end
  def test_lever_graphs_j2108; assert_in_epsilon(78.0, worksheet.lever_graphs_j2108, 0.002); end
  def test_lever_graphs_k2108; assert_in_epsilon(78.71794871794872, worksheet.lever_graphs_k2108, 0.002); end
  def test_lever_graphs_l2108; assert_in_epsilon(79.61538461538463, worksheet.lever_graphs_l2108, 0.002); end
  def test_lever_graphs_m2108; assert_in_epsilon(80.51282051282053, worksheet.lever_graphs_m2108, 0.002); end
  def test_lever_graphs_n2108; assert_in_epsilon(81.4102564102564, worksheet.lever_graphs_n2108, 0.002); end
  def test_lever_graphs_o2108; assert_in_epsilon(82.3076923076923, worksheet.lever_graphs_o2108, 0.002); end
  def test_lever_graphs_p2108; assert_in_epsilon(83.2051282051282, worksheet.lever_graphs_p2108, 0.002); end
  def test_lever_graphs_q2108; assert_in_epsilon(84.1025641025641, worksheet.lever_graphs_q2108, 0.002); end
  def test_lever_graphs_r2108; assert_in_epsilon(85.0, worksheet.lever_graphs_r2108, 0.002); end
  def test_lever_graphs_b2109; assert_equal("Austria -average", worksheet.lever_graphs_b2109); end
  def test_lever_graphs_j2109; assert_in_epsilon(214.0, worksheet.lever_graphs_j2109, 0.002); end
  def test_lever_graphs_b2110; assert_equal("US -average", worksheet.lever_graphs_b2110); end
  def test_lever_graphs_j2110; assert_in_epsilon(201.0, worksheet.lever_graphs_j2110, 0.002); end
  def test_lever_graphs_b2111; assert_equal("Germany -average", worksheet.lever_graphs_b2111); end
  def test_lever_graphs_j2111; assert_in_epsilon(109.0, worksheet.lever_graphs_j2111, 0.002); end
  def test_lever_graphs_b2112; assert_equal("Spain -average", worksheet.lever_graphs_b2112); end
  def test_lever_graphs_j2112; assert_in_epsilon(97.0, worksheet.lever_graphs_j2112, 0.002); end
  def test_lever_graphs_b2113; assert_equal("UK -average", worksheet.lever_graphs_b2113); end
  def test_lever_graphs_j2113; assert_in_epsilon(76.0, worksheet.lever_graphs_j2113, 0.002); end
  def test_lever_graphs_b2114; assert_equal("China -average", worksheet.lever_graphs_b2114); end
  def test_lever_graphs_j2114; assert_in_epsilon(60.0, worksheet.lever_graphs_j2114, 0.002); end
  def test_lever_graphs_b2115; assert_equal("Hong Kong -average", worksheet.lever_graphs_b2115); end
  def test_lever_graphs_j2115; assert_in_epsilon(45.0, worksheet.lever_graphs_j2115, 0.002); end
  def test_lever_graphs_c2086; assert_equal("1975", worksheet.lever_graphs_c2086); end
  def test_lever_graphs_d2086; assert_equal("1980", worksheet.lever_graphs_d2086); end
  def test_lever_graphs_e2086; assert_equal("1985", worksheet.lever_graphs_e2086); end
  def test_lever_graphs_f2086; assert_equal("1990", worksheet.lever_graphs_f2086); end
  def test_lever_graphs_g2086; assert_equal("1995", worksheet.lever_graphs_g2086); end
  def test_lever_graphs_h2086; assert_equal("2000", worksheet.lever_graphs_h2086); end
  def test_lever_graphs_i2086; assert_equal("2005", worksheet.lever_graphs_i2086); end
  def test_lever_graphs_j2086; assert_equal("2011", worksheet.lever_graphs_j2086); end
  def test_lever_graphs_k2086; assert_equal("2015", worksheet.lever_graphs_k2086); end
  def test_lever_graphs_l2086; assert_equal("2020", worksheet.lever_graphs_l2086); end
  def test_lever_graphs_m2086; assert_equal("2025", worksheet.lever_graphs_m2086); end
  def test_lever_graphs_n2086; assert_equal("2030", worksheet.lever_graphs_n2086); end
  def test_lever_graphs_o2086; assert_equal("2035", worksheet.lever_graphs_o2086); end
  def test_lever_graphs_p2086; assert_equal("2040", worksheet.lever_graphs_p2086); end
  def test_lever_graphs_q2086; assert_equal("2045", worksheet.lever_graphs_q2086); end
  def test_lever_graphs_r2086; assert_equal("2050", worksheet.lever_graphs_r2086); end
  def test_lever_graphs_b2087; assert_equal("Historical data", worksheet.lever_graphs_b2087); end
  def test_lever_graphs_b2088; assert_in_delta(1.0, worksheet.lever_graphs_b2088, 0.002); end
  def test_lever_graphs_j2088; assert_in_epsilon(92.0, worksheet.lever_graphs_j2088, 0.002); end
  def test_lever_graphs_k2088; assert_in_epsilon(93.84615384615384, worksheet.lever_graphs_k2088, 0.002); end
  def test_lever_graphs_l2088; assert_in_epsilon(96.15384615384615, worksheet.lever_graphs_l2088, 0.002); end
  def test_lever_graphs_m2088; assert_in_epsilon(98.46153846153845, worksheet.lever_graphs_m2088, 0.002); end
  def test_lever_graphs_n2088; assert_in_epsilon(100.76923076923075, worksheet.lever_graphs_n2088, 0.002); end
  def test_lever_graphs_o2088; assert_in_epsilon(103.07692307692308, worksheet.lever_graphs_o2088, 0.002); end
  def test_lever_graphs_p2088; assert_in_epsilon(105.3846153846154, worksheet.lever_graphs_p2088, 0.002); end
  def test_lever_graphs_q2088; assert_in_epsilon(107.6923076923077, worksheet.lever_graphs_q2088, 0.002); end
  def test_lever_graphs_r2088; assert_in_epsilon(110.0, worksheet.lever_graphs_r2088, 0.002); end
  def test_lever_graphs_b2089; assert_in_epsilon(2.0, worksheet.lever_graphs_b2089, 0.002); end
  def test_lever_graphs_j2089; assert_in_epsilon(92.0, worksheet.lever_graphs_j2089, 0.002); end
  def test_lever_graphs_k2089; assert_in_epsilon(93.33333333333334, worksheet.lever_graphs_k2089, 0.002); end
  def test_lever_graphs_l2089; assert_in_epsilon(94.99999999999999, worksheet.lever_graphs_l2089, 0.002); end
  def test_lever_graphs_m2089; assert_in_epsilon(96.66666666666667, worksheet.lever_graphs_m2089, 0.002); end
  def test_lever_graphs_n2089; assert_in_epsilon(98.33333333333331, worksheet.lever_graphs_n2089, 0.002); end
  def test_lever_graphs_o2089; assert_in_epsilon(100.0, worksheet.lever_graphs_o2089, 0.002); end
  def test_lever_graphs_p2089; assert_in_epsilon(101.66666666666664, worksheet.lever_graphs_p2089, 0.002); end
  def test_lever_graphs_q2089; assert_in_epsilon(103.33333333333333, worksheet.lever_graphs_q2089, 0.002); end
  def test_lever_graphs_r2089; assert_in_epsilon(105.0, worksheet.lever_graphs_r2089, 0.002); end
  def test_lever_graphs_b2090; assert_in_epsilon(3.0, worksheet.lever_graphs_b2090, 0.002); end
  def test_lever_graphs_j2090; assert_in_epsilon(92.0, worksheet.lever_graphs_j2090, 0.002); end
  def test_lever_graphs_k2090; assert_in_epsilon(92.82051282051282, worksheet.lever_graphs_k2090, 0.002); end
  def test_lever_graphs_l2090; assert_in_epsilon(93.84615384615384, worksheet.lever_graphs_l2090, 0.002); end
  def test_lever_graphs_m2090; assert_in_epsilon(94.87179487179488, worksheet.lever_graphs_m2090, 0.002); end
  def test_lever_graphs_n2090; assert_in_epsilon(95.89743589743588, worksheet.lever_graphs_n2090, 0.002); end
  def test_lever_graphs_o2090; assert_in_epsilon(96.92307692307692, worksheet.lever_graphs_o2090, 0.002); end
  def test_lever_graphs_p2090; assert_in_epsilon(97.94871794871796, worksheet.lever_graphs_p2090, 0.002); end
  def test_lever_graphs_q2090; assert_in_epsilon(98.97435897435898, worksheet.lever_graphs_q2090, 0.002); end
  def test_lever_graphs_r2090; assert_in_epsilon(100.0, worksheet.lever_graphs_r2090, 0.002); end
  def test_lever_graphs_b2091; assert_in_epsilon(4.0, worksheet.lever_graphs_b2091, 0.002); end
  def test_lever_graphs_j2091; assert_in_epsilon(92.0, worksheet.lever_graphs_j2091, 0.002); end
  def test_lever_graphs_k2091; assert_in_epsilon(92.3076923076923, worksheet.lever_graphs_k2091, 0.002); end
  def test_lever_graphs_l2091; assert_in_epsilon(92.6923076923077, worksheet.lever_graphs_l2091, 0.002); end
  def test_lever_graphs_m2091; assert_in_epsilon(93.0769230769231, worksheet.lever_graphs_m2091, 0.002); end
  def test_lever_graphs_n2091; assert_in_epsilon(93.46153846153845, worksheet.lever_graphs_n2091, 0.002); end
  def test_lever_graphs_o2091; assert_in_epsilon(93.84615384615384, worksheet.lever_graphs_o2091, 0.002); end
  def test_lever_graphs_p2091; assert_in_epsilon(94.23076923076924, worksheet.lever_graphs_p2091, 0.002); end
  def test_lever_graphs_q2091; assert_in_epsilon(94.61538461538463, worksheet.lever_graphs_q2091, 0.002); end
  def test_lever_graphs_r2091; assert_in_epsilon(95.0, worksheet.lever_graphs_r2091, 0.002); end
  def test_lever_graphs_b2092; assert_equal("Austria -average", worksheet.lever_graphs_b2092); end
  def test_lever_graphs_j2092; assert_in_epsilon(214.0, worksheet.lever_graphs_j2092, 0.002); end
  def test_lever_graphs_b2093; assert_equal("US -average", worksheet.lever_graphs_b2093); end
  def test_lever_graphs_j2093; assert_in_epsilon(201.0, worksheet.lever_graphs_j2093, 0.002); end
  def test_lever_graphs_b2094; assert_equal("Germany -average", worksheet.lever_graphs_b2094); end
  def test_lever_graphs_j2094; assert_in_epsilon(109.0, worksheet.lever_graphs_j2094, 0.002); end
  def test_lever_graphs_b2095; assert_equal("Spain -average", worksheet.lever_graphs_b2095); end
  def test_lever_graphs_j2095; assert_in_epsilon(97.0, worksheet.lever_graphs_j2095, 0.002); end
  def test_lever_graphs_b2096; assert_equal("UK -average", worksheet.lever_graphs_b2096); end
  def test_lever_graphs_j2096; assert_in_epsilon(76.0, worksheet.lever_graphs_j2096, 0.002); end
  def test_lever_graphs_b2097; assert_equal("China -average", worksheet.lever_graphs_b2097); end
  def test_lever_graphs_j2097; assert_in_epsilon(60.0, worksheet.lever_graphs_j2097, 0.002); end
  def test_lever_graphs_b2098; assert_equal("Hong Kong -average", worksheet.lever_graphs_b2098); end
  def test_lever_graphs_j2098; assert_in_epsilon(45.0, worksheet.lever_graphs_j2098, 0.002); end
  def test_lever_graphs_c2540; assert_equal("1975", worksheet.lever_graphs_c2540); end
  def test_lever_graphs_d2540; assert_equal("1980", worksheet.lever_graphs_d2540); end
  def test_lever_graphs_e2540; assert_equal("1985", worksheet.lever_graphs_e2540); end
  def test_lever_graphs_f2540; assert_equal("1990", worksheet.lever_graphs_f2540); end
  def test_lever_graphs_g2540; assert_equal("1995", worksheet.lever_graphs_g2540); end
  def test_lever_graphs_h2540; assert_equal("2000", worksheet.lever_graphs_h2540); end
  def test_lever_graphs_i2540; assert_equal("2005", worksheet.lever_graphs_i2540); end
  def test_lever_graphs_j2540; assert_equal("2011", worksheet.lever_graphs_j2540); end
  def test_lever_graphs_k2540; assert_equal("2015", worksheet.lever_graphs_k2540); end
  def test_lever_graphs_l2540; assert_equal("2020", worksheet.lever_graphs_l2540); end
  def test_lever_graphs_m2540; assert_equal("2025", worksheet.lever_graphs_m2540); end
  def test_lever_graphs_n2540; assert_equal("2030", worksheet.lever_graphs_n2540); end
  def test_lever_graphs_o2540; assert_equal("2035", worksheet.lever_graphs_o2540); end
  def test_lever_graphs_p2540; assert_equal("2040", worksheet.lever_graphs_p2540); end
  def test_lever_graphs_q2540; assert_equal("2045", worksheet.lever_graphs_q2540); end
  def test_lever_graphs_r2540; assert_equal("2050", worksheet.lever_graphs_r2540); end
  def test_lever_graphs_b2541; assert_equal("Historic data", worksheet.lever_graphs_b2541); end
  def test_lever_graphs_d2541; assert_in_epsilon(1891.64, worksheet.lever_graphs_d2541, 0.002); end
  def test_lever_graphs_e2541; assert_in_epsilon(1966.88, worksheet.lever_graphs_e2541, 0.002); end
  def test_lever_graphs_f2541; assert_in_epsilon(1991.2, worksheet.lever_graphs_f2541, 0.002); end
  def test_lever_graphs_g2541; assert_in_epsilon(2023.1200000000001, worksheet.lever_graphs_g2541, 0.002); end
  def test_lever_graphs_h2541; assert_in_epsilon(2071.76, worksheet.lever_graphs_h2541, 0.002); end
  def test_lever_graphs_i2541; assert_in_epsilon(2098.36, worksheet.lever_graphs_i2541, 0.002); end
  def test_lever_graphs_b2542; assert_in_delta(1.0, worksheet.lever_graphs_b2542, 0.002); end
  def test_lever_graphs_j2542; assert_in_epsilon(2170.0, worksheet.lever_graphs_j2542, 0.002); end
  def test_lever_graphs_k2542; assert_in_epsilon(2170.0, worksheet.lever_graphs_k2542, 0.002); end
  def test_lever_graphs_l2542; assert_in_epsilon(2178.156834115386, worksheet.lever_graphs_l2542, 0.002); end
  def test_lever_graphs_m2542; assert_in_epsilon(2197.879055105641, worksheet.lever_graphs_m2542, 0.002); end
  def test_lever_graphs_n2542; assert_in_epsilon(2254.708488397157, worksheet.lever_graphs_n2542, 0.002); end
  def test_lever_graphs_o2542; assert_in_epsilon(2365.0, worksheet.lever_graphs_o2542, 0.002); end
  def test_lever_graphs_p2542; assert_in_epsilon(2475.291511602843, worksheet.lever_graphs_p2542, 0.002); end
  def test_lever_graphs_q2542; assert_in_epsilon(2532.120944894359, worksheet.lever_graphs_q2542, 0.002); end
  def test_lever_graphs_r2542; assert_in_epsilon(2560.0, worksheet.lever_graphs_r2542, 0.002); end
  def test_lever_graphs_b2543; assert_in_epsilon(2.0, worksheet.lever_graphs_b2543, 0.002); end
  def test_lever_graphs_j2543; assert_in_epsilon(2170.0, worksheet.lever_graphs_j2543, 0.002); end
  def test_lever_graphs_k2543; assert_in_epsilon(2170.0, worksheet.lever_graphs_k2543, 0.002); end
  def test_lever_graphs_l2543; assert_in_epsilon(2175.4378894102574, worksheet.lever_graphs_l2543, 0.002); end
  def test_lever_graphs_m2543; assert_in_epsilon(2188.586036737094, worksheet.lever_graphs_m2543, 0.002); end
  def test_lever_graphs_n2543; assert_in_epsilon(2226.472325598105, worksheet.lever_graphs_n2543, 0.002); end
  def test_lever_graphs_o2543; assert_in_epsilon(2300.0, worksheet.lever_graphs_o2543, 0.002); end
  def test_lever_graphs_p2543; assert_in_epsilon(2373.527674401895, worksheet.lever_graphs_p2543, 0.002); end
  def test_lever_graphs_q2543; assert_in_epsilon(2411.413963262906, worksheet.lever_graphs_q2543, 0.002); end
  def test_lever_graphs_r2543; assert_in_epsilon(2430.0, worksheet.lever_graphs_r2543, 0.002); end
  def test_lever_graphs_b2544; assert_in_epsilon(3.0, worksheet.lever_graphs_b2544, 0.002); end
  def test_lever_graphs_j2544; assert_in_epsilon(2170.0, worksheet.lever_graphs_j2544, 0.002); end
  def test_lever_graphs_k2544; assert_in_epsilon(2170.0, worksheet.lever_graphs_k2544, 0.002); end
  def test_lever_graphs_l2544; assert_in_epsilon(2173.3463934832357, worksheet.lever_graphs_l2544, 0.002); end
  def test_lever_graphs_m2544; assert_in_epsilon(2181.437561068981, worksheet.lever_graphs_m2544, 0.002); end
  def test_lever_graphs_n2544; assert_in_epsilon(2204.752200368064, worksheet.lever_graphs_n2544, 0.002); end
  def test_lever_graphs_o2544; assert_in_epsilon(2250.0, worksheet.lever_graphs_o2544, 0.002); end
  def test_lever_graphs_p2544; assert_in_epsilon(2295.247799631936, worksheet.lever_graphs_p2544, 0.002); end
  def test_lever_graphs_q2544; assert_in_epsilon(2318.562438931019, worksheet.lever_graphs_q2544, 0.002); end
  def test_lever_graphs_r2544; assert_in_epsilon(2330.0, worksheet.lever_graphs_r2544, 0.002); end
  def test_lever_graphs_b2545; assert_in_epsilon(4.0, worksheet.lever_graphs_b2545, 0.002); end
  def test_lever_graphs_j2545; assert_in_epsilon(2170.0, worksheet.lever_graphs_j2545, 0.002); end
  def test_lever_graphs_k2545; assert_in_epsilon(2170.0, worksheet.lever_graphs_k2545, 0.002); end
  def test_lever_graphs_l2545; assert_in_epsilon(2168.535952851085, worksheet.lever_graphs_l2545, 0.002); end
  def test_lever_graphs_m2545; assert_in_epsilon(2164.9960670323208, worksheet.lever_graphs_m2545, 0.002); end
  def test_lever_graphs_n2545; assert_in_epsilon(2154.795912338972, worksheet.lever_graphs_n2545, 0.002); end
  def test_lever_graphs_o2545; assert_in_epsilon(2135.0, worksheet.lever_graphs_o2545, 0.002); end
  def test_lever_graphs_p2545; assert_in_epsilon(2115.204087661028, worksheet.lever_graphs_p2545, 0.002); end
  def test_lever_graphs_q2545; assert_in_epsilon(2105.0039329676792, worksheet.lever_graphs_q2545, 0.002); end
  def test_lever_graphs_r2545; assert_in_epsilon(2100.0, worksheet.lever_graphs_r2545, 0.002); end
  def test_lever_graphs_b2546; assert_equal("USA today", worksheet.lever_graphs_b2546); end
  def test_lever_graphs_j2546; assert_in_epsilon(2729.0, worksheet.lever_graphs_j2546, 0.002); end
  def test_lever_graphs_b2547; assert_equal("EU today", worksheet.lever_graphs_b2547); end
  def test_lever_graphs_j2547; assert_in_epsilon(2520.0, worksheet.lever_graphs_j2547, 0.002); end
  def test_lever_graphs_b2548; assert_equal("Australia today", worksheet.lever_graphs_b2548); end
  def test_lever_graphs_j2548; assert_in_epsilon(2449.0, worksheet.lever_graphs_j2548, 0.002); end
  def test_lever_graphs_b2549; assert_equal("China today", worksheet.lever_graphs_b2549); end
  def test_lever_graphs_j2549; assert_in_epsilon(2306.0, worksheet.lever_graphs_j2549, 0.002); end
  def test_lever_graphs_b2550; assert_equal("South Africa today", worksheet.lever_graphs_b2550); end
  def test_lever_graphs_j2550; assert_in_epsilon(2255.0, worksheet.lever_graphs_j2550, 0.002); end
  def test_lever_graphs_b2551; assert_equal("Bangladesh today", worksheet.lever_graphs_b2551); end
  def test_lever_graphs_j2551; assert_in_epsilon(1823.0, worksheet.lever_graphs_j2551, 0.002); end
  def test_lever_graphs_b2552; assert_equal("Malaysia today", worksheet.lever_graphs_b2552); end
  def test_lever_graphs_j2552; assert_in_epsilon(2141.0, worksheet.lever_graphs_j2552, 0.002); end
  def test_lever_graphs_b2553; assert_equal("WHO healthy diet recommendation", worksheet.lever_graphs_b2553); end
  def test_lever_graphs_j2553; assert_in_epsilon(2100.0, worksheet.lever_graphs_j2553, 0.002); end
  def test_lever_graphs_c1691; assert_equal("1975", worksheet.lever_graphs_c1691); end
  def test_lever_graphs_d1691; assert_equal("1980", worksheet.lever_graphs_d1691); end
  def test_lever_graphs_e1691; assert_equal("1985", worksheet.lever_graphs_e1691); end
  def test_lever_graphs_f1691; assert_equal("1990", worksheet.lever_graphs_f1691); end
  def test_lever_graphs_g1691; assert_equal("1995", worksheet.lever_graphs_g1691); end
  def test_lever_graphs_h1691; assert_equal("2000", worksheet.lever_graphs_h1691); end
  def test_lever_graphs_i1691; assert_equal("2005", worksheet.lever_graphs_i1691); end
  def test_lever_graphs_j1691; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1691, 0.002); end
  def test_lever_graphs_k1691; assert_equal("2015", worksheet.lever_graphs_k1691); end
  def test_lever_graphs_l1691; assert_equal("2020", worksheet.lever_graphs_l1691); end
  def test_lever_graphs_m1691; assert_equal("2025", worksheet.lever_graphs_m1691); end
  def test_lever_graphs_n1691; assert_equal("2030", worksheet.lever_graphs_n1691); end
  def test_lever_graphs_o1691; assert_equal("2035", worksheet.lever_graphs_o1691); end
  def test_lever_graphs_p1691; assert_equal("2040", worksheet.lever_graphs_p1691); end
  def test_lever_graphs_q1691; assert_equal("2045", worksheet.lever_graphs_q1691); end
  def test_lever_graphs_r1691; assert_equal("2050", worksheet.lever_graphs_r1691); end
  def test_lever_graphs_b1692; assert_equal("Historic data", worksheet.lever_graphs_b1692); end
  def test_lever_graphs_b1693; assert_in_delta(1.0, worksheet.lever_graphs_b1693, 0.002); end
  def test_lever_graphs_j1693; assert_in_delta(0.0, (worksheet.lever_graphs_j1693||0), 0.002); end
  def test_lever_graphs_k1693; assert_in_epsilon(2.6, worksheet.lever_graphs_k1693, 0.002); end
  def test_lever_graphs_l1693; assert_in_epsilon(16.0, worksheet.lever_graphs_l1693, 0.002); end
  def test_lever_graphs_m1693; assert_in_epsilon(16.0, worksheet.lever_graphs_m1693, 0.002); end
  def test_lever_graphs_n1693; assert_in_epsilon(16.0, worksheet.lever_graphs_n1693, 0.002); end
  def test_lever_graphs_o1693; assert_in_epsilon(16.0, worksheet.lever_graphs_o1693, 0.002); end
  def test_lever_graphs_p1693; assert_in_epsilon(16.0, worksheet.lever_graphs_p1693, 0.002); end
  def test_lever_graphs_q1693; assert_in_epsilon(16.0, worksheet.lever_graphs_q1693, 0.002); end
  def test_lever_graphs_r1693; assert_in_epsilon(16.0, worksheet.lever_graphs_r1693, 0.002); end
  def test_lever_graphs_b1694; assert_in_epsilon(2.0, worksheet.lever_graphs_b1694, 0.002); end
  def test_lever_graphs_j1694; assert_in_delta(0.0, (worksheet.lever_graphs_j1694||0), 0.002); end
  def test_lever_graphs_k1694; assert_in_epsilon(9.0, worksheet.lever_graphs_k1694, 0.002); end
  def test_lever_graphs_l1694; assert_in_epsilon(18.0, worksheet.lever_graphs_l1694, 0.002); end
  def test_lever_graphs_m1694; assert_in_epsilon(36.0, worksheet.lever_graphs_m1694, 0.002); end
  def test_lever_graphs_n1694; assert_in_epsilon(114.0, worksheet.lever_graphs_n1694, 0.002); end
  def test_lever_graphs_o1694; assert_in_epsilon(159.6, worksheet.lever_graphs_o1694, 0.002); end
  def test_lever_graphs_p1694; assert_in_epsilon(223.4, worksheet.lever_graphs_p1694, 0.002); end
  def test_lever_graphs_q1694; assert_in_epsilon(312.8, worksheet.lever_graphs_q1694, 0.002); end
  def test_lever_graphs_r1694; assert_in_epsilon(490.0, worksheet.lever_graphs_r1694, 0.002); end
  def test_lever_graphs_b1695; assert_in_epsilon(3.0, worksheet.lever_graphs_b1695, 0.002); end
  def test_lever_graphs_j1695; assert_in_delta(0.0, (worksheet.lever_graphs_j1695||0), 0.002); end
  def test_lever_graphs_k1695; assert_in_epsilon(9.0, worksheet.lever_graphs_k1695, 0.002); end
  def test_lever_graphs_l1695; assert_in_epsilon(31.3, worksheet.lever_graphs_l1695, 0.002); end
  def test_lever_graphs_m1695; assert_in_epsilon(108.9, worksheet.lever_graphs_m1695, 0.002); end
  def test_lever_graphs_n1695; assert_in_epsilon(380.0, worksheet.lever_graphs_n1695, 0.002); end
  def test_lever_graphs_o1695; assert_in_epsilon(535.8, worksheet.lever_graphs_o1695, 0.002); end
  def test_lever_graphs_p1695; assert_in_epsilon(755.5, worksheet.lever_graphs_p1695, 0.002); end
  def test_lever_graphs_q1695; assert_in_epsilon(1065.3, worksheet.lever_graphs_q1695, 0.002); end
  def test_lever_graphs_r1695; assert_in_epsilon(1487.0, worksheet.lever_graphs_r1695, 0.002); end
  def test_lever_graphs_b1696; assert_in_epsilon(4.0, worksheet.lever_graphs_b1696, 0.002); end
  def test_lever_graphs_j1696; assert_in_delta(0.0, (worksheet.lever_graphs_j1696||0), 0.002); end
  def test_lever_graphs_k1696; assert_in_epsilon(16.0, worksheet.lever_graphs_k1696, 0.002); end
  def test_lever_graphs_l1696; assert_in_epsilon(380.0, worksheet.lever_graphs_l1696, 0.002); end
  def test_lever_graphs_m1696; assert_in_epsilon(760.0, worksheet.lever_graphs_m1696, 0.002); end
  def test_lever_graphs_n1696; assert_in_epsilon(1266.7, worksheet.lever_graphs_n1696, 0.002); end
  def test_lever_graphs_o1696; assert_in_epsilon(1773.4, worksheet.lever_graphs_o1696, 0.002); end
  def test_lever_graphs_p1696; assert_in_epsilon(2482.8, worksheet.lever_graphs_p1696, 0.002); end
  def test_lever_graphs_q1696; assert_in_epsilon(3000.0, worksheet.lever_graphs_q1696, 0.002); end
  def test_lever_graphs_r1696; assert_in_epsilon(3700.0, worksheet.lever_graphs_r1696, 0.002); end
  def test_lever_graphs_b1697; assert_equal("Comparator A", worksheet.lever_graphs_b1697); end
  def test_lever_graphs_b1698; assert_equal("Comparator B", worksheet.lever_graphs_b1698); end
  def test_lever_graphs_b1699; assert_equal("Comparator C", worksheet.lever_graphs_b1699); end
  def test_lever_graphs_c1715; assert_equal("1975", worksheet.lever_graphs_c1715); end
  def test_lever_graphs_d1715; assert_equal("1980", worksheet.lever_graphs_d1715); end
  def test_lever_graphs_e1715; assert_equal("1985", worksheet.lever_graphs_e1715); end
  def test_lever_graphs_f1715; assert_equal("1990", worksheet.lever_graphs_f1715); end
  def test_lever_graphs_g1715; assert_equal("1995", worksheet.lever_graphs_g1715); end
  def test_lever_graphs_h1715; assert_equal("2000", worksheet.lever_graphs_h1715); end
  def test_lever_graphs_i1715; assert_equal("2005", worksheet.lever_graphs_i1715); end
  def test_lever_graphs_j1715; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1715, 0.002); end
  def test_lever_graphs_k1715; assert_equal("2015", worksheet.lever_graphs_k1715); end
  def test_lever_graphs_l1715; assert_equal("2020", worksheet.lever_graphs_l1715); end
  def test_lever_graphs_m1715; assert_equal("2025", worksheet.lever_graphs_m1715); end
  def test_lever_graphs_n1715; assert_equal("2030", worksheet.lever_graphs_n1715); end
  def test_lever_graphs_o1715; assert_equal("2035", worksheet.lever_graphs_o1715); end
  def test_lever_graphs_p1715; assert_equal("2040", worksheet.lever_graphs_p1715); end
  def test_lever_graphs_q1715; assert_equal("2045", worksheet.lever_graphs_q1715); end
  def test_lever_graphs_r1715; assert_equal("2050", worksheet.lever_graphs_r1715); end
  def test_lever_graphs_b1716; assert_equal("Historic data", worksheet.lever_graphs_b1716); end
  def test_lever_graphs_b1717; assert_in_delta(1.0, worksheet.lever_graphs_b1717, 0.002); end
  def test_lever_graphs_j1717; assert_in_epsilon(1.6, worksheet.lever_graphs_j1717, 0.002); end
  def test_lever_graphs_k1717; assert_in_epsilon(10.0, worksheet.lever_graphs_k1717, 0.002); end
  def test_lever_graphs_l1717; assert_in_epsilon(60.0, worksheet.lever_graphs_l1717, 0.002); end
  def test_lever_graphs_m1717; assert_in_epsilon(60.0, worksheet.lever_graphs_m1717, 0.002); end
  def test_lever_graphs_n1717; assert_in_epsilon(50.0, worksheet.lever_graphs_n1717, 0.002); end
  def test_lever_graphs_o1717; assert_in_epsilon(50.0, worksheet.lever_graphs_o1717, 0.002); end
  def test_lever_graphs_p1717; assert_in_delta(0.0, (worksheet.lever_graphs_p1717||0), 0.002); end
  def test_lever_graphs_q1717; assert_in_delta(0.0, (worksheet.lever_graphs_q1717||0), 0.002); end
  def test_lever_graphs_r1717; assert_in_delta(0.0, (worksheet.lever_graphs_r1717||0), 0.002); end
  def test_lever_graphs_b1718; assert_in_epsilon(2.0, worksheet.lever_graphs_b1718, 0.002); end
  def test_lever_graphs_j1718; assert_in_epsilon(1.6, worksheet.lever_graphs_j1718, 0.002); end
  def test_lever_graphs_k1718; assert_in_epsilon(11.0, worksheet.lever_graphs_k1718, 0.002); end
  def test_lever_graphs_l1718; assert_in_epsilon(71.0, worksheet.lever_graphs_l1718, 0.002); end
  def test_lever_graphs_m1718; assert_in_epsilon(101.0, worksheet.lever_graphs_m1718, 0.002); end
  def test_lever_graphs_n1718; assert_in_epsilon(164.0, worksheet.lever_graphs_n1718, 0.002); end
  def test_lever_graphs_o1718; assert_in_epsilon(199.0, worksheet.lever_graphs_o1718, 0.002); end
  def test_lever_graphs_p1718; assert_in_epsilon(267.0, worksheet.lever_graphs_p1718, 0.002); end
  def test_lever_graphs_q1718; assert_in_epsilon(312.0, worksheet.lever_graphs_q1718, 0.002); end
  def test_lever_graphs_r1718; assert_in_epsilon(388.0, worksheet.lever_graphs_r1718, 0.002); end
  def test_lever_graphs_b1719; assert_in_epsilon(3.0, worksheet.lever_graphs_b1719, 0.002); end
  def test_lever_graphs_j1719; assert_in_epsilon(1.6, worksheet.lever_graphs_j1719, 0.002); end
  def test_lever_graphs_k1719; assert_in_epsilon(13.0, worksheet.lever_graphs_k1719, 0.002); end
  def test_lever_graphs_l1719; assert_in_epsilon(83.0, worksheet.lever_graphs_l1719, 0.002); end
  def test_lever_graphs_m1719; assert_in_epsilon(146.3, worksheet.lever_graphs_m1719, 0.002); end
  def test_lever_graphs_n1719; assert_in_epsilon(257.8, worksheet.lever_graphs_n1719, 0.002); end
  def test_lever_graphs_o1719; assert_in_epsilon(396.6, worksheet.lever_graphs_o1719, 0.002); end
  def test_lever_graphs_p1719; assert_in_epsilon(610.3, worksheet.lever_graphs_p1719, 0.002); end
  def test_lever_graphs_q1719; assert_in_epsilon(778.9, worksheet.lever_graphs_q1719, 0.002); end
  def test_lever_graphs_r1719; assert_in_epsilon(994.1, worksheet.lever_graphs_r1719, 0.002); end
  def test_lever_graphs_b1720; assert_in_epsilon(4.0, worksheet.lever_graphs_b1720, 0.002); end
  def test_lever_graphs_j1720; assert_in_epsilon(1.6, worksheet.lever_graphs_j1720, 0.002); end
  def test_lever_graphs_k1720; assert_in_epsilon(15.7, worksheet.lever_graphs_k1720, 0.002); end
  def test_lever_graphs_l1720; assert_in_epsilon(97.6, worksheet.lever_graphs_l1720, 0.002); end
  def test_lever_graphs_m1720; assert_in_epsilon(196.2, worksheet.lever_graphs_m1720, 0.002); end
  def test_lever_graphs_n1720; assert_in_epsilon(394.7, worksheet.lever_graphs_n1720, 0.002); end
  def test_lever_graphs_o1720; assert_in_epsilon(665.1, worksheet.lever_graphs_o1720, 0.002); end
  def test_lever_graphs_p1720; assert_in_epsilon(1120.8, worksheet.lever_graphs_p1720, 0.002); end
  def test_lever_graphs_q1720; assert_in_epsilon(1499.9, worksheet.lever_graphs_q1720, 0.002); end
  def test_lever_graphs_r1720; assert_in_epsilon(2007.1, worksheet.lever_graphs_r1720, 0.002); end
  def test_lever_graphs_b1721; assert_equal("Comparator A", worksheet.lever_graphs_b1721); end
  def test_lever_graphs_b1722; assert_equal("Comparator B", worksheet.lever_graphs_b1722); end
  def test_lever_graphs_b1723; assert_equal("Comparator C", worksheet.lever_graphs_b1723); end
  def test_lever_graphs_c1668; assert_equal("1975", worksheet.lever_graphs_c1668); end
  def test_lever_graphs_d1668; assert_equal("1980", worksheet.lever_graphs_d1668); end
  def test_lever_graphs_e1668; assert_equal("1985", worksheet.lever_graphs_e1668); end
  def test_lever_graphs_f1668; assert_equal("1990", worksheet.lever_graphs_f1668); end
  def test_lever_graphs_g1668; assert_equal("1995", worksheet.lever_graphs_g1668); end
  def test_lever_graphs_h1668; assert_equal("2000", worksheet.lever_graphs_h1668); end
  def test_lever_graphs_i1668; assert_equal("2005", worksheet.lever_graphs_i1668); end
  def test_lever_graphs_j1668; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1668, 0.002); end
  def test_lever_graphs_k1668; assert_equal("2015", worksheet.lever_graphs_k1668); end
  def test_lever_graphs_l1668; assert_equal("2020", worksheet.lever_graphs_l1668); end
  def test_lever_graphs_m1668; assert_equal("2025", worksheet.lever_graphs_m1668); end
  def test_lever_graphs_n1668; assert_equal("2030", worksheet.lever_graphs_n1668); end
  def test_lever_graphs_o1668; assert_equal("2035", worksheet.lever_graphs_o1668); end
  def test_lever_graphs_p1668; assert_equal("2040", worksheet.lever_graphs_p1668); end
  def test_lever_graphs_q1668; assert_equal("2045", worksheet.lever_graphs_q1668); end
  def test_lever_graphs_r1668; assert_equal("2050", worksheet.lever_graphs_r1668); end
  def test_lever_graphs_b1669; assert_equal("Historic data", worksheet.lever_graphs_b1669); end
  def test_lever_graphs_b1670; assert_in_delta(1.0, worksheet.lever_graphs_b1670, 0.002); end
  def test_lever_graphs_j1670; assert_in_epsilon(11.43, worksheet.lever_graphs_j1670, 0.002); end
  def test_lever_graphs_k1670; assert_in_epsilon(14.0, worksheet.lever_graphs_k1670, 0.002); end
  def test_lever_graphs_l1670; assert_in_epsilon(17.0, worksheet.lever_graphs_l1670, 0.002); end
  def test_lever_graphs_m1670; assert_in_epsilon(17.0, worksheet.lever_graphs_m1670, 0.002); end
  def test_lever_graphs_n1670; assert_in_epsilon(10.0, worksheet.lever_graphs_n1670, 0.002); end
  def test_lever_graphs_o1670; assert_in_epsilon(7.0, worksheet.lever_graphs_o1670, 0.002); end
  def test_lever_graphs_p1670; assert_in_epsilon(4.0, worksheet.lever_graphs_p1670, 0.002); end
  def test_lever_graphs_q1670; assert_in_delta(0.0, (worksheet.lever_graphs_q1670||0), 0.002); end
  def test_lever_graphs_r1670; assert_in_delta(0.0, (worksheet.lever_graphs_r1670||0), 0.002); end
  def test_lever_graphs_b1671; assert_in_epsilon(2.0, worksheet.lever_graphs_b1671, 0.002); end
  def test_lever_graphs_j1671; assert_in_epsilon(11.43, worksheet.lever_graphs_j1671, 0.002); end
  def test_lever_graphs_k1671; assert_in_epsilon(15.0, worksheet.lever_graphs_k1671, 0.002); end
  def test_lever_graphs_l1671; assert_in_epsilon(19.0, worksheet.lever_graphs_l1671, 0.002); end
  def test_lever_graphs_m1671; assert_in_epsilon(25.0, worksheet.lever_graphs_m1671, 0.002); end
  def test_lever_graphs_n1671; assert_in_epsilon(39.0, worksheet.lever_graphs_n1671, 0.002); end
  def test_lever_graphs_o1671; assert_in_epsilon(73.0, worksheet.lever_graphs_o1671, 0.002); end
  def test_lever_graphs_p1671; assert_in_epsilon(98.0, worksheet.lever_graphs_p1671, 0.002); end
  def test_lever_graphs_q1671; assert_in_epsilon(137.0, worksheet.lever_graphs_q1671, 0.002); end
  def test_lever_graphs_r1671; assert_in_epsilon(172.0, worksheet.lever_graphs_r1671, 0.002); end
  def test_lever_graphs_b1672; assert_in_epsilon(3.0, worksheet.lever_graphs_b1672, 0.002); end
  def test_lever_graphs_j1672; assert_in_epsilon(11.43, worksheet.lever_graphs_j1672, 0.002); end
  def test_lever_graphs_k1672; assert_in_epsilon(15.0, worksheet.lever_graphs_k1672, 0.002); end
  def test_lever_graphs_l1672; assert_in_epsilon(23.0, worksheet.lever_graphs_l1672, 0.002); end
  def test_lever_graphs_m1672; assert_in_epsilon(38.0, worksheet.lever_graphs_m1672, 0.002); end
  def test_lever_graphs_n1672; assert_in_epsilon(60.0, worksheet.lever_graphs_n1672, 0.002); end
  def test_lever_graphs_o1672; assert_in_epsilon(103.0, worksheet.lever_graphs_o1672, 0.002); end
  def test_lever_graphs_p1672; assert_in_epsilon(169.0, worksheet.lever_graphs_p1672, 0.002); end
  def test_lever_graphs_q1672; assert_in_epsilon(237.0, worksheet.lever_graphs_q1672, 0.002); end
  def test_lever_graphs_r1672; assert_in_epsilon(289.0, worksheet.lever_graphs_r1672, 0.002); end
  def test_lever_graphs_b1673; assert_in_epsilon(4.0, worksheet.lever_graphs_b1673, 0.002); end
  def test_lever_graphs_j1673; assert_in_epsilon(11.43, worksheet.lever_graphs_j1673, 0.002); end
  def test_lever_graphs_k1673; assert_in_epsilon(16.47, worksheet.lever_graphs_k1673, 0.002); end
  def test_lever_graphs_l1673; assert_in_epsilon(25.35, worksheet.lever_graphs_l1673, 0.002); end
  def test_lever_graphs_m1673; assert_in_epsilon(43.79, worksheet.lever_graphs_m1673, 0.002); end
  def test_lever_graphs_n1673; assert_in_epsilon(75.63, worksheet.lever_graphs_n1673, 0.002); end
  def test_lever_graphs_o1673; assert_in_epsilon(130.64, worksheet.lever_graphs_o1673, 0.002); end
  def test_lever_graphs_p1673; assert_in_epsilon(226.0, worksheet.lever_graphs_p1673, 0.002); end
  def test_lever_graphs_q1673; assert_in_epsilon(302.0, worksheet.lever_graphs_q1673, 0.002); end
  def test_lever_graphs_r1673; assert_in_epsilon(404.0, worksheet.lever_graphs_r1673, 0.002); end
  def test_lever_graphs_b1674; assert_equal("Comparator A", worksheet.lever_graphs_b1674); end
  def test_lever_graphs_b1675; assert_equal("Comparator B", worksheet.lever_graphs_b1675); end
  def test_lever_graphs_b1676; assert_equal("Comparator C", worksheet.lever_graphs_b1676); end
  def test_lever_graphs_c1646; assert_equal("1975", worksheet.lever_graphs_c1646); end
  def test_lever_graphs_d1646; assert_equal("1980", worksheet.lever_graphs_d1646); end
  def test_lever_graphs_e1646; assert_equal("1985", worksheet.lever_graphs_e1646); end
  def test_lever_graphs_f1646; assert_equal("1990", worksheet.lever_graphs_f1646); end
  def test_lever_graphs_g1646; assert_equal("1995", worksheet.lever_graphs_g1646); end
  def test_lever_graphs_h1646; assert_equal("2000", worksheet.lever_graphs_h1646); end
  def test_lever_graphs_i1646; assert_equal("2005", worksheet.lever_graphs_i1646); end
  def test_lever_graphs_j1646; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1646, 0.002); end
  def test_lever_graphs_k1646; assert_equal("2015", worksheet.lever_graphs_k1646); end
  def test_lever_graphs_l1646; assert_equal("2020", worksheet.lever_graphs_l1646); end
  def test_lever_graphs_m1646; assert_equal("2025", worksheet.lever_graphs_m1646); end
  def test_lever_graphs_n1646; assert_equal("2030", worksheet.lever_graphs_n1646); end
  def test_lever_graphs_o1646; assert_equal("2035", worksheet.lever_graphs_o1646); end
  def test_lever_graphs_p1646; assert_equal("2040", worksheet.lever_graphs_p1646); end
  def test_lever_graphs_q1646; assert_equal("2045", worksheet.lever_graphs_q1646); end
  def test_lever_graphs_r1646; assert_equal("2050", worksheet.lever_graphs_r1646); end
  def test_lever_graphs_b1647; assert_equal("Historic data", worksheet.lever_graphs_b1647); end
  def test_lever_graphs_b1648; assert_in_delta(1.0, worksheet.lever_graphs_b1648, 0.002); end
  def test_lever_graphs_j1648; assert_in_epsilon(970.0, worksheet.lever_graphs_j1648, 0.002); end
  def test_lever_graphs_k1648; assert_in_epsilon(994.0, worksheet.lever_graphs_k1648, 0.002); end
  def test_lever_graphs_l1648; assert_in_epsilon(1054.0, worksheet.lever_graphs_l1648, 0.002); end
  def test_lever_graphs_m1648; assert_in_epsilon(1120.0, worksheet.lever_graphs_m1648, 0.002); end
  def test_lever_graphs_n1648; assert_in_epsilon(1188.0, worksheet.lever_graphs_n1648, 0.002); end
  def test_lever_graphs_o1648; assert_in_epsilon(1261.0, worksheet.lever_graphs_o1648, 0.002); end
  def test_lever_graphs_p1648; assert_in_epsilon(1324.0, worksheet.lever_graphs_p1648, 0.002); end
  def test_lever_graphs_q1648; assert_in_epsilon(1324.0, worksheet.lever_graphs_q1648, 0.002); end
  def test_lever_graphs_r1648; assert_in_epsilon(1324.0, worksheet.lever_graphs_r1648, 0.002); end
  def test_lever_graphs_b1649; assert_in_epsilon(2.0, worksheet.lever_graphs_b1649, 0.002); end
  def test_lever_graphs_j1649; assert_in_epsilon(970.0, worksheet.lever_graphs_j1649, 0.002); end
  def test_lever_graphs_k1649; assert_in_epsilon(1008.0, worksheet.lever_graphs_k1649, 0.002); end
  def test_lever_graphs_l1649; assert_in_epsilon(1086.0, worksheet.lever_graphs_l1649, 0.002); end
  def test_lever_graphs_m1649; assert_in_epsilon(1170.0, worksheet.lever_graphs_m1649, 0.002); end
  def test_lever_graphs_n1649; assert_in_epsilon(1261.0, worksheet.lever_graphs_n1649, 0.002); end
  def test_lever_graphs_o1649; assert_in_epsilon(1358.0, worksheet.lever_graphs_o1649, 0.002); end
  def test_lever_graphs_p1649; assert_in_epsilon(1463.0, worksheet.lever_graphs_p1649, 0.002); end
  def test_lever_graphs_q1649; assert_in_epsilon(1576.0, worksheet.lever_graphs_q1649, 0.002); end
  def test_lever_graphs_r1649; assert_in_epsilon(1697.0, worksheet.lever_graphs_r1649, 0.002); end
  def test_lever_graphs_b1650; assert_in_epsilon(3.0, worksheet.lever_graphs_b1650, 0.002); end
  def test_lever_graphs_j1650; assert_in_epsilon(970.0, worksheet.lever_graphs_j1650, 0.002); end
  def test_lever_graphs_k1650; assert_in_epsilon(1033.0, worksheet.lever_graphs_k1650, 0.002); end
  def test_lever_graphs_l1650; assert_in_epsilon(1140.0, worksheet.lever_graphs_l1650, 0.002); end
  def test_lever_graphs_m1650; assert_in_epsilon(1259.0, worksheet.lever_graphs_m1650, 0.002); end
  def test_lever_graphs_n1650; assert_in_epsilon(1390.0, worksheet.lever_graphs_n1650, 0.002); end
  def test_lever_graphs_o1650; assert_in_epsilon(1535.0, worksheet.lever_graphs_o1650, 0.002); end
  def test_lever_graphs_p1650; assert_in_epsilon(1695.0, worksheet.lever_graphs_p1650, 0.002); end
  def test_lever_graphs_q1650; assert_in_epsilon(1871.0, worksheet.lever_graphs_q1650, 0.002); end
  def test_lever_graphs_r1650; assert_in_epsilon(1912.0, worksheet.lever_graphs_r1650, 0.002); end
  def test_lever_graphs_b1651; assert_in_epsilon(4.0, worksheet.lever_graphs_b1651, 0.002); end
  def test_lever_graphs_j1651; assert_in_epsilon(970.0, worksheet.lever_graphs_j1651, 0.002); end
  def test_lever_graphs_k1651; assert_in_epsilon(1085.0, worksheet.lever_graphs_k1651, 0.002); end
  def test_lever_graphs_l1651; assert_in_epsilon(1258.0, worksheet.lever_graphs_l1651, 0.002); end
  def test_lever_graphs_m1651; assert_in_epsilon(1458.0, worksheet.lever_graphs_m1651, 0.002); end
  def test_lever_graphs_n1651; assert_in_epsilon(1690.0, worksheet.lever_graphs_n1651, 0.002); end
  def test_lever_graphs_o1651; assert_in_epsilon(1859.0, worksheet.lever_graphs_o1651, 0.002); end
  def test_lever_graphs_p1651; assert_in_epsilon(2071.0, worksheet.lever_graphs_p1651, 0.002); end
  def test_lever_graphs_q1651; assert_in_epsilon(2203.0, worksheet.lever_graphs_q1651, 0.002); end
  def test_lever_graphs_r1651; assert_in_epsilon(2342.0, worksheet.lever_graphs_r1651, 0.002); end
  def test_lever_graphs_b1652; assert_equal("Comparator A", worksheet.lever_graphs_b1652); end
  def test_lever_graphs_b1653; assert_equal("Comparator B", worksheet.lever_graphs_b1653); end
  def test_lever_graphs_b1654; assert_equal("Comparator C", worksheet.lever_graphs_b1654); end
  def test_lever_graphs_c1811; assert_equal("1975", worksheet.lever_graphs_c1811); end
  def test_lever_graphs_d1811; assert_equal("1980", worksheet.lever_graphs_d1811); end
  def test_lever_graphs_e1811; assert_equal("1985", worksheet.lever_graphs_e1811); end
  def test_lever_graphs_f1811; assert_equal("1990", worksheet.lever_graphs_f1811); end
  def test_lever_graphs_g1811; assert_equal("1995", worksheet.lever_graphs_g1811); end
  def test_lever_graphs_h1811; assert_equal("2000", worksheet.lever_graphs_h1811); end
  def test_lever_graphs_i1811; assert_equal("2005", worksheet.lever_graphs_i1811); end
  def test_lever_graphs_j1811; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1811, 0.002); end
  def test_lever_graphs_k1811; assert_equal("2015", worksheet.lever_graphs_k1811); end
  def test_lever_graphs_l1811; assert_equal("2020", worksheet.lever_graphs_l1811); end
  def test_lever_graphs_m1811; assert_equal("2025", worksheet.lever_graphs_m1811); end
  def test_lever_graphs_n1811; assert_equal("2030", worksheet.lever_graphs_n1811); end
  def test_lever_graphs_o1811; assert_equal("2035", worksheet.lever_graphs_o1811); end
  def test_lever_graphs_p1811; assert_equal("2040", worksheet.lever_graphs_p1811); end
  def test_lever_graphs_q1811; assert_equal("2045", worksheet.lever_graphs_q1811); end
  def test_lever_graphs_r1811; assert_equal("2050", worksheet.lever_graphs_r1811); end
  def test_lever_graphs_b1812; assert_equal("Historic data", worksheet.lever_graphs_b1812); end
  def test_lever_graphs_b1813; assert_in_delta(1.0, worksheet.lever_graphs_b1813, 0.002); end
  def test_lever_graphs_j1813; assert_in_delta(0.527, worksheet.lever_graphs_j1813, 0.002); end
  def test_lever_graphs_k1813; assert_in_delta(0.8, worksheet.lever_graphs_k1813, 0.002); end
  def test_lever_graphs_l1813; assert_in_delta(1.0, worksheet.lever_graphs_l1813, 0.002); end
  def test_lever_graphs_m1813; assert_in_delta(1.0, worksheet.lever_graphs_m1813, 0.002); end
  def test_lever_graphs_n1813; assert_in_delta(1.0, worksheet.lever_graphs_n1813, 0.002); end
  def test_lever_graphs_o1813; assert_in_delta(1.0, worksheet.lever_graphs_o1813, 0.002); end
  def test_lever_graphs_p1813; assert_in_delta(1.0, worksheet.lever_graphs_p1813, 0.002); end
  def test_lever_graphs_q1813; assert_in_delta(0.0, (worksheet.lever_graphs_q1813||0), 0.002); end
  def test_lever_graphs_r1813; assert_in_delta(0.0, (worksheet.lever_graphs_r1813||0), 0.002); end
  def test_lever_graphs_b1814; assert_in_epsilon(2.0, worksheet.lever_graphs_b1814, 0.002); end
  def test_lever_graphs_j1814; assert_in_delta(0.527, worksheet.lever_graphs_j1814, 0.002); end
  def test_lever_graphs_k1814; assert_in_delta(1.0, worksheet.lever_graphs_k1814, 0.002); end
  def test_lever_graphs_l1814; assert_in_epsilon(2.0, worksheet.lever_graphs_l1814, 0.002); end
  def test_lever_graphs_m1814; assert_in_epsilon(4.0, worksheet.lever_graphs_m1814, 0.002); end
  def test_lever_graphs_n1814; assert_in_epsilon(8.0, worksheet.lever_graphs_n1814, 0.002); end
  def test_lever_graphs_o1814; assert_in_epsilon(13.0, worksheet.lever_graphs_o1814, 0.002); end
  def test_lever_graphs_p1814; assert_in_epsilon(21.0, worksheet.lever_graphs_p1814, 0.002); end
  def test_lever_graphs_q1814; assert_in_epsilon(28.0, worksheet.lever_graphs_q1814, 0.002); end
  def test_lever_graphs_r1814; assert_in_epsilon(35.0, worksheet.lever_graphs_r1814, 0.002); end
  def test_lever_graphs_b1815; assert_in_epsilon(3.0, worksheet.lever_graphs_b1815, 0.002); end
  def test_lever_graphs_j1815; assert_in_delta(0.527, worksheet.lever_graphs_j1815, 0.002); end
  def test_lever_graphs_k1815; assert_in_delta(1.0, worksheet.lever_graphs_k1815, 0.002); end
  def test_lever_graphs_l1815; assert_in_epsilon(2.0, worksheet.lever_graphs_l1815, 0.002); end
  def test_lever_graphs_m1815; assert_in_epsilon(6.0, worksheet.lever_graphs_m1815, 0.002); end
  def test_lever_graphs_n1815; assert_in_epsilon(11.0, worksheet.lever_graphs_n1815, 0.002); end
  def test_lever_graphs_o1815; assert_in_epsilon(22.0, worksheet.lever_graphs_o1815, 0.002); end
  def test_lever_graphs_p1815; assert_in_epsilon(38.0, worksheet.lever_graphs_p1815, 0.002); end
  def test_lever_graphs_q1815; assert_in_epsilon(70.0, worksheet.lever_graphs_q1815, 0.002); end
  def test_lever_graphs_r1815; assert_in_epsilon(132.0, worksheet.lever_graphs_r1815, 0.002); end
  def test_lever_graphs_b1816; assert_in_epsilon(4.0, worksheet.lever_graphs_b1816, 0.002); end
  def test_lever_graphs_j1816; assert_in_delta(0.527, worksheet.lever_graphs_j1816, 0.002); end
  def test_lever_graphs_k1816; assert_in_delta(1.0, worksheet.lever_graphs_k1816, 0.002); end
  def test_lever_graphs_l1816; assert_in_epsilon(3.0, worksheet.lever_graphs_l1816, 0.002); end
  def test_lever_graphs_m1816; assert_in_epsilon(10.0, worksheet.lever_graphs_m1816, 0.002); end
  def test_lever_graphs_n1816; assert_in_epsilon(18.0, worksheet.lever_graphs_n1816, 0.002); end
  def test_lever_graphs_o1816; assert_in_epsilon(31.7, worksheet.lever_graphs_o1816, 0.002); end
  def test_lever_graphs_p1816; assert_in_epsilon(55.9, worksheet.lever_graphs_p1816, 0.002); end
  def test_lever_graphs_q1816; assert_in_epsilon(127.9, worksheet.lever_graphs_q1816, 0.002); end
  def test_lever_graphs_r1816; assert_in_epsilon(292.6, worksheet.lever_graphs_r1816, 0.002); end
  def test_lever_graphs_b1817; assert_equal("Comparator A", worksheet.lever_graphs_b1817); end
  def test_lever_graphs_b1818; assert_equal("Comparator B", worksheet.lever_graphs_b1818); end
  def test_lever_graphs_b1819; assert_equal("Comparator C", worksheet.lever_graphs_b1819); end
  def test_lever_graphs_c1795; assert_equal("1975", worksheet.lever_graphs_c1795); end
  def test_lever_graphs_d1795; assert_equal("1980", worksheet.lever_graphs_d1795); end
  def test_lever_graphs_e1795; assert_equal("1985", worksheet.lever_graphs_e1795); end
  def test_lever_graphs_f1795; assert_equal("1990", worksheet.lever_graphs_f1795); end
  def test_lever_graphs_g1795; assert_equal("1995", worksheet.lever_graphs_g1795); end
  def test_lever_graphs_h1795; assert_equal("2000", worksheet.lever_graphs_h1795); end
  def test_lever_graphs_i1795; assert_equal("2005", worksheet.lever_graphs_i1795); end
  def test_lever_graphs_j1795; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1795, 0.002); end
  def test_lever_graphs_k1795; assert_equal("2015", worksheet.lever_graphs_k1795); end
  def test_lever_graphs_l1795; assert_equal("2020", worksheet.lever_graphs_l1795); end
  def test_lever_graphs_m1795; assert_equal("2025", worksheet.lever_graphs_m1795); end
  def test_lever_graphs_n1795; assert_equal("2030", worksheet.lever_graphs_n1795); end
  def test_lever_graphs_o1795; assert_equal("2035", worksheet.lever_graphs_o1795); end
  def test_lever_graphs_p1795; assert_equal("2040", worksheet.lever_graphs_p1795); end
  def test_lever_graphs_q1795; assert_equal("2045", worksheet.lever_graphs_q1795); end
  def test_lever_graphs_r1795; assert_equal("2050", worksheet.lever_graphs_r1795); end
  def test_lever_graphs_b1796; assert_equal("Historic data", worksheet.lever_graphs_b1796); end
  def test_lever_graphs_b1797; assert_in_delta(1.0, worksheet.lever_graphs_b1797, 0.002); end
  def test_lever_graphs_j1797; assert_in_delta(0.0, (worksheet.lever_graphs_j1797||0), 0.002); end
  def test_lever_graphs_k1797; assert_in_delta(0.1, worksheet.lever_graphs_k1797, 0.002); end
  def test_lever_graphs_l1797; assert_in_delta(0.1, worksheet.lever_graphs_l1797, 0.002); end
  def test_lever_graphs_m1797; assert_in_delta(0.1, worksheet.lever_graphs_m1797, 0.002); end
  def test_lever_graphs_n1797; assert_in_delta(1.0, worksheet.lever_graphs_n1797, 0.002); end
  def test_lever_graphs_o1797; assert_in_epsilon(2.0, worksheet.lever_graphs_o1797, 0.002); end
  def test_lever_graphs_p1797; assert_in_epsilon(4.0, worksheet.lever_graphs_p1797, 0.002); end
  def test_lever_graphs_q1797; assert_in_epsilon(7.0, worksheet.lever_graphs_q1797, 0.002); end
  def test_lever_graphs_r1797; assert_in_epsilon(8.0, worksheet.lever_graphs_r1797, 0.002); end
  def test_lever_graphs_b1798; assert_in_epsilon(2.0, worksheet.lever_graphs_b1798, 0.002); end
  def test_lever_graphs_j1798; assert_in_delta(0.0, (worksheet.lever_graphs_j1798||0), 0.002); end
  def test_lever_graphs_k1798; assert_in_delta(1.0, worksheet.lever_graphs_k1798, 0.002); end
  def test_lever_graphs_l1798; assert_in_delta(1.0, worksheet.lever_graphs_l1798, 0.002); end
  def test_lever_graphs_m1798; assert_in_epsilon(6.0, worksheet.lever_graphs_m1798, 0.002); end
  def test_lever_graphs_n1798; assert_in_epsilon(16.0, worksheet.lever_graphs_n1798, 0.002); end
  def test_lever_graphs_o1798; assert_in_epsilon(27.0, worksheet.lever_graphs_o1798, 0.002); end
  def test_lever_graphs_p1798; assert_in_epsilon(38.0, worksheet.lever_graphs_p1798, 0.002); end
  def test_lever_graphs_q1798; assert_in_epsilon(51.0, worksheet.lever_graphs_q1798, 0.002); end
  def test_lever_graphs_r1798; assert_in_epsilon(62.0, worksheet.lever_graphs_r1798, 0.002); end
  def test_lever_graphs_b1799; assert_in_epsilon(3.0, worksheet.lever_graphs_b1799, 0.002); end
  def test_lever_graphs_j1799; assert_in_delta(0.0, (worksheet.lever_graphs_j1799||0), 0.002); end
  def test_lever_graphs_k1799; assert_in_delta(1.0, worksheet.lever_graphs_k1799, 0.002); end
  def test_lever_graphs_l1799; assert_in_epsilon(2.0, worksheet.lever_graphs_l1799, 0.002); end
  def test_lever_graphs_m1799; assert_in_epsilon(8.0, worksheet.lever_graphs_m1799, 0.002); end
  def test_lever_graphs_n1799; assert_in_epsilon(19.0, worksheet.lever_graphs_n1799, 0.002); end
  def test_lever_graphs_o1799; assert_in_epsilon(34.0, worksheet.lever_graphs_o1799, 0.002); end
  def test_lever_graphs_p1799; assert_in_epsilon(59.0, worksheet.lever_graphs_p1799, 0.002); end
  def test_lever_graphs_q1799; assert_in_epsilon(83.0, worksheet.lever_graphs_q1799, 0.002); end
  def test_lever_graphs_r1799; assert_in_epsilon(105.0, worksheet.lever_graphs_r1799, 0.002); end
  def test_lever_graphs_b1800; assert_in_epsilon(4.0, worksheet.lever_graphs_b1800, 0.002); end
  def test_lever_graphs_j1800; assert_in_delta(0.0, (worksheet.lever_graphs_j1800||0), 0.002); end
  def test_lever_graphs_k1800; assert_in_delta(1.0, worksheet.lever_graphs_k1800, 0.002); end
  def test_lever_graphs_l1800; assert_in_epsilon(4.0, worksheet.lever_graphs_l1800, 0.002); end
  def test_lever_graphs_m1800; assert_in_epsilon(14.0, worksheet.lever_graphs_m1800, 0.002); end
  def test_lever_graphs_n1800; assert_in_epsilon(30.0, worksheet.lever_graphs_n1800, 0.002); end
  def test_lever_graphs_o1800; assert_in_epsilon(58.0, worksheet.lever_graphs_o1800, 0.002); end
  def test_lever_graphs_p1800; assert_in_epsilon(85.0, worksheet.lever_graphs_p1800, 0.002); end
  def test_lever_graphs_q1800; assert_in_epsilon(117.0, worksheet.lever_graphs_q1800, 0.002); end
  def test_lever_graphs_r1800; assert_in_epsilon(143.0, worksheet.lever_graphs_r1800, 0.002); end
  def test_lever_graphs_b1801; assert_equal("Comparator A", worksheet.lever_graphs_b1801); end
  def test_lever_graphs_b1802; assert_equal("Comparator B", worksheet.lever_graphs_b1802); end
  def test_lever_graphs_b1803; assert_equal("Comparator C", worksheet.lever_graphs_b1803); end
  def test_lever_graphs_c1625; assert_equal("1975", worksheet.lever_graphs_c1625); end
  def test_lever_graphs_d1625; assert_equal("1980", worksheet.lever_graphs_d1625); end
  def test_lever_graphs_e1625; assert_equal("1985", worksheet.lever_graphs_e1625); end
  def test_lever_graphs_f1625; assert_equal("1990", worksheet.lever_graphs_f1625); end
  def test_lever_graphs_g1625; assert_equal("1995", worksheet.lever_graphs_g1625); end
  def test_lever_graphs_h1625; assert_equal("2000", worksheet.lever_graphs_h1625); end
  def test_lever_graphs_i1625; assert_equal("2005", worksheet.lever_graphs_i1625); end
  def test_lever_graphs_j1625; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1625, 0.002); end
  def test_lever_graphs_k1625; assert_equal("2015", worksheet.lever_graphs_k1625); end
  def test_lever_graphs_l1625; assert_equal("2020", worksheet.lever_graphs_l1625); end
  def test_lever_graphs_m1625; assert_equal("2025", worksheet.lever_graphs_m1625); end
  def test_lever_graphs_n1625; assert_equal("2030", worksheet.lever_graphs_n1625); end
  def test_lever_graphs_o1625; assert_equal("2035", worksheet.lever_graphs_o1625); end
  def test_lever_graphs_p1625; assert_equal("2040", worksheet.lever_graphs_p1625); end
  def test_lever_graphs_q1625; assert_equal("2045", worksheet.lever_graphs_q1625); end
  def test_lever_graphs_r1625; assert_equal("2050", worksheet.lever_graphs_r1625); end
  def test_lever_graphs_b1626; assert_equal("Historic data", worksheet.lever_graphs_b1626); end
  def test_lever_graphs_b1627; assert_in_delta(1.0, worksheet.lever_graphs_b1627, 0.002); end
  def test_lever_graphs_j1627; assert_in_epsilon(364.0, worksheet.lever_graphs_j1627, 0.002); end
  def test_lever_graphs_k1627; assert_in_epsilon(364.0, worksheet.lever_graphs_k1627, 0.002); end
  def test_lever_graphs_l1627; assert_in_epsilon(300.0, worksheet.lever_graphs_l1627, 0.002); end
  def test_lever_graphs_m1627; assert_in_epsilon(300.0, worksheet.lever_graphs_m1627, 0.002); end
  def test_lever_graphs_n1627; assert_in_epsilon(200.0, worksheet.lever_graphs_n1627, 0.002); end
  def test_lever_graphs_o1627; assert_in_epsilon(200.0, worksheet.lever_graphs_o1627, 0.002); end
  def test_lever_graphs_p1627; assert_in_epsilon(100.0, worksheet.lever_graphs_p1627, 0.002); end
  def test_lever_graphs_q1627; assert_in_epsilon(50.0, worksheet.lever_graphs_q1627, 0.002); end
  def test_lever_graphs_r1627; assert_in_delta(0.0, (worksheet.lever_graphs_r1627||0), 0.002); end
  def test_lever_graphs_b1628; assert_in_epsilon(2.0, worksheet.lever_graphs_b1628, 0.002); end
  def test_lever_graphs_j1628; assert_in_epsilon(364.0, worksheet.lever_graphs_j1628, 0.002); end
  def test_lever_graphs_k1628; assert_in_epsilon(394.0, worksheet.lever_graphs_k1628, 0.002); end
  def test_lever_graphs_l1628; assert_in_epsilon(414.0, worksheet.lever_graphs_l1628, 0.002); end
  def test_lever_graphs_m1628; assert_in_epsilon(435.0, worksheet.lever_graphs_m1628, 0.002); end
  def test_lever_graphs_n1628; assert_in_epsilon(457.0, worksheet.lever_graphs_n1628, 0.002); end
  def test_lever_graphs_o1628; assert_in_epsilon(480.0, worksheet.lever_graphs_o1628, 0.002); end
  def test_lever_graphs_p1628; assert_in_epsilon(505.0, worksheet.lever_graphs_p1628, 0.002); end
  def test_lever_graphs_q1628; assert_in_epsilon(531.0, worksheet.lever_graphs_q1628, 0.002); end
  def test_lever_graphs_r1628; assert_in_epsilon(558.0, worksheet.lever_graphs_r1628, 0.002); end
  def test_lever_graphs_b1629; assert_in_epsilon(3.0, worksheet.lever_graphs_b1629, 0.002); end
  def test_lever_graphs_j1629; assert_in_epsilon(364.0, worksheet.lever_graphs_j1629, 0.002); end
  def test_lever_graphs_k1629; assert_in_epsilon(404.0, worksheet.lever_graphs_k1629, 0.002); end
  def test_lever_graphs_l1629; assert_in_epsilon(432.0, worksheet.lever_graphs_l1629, 0.002); end
  def test_lever_graphs_m1629; assert_in_epsilon(458.0, worksheet.lever_graphs_m1629, 0.002); end
  def test_lever_graphs_n1629; assert_in_epsilon(534.0, worksheet.lever_graphs_n1629, 0.002); end
  def test_lever_graphs_o1629; assert_in_epsilon(623.0, worksheet.lever_graphs_o1629, 0.002); end
  def test_lever_graphs_p1629; assert_in_epsilon(726.0, worksheet.lever_graphs_p1629, 0.002); end
  def test_lever_graphs_q1629; assert_in_epsilon(847.0, worksheet.lever_graphs_q1629, 0.002); end
  def test_lever_graphs_r1629; assert_in_epsilon(989.0, worksheet.lever_graphs_r1629, 0.002); end
  def test_lever_graphs_b1630; assert_in_epsilon(4.0, worksheet.lever_graphs_b1630, 0.002); end
  def test_lever_graphs_j1630; assert_in_epsilon(364.0, worksheet.lever_graphs_j1630, 0.002); end
  def test_lever_graphs_k1630; assert_in_epsilon(448.0, worksheet.lever_graphs_k1630, 0.002); end
  def test_lever_graphs_l1630; assert_in_epsilon(546.0, worksheet.lever_graphs_l1630, 0.002); end
  def test_lever_graphs_m1630; assert_in_epsilon(670.0, worksheet.lever_graphs_m1630, 0.002); end
  def test_lever_graphs_n1630; assert_in_epsilon(823.0, worksheet.lever_graphs_n1630, 0.002); end
  def test_lever_graphs_o1630; assert_in_epsilon(1010.0, worksheet.lever_graphs_o1630, 0.002); end
  def test_lever_graphs_p1630; assert_in_epsilon(1240.0, worksheet.lever_graphs_p1630, 0.002); end
  def test_lever_graphs_q1630; assert_in_epsilon(1523.0, worksheet.lever_graphs_q1630, 0.002); end
  def test_lever_graphs_r1630; assert_in_epsilon(1870.0, worksheet.lever_graphs_r1630, 0.002); end
  def test_lever_graphs_b1631; assert_equal("Comparator A", worksheet.lever_graphs_b1631); end
  def test_lever_graphs_b1632; assert_equal("Comparator B", worksheet.lever_graphs_b1632); end
  def test_lever_graphs_b1633; assert_equal("Comparator C", worksheet.lever_graphs_b1633); end
  def test_lever_graphs_c1771; assert_equal("1975", worksheet.lever_graphs_c1771); end
  def test_lever_graphs_d1771; assert_equal("1980", worksheet.lever_graphs_d1771); end
  def test_lever_graphs_e1771; assert_equal("1985", worksheet.lever_graphs_e1771); end
  def test_lever_graphs_f1771; assert_equal("1990", worksheet.lever_graphs_f1771); end
  def test_lever_graphs_g1771; assert_equal("1995", worksheet.lever_graphs_g1771); end
  def test_lever_graphs_h1771; assert_equal("2000", worksheet.lever_graphs_h1771); end
  def test_lever_graphs_i1771; assert_equal("2005", worksheet.lever_graphs_i1771); end
  def test_lever_graphs_j1771; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1771, 0.002); end
  def test_lever_graphs_k1771; assert_equal("2015", worksheet.lever_graphs_k1771); end
  def test_lever_graphs_l1771; assert_equal("2020", worksheet.lever_graphs_l1771); end
  def test_lever_graphs_m1771; assert_equal("2025", worksheet.lever_graphs_m1771); end
  def test_lever_graphs_n1771; assert_equal("2030", worksheet.lever_graphs_n1771); end
  def test_lever_graphs_o1771; assert_equal("2035", worksheet.lever_graphs_o1771); end
  def test_lever_graphs_p1771; assert_equal("2040", worksheet.lever_graphs_p1771); end
  def test_lever_graphs_q1771; assert_equal("2045", worksheet.lever_graphs_q1771); end
  def test_lever_graphs_r1771; assert_equal("2050", worksheet.lever_graphs_r1771); end
  def test_lever_graphs_b1772; assert_equal("Historic data", worksheet.lever_graphs_b1772); end
  def test_lever_graphs_b1773; assert_in_delta(1.0, worksheet.lever_graphs_b1773, 0.002); end
  def test_lever_graphs_j1773; assert_in_epsilon(4.1, worksheet.lever_graphs_j1773, 0.002); end
  def test_lever_graphs_k1773; assert_in_epsilon(17.0, worksheet.lever_graphs_k1773, 0.002); end
  def test_lever_graphs_l1773; assert_in_epsilon(17.0, worksheet.lever_graphs_l1773, 0.002); end
  def test_lever_graphs_m1773; assert_in_epsilon(13.0, worksheet.lever_graphs_m1773, 0.002); end
  def test_lever_graphs_n1773; assert_in_delta(0.0, (worksheet.lever_graphs_n1773||0), 0.002); end
  def test_lever_graphs_o1773; assert_in_delta(0.0, (worksheet.lever_graphs_o1773||0), 0.002); end
  def test_lever_graphs_p1773; assert_in_delta(0.0, (worksheet.lever_graphs_p1773||0), 0.002); end
  def test_lever_graphs_q1773; assert_in_delta(0.0, (worksheet.lever_graphs_q1773||0), 0.002); end
  def test_lever_graphs_r1773; assert_in_delta(0.0, (worksheet.lever_graphs_r1773||0), 0.002); end
  def test_lever_graphs_b1774; assert_in_epsilon(2.0, worksheet.lever_graphs_b1774, 0.002); end
  def test_lever_graphs_j1774; assert_in_epsilon(4.1, worksheet.lever_graphs_j1774, 0.002); end
  def test_lever_graphs_k1774; assert_in_epsilon(17.0, worksheet.lever_graphs_k1774, 0.002); end
  def test_lever_graphs_l1774; assert_in_epsilon(33.0, worksheet.lever_graphs_l1774, 0.002); end
  def test_lever_graphs_m1774; assert_in_epsilon(50.0, worksheet.lever_graphs_m1774, 0.002); end
  def test_lever_graphs_n1774; assert_in_epsilon(96.0, worksheet.lever_graphs_n1774, 0.002); end
  def test_lever_graphs_o1774; assert_in_epsilon(147.0, worksheet.lever_graphs_o1774, 0.002); end
  def test_lever_graphs_p1774; assert_in_epsilon(220.0, worksheet.lever_graphs_p1774, 0.002); end
  def test_lever_graphs_q1774; assert_in_epsilon(376.0, worksheet.lever_graphs_q1774, 0.002); end
  def test_lever_graphs_r1774; assert_in_epsilon(455.0, worksheet.lever_graphs_r1774, 0.002); end
  def test_lever_graphs_b1775; assert_in_epsilon(3.0, worksheet.lever_graphs_b1775, 0.002); end
  def test_lever_graphs_j1775; assert_in_epsilon(4.1, worksheet.lever_graphs_j1775, 0.002); end
  def test_lever_graphs_k1775; assert_in_epsilon(17.0, worksheet.lever_graphs_k1775, 0.002); end
  def test_lever_graphs_l1775; assert_in_epsilon(46.0, worksheet.lever_graphs_l1775, 0.002); end
  def test_lever_graphs_m1775; assert_in_epsilon(87.0, worksheet.lever_graphs_m1775, 0.002); end
  def test_lever_graphs_n1775; assert_in_epsilon(188.0, worksheet.lever_graphs_n1775, 0.002); end
  def test_lever_graphs_o1775; assert_in_epsilon(295.0, worksheet.lever_graphs_o1775, 0.002); end
  def test_lever_graphs_p1775; assert_in_epsilon(424.0, worksheet.lever_graphs_p1775, 0.002); end
  def test_lever_graphs_q1775; assert_in_epsilon(708.0, worksheet.lever_graphs_q1775, 0.002); end
  def test_lever_graphs_r1775; assert_in_epsilon(910.0, worksheet.lever_graphs_r1775, 0.002); end
  def test_lever_graphs_b1776; assert_in_epsilon(4.0, worksheet.lever_graphs_b1776, 0.002); end
  def test_lever_graphs_j1776; assert_in_epsilon(4.1, worksheet.lever_graphs_j1776, 0.002); end
  def test_lever_graphs_k1776; assert_in_epsilon(17.0, worksheet.lever_graphs_k1776, 0.002); end
  def test_lever_graphs_l1776; assert_in_epsilon(71.0, worksheet.lever_graphs_l1776, 0.002); end
  def test_lever_graphs_m1776; assert_in_epsilon(177.0, worksheet.lever_graphs_m1776, 0.002); end
  def test_lever_graphs_n1776; assert_in_epsilon(440.0, worksheet.lever_graphs_n1776, 0.002); end
  def test_lever_graphs_o1776; assert_in_epsilon(647.0, worksheet.lever_graphs_o1776, 0.002); end
  def test_lever_graphs_p1776; assert_in_epsilon(951.0, worksheet.lever_graphs_p1776, 0.002); end
  def test_lever_graphs_q1776; assert_in_epsilon(1157.0, worksheet.lever_graphs_q1776, 0.002); end
  def test_lever_graphs_r1776; assert_in_epsilon(1408.0, worksheet.lever_graphs_r1776, 0.002); end
  def test_lever_graphs_b1777; assert_equal("Comparator A", worksheet.lever_graphs_b1777); end
  def test_lever_graphs_b1778; assert_equal("Comparator B", worksheet.lever_graphs_b1778); end
  def test_lever_graphs_b1779; assert_equal("Comparator C", worksheet.lever_graphs_b1779); end
  def test_lever_graphs_c1755; assert_equal("1975", worksheet.lever_graphs_c1755); end
  def test_lever_graphs_d1755; assert_equal("1980", worksheet.lever_graphs_d1755); end
  def test_lever_graphs_e1755; assert_equal("1985", worksheet.lever_graphs_e1755); end
  def test_lever_graphs_f1755; assert_equal("1990", worksheet.lever_graphs_f1755); end
  def test_lever_graphs_g1755; assert_equal("1995", worksheet.lever_graphs_g1755); end
  def test_lever_graphs_h1755; assert_equal("2000", worksheet.lever_graphs_h1755); end
  def test_lever_graphs_i1755; assert_equal("2005", worksheet.lever_graphs_i1755); end
  def test_lever_graphs_j1755; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1755, 0.002); end
  def test_lever_graphs_k1755; assert_equal("2015", worksheet.lever_graphs_k1755); end
  def test_lever_graphs_l1755; assert_equal("2020", worksheet.lever_graphs_l1755); end
  def test_lever_graphs_m1755; assert_equal("2025", worksheet.lever_graphs_m1755); end
  def test_lever_graphs_n1755; assert_equal("2030", worksheet.lever_graphs_n1755); end
  def test_lever_graphs_o1755; assert_equal("2035", worksheet.lever_graphs_o1755); end
  def test_lever_graphs_p1755; assert_equal("2040", worksheet.lever_graphs_p1755); end
  def test_lever_graphs_q1755; assert_equal("2045", worksheet.lever_graphs_q1755); end
  def test_lever_graphs_r1755; assert_equal("2050", worksheet.lever_graphs_r1755); end
  def test_lever_graphs_b1756; assert_equal("Historic data", worksheet.lever_graphs_b1756); end
  def test_lever_graphs_b1757; assert_in_delta(1.0, worksheet.lever_graphs_b1757, 0.002); end
  def test_lever_graphs_j1757; assert_in_epsilon(233.57, worksheet.lever_graphs_j1757, 0.002); end
  def test_lever_graphs_k1757; assert_in_epsilon(393.0, worksheet.lever_graphs_k1757, 0.002); end
  def test_lever_graphs_l1757; assert_in_epsilon(376.0, worksheet.lever_graphs_l1757, 0.002); end
  def test_lever_graphs_m1757; assert_in_epsilon(335.0, worksheet.lever_graphs_m1757, 0.002); end
  def test_lever_graphs_n1757; assert_in_epsilon(198.0, worksheet.lever_graphs_n1757, 0.002); end
  def test_lever_graphs_o1757; assert_in_delta(0.0, (worksheet.lever_graphs_o1757||0), 0.002); end
  def test_lever_graphs_p1757; assert_in_delta(0.0, (worksheet.lever_graphs_p1757||0), 0.002); end
  def test_lever_graphs_q1757; assert_in_delta(0.0, (worksheet.lever_graphs_q1757||0), 0.002); end
  def test_lever_graphs_r1757; assert_in_delta(0.0, (worksheet.lever_graphs_r1757||0), 0.002); end
  def test_lever_graphs_b1758; assert_in_epsilon(2.0, worksheet.lever_graphs_b1758, 0.002); end
  def test_lever_graphs_j1758; assert_in_epsilon(233.57, worksheet.lever_graphs_j1758, 0.002); end
  def test_lever_graphs_k1758; assert_in_epsilon(428.0, worksheet.lever_graphs_k1758, 0.002); end
  def test_lever_graphs_l1758; assert_in_epsilon(564.0, worksheet.lever_graphs_l1758, 0.002); end
  def test_lever_graphs_m1758; assert_in_epsilon(607.0, worksheet.lever_graphs_m1758, 0.002); end
  def test_lever_graphs_n1758; assert_in_epsilon(741.0, worksheet.lever_graphs_n1758, 0.002); end
  def test_lever_graphs_o1758; assert_in_epsilon(878.0, worksheet.lever_graphs_o1758, 0.002); end
  def test_lever_graphs_p1758; assert_in_epsilon(1068.0, worksheet.lever_graphs_p1758, 0.002); end
  def test_lever_graphs_q1758; assert_in_epsilon(1499.0, worksheet.lever_graphs_q1758, 0.002); end
  def test_lever_graphs_r1758; assert_in_epsilon(1862.0, worksheet.lever_graphs_r1758, 0.002); end
  def test_lever_graphs_b1759; assert_in_epsilon(3.0, worksheet.lever_graphs_b1759, 0.002); end
  def test_lever_graphs_j1759; assert_in_epsilon(233.57, worksheet.lever_graphs_j1759, 0.002); end
  def test_lever_graphs_k1759; assert_in_epsilon(466.0, worksheet.lever_graphs_k1759, 0.002); end
  def test_lever_graphs_l1759; assert_in_epsilon(778.0, worksheet.lever_graphs_l1759, 0.002); end
  def test_lever_graphs_m1759; assert_in_epsilon(982.0, worksheet.lever_graphs_m1759, 0.002); end
  def test_lever_graphs_n1759; assert_in_epsilon(1466.0, worksheet.lever_graphs_n1759, 0.002); end
  def test_lever_graphs_o1759; assert_in_epsilon(1945.0, worksheet.lever_graphs_o1759, 0.002); end
  def test_lever_graphs_p1759; assert_in_epsilon(2369.0, worksheet.lever_graphs_p1759, 0.002); end
  def test_lever_graphs_q1759; assert_in_epsilon(3037.0, worksheet.lever_graphs_q1759, 0.002); end
  def test_lever_graphs_r1759; assert_in_epsilon(3800.0, worksheet.lever_graphs_r1759, 0.002); end
  def test_lever_graphs_b1760; assert_in_epsilon(4.0, worksheet.lever_graphs_b1760, 0.002); end
  def test_lever_graphs_j1760; assert_in_epsilon(233.57, worksheet.lever_graphs_j1760, 0.002); end
  def test_lever_graphs_k1760; assert_in_epsilon(511.0, worksheet.lever_graphs_k1760, 0.002); end
  def test_lever_graphs_l1760; assert_in_epsilon(1073.0, worksheet.lever_graphs_l1760, 0.002); end
  def test_lever_graphs_m1760; assert_in_epsilon(1576.0, worksheet.lever_graphs_m1760, 0.002); end
  def test_lever_graphs_n1760; assert_in_epsilon(2316.0, worksheet.lever_graphs_n1760, 0.002); end
  def test_lever_graphs_o1760; assert_in_epsilon(3100.0, worksheet.lever_graphs_o1760, 0.002); end
  def test_lever_graphs_p1760; assert_in_epsilon(4149.0, worksheet.lever_graphs_p1760, 0.002); end
  def test_lever_graphs_q1760; assert_in_epsilon(4581.0, worksheet.lever_graphs_q1760, 0.002); end
  def test_lever_graphs_r1760; assert_in_epsilon(5058.0, worksheet.lever_graphs_r1760, 0.002); end
  def test_lever_graphs_b1761; assert_equal("Comparator A", worksheet.lever_graphs_b1761); end
  def test_lever_graphs_b1762; assert_equal("Comparator B", worksheet.lever_graphs_b1762); end
  def test_lever_graphs_b1763; assert_equal("Comparator C", worksheet.lever_graphs_b1763); end
  def test_lever_graphs_c1731; assert_equal("1975", worksheet.lever_graphs_c1731); end
  def test_lever_graphs_d1731; assert_equal("1980", worksheet.lever_graphs_d1731); end
  def test_lever_graphs_e1731; assert_equal("1985", worksheet.lever_graphs_e1731); end
  def test_lever_graphs_f1731; assert_equal("1990", worksheet.lever_graphs_f1731); end
  def test_lever_graphs_g1731; assert_equal("1995", worksheet.lever_graphs_g1731); end
  def test_lever_graphs_h1731; assert_equal("2000", worksheet.lever_graphs_h1731); end
  def test_lever_graphs_i1731; assert_equal("2005", worksheet.lever_graphs_i1731); end
  def test_lever_graphs_j1731; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1731, 0.002); end
  def test_lever_graphs_k1731; assert_equal("2015", worksheet.lever_graphs_k1731); end
  def test_lever_graphs_l1731; assert_equal("2020", worksheet.lever_graphs_l1731); end
  def test_lever_graphs_m1731; assert_equal("2025", worksheet.lever_graphs_m1731); end
  def test_lever_graphs_n1731; assert_equal("2030", worksheet.lever_graphs_n1731); end
  def test_lever_graphs_o1731; assert_equal("2035", worksheet.lever_graphs_o1731); end
  def test_lever_graphs_p1731; assert_equal("2040", worksheet.lever_graphs_p1731); end
  def test_lever_graphs_q1731; assert_equal("2045", worksheet.lever_graphs_q1731); end
  def test_lever_graphs_r1731; assert_equal("2050", worksheet.lever_graphs_r1731); end
  def test_lever_graphs_b1732; assert_equal("Historic data", worksheet.lever_graphs_b1732); end
  def test_lever_graphs_b1733; assert_in_delta(1.0, worksheet.lever_graphs_b1733, 0.002); end
  def test_lever_graphs_j1733; assert_in_epsilon(69.69, worksheet.lever_graphs_j1733, 0.002); end
  def test_lever_graphs_k1733; assert_in_epsilon(144.5, worksheet.lever_graphs_k1733, 0.002); end
  def test_lever_graphs_l1733; assert_in_epsilon(110.0, worksheet.lever_graphs_l1733, 0.002); end
  def test_lever_graphs_m1733; assert_in_epsilon(85.0, worksheet.lever_graphs_m1733, 0.002); end
  def test_lever_graphs_n1733; assert_in_epsilon(55.0, worksheet.lever_graphs_n1733, 0.002); end
  def test_lever_graphs_o1733; assert_in_epsilon(35.0, worksheet.lever_graphs_o1733, 0.002); end
  def test_lever_graphs_p1733; assert_in_delta(0.0, (worksheet.lever_graphs_p1733||0), 0.002); end
  def test_lever_graphs_q1733; assert_in_delta(0.0, (worksheet.lever_graphs_q1733||0), 0.002); end
  def test_lever_graphs_r1733; assert_in_delta(0.0, (worksheet.lever_graphs_r1733||0), 0.002); end
  def test_lever_graphs_b1734; assert_in_epsilon(2.0, worksheet.lever_graphs_b1734, 0.002); end
  def test_lever_graphs_j1734; assert_in_epsilon(69.69, worksheet.lever_graphs_j1734, 0.002); end
  def test_lever_graphs_k1734; assert_in_epsilon(144.5, worksheet.lever_graphs_k1734, 0.002); end
  def test_lever_graphs_l1734; assert_in_epsilon(207.46, worksheet.lever_graphs_l1734, 0.002); end
  def test_lever_graphs_m1734; assert_in_epsilon(297.83, worksheet.lever_graphs_m1734, 0.002); end
  def test_lever_graphs_n1734; assert_in_epsilon(427.58, worksheet.lever_graphs_n1734, 0.002); end
  def test_lever_graphs_o1734; assert_in_epsilon(613.85, worksheet.lever_graphs_o1734, 0.002); end
  def test_lever_graphs_p1734; assert_in_epsilon(881.26, worksheet.lever_graphs_p1734, 0.002); end
  def test_lever_graphs_q1734; assert_in_epsilon(1265.17, worksheet.lever_graphs_q1734, 0.002); end
  def test_lever_graphs_r1734; assert_in_epsilon(1816.31, worksheet.lever_graphs_r1734, 0.002); end
  def test_lever_graphs_b1735; assert_in_epsilon(3.0, worksheet.lever_graphs_b1735, 0.002); end
  def test_lever_graphs_j1735; assert_in_epsilon(69.69, worksheet.lever_graphs_j1735, 0.002); end
  def test_lever_graphs_k1735; assert_in_epsilon(144.5, worksheet.lever_graphs_k1735, 0.002); end
  def test_lever_graphs_l1735; assert_in_epsilon(238.28, worksheet.lever_graphs_l1735, 0.002); end
  def test_lever_graphs_m1735; assert_in_epsilon(392.92, worksheet.lever_graphs_m1735, 0.002); end
  def test_lever_graphs_n1735; assert_in_epsilon(647.9, worksheet.lever_graphs_n1735, 0.002); end
  def test_lever_graphs_o1735; assert_in_epsilon(1068.34, worksheet.lever_graphs_o1735, 0.002); end
  def test_lever_graphs_p1735; assert_in_epsilon(1761.64, worksheet.lever_graphs_p1735, 0.002); end
  def test_lever_graphs_q1735; assert_in_epsilon(2357.47, worksheet.lever_graphs_q1735, 0.002); end
  def test_lever_graphs_r1735; assert_in_epsilon(3154.83, worksheet.lever_graphs_r1735, 0.002); end
  def test_lever_graphs_b1736; assert_in_epsilon(4.0, worksheet.lever_graphs_b1736, 0.002); end
  def test_lever_graphs_j1736; assert_in_epsilon(69.69, worksheet.lever_graphs_j1736, 0.002); end
  def test_lever_graphs_k1736; assert_in_epsilon(167.43, worksheet.lever_graphs_k1736, 0.002); end
  def test_lever_graphs_l1736; assert_in_epsilon(312.6, worksheet.lever_graphs_l1736, 0.002); end
  def test_lever_graphs_m1736; assert_in_epsilon(583.64, worksheet.lever_graphs_m1736, 0.002); end
  def test_lever_graphs_n1736; assert_in_epsilon(1089.67, worksheet.lever_graphs_n1736, 0.002); end
  def test_lever_graphs_o1736; assert_in_epsilon(1835.7, worksheet.lever_graphs_o1736, 0.002); end
  def test_lever_graphs_p1736; assert_in_epsilon(3093.3, worksheet.lever_graphs_p1736, 0.002); end
  def test_lever_graphs_q1736; assert_in_epsilon(4139.5, worksheet.lever_graphs_q1736, 0.002); end
  def test_lever_graphs_r1736; assert_in_epsilon(5539.6, worksheet.lever_graphs_r1736, 0.002); end
  def test_lever_graphs_b1737; assert_equal("Comparator A", worksheet.lever_graphs_b1737); end
  def test_lever_graphs_b1738; assert_equal("Comparator B", worksheet.lever_graphs_b1738); end
  def test_lever_graphs_b1739; assert_equal("Comparator C", worksheet.lever_graphs_b1739); end
  def test_lever_graphs_c1833; assert_equal("1975", worksheet.lever_graphs_c1833); end
  def test_lever_graphs_d1833; assert_equal("1980", worksheet.lever_graphs_d1833); end
  def test_lever_graphs_e1833; assert_equal("1985", worksheet.lever_graphs_e1833); end
  def test_lever_graphs_f1833; assert_equal("1990", worksheet.lever_graphs_f1833); end
  def test_lever_graphs_g1833; assert_equal("1995", worksheet.lever_graphs_g1833); end
  def test_lever_graphs_h1833; assert_equal("2000", worksheet.lever_graphs_h1833); end
  def test_lever_graphs_i1833; assert_equal("2005", worksheet.lever_graphs_i1833); end
  def test_lever_graphs_j1833; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1833, 0.002); end
  def test_lever_graphs_k1833; assert_equal("2015", worksheet.lever_graphs_k1833); end
  def test_lever_graphs_l1833; assert_equal("2020", worksheet.lever_graphs_l1833); end
  def test_lever_graphs_m1833; assert_equal("2025", worksheet.lever_graphs_m1833); end
  def test_lever_graphs_n1833; assert_equal("2030", worksheet.lever_graphs_n1833); end
  def test_lever_graphs_o1833; assert_equal("2035", worksheet.lever_graphs_o1833); end
  def test_lever_graphs_p1833; assert_equal("2040", worksheet.lever_graphs_p1833); end
  def test_lever_graphs_q1833; assert_equal("2045", worksheet.lever_graphs_q1833); end
  def test_lever_graphs_r1833; assert_equal("2050", worksheet.lever_graphs_r1833); end
  def test_lever_graphs_b1834; assert_equal("Historic data", worksheet.lever_graphs_b1834); end
  def test_lever_graphs_b1835; assert_in_delta(1.0, worksheet.lever_graphs_b1835, 0.002); end
  def test_lever_graphs_j1835; assert_in_epsilon(120.0, worksheet.lever_graphs_j1835, 0.002); end
  def test_lever_graphs_k1835; assert_in_epsilon(123.6, worksheet.lever_graphs_k1835, 0.002); end
  def test_lever_graphs_l1835; assert_in_epsilon(127.3, worksheet.lever_graphs_l1835, 0.002); end
  def test_lever_graphs_m1835; assert_in_epsilon(131.1, worksheet.lever_graphs_m1835, 0.002); end
  def test_lever_graphs_n1835; assert_in_epsilon(135.0, worksheet.lever_graphs_n1835, 0.002); end
  def test_lever_graphs_o1835; assert_in_epsilon(139.1, worksheet.lever_graphs_o1835, 0.002); end
  def test_lever_graphs_p1835; assert_in_epsilon(143.3, worksheet.lever_graphs_p1835, 0.002); end
  def test_lever_graphs_q1835; assert_in_epsilon(147.6, worksheet.lever_graphs_q1835, 0.002); end
  def test_lever_graphs_r1835; assert_in_epsilon(152.0, worksheet.lever_graphs_r1835, 0.002); end
  def test_lever_graphs_b1836; assert_in_epsilon(2.0, worksheet.lever_graphs_b1836, 0.002); end
  def test_lever_graphs_j1836; assert_in_epsilon(120.0, worksheet.lever_graphs_j1836, 0.002); end
  def test_lever_graphs_k1836; assert_in_epsilon(146.4, worksheet.lever_graphs_k1836, 0.002); end
  def test_lever_graphs_l1836; assert_in_epsilon(178.6, worksheet.lever_graphs_l1836, 0.002); end
  def test_lever_graphs_m1836; assert_in_epsilon(202.2, worksheet.lever_graphs_m1836, 0.002); end
  def test_lever_graphs_n1836; assert_in_epsilon(245.1, worksheet.lever_graphs_n1836, 0.002); end
  def test_lever_graphs_o1836; assert_in_epsilon(278.2, worksheet.lever_graphs_o1836, 0.002); end
  def test_lever_graphs_p1836; assert_in_epsilon(305.7, worksheet.lever_graphs_p1836, 0.002); end
  def test_lever_graphs_q1836; assert_in_epsilon(355.3, worksheet.lever_graphs_q1836, 0.002); end
  def test_lever_graphs_r1836; assert_in_epsilon(403.0, worksheet.lever_graphs_r1836, 0.002); end
  def test_lever_graphs_b1837; assert_in_epsilon(3.0, worksheet.lever_graphs_b1837, 0.002); end
  def test_lever_graphs_j1837; assert_in_epsilon(120.0, worksheet.lever_graphs_j1837, 0.002); end
  def test_lever_graphs_k1837; assert_in_epsilon(152.4, worksheet.lever_graphs_k1837, 0.002); end
  def test_lever_graphs_l1837; assert_in_epsilon(193.5, worksheet.lever_graphs_l1837, 0.002); end
  def test_lever_graphs_m1837; assert_in_epsilon(245.7, worksheet.lever_graphs_m1837, 0.002); end
  def test_lever_graphs_n1837; assert_in_epsilon(312.0, worksheet.lever_graphs_n1837, 0.002); end
  def test_lever_graphs_o1837; assert_in_epsilon(396.2, worksheet.lever_graphs_o1837, 0.002); end
  def test_lever_graphs_p1837; assert_in_epsilon(503.2, worksheet.lever_graphs_p1837, 0.002); end
  def test_lever_graphs_q1837; assert_in_epsilon(639.1, worksheet.lever_graphs_q1837, 0.002); end
  def test_lever_graphs_r1837; assert_in_epsilon(800.0, worksheet.lever_graphs_r1837, 0.002); end
  def test_lever_graphs_b1838; assert_in_epsilon(4.0, worksheet.lever_graphs_b1838, 0.002); end
  def test_lever_graphs_j1838; assert_in_epsilon(120.0, worksheet.lever_graphs_j1838, 0.002); end
  def test_lever_graphs_k1838; assert_in_epsilon(159.6, worksheet.lever_graphs_k1838, 0.002); end
  def test_lever_graphs_l1838; assert_in_epsilon(212.3, worksheet.lever_graphs_l1838, 0.002); end
  def test_lever_graphs_m1838; assert_in_epsilon(282.4, worksheet.lever_graphs_m1838, 0.002); end
  def test_lever_graphs_n1838; assert_in_epsilon(375.6, worksheet.lever_graphs_n1838, 0.002); end
  def test_lever_graphs_o1838; assert_in_epsilon(499.5, worksheet.lever_graphs_o1838, 0.002); end
  def test_lever_graphs_p1838; assert_in_epsilon(664.3, worksheet.lever_graphs_p1838, 0.002); end
  def test_lever_graphs_q1838; assert_in_epsilon(883.5, worksheet.lever_graphs_q1838, 0.002); end
  def test_lever_graphs_r1838; assert_in_epsilon(1200.0, worksheet.lever_graphs_r1838, 0.002); end
  def test_lever_graphs_b1839; assert_equal("Comparator A", worksheet.lever_graphs_b1839); end
  def test_lever_graphs_b1840; assert_equal("Comparator B", worksheet.lever_graphs_b1840); end
  def test_lever_graphs_b1841; assert_equal("Comparator C", worksheet.lever_graphs_b1841); end
  def test_lever_graphs_c1545; assert_equal("1975", worksheet.lever_graphs_c1545); end
  def test_lever_graphs_d1545; assert_equal("1980", worksheet.lever_graphs_d1545); end
  def test_lever_graphs_e1545; assert_equal("1985", worksheet.lever_graphs_e1545); end
  def test_lever_graphs_f1545; assert_equal("1990", worksheet.lever_graphs_f1545); end
  def test_lever_graphs_g1545; assert_equal("1995", worksheet.lever_graphs_g1545); end
  def test_lever_graphs_h1545; assert_equal("2000", worksheet.lever_graphs_h1545); end
  def test_lever_graphs_i1545; assert_equal("2005", worksheet.lever_graphs_i1545); end
  def test_lever_graphs_j1545; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1545, 0.002); end
  def test_lever_graphs_k1545; assert_equal("2015", worksheet.lever_graphs_k1545); end
  def test_lever_graphs_l1545; assert_equal("2020", worksheet.lever_graphs_l1545); end
  def test_lever_graphs_m1545; assert_equal("2025", worksheet.lever_graphs_m1545); end
  def test_lever_graphs_n1545; assert_equal("2030", worksheet.lever_graphs_n1545); end
  def test_lever_graphs_o1545; assert_equal("2035", worksheet.lever_graphs_o1545); end
  def test_lever_graphs_p1545; assert_equal("2040", worksheet.lever_graphs_p1545); end
  def test_lever_graphs_q1545; assert_equal("2045", worksheet.lever_graphs_q1545); end
  def test_lever_graphs_r1545; assert_equal("2050", worksheet.lever_graphs_r1545); end
  def test_lever_graphs_b1546; assert_equal("Historic data", worksheet.lever_graphs_b1546); end
  def test_lever_graphs_b1547; assert_in_delta(1.0, worksheet.lever_graphs_b1547, 0.002); end
  def test_lever_graphs_j1547; assert_in_delta(0.0, (worksheet.lever_graphs_j1547||0), 0.002); end
  def test_lever_graphs_k1547; assert_in_delta(0.0, (worksheet.lever_graphs_k1547||0), 0.002); end
  def test_lever_graphs_l1547; assert_in_delta(0.0, (worksheet.lever_graphs_l1547||0), 0.002); end
  def test_lever_graphs_m1547; assert_in_delta(0.0, (worksheet.lever_graphs_m1547||0), 0.002); end
  def test_lever_graphs_n1547; assert_in_delta(0.0, (worksheet.lever_graphs_n1547||0), 0.002); end
  def test_lever_graphs_o1547; assert_in_delta(0.0, (worksheet.lever_graphs_o1547||0), 0.002); end
  def test_lever_graphs_p1547; assert_in_delta(0.0, (worksheet.lever_graphs_p1547||0), 0.002); end
  def test_lever_graphs_q1547; assert_in_delta(0.0, (worksheet.lever_graphs_q1547||0), 0.002); end
  def test_lever_graphs_r1547; assert_in_delta(0.0, (worksheet.lever_graphs_r1547||0), 0.002); end
  def test_lever_graphs_b1548; assert_in_epsilon(2.0, worksheet.lever_graphs_b1548, 0.002); end
  def test_lever_graphs_j1548; assert_in_delta(0.0, (worksheet.lever_graphs_j1548||0), 0.002); end
  def test_lever_graphs_k1548; assert_in_delta(0.0, (worksheet.lever_graphs_k1548||0), 0.002); end
  def test_lever_graphs_l1548; assert_in_delta(0.0, (worksheet.lever_graphs_l1548||0), 0.002); end
  def test_lever_graphs_m1548; assert_in_delta(0.0, (worksheet.lever_graphs_m1548||0), 0.002); end
  def test_lever_graphs_n1548; assert_in_delta(0.0, (worksheet.lever_graphs_n1548||0), 0.002); end
  def test_lever_graphs_o1548; assert_in_delta(0.0, (worksheet.lever_graphs_o1548||0), 0.002); end
  def test_lever_graphs_p1548; assert_in_delta(0.0, (worksheet.lever_graphs_p1548||0), 0.002); end
  def test_lever_graphs_q1548; assert_in_delta(0.0, (worksheet.lever_graphs_q1548||0), 0.002); end
  def test_lever_graphs_r1548; assert_in_delta(0.2, worksheet.lever_graphs_r1548, 0.002); end
  def test_lever_graphs_b1549; assert_in_epsilon(3.0, worksheet.lever_graphs_b1549, 0.002); end
  def test_lever_graphs_j1549; assert_in_delta(0.0, (worksheet.lever_graphs_j1549||0), 0.002); end
  def test_lever_graphs_k1549; assert_in_delta(0.0, (worksheet.lever_graphs_k1549||0), 0.002); end
  def test_lever_graphs_l1549; assert_in_delta(0.0, (worksheet.lever_graphs_l1549||0), 0.002); end
  def test_lever_graphs_m1549; assert_in_delta(0.0, (worksheet.lever_graphs_m1549||0), 0.002); end
  def test_lever_graphs_n1549; assert_in_delta(0.07200000000000001, worksheet.lever_graphs_n1549, 0.002); end
  def test_lever_graphs_o1549; assert_in_delta(0.14400000000000002, worksheet.lever_graphs_o1549, 0.002); end
  def test_lever_graphs_p1549; assert_in_delta(0.21600000000000003, worksheet.lever_graphs_p1549, 0.002); end
  def test_lever_graphs_q1549; assert_in_delta(0.28800000000000003, worksheet.lever_graphs_q1549, 0.002); end
  def test_lever_graphs_r1549; assert_in_delta(0.36000000000000004, worksheet.lever_graphs_r1549, 0.002); end
  def test_lever_graphs_b1550; assert_in_epsilon(4.0, worksheet.lever_graphs_b1550, 0.002); end
  def test_lever_graphs_j1550; assert_in_delta(0.0, (worksheet.lever_graphs_j1550||0), 0.002); end
  def test_lever_graphs_k1550; assert_in_delta(0.0, (worksheet.lever_graphs_k1550||0), 0.002); end
  def test_lever_graphs_l1550; assert_in_delta(0.0, (worksheet.lever_graphs_l1550||0), 0.002); end
  def test_lever_graphs_m1550; assert_in_delta(0.0, (worksheet.lever_graphs_m1550||0), 0.002); end
  def test_lever_graphs_n1550; assert_in_delta(0.16, worksheet.lever_graphs_n1550, 0.002); end
  def test_lever_graphs_o1550; assert_in_delta(0.32, worksheet.lever_graphs_o1550, 0.002); end
  def test_lever_graphs_p1550; assert_in_delta(0.48, worksheet.lever_graphs_p1550, 0.002); end
  def test_lever_graphs_q1550; assert_in_delta(0.64, worksheet.lever_graphs_q1550, 0.002); end
  def test_lever_graphs_r1550; assert_in_delta(0.8, worksheet.lever_graphs_r1550, 0.002); end
  def test_lever_graphs_b1551; assert_equal("Comparator A", worksheet.lever_graphs_b1551); end
  def test_lever_graphs_b1552; assert_equal("Comparator B", worksheet.lever_graphs_b1552); end
  def test_lever_graphs_b1553; assert_equal("Comparator C", worksheet.lever_graphs_b1553); end
  def test_lever_graphs_d1534; assert_equal("Title", worksheet.lever_graphs_d1534); end
  def test_lever_graphs_e1534; assert_equal("Steel.Oxygen", worksheet.lever_graphs_e1534); end
  def test_lever_graphs_f1534; assert_equal("Chemicals & petrochemicals.HVC", worksheet.lever_graphs_f1534); end
  def test_lever_graphs_g1534; assert_equal("Pulp & paper.Pulp", worksheet.lever_graphs_g1534); end
  def test_lever_graphs_h1534; assert_equal("Cement", worksheet.lever_graphs_h1534); end
  def test_lever_graphs_i1534; assert_equal("Timber", worksheet.lever_graphs_i1534); end
  def test_lever_graphs_d1535; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1535, 0.002); end
  def test_lever_graphs_e1535; assert_in_delta(0.0, (worksheet.lever_graphs_e1535||0), 0.002); end
  def test_lever_graphs_f1535; assert_in_delta(0.0, (worksheet.lever_graphs_f1535||0), 0.002); end
  def test_lever_graphs_g1535; assert_in_delta(0.0, (worksheet.lever_graphs_g1535||0), 0.002); end
  def test_lever_graphs_h1535; assert_in_delta(0.0, (worksheet.lever_graphs_h1535||0), 0.002); end
  def test_lever_graphs_i1535; assert_in_delta(0.0, (worksheet.lever_graphs_i1535||0), 0.002); end
  def test_lever_graphs_d1536; assert_equal("2050: Level 1", worksheet.lever_graphs_d1536); end
  def test_lever_graphs_e1536; assert_in_delta(0.0, (worksheet.lever_graphs_e1536||0), 0.002); end
  def test_lever_graphs_f1536; assert_in_delta(0.0, (worksheet.lever_graphs_f1536||0), 0.002); end
  def test_lever_graphs_g1536; assert_in_delta(0.0, (worksheet.lever_graphs_g1536||0), 0.002); end
  def test_lever_graphs_h1536; assert_in_delta(0.0, (worksheet.lever_graphs_h1536||0), 0.002); end
  def test_lever_graphs_i1536; assert_in_delta(0.0, (worksheet.lever_graphs_i1536||0), 0.002); end
  def test_lever_graphs_d1537; assert_equal("2050: Level 2", worksheet.lever_graphs_d1537); end
  def test_lever_graphs_e1537; assert_in_delta(0.2, worksheet.lever_graphs_e1537, 0.002); end
  def test_lever_graphs_f1537; assert_in_delta(0.0, (worksheet.lever_graphs_f1537||0), 0.002); end
  def test_lever_graphs_g1537; assert_in_delta(0.425, worksheet.lever_graphs_g1537, 0.002); end
  def test_lever_graphs_h1537; assert_in_delta(0.425, worksheet.lever_graphs_h1537, 0.002); end
  def test_lever_graphs_i1537; assert_in_delta(0.0, (worksheet.lever_graphs_i1537||0), 0.002); end
  def test_lever_graphs_d1538; assert_equal("2050: Level 3", worksheet.lever_graphs_d1538); end
  def test_lever_graphs_e1538; assert_in_delta(0.36000000000000004, worksheet.lever_graphs_e1538, 0.002); end
  def test_lever_graphs_f1538; assert_in_delta(0.5, worksheet.lever_graphs_f1538, 0.002); end
  def test_lever_graphs_g1538; assert_in_delta(0.6375, worksheet.lever_graphs_g1538, 0.002); end
  def test_lever_graphs_h1538; assert_in_delta(0.6375, worksheet.lever_graphs_h1538, 0.002); end
  def test_lever_graphs_i1538; assert_in_delta(0.0, (worksheet.lever_graphs_i1538||0), 0.002); end
  def test_lever_graphs_d1539; assert_equal("2050: Level 4", worksheet.lever_graphs_d1539); end
  def test_lever_graphs_e1539; assert_in_delta(0.8, worksheet.lever_graphs_e1539, 0.002); end
  def test_lever_graphs_f1539; assert_in_delta(0.62, worksheet.lever_graphs_f1539, 0.002); end
  def test_lever_graphs_g1539; assert_in_delta(0.85, worksheet.lever_graphs_g1539, 0.002); end
  def test_lever_graphs_h1539; assert_in_delta(0.85, worksheet.lever_graphs_h1539, 0.002); end
  def test_lever_graphs_i1539; assert_in_delta(0.3, worksheet.lever_graphs_i1539, 0.002); end
  def test_lever_graphs_c2209; assert_equal("1975", worksheet.lever_graphs_c2209); end
  def test_lever_graphs_d2209; assert_equal("1980", worksheet.lever_graphs_d2209); end
  def test_lever_graphs_e2209; assert_equal("1985", worksheet.lever_graphs_e2209); end
  def test_lever_graphs_f2209; assert_equal("1990", worksheet.lever_graphs_f2209); end
  def test_lever_graphs_g2209; assert_equal("1995", worksheet.lever_graphs_g2209); end
  def test_lever_graphs_h2209; assert_equal("2000", worksheet.lever_graphs_h2209); end
  def test_lever_graphs_i2209; assert_equal("2005", worksheet.lever_graphs_i2209); end
  def test_lever_graphs_j2209; assert_equal("2011", worksheet.lever_graphs_j2209); end
  def test_lever_graphs_k2209; assert_equal("2015", worksheet.lever_graphs_k2209); end
  def test_lever_graphs_l2209; assert_equal("2020", worksheet.lever_graphs_l2209); end
  def test_lever_graphs_m2209; assert_equal("2025", worksheet.lever_graphs_m2209); end
  def test_lever_graphs_n2209; assert_equal("2030", worksheet.lever_graphs_n2209); end
  def test_lever_graphs_o2209; assert_equal("2035", worksheet.lever_graphs_o2209); end
  def test_lever_graphs_p2209; assert_equal("2040", worksheet.lever_graphs_p2209); end
  def test_lever_graphs_q2209; assert_equal("2045", worksheet.lever_graphs_q2209); end
  def test_lever_graphs_r2209; assert_equal("2050", worksheet.lever_graphs_r2209); end
  def test_lever_graphs_b2210; assert_equal("Historic data", worksheet.lever_graphs_b2210); end
  def test_lever_graphs_b2211; assert_in_delta(1.0, worksheet.lever_graphs_b2211, 0.002); end
  def test_lever_graphs_j2211; assert_in_epsilon(5040.0, worksheet.lever_graphs_j2211, 0.002); end
  def test_lever_graphs_k2211; assert_in_epsilon(5003.076923076923, worksheet.lever_graphs_k2211, 0.002); end
  def test_lever_graphs_l2211; assert_in_epsilon(4956.923076923078, worksheet.lever_graphs_l2211, 0.002); end
  def test_lever_graphs_m2211; assert_in_epsilon(4910.769230769231, worksheet.lever_graphs_m2211, 0.002); end
  def test_lever_graphs_n2211; assert_in_epsilon(4864.615384615385, worksheet.lever_graphs_n2211, 0.002); end
  def test_lever_graphs_o2211; assert_in_epsilon(4818.461538461539, worksheet.lever_graphs_o2211, 0.002); end
  def test_lever_graphs_p2211; assert_in_epsilon(4772.307692307693, worksheet.lever_graphs_p2211, 0.002); end
  def test_lever_graphs_q2211; assert_in_epsilon(4726.153846153847, worksheet.lever_graphs_q2211, 0.002); end
  def test_lever_graphs_r2211; assert_in_epsilon(4680.000000000001, worksheet.lever_graphs_r2211, 0.002); end
  def test_lever_graphs_b2212; assert_in_epsilon(2.0, worksheet.lever_graphs_b2212, 0.002); end
  def test_lever_graphs_j2212; assert_in_epsilon(5040.0, worksheet.lever_graphs_j2212, 0.002); end
  def test_lever_graphs_k2212; assert_in_epsilon(4966.153846153846, worksheet.lever_graphs_k2212, 0.002); end
  def test_lever_graphs_l2212; assert_in_epsilon(4873.846153846154, worksheet.lever_graphs_l2212, 0.002); end
  def test_lever_graphs_m2212; assert_in_epsilon(4781.538461538462, worksheet.lever_graphs_m2212, 0.002); end
  def test_lever_graphs_n2212; assert_in_epsilon(4689.2307692307695, worksheet.lever_graphs_n2212, 0.002); end
  def test_lever_graphs_o2212; assert_in_epsilon(4596.923076923077, worksheet.lever_graphs_o2212, 0.002); end
  def test_lever_graphs_p2212; assert_in_epsilon(4504.615384615385, worksheet.lever_graphs_p2212, 0.002); end
  def test_lever_graphs_q2212; assert_in_epsilon(4412.307692307692, worksheet.lever_graphs_q2212, 0.002); end
  def test_lever_graphs_r2212; assert_in_epsilon(4320.0, worksheet.lever_graphs_r2212, 0.002); end
  def test_lever_graphs_b2213; assert_in_epsilon(3.0, worksheet.lever_graphs_b2213, 0.002); end
  def test_lever_graphs_j2213; assert_in_epsilon(5040.0, worksheet.lever_graphs_j2213, 0.002); end
  def test_lever_graphs_k2213; assert_in_epsilon(4929.230769230769, worksheet.lever_graphs_k2213, 0.002); end
  def test_lever_graphs_l2213; assert_in_epsilon(4790.769230769231, worksheet.lever_graphs_l2213, 0.002); end
  def test_lever_graphs_m2213; assert_in_epsilon(4652.307692307692, worksheet.lever_graphs_m2213, 0.002); end
  def test_lever_graphs_n2213; assert_in_epsilon(4513.846153846154, worksheet.lever_graphs_n2213, 0.002); end
  def test_lever_graphs_o2213; assert_in_epsilon(4375.384615384616, worksheet.lever_graphs_o2213, 0.002); end
  def test_lever_graphs_p2213; assert_in_epsilon(4236.923076923077, worksheet.lever_graphs_p2213, 0.002); end
  def test_lever_graphs_q2213; assert_in_epsilon(4098.461538461539, worksheet.lever_graphs_q2213, 0.002); end
  def test_lever_graphs_r2213; assert_in_epsilon(3960.0000000000005, worksheet.lever_graphs_r2213, 0.002); end
  def test_lever_graphs_b2214; assert_in_epsilon(4.0, worksheet.lever_graphs_b2214, 0.002); end
  def test_lever_graphs_j2214; assert_in_epsilon(5040.0, worksheet.lever_graphs_j2214, 0.002); end
  def test_lever_graphs_k2214; assert_in_epsilon(4892.307692307692, worksheet.lever_graphs_k2214, 0.002); end
  def test_lever_graphs_l2214; assert_in_epsilon(4707.692307692308, worksheet.lever_graphs_l2214, 0.002); end
  def test_lever_graphs_m2214; assert_in_epsilon(4523.076923076923, worksheet.lever_graphs_m2214, 0.002); end
  def test_lever_graphs_n2214; assert_in_epsilon(4338.461538461538, worksheet.lever_graphs_n2214, 0.002); end
  def test_lever_graphs_o2214; assert_in_epsilon(4153.846153846154, worksheet.lever_graphs_o2214, 0.002); end
  def test_lever_graphs_p2214; assert_in_epsilon(3969.2307692307695, worksheet.lever_graphs_p2214, 0.002); end
  def test_lever_graphs_q2214; assert_in_epsilon(3784.6153846153848, worksheet.lever_graphs_q2214, 0.002); end
  def test_lever_graphs_r2214; assert_in_epsilon(3600.0, worksheet.lever_graphs_r2214, 0.002); end
  def test_lever_graphs_d2219; assert_equal("Title", worksheet.lever_graphs_d2219); end
  def test_lever_graphs_e2219; assert_equal("Global urban solid stoves used by people with access to electricity", worksheet.lever_graphs_e2219); end
  def test_lever_graphs_f2219; assert_equal("Global urban liquid stoves used by people with access to electricity", worksheet.lever_graphs_f2219); end
  def test_lever_graphs_g2219; assert_equal("Global urban gas stoves used by people with access to electricity", worksheet.lever_graphs_g2219); end
  def test_lever_graphs_h2219; assert_equal("Global urban electricity stoves used by people with access to electricity", worksheet.lever_graphs_h2219); end
  def test_lever_graphs_i2219; assert_equal("Global urban traditional biomass boiler used by people with access to electricity", worksheet.lever_graphs_i2219); end
  def test_lever_graphs_d2220; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2220, 0.002); end
  def test_lever_graphs_e2220; assert_in_delta(0.07999999999999996, worksheet.lever_graphs_e2220, 0.002); end
  def test_lever_graphs_f2220; assert_in_delta(0.15, worksheet.lever_graphs_f2220, 0.002); end
  def test_lever_graphs_g2220; assert_in_delta(0.4, worksheet.lever_graphs_g2220, 0.002); end
  def test_lever_graphs_h2220; assert_in_delta(0.25, worksheet.lever_graphs_h2220, 0.002); end
  def test_lever_graphs_i2220; assert_in_delta(0.12, worksheet.lever_graphs_i2220, 0.002); end
  def test_lever_graphs_d2221; assert_equal("2050: Level 1", worksheet.lever_graphs_d2221); end
  def test_lever_graphs_e2221; assert_in_delta(0.07999999999999996, worksheet.lever_graphs_e2221, 0.002); end
  def test_lever_graphs_f2221; assert_in_delta(0.15, worksheet.lever_graphs_f2221, 0.002); end
  def test_lever_graphs_g2221; assert_in_delta(0.4, worksheet.lever_graphs_g2221, 0.002); end
  def test_lever_graphs_h2221; assert_in_delta(0.25, worksheet.lever_graphs_h2221, 0.002); end
  def test_lever_graphs_i2221; assert_in_delta(0.12, worksheet.lever_graphs_i2221, 0.002); end
  def test_lever_graphs_d2222; assert_equal("2050: Level 2", worksheet.lever_graphs_d2222); end
  def test_lever_graphs_e2222; assert_in_delta(0.06000000000000005, worksheet.lever_graphs_e2222, 0.002); end
  def test_lever_graphs_f2222; assert_in_delta(0.08, worksheet.lever_graphs_f2222, 0.002); end
  def test_lever_graphs_g2222; assert_in_delta(0.5, worksheet.lever_graphs_g2222, 0.002); end
  def test_lever_graphs_h2222; assert_in_delta(0.3, worksheet.lever_graphs_h2222, 0.002); end
  def test_lever_graphs_i2222; assert_in_delta(0.06, worksheet.lever_graphs_i2222, 0.002); end
  def test_lever_graphs_d2223; assert_equal("2050: Level 3", worksheet.lever_graphs_d2223); end
  def test_lever_graphs_e2223; assert_in_delta(0.040000000000000036, worksheet.lever_graphs_e2223, 0.002); end
  def test_lever_graphs_f2223; assert_in_delta(0.03, worksheet.lever_graphs_f2223, 0.002); end
  def test_lever_graphs_g2223; assert_in_delta(0.45, worksheet.lever_graphs_g2223, 0.002); end
  def test_lever_graphs_h2223; assert_in_delta(0.45, worksheet.lever_graphs_h2223, 0.002); end
  def test_lever_graphs_i2223; assert_in_delta(0.029999999999999916, worksheet.lever_graphs_i2223, 0.002); end
  def test_lever_graphs_d2224; assert_equal("2050: Level 4", worksheet.lever_graphs_d2224); end
  def test_lever_graphs_e2224; assert_in_delta(0.015000000000000013, worksheet.lever_graphs_e2224, 0.002); end
  def test_lever_graphs_f2224; assert_in_delta(0.01, worksheet.lever_graphs_f2224, 0.002); end
  def test_lever_graphs_g2224; assert_in_delta(0.4, worksheet.lever_graphs_g2224, 0.002); end
  def test_lever_graphs_h2224; assert_in_delta(0.57, worksheet.lever_graphs_h2224, 0.002); end
  def test_lever_graphs_i2224; assert_in_delta(0.0050000000000000044, worksheet.lever_graphs_i2224, 0.002); end
  def test_lever_graphs_c2589; assert_equal("1975", worksheet.lever_graphs_c2589); end
  def test_lever_graphs_d2589; assert_equal("1980", worksheet.lever_graphs_d2589); end
  def test_lever_graphs_e2589; assert_equal("1985", worksheet.lever_graphs_e2589); end
  def test_lever_graphs_f2589; assert_equal("1990", worksheet.lever_graphs_f2589); end
  def test_lever_graphs_g2589; assert_equal("1995", worksheet.lever_graphs_g2589); end
  def test_lever_graphs_h2589; assert_equal("2000", worksheet.lever_graphs_h2589); end
  def test_lever_graphs_i2589; assert_equal("2005", worksheet.lever_graphs_i2589); end
  def test_lever_graphs_j2589; assert_equal("2011", worksheet.lever_graphs_j2589); end
  def test_lever_graphs_k2589; assert_equal("2015", worksheet.lever_graphs_k2589); end
  def test_lever_graphs_l2589; assert_equal("2020", worksheet.lever_graphs_l2589); end
  def test_lever_graphs_m2589; assert_equal("2025", worksheet.lever_graphs_m2589); end
  def test_lever_graphs_n2589; assert_equal("2030", worksheet.lever_graphs_n2589); end
  def test_lever_graphs_o2589; assert_equal("2035", worksheet.lever_graphs_o2589); end
  def test_lever_graphs_p2589; assert_equal("2040", worksheet.lever_graphs_p2589); end
  def test_lever_graphs_q2589; assert_equal("2045", worksheet.lever_graphs_q2589); end
  def test_lever_graphs_r2589; assert_equal("2050", worksheet.lever_graphs_r2589); end
  def test_lever_graphs_b2590; assert_equal("Historic data", worksheet.lever_graphs_b2590); end
  def test_lever_graphs_b2591; assert_in_delta(1.0, worksheet.lever_graphs_b2591, 0.002); end
  def test_lever_graphs_j2591; assert_in_delta(0.031460901827778845, worksheet.lever_graphs_j2591, 0.002); end
  def test_lever_graphs_k2591; assert_in_delta(0.03260887623827188, worksheet.lever_graphs_k2591, 0.002); end
  def test_lever_graphs_l2591; assert_in_delta(0.03199543843923318, worksheet.lever_graphs_l2591, 0.002); end
  def test_lever_graphs_m2591; assert_in_delta(0.031382000640194474, worksheet.lever_graphs_m2591, 0.002); end
  def test_lever_graphs_n2591; assert_in_delta(0.03076856284115577, worksheet.lever_graphs_n2591, 0.002); end
  def test_lever_graphs_o2591; assert_in_delta(0.03015512504211707, worksheet.lever_graphs_o2591, 0.002); end
  def test_lever_graphs_p2591; assert_in_delta(0.029541687243078367, worksheet.lever_graphs_p2591, 0.002); end
  def test_lever_graphs_q2591; assert_in_delta(0.028928249444039662, worksheet.lever_graphs_q2591, 0.002); end
  def test_lever_graphs_r2591; assert_in_delta(0.02831481164500096, worksheet.lever_graphs_r2591, 0.002); end
  def test_lever_graphs_b2592; assert_in_epsilon(2.0, worksheet.lever_graphs_b2592, 0.002); end
  def test_lever_graphs_j2592; assert_in_delta(0.031460901827778845, worksheet.lever_graphs_j2592, 0.002); end
  def test_lever_graphs_k2592; assert_in_delta(0.03260887623827188, worksheet.lever_graphs_k2592, 0.002); end
  def test_lever_graphs_l2592; assert_in_delta(0.033793204257963394, worksheet.lever_graphs_l2592, 0.002); end
  def test_lever_graphs_m2592; assert_in_delta(0.03497753227765491, worksheet.lever_graphs_m2592, 0.002); end
  def test_lever_graphs_n2592; assert_in_delta(0.03616186029734643, worksheet.lever_graphs_n2592, 0.002); end
  def test_lever_graphs_o2592; assert_in_delta(0.03734618831703795, worksheet.lever_graphs_o2592, 0.002); end
  def test_lever_graphs_p2592; assert_in_delta(0.03853051633672946, worksheet.lever_graphs_p2592, 0.002); end
  def test_lever_graphs_q2592; assert_in_delta(0.03971484435642098, worksheet.lever_graphs_q2592, 0.002); end
  def test_lever_graphs_r2592; assert_in_delta(0.0408991723761125, worksheet.lever_graphs_r2592, 0.002); end
  def test_lever_graphs_b2593; assert_in_epsilon(3.0, worksheet.lever_graphs_b2593, 0.002); end
  def test_lever_graphs_j2593; assert_in_delta(0.031460901827778845, worksheet.lever_graphs_j2593, 0.002); end
  def test_lever_graphs_k2593; assert_in_delta(0.03260887623827188, worksheet.lever_graphs_k2593, 0.002); end
  def test_lever_graphs_l2593; assert_in_delta(0.035141528622011066, worksheet.lever_graphs_l2593, 0.002); end
  def test_lever_graphs_m2593; assert_in_delta(0.03767418100575024, worksheet.lever_graphs_m2593, 0.002); end
  def test_lever_graphs_n2593; assert_in_delta(0.040206833389489424, worksheet.lever_graphs_n2593, 0.002); end
  def test_lever_graphs_o2593; assert_in_delta(0.04273948577322861, worksheet.lever_graphs_o2593, 0.002); end
  def test_lever_graphs_p2593; assert_in_delta(0.04527213815696779, worksheet.lever_graphs_p2593, 0.002); end
  def test_lever_graphs_q2593; assert_in_delta(0.04780479054070697, worksheet.lever_graphs_q2593, 0.002); end
  def test_lever_graphs_r2593; assert_in_delta(0.050337442924446155, worksheet.lever_graphs_r2593, 0.002); end
  def test_lever_graphs_b2594; assert_in_epsilon(4.0, worksheet.lever_graphs_b2594, 0.002); end
  def test_lever_graphs_j2594; assert_in_delta(0.031460901827778845, worksheet.lever_graphs_j2594, 0.002); end
  def test_lever_graphs_k2594; assert_in_delta(0.03260887623827188, worksheet.lever_graphs_k2594, 0.002); end
  def test_lever_graphs_l2594; assert_in_delta(0.03783817735010639, worksheet.lever_graphs_l2594, 0.002); end
  def test_lever_graphs_m2594; assert_in_delta(0.0430674784619409, worksheet.lever_graphs_m2594, 0.002); end
  def test_lever_graphs_n2594; assert_in_delta(0.04829677957377541, worksheet.lever_graphs_n2594, 0.002); end
  def test_lever_graphs_o2594; assert_in_delta(0.05352608068560993, worksheet.lever_graphs_o2594, 0.002); end
  def test_lever_graphs_p2594; assert_in_delta(0.05875538179744444, worksheet.lever_graphs_p2594, 0.002); end
  def test_lever_graphs_q2594; assert_in_delta(0.06398468290927894, worksheet.lever_graphs_q2594, 0.002); end
  def test_lever_graphs_r2594; assert_in_delta(0.06921398402111346, worksheet.lever_graphs_r2594, 0.002); end
  def test_lever_graphs_c2659; assert_equal("1975", worksheet.lever_graphs_c2659); end
  def test_lever_graphs_d2659; assert_equal("1980", worksheet.lever_graphs_d2659); end
  def test_lever_graphs_e2659; assert_equal("1985", worksheet.lever_graphs_e2659); end
  def test_lever_graphs_f2659; assert_equal("1990", worksheet.lever_graphs_f2659); end
  def test_lever_graphs_g2659; assert_equal("1995", worksheet.lever_graphs_g2659); end
  def test_lever_graphs_h2659; assert_equal("2000", worksheet.lever_graphs_h2659); end
  def test_lever_graphs_i2659; assert_equal("2005", worksheet.lever_graphs_i2659); end
  def test_lever_graphs_j2659; assert_equal("2011", worksheet.lever_graphs_j2659); end
  def test_lever_graphs_k2659; assert_equal("2015", worksheet.lever_graphs_k2659); end
  def test_lever_graphs_l2659; assert_equal("2020", worksheet.lever_graphs_l2659); end
  def test_lever_graphs_m2659; assert_equal("2025", worksheet.lever_graphs_m2659); end
  def test_lever_graphs_n2659; assert_equal("2030", worksheet.lever_graphs_n2659); end
  def test_lever_graphs_o2659; assert_equal("2035", worksheet.lever_graphs_o2659); end
  def test_lever_graphs_p2659; assert_equal("2040", worksheet.lever_graphs_p2659); end
  def test_lever_graphs_q2659; assert_equal("2045", worksheet.lever_graphs_q2659); end
  def test_lever_graphs_r2659; assert_equal("2050", worksheet.lever_graphs_r2659); end
  def test_lever_graphs_b2660; assert_equal("Historic data", worksheet.lever_graphs_b2660); end
  def test_lever_graphs_b2661; assert_in_delta(1.0, worksheet.lever_graphs_b2661, 0.002); end
  def test_lever_graphs_j2661; assert_in_delta(0.05, worksheet.lever_graphs_j2661, 0.002); end
  def test_lever_graphs_k2661; assert_in_delta(0.05051282051282052, worksheet.lever_graphs_k2661, 0.002); end
  def test_lever_graphs_l2661; assert_in_delta(0.0507967032967033, worksheet.lever_graphs_l2661, 0.002); end
  def test_lever_graphs_m2661; assert_in_delta(0.05108058608058609, worksheet.lever_graphs_m2661, 0.002); end
  def test_lever_graphs_n2661; assert_in_delta(0.05136446886446887, worksheet.lever_graphs_n2661, 0.002); end
  def test_lever_graphs_o2661; assert_in_delta(0.05164835164835165, worksheet.lever_graphs_o2661, 0.002); end
  def test_lever_graphs_p2661; assert_in_delta(0.051932234432234436, worksheet.lever_graphs_p2661, 0.002); end
  def test_lever_graphs_q2661; assert_in_delta(0.052216117216117214, worksheet.lever_graphs_q2661, 0.002); end
  def test_lever_graphs_r2661; assert_in_delta(0.052500000000000005, worksheet.lever_graphs_r2661, 0.002); end
  def test_lever_graphs_b2662; assert_in_epsilon(2.0, worksheet.lever_graphs_b2662, 0.002); end
  def test_lever_graphs_j2662; assert_in_delta(0.05, worksheet.lever_graphs_j2662, 0.002); end
  def test_lever_graphs_k2662; assert_in_delta(0.05051282051282052, worksheet.lever_graphs_k2662, 0.002); end
  def test_lever_graphs_l2662; assert_in_delta(0.05115384615384616, worksheet.lever_graphs_l2662, 0.002); end
  def test_lever_graphs_m2662; assert_in_delta(0.05179487179487181, worksheet.lever_graphs_m2662, 0.002); end
  def test_lever_graphs_n2662; assert_in_delta(0.05243589743589744, worksheet.lever_graphs_n2662, 0.002); end
  def test_lever_graphs_o2662; assert_in_delta(0.05307692307692308, worksheet.lever_graphs_o2662, 0.002); end
  def test_lever_graphs_p2662; assert_in_delta(0.05371794871794873, worksheet.lever_graphs_p2662, 0.002); end
  def test_lever_graphs_q2662; assert_in_delta(0.05435897435897436, worksheet.lever_graphs_q2662, 0.002); end
  def test_lever_graphs_r2662; assert_in_delta(0.05500000000000001, worksheet.lever_graphs_r2662, 0.002); end
  def test_lever_graphs_b2663; assert_in_epsilon(3.0, worksheet.lever_graphs_b2663, 0.002); end
  def test_lever_graphs_j2663; assert_in_delta(0.05, worksheet.lever_graphs_j2663, 0.002); end
  def test_lever_graphs_k2663; assert_in_delta(0.05051282051282052, worksheet.lever_graphs_k2663, 0.002); end
  def test_lever_graphs_l2663; assert_in_delta(0.051510989010989015, worksheet.lever_graphs_l2663, 0.002); end
  def test_lever_graphs_m2663; assert_in_delta(0.05250915750915752, worksheet.lever_graphs_m2663, 0.002); end
  def test_lever_graphs_n2663; assert_in_delta(0.05350732600732601, worksheet.lever_graphs_n2663, 0.002); end
  def test_lever_graphs_o2663; assert_in_delta(0.05450549450549451, worksheet.lever_graphs_o2663, 0.002); end
  def test_lever_graphs_p2663; assert_in_delta(0.05550366300366301, worksheet.lever_graphs_p2663, 0.002); end
  def test_lever_graphs_q2663; assert_in_delta(0.056501831501831495, worksheet.lever_graphs_q2663, 0.002); end
  def test_lever_graphs_r2663; assert_in_delta(0.057499999999999996, worksheet.lever_graphs_r2663, 0.002); end
  def test_lever_graphs_b2664; assert_in_epsilon(4.0, worksheet.lever_graphs_b2664, 0.002); end
  def test_lever_graphs_j2664; assert_in_delta(0.05, worksheet.lever_graphs_j2664, 0.002); end
  def test_lever_graphs_k2664; assert_in_delta(0.05051282051282052, worksheet.lever_graphs_k2664, 0.002); end
  def test_lever_graphs_l2664; assert_in_delta(0.05186813186813187, worksheet.lever_graphs_l2664, 0.002); end
  def test_lever_graphs_m2664; assert_in_delta(0.05322344322344323, worksheet.lever_graphs_m2664, 0.002); end
  def test_lever_graphs_n2664; assert_in_delta(0.05457875457875458, worksheet.lever_graphs_n2664, 0.002); end
  def test_lever_graphs_o2664; assert_in_delta(0.05593406593406593, worksheet.lever_graphs_o2664, 0.002); end
  def test_lever_graphs_p2664; assert_in_delta(0.05728937728937729, worksheet.lever_graphs_p2664, 0.002); end
  def test_lever_graphs_q2664; assert_in_delta(0.058644688644688636, worksheet.lever_graphs_q2664, 0.002); end
  def test_lever_graphs_r2664; assert_in_delta(0.06, worksheet.lever_graphs_r2664, 0.002); end
  def test_lever_graphs_c2669; assert_equal("1975", worksheet.lever_graphs_c2669); end
  def test_lever_graphs_d2669; assert_equal("1980", worksheet.lever_graphs_d2669); end
  def test_lever_graphs_e2669; assert_equal("1985", worksheet.lever_graphs_e2669); end
  def test_lever_graphs_f2669; assert_equal("1990", worksheet.lever_graphs_f2669); end
  def test_lever_graphs_g2669; assert_equal("1995", worksheet.lever_graphs_g2669); end
  def test_lever_graphs_h2669; assert_equal("2000", worksheet.lever_graphs_h2669); end
  def test_lever_graphs_i2669; assert_equal("2005", worksheet.lever_graphs_i2669); end
  def test_lever_graphs_j2669; assert_equal("2011", worksheet.lever_graphs_j2669); end
  def test_lever_graphs_k2669; assert_equal("2015", worksheet.lever_graphs_k2669); end
  def test_lever_graphs_l2669; assert_equal("2020", worksheet.lever_graphs_l2669); end
  def test_lever_graphs_m2669; assert_equal("2025", worksheet.lever_graphs_m2669); end
  def test_lever_graphs_n2669; assert_equal("2030", worksheet.lever_graphs_n2669); end
  def test_lever_graphs_o2669; assert_equal("2035", worksheet.lever_graphs_o2669); end
  def test_lever_graphs_p2669; assert_equal("2040", worksheet.lever_graphs_p2669); end
  def test_lever_graphs_q2669; assert_equal("2045", worksheet.lever_graphs_q2669); end
  def test_lever_graphs_r2669; assert_equal("2050", worksheet.lever_graphs_r2669); end
  def test_lever_graphs_b2670; assert_equal("Historic data", worksheet.lever_graphs_b2670); end
  def test_lever_graphs_b2671; assert_in_delta(1.0, worksheet.lever_graphs_b2671, 0.002); end
  def test_lever_graphs_j2671; assert_in_delta(0.078, worksheet.lever_graphs_j2671, 0.002); end
  def test_lever_graphs_k2671; assert_in_delta(0.07902564102564104, worksheet.lever_graphs_k2671, 0.002); end
  def test_lever_graphs_l2671; assert_in_delta(0.07973626373626375, worksheet.lever_graphs_l2671, 0.002); end
  def test_lever_graphs_m2671; assert_in_delta(0.08044688644688647, worksheet.lever_graphs_m2671, 0.002); end
  def test_lever_graphs_n2671; assert_in_delta(0.08115750915750916, worksheet.lever_graphs_n2671, 0.002); end
  def test_lever_graphs_o2671; assert_in_delta(0.08186813186813188, worksheet.lever_graphs_o2671, 0.002); end
  def test_lever_graphs_p2671; assert_in_delta(0.08257875457875459, worksheet.lever_graphs_p2671, 0.002); end
  def test_lever_graphs_q2671; assert_in_delta(0.08328937728937728, worksheet.lever_graphs_q2671, 0.002); end
  def test_lever_graphs_r2671; assert_in_delta(0.084, worksheet.lever_graphs_r2671, 0.002); end
  def test_lever_graphs_b2672; assert_in_epsilon(2.0, worksheet.lever_graphs_b2672, 0.002); end
  def test_lever_graphs_j2672; assert_in_delta(0.078, worksheet.lever_graphs_j2672, 0.002); end
  def test_lever_graphs_k2672; assert_in_delta(0.07902564102564104, worksheet.lever_graphs_k2672, 0.002); end
  def test_lever_graphs_l2672; assert_in_delta(0.08030769230769232, worksheet.lever_graphs_l2672, 0.002); end
  def test_lever_graphs_m2672; assert_in_delta(0.08158974358974361, worksheet.lever_graphs_m2672, 0.002); end
  def test_lever_graphs_n2672; assert_in_delta(0.08287179487179488, worksheet.lever_graphs_n2672, 0.002); end
  def test_lever_graphs_o2672; assert_in_delta(0.08415384615384616, worksheet.lever_graphs_o2672, 0.002); end
  def test_lever_graphs_p2672; assert_in_delta(0.08543589743589744, worksheet.lever_graphs_p2672, 0.002); end
  def test_lever_graphs_q2672; assert_in_delta(0.08671794871794872, worksheet.lever_graphs_q2672, 0.002); end
  def test_lever_graphs_r2672; assert_in_delta(0.08800000000000001, worksheet.lever_graphs_r2672, 0.002); end
  def test_lever_graphs_b2673; assert_in_epsilon(3.0, worksheet.lever_graphs_b2673, 0.002); end
  def test_lever_graphs_j2673; assert_in_delta(0.078, worksheet.lever_graphs_j2673, 0.002); end
  def test_lever_graphs_k2673; assert_in_delta(0.07902564102564104, worksheet.lever_graphs_k2673, 0.002); end
  def test_lever_graphs_l2673; assert_in_delta(0.08087912087912089, worksheet.lever_graphs_l2673, 0.002); end
  def test_lever_graphs_m2673; assert_in_delta(0.08273260073260075, worksheet.lever_graphs_m2673, 0.002); end
  def test_lever_graphs_n2673; assert_in_delta(0.08458608058608058, worksheet.lever_graphs_n2673, 0.002); end
  def test_lever_graphs_o2673; assert_in_delta(0.08643956043956044, worksheet.lever_graphs_o2673, 0.002); end
  def test_lever_graphs_p2673; assert_in_delta(0.08829304029304029, worksheet.lever_graphs_p2673, 0.002); end
  def test_lever_graphs_q2673; assert_in_delta(0.09014652014652014, worksheet.lever_graphs_q2673, 0.002); end
  def test_lever_graphs_r2673; assert_in_delta(0.092, worksheet.lever_graphs_r2673, 0.002); end
  def test_lever_graphs_b2674; assert_in_epsilon(4.0, worksheet.lever_graphs_b2674, 0.002); end
  def test_lever_graphs_j2674; assert_in_delta(0.078, worksheet.lever_graphs_j2674, 0.002); end
  def test_lever_graphs_k2674; assert_in_delta(0.07902564102564104, worksheet.lever_graphs_k2674, 0.002); end
  def test_lever_graphs_l2674; assert_in_delta(0.08145054945054947, worksheet.lever_graphs_l2674, 0.002); end
  def test_lever_graphs_m2674; assert_in_delta(0.08387545787545789, worksheet.lever_graphs_m2674, 0.002); end
  def test_lever_graphs_n2674; assert_in_delta(0.0863003663003663, worksheet.lever_graphs_n2674, 0.002); end
  def test_lever_graphs_o2674; assert_in_delta(0.08872527472527472, worksheet.lever_graphs_o2674, 0.002); end
  def test_lever_graphs_p2674; assert_in_delta(0.09115018315018315, worksheet.lever_graphs_p2674, 0.002); end
  def test_lever_graphs_q2674; assert_in_delta(0.09357509157509157, worksheet.lever_graphs_q2674, 0.002); end
  def test_lever_graphs_r2674; assert_in_delta(0.096, worksheet.lever_graphs_r2674, 0.002); end
  def test_lever_graphs_c2734; assert_equal("1975", worksheet.lever_graphs_c2734); end
  def test_lever_graphs_d2734; assert_equal("1980", worksheet.lever_graphs_d2734); end
  def test_lever_graphs_e2734; assert_equal("1985", worksheet.lever_graphs_e2734); end
  def test_lever_graphs_f2734; assert_equal("1990", worksheet.lever_graphs_f2734); end
  def test_lever_graphs_g2734; assert_equal("1995", worksheet.lever_graphs_g2734); end
  def test_lever_graphs_h2734; assert_equal("2000", worksheet.lever_graphs_h2734); end
  def test_lever_graphs_i2734; assert_equal("2005", worksheet.lever_graphs_i2734); end
  def test_lever_graphs_j2734; assert_equal("2011", worksheet.lever_graphs_j2734); end
  def test_lever_graphs_k2734; assert_equal("2015", worksheet.lever_graphs_k2734); end
  def test_lever_graphs_l2734; assert_equal("2020", worksheet.lever_graphs_l2734); end
  def test_lever_graphs_m2734; assert_equal("2025", worksheet.lever_graphs_m2734); end
  def test_lever_graphs_n2734; assert_equal("2030", worksheet.lever_graphs_n2734); end
  def test_lever_graphs_o2734; assert_equal("2035", worksheet.lever_graphs_o2734); end
  def test_lever_graphs_p2734; assert_equal("2040", worksheet.lever_graphs_p2734); end
  def test_lever_graphs_q2734; assert_equal("2045", worksheet.lever_graphs_q2734); end
  def test_lever_graphs_r2734; assert_equal("2050", worksheet.lever_graphs_r2734); end
  def test_lever_graphs_b2735; assert_equal("Historic data", worksheet.lever_graphs_b2735); end
  def test_lever_graphs_b2736; assert_in_delta(1.0, worksheet.lever_graphs_b2736, 0.002); end
  def test_lever_graphs_j2736; assert_in_delta(1.0, worksheet.lever_graphs_j2736, 0.002); end
  def test_lever_graphs_k2736; assert_in_delta(1.0, worksheet.lever_graphs_k2736, 0.002); end
  def test_lever_graphs_l2736; assert_in_delta(1.0, worksheet.lever_graphs_l2736, 0.002); end
  def test_lever_graphs_m2736; assert_in_delta(1.0, worksheet.lever_graphs_m2736, 0.002); end
  def test_lever_graphs_n2736; assert_in_delta(1.0, worksheet.lever_graphs_n2736, 0.002); end
  def test_lever_graphs_o2736; assert_in_delta(1.0, worksheet.lever_graphs_o2736, 0.002); end
  def test_lever_graphs_p2736; assert_in_delta(1.0, worksheet.lever_graphs_p2736, 0.002); end
  def test_lever_graphs_q2736; assert_in_delta(1.0, worksheet.lever_graphs_q2736, 0.002); end
  def test_lever_graphs_r2736; assert_in_delta(1.0, worksheet.lever_graphs_r2736, 0.002); end
  def test_lever_graphs_b2737; assert_in_epsilon(2.0, worksheet.lever_graphs_b2737, 0.002); end
  def test_lever_graphs_j2737; assert_in_delta(1.0, worksheet.lever_graphs_j2737, 0.002); end
  def test_lever_graphs_k2737; assert_in_delta(1.0, worksheet.lever_graphs_k2737, 0.002); end
  def test_lever_graphs_l2737; assert_in_delta(1.0, worksheet.lever_graphs_l2737, 0.002); end
  def test_lever_graphs_m2737; assert_in_delta(1.0, worksheet.lever_graphs_m2737, 0.002); end
  def test_lever_graphs_n2737; assert_in_delta(1.0, worksheet.lever_graphs_n2737, 0.002); end
  def test_lever_graphs_o2737; assert_in_delta(1.0, worksheet.lever_graphs_o2737, 0.002); end
  def test_lever_graphs_p2737; assert_in_delta(1.0, worksheet.lever_graphs_p2737, 0.002); end
  def test_lever_graphs_q2737; assert_in_delta(1.0, worksheet.lever_graphs_q2737, 0.002); end
  def test_lever_graphs_r2737; assert_in_delta(1.0, worksheet.lever_graphs_r2737, 0.002); end
  def test_lever_graphs_b2738; assert_in_epsilon(3.0, worksheet.lever_graphs_b2738, 0.002); end
  def test_lever_graphs_j2738; assert_in_delta(1.0, worksheet.lever_graphs_j2738, 0.002); end
  def test_lever_graphs_k2738; assert_in_delta(1.0, worksheet.lever_graphs_k2738, 0.002); end
  def test_lever_graphs_l2738; assert_in_delta(1.0, worksheet.lever_graphs_l2738, 0.002); end
  def test_lever_graphs_m2738; assert_in_delta(1.0, worksheet.lever_graphs_m2738, 0.002); end
  def test_lever_graphs_n2738; assert_in_delta(1.0, worksheet.lever_graphs_n2738, 0.002); end
  def test_lever_graphs_o2738; assert_in_delta(1.0, worksheet.lever_graphs_o2738, 0.002); end
  def test_lever_graphs_p2738; assert_in_delta(1.0, worksheet.lever_graphs_p2738, 0.002); end
  def test_lever_graphs_q2738; assert_in_delta(1.0, worksheet.lever_graphs_q2738, 0.002); end
  def test_lever_graphs_r2738; assert_in_delta(1.0, worksheet.lever_graphs_r2738, 0.002); end
  def test_lever_graphs_b2739; assert_in_epsilon(4.0, worksheet.lever_graphs_b2739, 0.002); end
  def test_lever_graphs_j2739; assert_in_delta(1.0, worksheet.lever_graphs_j2739, 0.002); end
  def test_lever_graphs_k2739; assert_in_delta(1.0, worksheet.lever_graphs_k2739, 0.002); end
  def test_lever_graphs_l2739; assert_in_delta(1.0, worksheet.lever_graphs_l2739, 0.002); end
  def test_lever_graphs_m2739; assert_in_delta(1.0, worksheet.lever_graphs_m2739, 0.002); end
  def test_lever_graphs_n2739; assert_in_delta(1.0, worksheet.lever_graphs_n2739, 0.002); end
  def test_lever_graphs_o2739; assert_in_delta(1.0, worksheet.lever_graphs_o2739, 0.002); end
  def test_lever_graphs_p2739; assert_in_delta(1.0, worksheet.lever_graphs_p2739, 0.002); end
  def test_lever_graphs_q2739; assert_in_delta(1.0, worksheet.lever_graphs_q2739, 0.002); end
  def test_lever_graphs_r2739; assert_in_delta(1.0, worksheet.lever_graphs_r2739, 0.002); end
  def test_lever_graphs_d2745; assert_equal("Title", worksheet.lever_graphs_d2745); end
  def test_lever_graphs_e2745; assert_equal("Food crops", worksheet.lever_graphs_e2745); end
  def test_lever_graphs_f2745; assert_equal("Cows and other bovines ", worksheet.lever_graphs_f2745); end
  def test_lever_graphs_g2745; assert_equal("Chickens and other poultry", worksheet.lever_graphs_g2745); end
  def test_lever_graphs_h2745; assert_equal("Pigs", worksheet.lever_graphs_h2745); end
  def test_lever_graphs_i2745; assert_equal("Sheep and goats", worksheet.lever_graphs_i2745); end
  def test_lever_graphs_j2745; assert_equal("Other animals", worksheet.lever_graphs_j2745); end
  def test_lever_graphs_k2745; assert_equal("Eggs", worksheet.lever_graphs_k2745); end
  def test_lever_graphs_l2745; assert_equal("Milk products", worksheet.lever_graphs_l2745); end
  def test_lever_graphs_d2746; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2746, 0.002); end
  def test_lever_graphs_e2746; assert_in_delta(0.24, worksheet.lever_graphs_e2746, 0.002); end
  def test_lever_graphs_f2746; assert_in_delta(0.19, worksheet.lever_graphs_f2746, 0.002); end
  def test_lever_graphs_g2746; assert_in_delta(0.19, worksheet.lever_graphs_g2746, 0.002); end
  def test_lever_graphs_h2746; assert_in_delta(0.19, worksheet.lever_graphs_h2746, 0.002); end
  def test_lever_graphs_i2746; assert_in_delta(0.19, worksheet.lever_graphs_i2746, 0.002); end
  def test_lever_graphs_j2746; assert_in_delta(0.19, worksheet.lever_graphs_j2746, 0.002); end
  def test_lever_graphs_k2746; assert_in_delta(0.1, worksheet.lever_graphs_k2746, 0.002); end
  def test_lever_graphs_l2746; assert_in_delta(0.18, worksheet.lever_graphs_l2746, 0.002); end
  def test_lever_graphs_d2747; assert_equal("2050: Level 1", worksheet.lever_graphs_d2747); end
  def test_lever_graphs_e2747; assert_in_delta(0.24, worksheet.lever_graphs_e2747, 0.002); end
  def test_lever_graphs_f2747; assert_in_delta(0.19, worksheet.lever_graphs_f2747, 0.002); end
  def test_lever_graphs_g2747; assert_in_delta(0.19, worksheet.lever_graphs_g2747, 0.002); end
  def test_lever_graphs_h2747; assert_in_delta(0.19, worksheet.lever_graphs_h2747, 0.002); end
  def test_lever_graphs_i2747; assert_in_delta(0.19, worksheet.lever_graphs_i2747, 0.002); end
  def test_lever_graphs_j2747; assert_in_delta(0.19, worksheet.lever_graphs_j2747, 0.002); end
  def test_lever_graphs_k2747; assert_in_delta(0.1, worksheet.lever_graphs_k2747, 0.002); end
  def test_lever_graphs_l2747; assert_in_delta(0.18, worksheet.lever_graphs_l2747, 0.002); end
  def test_lever_graphs_d2748; assert_equal("2050: Level 2", worksheet.lever_graphs_d2748); end
  def test_lever_graphs_e2748; assert_in_delta(0.2, worksheet.lever_graphs_e2748, 0.002); end
  def test_lever_graphs_f2748; assert_in_delta(0.15, worksheet.lever_graphs_f2748, 0.002); end
  def test_lever_graphs_g2748; assert_in_delta(0.15, worksheet.lever_graphs_g2748, 0.002); end
  def test_lever_graphs_h2748; assert_in_delta(0.15, worksheet.lever_graphs_h2748, 0.002); end
  def test_lever_graphs_i2748; assert_in_delta(0.15, worksheet.lever_graphs_i2748, 0.002); end
  def test_lever_graphs_j2748; assert_in_delta(0.15, worksheet.lever_graphs_j2748, 0.002); end
  def test_lever_graphs_k2748; assert_in_delta(0.08, worksheet.lever_graphs_k2748, 0.002); end
  def test_lever_graphs_l2748; assert_in_delta(0.15, worksheet.lever_graphs_l2748, 0.002); end
  def test_lever_graphs_d2749; assert_equal("2050: Level 3", worksheet.lever_graphs_d2749); end
  def test_lever_graphs_e2749; assert_in_delta(0.16, worksheet.lever_graphs_e2749, 0.002); end
  def test_lever_graphs_f2749; assert_in_delta(0.1, worksheet.lever_graphs_f2749, 0.002); end
  def test_lever_graphs_g2749; assert_in_delta(0.1, worksheet.lever_graphs_g2749, 0.002); end
  def test_lever_graphs_h2749; assert_in_delta(0.1, worksheet.lever_graphs_h2749, 0.002); end
  def test_lever_graphs_i2749; assert_in_delta(0.1, worksheet.lever_graphs_i2749, 0.002); end
  def test_lever_graphs_j2749; assert_in_delta(0.1, worksheet.lever_graphs_j2749, 0.002); end
  def test_lever_graphs_k2749; assert_in_delta(0.06, worksheet.lever_graphs_k2749, 0.002); end
  def test_lever_graphs_l2749; assert_in_delta(0.1, worksheet.lever_graphs_l2749, 0.002); end
  def test_lever_graphs_d2750; assert_equal("2050: Level 4", worksheet.lever_graphs_d2750); end
  def test_lever_graphs_e2750; assert_in_delta(0.1, worksheet.lever_graphs_e2750, 0.002); end
  def test_lever_graphs_f2750; assert_in_delta(0.05, worksheet.lever_graphs_f2750, 0.002); end
  def test_lever_graphs_g2750; assert_in_delta(0.05, worksheet.lever_graphs_g2750, 0.002); end
  def test_lever_graphs_h2750; assert_in_delta(0.05, worksheet.lever_graphs_h2750, 0.002); end
  def test_lever_graphs_i2750; assert_in_delta(0.05, worksheet.lever_graphs_i2750, 0.002); end
  def test_lever_graphs_j2750; assert_in_delta(0.05, worksheet.lever_graphs_j2750, 0.002); end
  def test_lever_graphs_k2750; assert_in_delta(0.05, worksheet.lever_graphs_k2750, 0.002); end
  def test_lever_graphs_l2750; assert_in_delta(0.05, worksheet.lever_graphs_l2750, 0.002); end
  def test_lever_graphs_c1310; assert_equal("1975", worksheet.lever_graphs_c1310); end
  def test_lever_graphs_d1310; assert_equal("1980", worksheet.lever_graphs_d1310); end
  def test_lever_graphs_e1310; assert_equal("1985", worksheet.lever_graphs_e1310); end
  def test_lever_graphs_f1310; assert_equal("1990", worksheet.lever_graphs_f1310); end
  def test_lever_graphs_g1310; assert_equal("1995", worksheet.lever_graphs_g1310); end
  def test_lever_graphs_h1310; assert_equal("2000", worksheet.lever_graphs_h1310); end
  def test_lever_graphs_i1310; assert_equal("2005", worksheet.lever_graphs_i1310); end
  def test_lever_graphs_j1310; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1310, 0.002); end
  def test_lever_graphs_k1310; assert_equal("2015", worksheet.lever_graphs_k1310); end
  def test_lever_graphs_l1310; assert_equal("2020", worksheet.lever_graphs_l1310); end
  def test_lever_graphs_m1310; assert_equal("2025", worksheet.lever_graphs_m1310); end
  def test_lever_graphs_n1310; assert_equal("2030", worksheet.lever_graphs_n1310); end
  def test_lever_graphs_o1310; assert_equal("2035", worksheet.lever_graphs_o1310); end
  def test_lever_graphs_p1310; assert_equal("2040", worksheet.lever_graphs_p1310); end
  def test_lever_graphs_q1310; assert_equal("2045", worksheet.lever_graphs_q1310); end
  def test_lever_graphs_r1310; assert_equal("2050", worksheet.lever_graphs_r1310); end
  def test_lever_graphs_b1311; assert_equal("Historic data", worksheet.lever_graphs_b1311); end
  def test_lever_graphs_b1312; assert_in_delta(1.0, worksheet.lever_graphs_b1312, 0.002); end
  def test_lever_graphs_j1312; assert_in_epsilon(5702.542028582494, worksheet.lever_graphs_j1312, 0.002); end
  def test_lever_graphs_k1312; assert_in_epsilon(6305.331553554374, worksheet.lever_graphs_k1312, 0.002); end
  def test_lever_graphs_l1312; assert_in_epsilon(6971.839190483098, worksheet.lever_graphs_l1312, 0.002); end
  def test_lever_graphs_m1312; assert_in_epsilon(7708.800288314111, worksheet.lever_graphs_m1312, 0.002); end
  def test_lever_graphs_n1312; assert_in_epsilon(8523.662158793131, worksheet.lever_graphs_n1312, 0.002); end
  def test_lever_graphs_o1312; assert_in_epsilon(9424.659334783586, worksheet.lever_graphs_o1312, 0.002); end
  def test_lever_graphs_p1312; assert_in_epsilon(10420.896783795104, worksheet.lever_graphs_p1312, 0.002); end
  def test_lever_graphs_q1312; assert_in_epsilon(11522.441917631899, worksheet.lever_graphs_q1312, 0.002); end
  def test_lever_graphs_r1312; assert_in_epsilon(12740.426327958448, worksheet.lever_graphs_r1312, 0.002); end
  def test_lever_graphs_b1313; assert_in_epsilon(2.0, worksheet.lever_graphs_b1313, 0.002); end
  def test_lever_graphs_j1313; assert_in_epsilon(5702.542028582494, worksheet.lever_graphs_j1313, 0.002); end
  def test_lever_graphs_k1313; assert_in_epsilon(6188.785202267425, worksheet.lever_graphs_k1313, 0.002); end
  def test_lever_graphs_l1313; assert_in_epsilon(6716.489258269425, worksheet.lever_graphs_l1313, 0.002); end
  def test_lever_graphs_m1313; assert_in_epsilon(7289.18947452254, worksheet.lever_graphs_m1313, 0.002); end
  def test_lever_graphs_n1313; assert_in_epsilon(7910.722574308156, worksheet.lever_graphs_n1313, 0.002); end
  def test_lever_graphs_o1313; assert_in_epsilon(8585.252429834496, worksheet.lever_graphs_o1313, 0.002); end
  def test_lever_graphs_p1313; assert_in_epsilon(9317.297957503613, worksheet.lever_graphs_p1313, 0.002); end
  def test_lever_graphs_q1313; assert_in_epsilon(10111.763391746252, worksheet.lever_graphs_q1313, 0.002); end
  def test_lever_graphs_r1313; assert_in_epsilon(10973.971140239775, worksheet.lever_graphs_r1313, 0.002); end
  def test_lever_graphs_b1314; assert_in_epsilon(3.0, worksheet.lever_graphs_b1314, 0.002); end
  def test_lever_graphs_j1314; assert_in_epsilon(5702.542028582494, worksheet.lever_graphs_j1314, 0.002); end
  def test_lever_graphs_k1314; assert_in_epsilon(6116.069450415072, worksheet.lever_graphs_k1314, 0.002); end
  def test_lever_graphs_l1314; assert_in_epsilon(6559.584363396402, worksheet.lever_graphs_l1314, 0.002); end
  def test_lever_graphs_m1314; assert_in_epsilon(7035.261350342325, worksheet.lever_graphs_m1314, 0.002); end
  def test_lever_graphs_n1314; assert_in_epsilon(7545.432686834626, worksheet.lever_graphs_n1314, 0.002); end
  def test_lever_graphs_o1314; assert_in_epsilon(8092.59977652175, worksheet.lever_graphs_o1314, 0.002); end
  def test_lever_graphs_p1314; assert_in_epsilon(8679.445415665561, worksheet.lever_graphs_p1314, 0.002); end
  def test_lever_graphs_q1314; assert_in_epsilon(9308.846947068032, worksheet.lever_graphs_q1314, 0.002); end
  def test_lever_graphs_r1314; assert_in_epsilon(9983.890367872418, worksheet.lever_graphs_r1314, 0.002); end
  def test_lever_graphs_b1315; assert_in_epsilon(4.0, worksheet.lever_graphs_b1315, 0.002); end
  def test_lever_graphs_j1315; assert_in_epsilon(5702.542028582494, worksheet.lever_graphs_j1315, 0.002); end
  def test_lever_graphs_k1315; assert_in_epsilon(5861.0964670560725, worksheet.lever_graphs_k1315, 0.002); end
  def test_lever_graphs_l1315; assert_in_epsilon(6024.059379826494, worksheet.lever_graphs_l1315, 0.002); end
  def test_lever_graphs_m1315; assert_in_epsilon(6191.553340855186, worksheet.lever_graphs_m1315, 0.002); end
  def test_lever_graphs_n1315; assert_in_epsilon(6363.704332170638, worksheet.lever_graphs_n1315, 0.002); end
  def test_lever_graphs_o1315; assert_in_epsilon(6540.64183862686, worksheet.lever_graphs_o1315, 0.002); end
  def test_lever_graphs_p1315; assert_in_epsilon(6722.498945296542, worksheet.lever_graphs_p1315, 0.002); end
  def test_lever_graphs_q1315; assert_in_epsilon(6909.412437572138, worksheet.lever_graphs_q1315, 0.002); end
  def test_lever_graphs_r1315; assert_in_epsilon(7101.522904050177, worksheet.lever_graphs_r1315, 0.002); end
  def test_lever_graphs_c1320; assert_equal("1975", worksheet.lever_graphs_c1320); end
  def test_lever_graphs_d1320; assert_equal("1980", worksheet.lever_graphs_d1320); end
  def test_lever_graphs_e1320; assert_equal("1985", worksheet.lever_graphs_e1320); end
  def test_lever_graphs_f1320; assert_equal("1990", worksheet.lever_graphs_f1320); end
  def test_lever_graphs_g1320; assert_equal("1995", worksheet.lever_graphs_g1320); end
  def test_lever_graphs_h1320; assert_equal("2000", worksheet.lever_graphs_h1320); end
  def test_lever_graphs_i1320; assert_equal("2005", worksheet.lever_graphs_i1320); end
  def test_lever_graphs_j1320; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1320, 0.002); end
  def test_lever_graphs_k1320; assert_equal("2015", worksheet.lever_graphs_k1320); end
  def test_lever_graphs_l1320; assert_equal("2020", worksheet.lever_graphs_l1320); end
  def test_lever_graphs_m1320; assert_equal("2025", worksheet.lever_graphs_m1320); end
  def test_lever_graphs_n1320; assert_equal("2030", worksheet.lever_graphs_n1320); end
  def test_lever_graphs_o1320; assert_equal("2035", worksheet.lever_graphs_o1320); end
  def test_lever_graphs_p1320; assert_equal("2040", worksheet.lever_graphs_p1320); end
  def test_lever_graphs_q1320; assert_equal("2045", worksheet.lever_graphs_q1320); end
  def test_lever_graphs_r1320; assert_equal("2050", worksheet.lever_graphs_r1320); end
  def test_lever_graphs_b1321; assert_equal("Historic data", worksheet.lever_graphs_b1321); end
  def test_lever_graphs_b1322; assert_in_delta(1.0, worksheet.lever_graphs_b1322, 0.002); end
  def test_lever_graphs_j1322; assert_in_epsilon(106922.66303592175, worksheet.lever_graphs_j1322, 0.002); end
  def test_lever_graphs_k1322; assert_in_epsilon(119914.69969951958, worksheet.lever_graphs_k1322, 0.002); end
  def test_lever_graphs_l1322; assert_in_epsilon(134485.38219811275, worksheet.lever_graphs_l1322, 0.002); end
  def test_lever_graphs_m1322; assert_in_epsilon(150826.52977735744, worksheet.lever_graphs_m1322, 0.002); end
  def test_lever_graphs_n1322; assert_in_epsilon(169153.26939524675, worksheet.lever_graphs_n1322, 0.002); end
  def test_lever_graphs_o1322; assert_in_epsilon(189706.8678125642, worksheet.lever_graphs_o1322, 0.002); end
  def test_lever_graphs_p1322; assert_in_epsilon(212757.90780704233, worksheet.lever_graphs_p1322, 0.002); end
  def test_lever_graphs_q1322; assert_in_epsilon(238609.85032526052, worksheet.lever_graphs_q1322, 0.002); end
  def test_lever_graphs_r1322; assert_in_epsilon(267603.0294670846, worksheet.lever_graphs_r1322, 0.002); end
  def test_lever_graphs_b1323; assert_in_epsilon(2.0, worksheet.lever_graphs_b1323, 0.002); end
  def test_lever_graphs_j1323; assert_in_epsilon(106922.66303592175, worksheet.lever_graphs_j1323, 0.002); end
  def test_lever_graphs_k1323; assert_in_epsilon(117128.26765919256, worksheet.lever_graphs_k1323, 0.002); end
  def test_lever_graphs_l1323; assert_in_epsilon(128307.98163186794, worksheet.lever_graphs_l1323, 0.002); end
  def test_lever_graphs_m1323; assert_in_epsilon(140554.78220121787, worksheet.lever_graphs_m1323, 0.002); end
  def test_lever_graphs_n1323; assert_in_epsilon(153970.52115053352, worksheet.lever_graphs_n1323, 0.002); end
  def test_lever_graphs_o1323; assert_in_epsilon(168666.77186001485, worksheet.lever_graphs_o1323, 0.002); end
  def test_lever_graphs_p1323; assert_in_epsilon(184765.75721832403, worksheet.lever_graphs_p1323, 0.002); end
  def test_lever_graphs_q1323; assert_in_epsilon(202401.36610187715, worksheet.lever_graphs_q1323, 0.002); end
  def test_lever_graphs_r1323; assert_in_epsilon(221720.26687552955, worksheet.lever_graphs_r1323, 0.002); end
  def test_lever_graphs_b1324; assert_in_epsilon(3.0, worksheet.lever_graphs_b1324, 0.002); end
  def test_lever_graphs_j1324; assert_in_epsilon(106922.66303592175, worksheet.lever_graphs_j1324, 0.002); end
  def test_lever_graphs_k1324; assert_in_epsilon(115072.63543791065, worksheet.lever_graphs_k1324, 0.002); end
  def test_lever_graphs_l1324; assert_in_epsilon(123843.82366325465, worksheet.lever_graphs_l1324, 0.002); end
  def test_lever_graphs_m1324; assert_in_epsilon(133283.57868201256, worksheet.lever_graphs_m1324, 0.002); end
  def test_lever_graphs_n1324; assert_in_epsilon(143442.86070000514, worksheet.lever_graphs_n1324, 0.002); end
  def test_lever_graphs_o1324; assert_in_epsilon(154376.51426580368, worksheet.lever_graphs_o1324, 0.002); end
  def test_lever_graphs_p1324; assert_in_epsilon(166143.56434721488, worksheet.lever_graphs_p1324, 0.002); end
  def test_lever_graphs_q1324; assert_in_epsilon(178807.53497562092, worksheet.lever_graphs_q1324, 0.002); end
  def test_lever_graphs_r1324; assert_in_epsilon(192436.79217836558, worksheet.lever_graphs_r1324, 0.002); end
  def test_lever_graphs_b1325; assert_in_epsilon(4.0, worksheet.lever_graphs_b1325, 0.002); end
  def test_lever_graphs_j1325; assert_in_epsilon(106922.66303592175, worksheet.lever_graphs_j1325, 0.002); end
  def test_lever_graphs_k1325; assert_in_epsilon(109404.6134350806, worksheet.lever_graphs_k1325, 0.002); end
  def test_lever_graphs_l1325; assert_in_epsilon(111944.1762955173, worksheet.lever_graphs_l1325, 0.002); end
  def test_lever_graphs_m1325; assert_in_epsilon(114542.68895084485, worksheet.lever_graphs_m1325, 0.002); end
  def test_lever_graphs_n1325; assert_in_epsilon(117201.5197776338, worksheet.lever_graphs_n1325, 0.002); end
  def test_lever_graphs_o1325; assert_in_epsilon(119922.06891599929, worksheet.lever_graphs_o1325, 0.002); end
  def test_lever_graphs_p1325; assert_in_epsilon(122705.76900691475, worksheet.lever_graphs_p1325, 0.002); end
  def test_lever_graphs_q1325; assert_in_epsilon(125554.0859466405, worksheet.lever_graphs_q1325, 0.002); end
  def test_lever_graphs_r1325; assert_in_epsilon(128468.51965866463, worksheet.lever_graphs_r1325, 0.002); end
  def test_lever_graphs_c1934; assert_equal("1975", worksheet.lever_graphs_c1934); end
  def test_lever_graphs_d1934; assert_equal("1980", worksheet.lever_graphs_d1934); end
  def test_lever_graphs_e1934; assert_equal("1985", worksheet.lever_graphs_e1934); end
  def test_lever_graphs_f1934; assert_equal("1990", worksheet.lever_graphs_f1934); end
  def test_lever_graphs_g1934; assert_equal("1995", worksheet.lever_graphs_g1934); end
  def test_lever_graphs_h1934; assert_equal("2000", worksheet.lever_graphs_h1934); end
  def test_lever_graphs_i1934; assert_equal("2005", worksheet.lever_graphs_i1934); end
  def test_lever_graphs_j1934; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1934, 0.002); end
  def test_lever_graphs_k1934; assert_equal("2015", worksheet.lever_graphs_k1934); end
  def test_lever_graphs_l1934; assert_equal("2020", worksheet.lever_graphs_l1934); end
  def test_lever_graphs_m1934; assert_equal("2025", worksheet.lever_graphs_m1934); end
  def test_lever_graphs_n1934; assert_equal("2030", worksheet.lever_graphs_n1934); end
  def test_lever_graphs_o1934; assert_equal("2035", worksheet.lever_graphs_o1934); end
  def test_lever_graphs_p1934; assert_equal("2040", worksheet.lever_graphs_p1934); end
  def test_lever_graphs_q1934; assert_equal("2045", worksheet.lever_graphs_q1934); end
  def test_lever_graphs_r1934; assert_equal("2050", worksheet.lever_graphs_r1934); end
  def test_lever_graphs_b1935; assert_equal("Historic data", worksheet.lever_graphs_b1935); end
  def test_lever_graphs_b1936; assert_in_delta(1.0, worksheet.lever_graphs_b1936, 0.002); end
  def test_lever_graphs_j1936; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1936, 0.002); end
  def test_lever_graphs_k1936; assert_in_epsilon(8.426747442085842, worksheet.lever_graphs_k1936, 0.002); end
  def test_lever_graphs_l1936; assert_in_epsilon(8.218174935767168, worksheet.lever_graphs_l1936, 0.002); end
  def test_lever_graphs_m1936; assert_in_epsilon(8.014764859044377, worksheet.lever_graphs_m1936, 0.002); end
  def test_lever_graphs_n1936; assert_in_epsilon(7.816389435348049, worksheet.lever_graphs_n1936, 0.002); end
  def test_lever_graphs_o1936; assert_in_epsilon(7.622924050738182, worksheet.lever_graphs_o1936, 0.002); end
  def test_lever_graphs_p1936; assert_in_epsilon(7.434247175625165, worksheet.lever_graphs_p1936, 0.002); end
  def test_lever_graphs_q1936; assert_in_epsilon(7.250240288428264, worksheet.lever_graphs_q1936, 0.002); end
  def test_lever_graphs_r1936; assert_in_epsilon(7.0707878011236485, worksheet.lever_graphs_r1936, 0.002); end
  def test_lever_graphs_b1937; assert_in_epsilon(2.0, worksheet.lever_graphs_b1937, 0.002); end
  def test_lever_graphs_j1937; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1937, 0.002); end
  def test_lever_graphs_k1937; assert_in_epsilon(8.217137366021783, worksheet.lever_graphs_k1937, 0.002); end
  def test_lever_graphs_l1937; assert_in_epsilon(7.814415873748209, worksheet.lever_graphs_l1937, 0.002); end
  def test_lever_graphs_m1937; assert_in_epsilon(7.431431741715161, worksheet.lever_graphs_m1937, 0.002); end
  def test_lever_graphs_n1937; assert_in_epsilon(7.067217642882144, worksheet.lever_graphs_n1937, 0.002); end
  def test_lever_graphs_o1937; assert_in_epsilon(6.72085365885865, worksheet.lever_graphs_o1937, 0.002); end
  def test_lever_graphs_p1937; assert_in_epsilon(6.391464956408584, worksheet.lever_graphs_p1937, 0.002); end
  def test_lever_graphs_q1937; assert_in_epsilon(6.078219577829101, worksheet.lever_graphs_q1937, 0.002); end
  def test_lever_graphs_r1937; assert_in_epsilon(5.780326339622853, worksheet.lever_graphs_r1937, 0.002); end
  def test_lever_graphs_b1938; assert_in_epsilon(3.0, worksheet.lever_graphs_b1938, 0.002); end
  def test_lever_graphs_j1938; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1938, 0.002); end
  def test_lever_graphs_k1938; assert_in_epsilon(7.810430147077254, worksheet.lever_graphs_k1938, 0.002); end
  def test_lever_graphs_l1938; assert_in_epsilon(7.060010241896811, worksheet.lever_graphs_l1938, 0.002); end
  def test_lever_graphs_m1938; assert_in_epsilon(6.381690083271525, worksheet.lever_graphs_m1938, 0.002); end
  def test_lever_graphs_n1938; assert_in_epsilon(5.768542385001454, worksheet.lever_graphs_n1938, 0.002); end
  def test_lever_graphs_o1938; assert_in_epsilon(5.214305429025085, worksheet.lever_graphs_o1938, 0.002); end
  def test_lever_graphs_p1938; assert_in_epsilon(4.71331911816292, worksheet.lever_graphs_p1938, 0.002); end
  def test_lever_graphs_q1938; assert_in_epsilon(4.260467172862499, worksheet.lever_graphs_q1938, 0.002); end
  def test_lever_graphs_r1938; assert_in_epsilon(3.8511248816341124, worksheet.lever_graphs_r1938, 0.002); end
  def test_lever_graphs_b1939; assert_in_epsilon(4.0, worksheet.lever_graphs_b1939, 0.002); end
  def test_lever_graphs_j1939; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1939, 0.002); end
  def test_lever_graphs_k1939; assert_in_epsilon(7.419988727322413, worksheet.lever_graphs_k1939, 0.002); end
  def test_lever_graphs_l1939; assert_in_epsilon(6.371796790462194, worksheet.lever_graphs_l1939, 0.002); end
  def test_lever_graphs_m1939; assert_in_epsilon(5.471678708815939, worksheet.lever_graphs_m1939, 0.002); end
  def test_lever_graphs_n1939; assert_in_epsilon(4.698716684958489, worksheet.lever_graphs_n1939, 0.002); end
  def test_lever_graphs_o1939; assert_in_epsilon(4.034947894498162, worksheet.lever_graphs_o1939, 0.002); end
  def test_lever_graphs_p1939; assert_in_epsilon(3.464947048932145, worksheet.lever_graphs_p1939, 0.002); end
  def test_lever_graphs_q1939; assert_in_epsilon(2.9754679281668355, worksheet.lever_graphs_q1939, 0.002); end
  def test_lever_graphs_r1939; assert_in_epsilon(2.555135552295945, worksheet.lever_graphs_r1939, 0.002); end
  def test_lever_graphs_c2005; assert_equal("1975", worksheet.lever_graphs_c2005); end
  def test_lever_graphs_d2005; assert_equal("1980", worksheet.lever_graphs_d2005); end
  def test_lever_graphs_e2005; assert_equal("1985", worksheet.lever_graphs_e2005); end
  def test_lever_graphs_f2005; assert_equal("1990", worksheet.lever_graphs_f2005); end
  def test_lever_graphs_g2005; assert_equal("1995", worksheet.lever_graphs_g2005); end
  def test_lever_graphs_h2005; assert_equal("2000", worksheet.lever_graphs_h2005); end
  def test_lever_graphs_i2005; assert_equal("2005", worksheet.lever_graphs_i2005); end
  def test_lever_graphs_j2005; assert_in_epsilon(2011.0, worksheet.lever_graphs_j2005, 0.002); end
  def test_lever_graphs_k2005; assert_equal("2015", worksheet.lever_graphs_k2005); end
  def test_lever_graphs_l2005; assert_equal("2020", worksheet.lever_graphs_l2005); end
  def test_lever_graphs_m2005; assert_equal("2025", worksheet.lever_graphs_m2005); end
  def test_lever_graphs_n2005; assert_equal("2030", worksheet.lever_graphs_n2005); end
  def test_lever_graphs_o2005; assert_equal("2035", worksheet.lever_graphs_o2005); end
  def test_lever_graphs_p2005; assert_equal("2040", worksheet.lever_graphs_p2005); end
  def test_lever_graphs_q2005; assert_equal("2045", worksheet.lever_graphs_q2005); end
  def test_lever_graphs_r2005; assert_equal("2050", worksheet.lever_graphs_r2005); end
  def test_lever_graphs_b2006; assert_equal("Historic data", worksheet.lever_graphs_b2006); end
  def test_lever_graphs_b2007; assert_in_delta(1.0, worksheet.lever_graphs_b2007, 0.002); end
  def test_lever_graphs_j2007; assert_in_epsilon(9.96, worksheet.lever_graphs_j2007, 0.002); end
  def test_lever_graphs_k2007; assert_in_epsilon(9.713477581093876, worksheet.lever_graphs_k2007, 0.002); end
  def test_lever_graphs_l2007; assert_in_epsilon(9.47305689943909, worksheet.lever_graphs_l2007, 0.002); end
  def test_lever_graphs_m2007; assert_in_epsilon(9.238586929430548, worksheet.lever_graphs_m2007, 0.002); end
  def test_lever_graphs_n2007; assert_in_epsilon(9.009920383535194, worksheet.lever_graphs_n2007, 0.002); end
  def test_lever_graphs_o2007; assert_in_epsilon(8.786913619770065, worksheet.lever_graphs_o2007, 0.002); end
  def test_lever_graphs_p2007; assert_in_epsilon(8.569426551470377, worksheet.lever_graphs_p2007, 0.002); end
  def test_lever_graphs_q2007; assert_in_epsilon(8.357322559290974, worksheet.lever_graphs_q2007, 0.002); end
  def test_lever_graphs_r2007; assert_in_epsilon(8.15046840538584, worksheet.lever_graphs_r2007, 0.002); end
  def test_lever_graphs_b2008; assert_in_epsilon(2.0, worksheet.lever_graphs_b2008, 0.002); end
  def test_lever_graphs_j2008; assert_in_epsilon(9.96, worksheet.lever_graphs_j2008, 0.002); end
  def test_lever_graphs_k2008; assert_in_epsilon(9.376571321374435, worksheet.lever_graphs_k2008, 0.002); end
  def test_lever_graphs_l2008; assert_in_epsilon(8.827318247472038, worksheet.lever_graphs_l2008, 0.002); end
  def test_lever_graphs_m2008; assert_in_epsilon(8.310238867860596, worksheet.lever_graphs_m2008, 0.002); end
  def test_lever_graphs_n2008; assert_in_epsilon(7.823448538368755, worksheet.lever_graphs_n2008, 0.002); end
  def test_lever_graphs_o2008; assert_in_epsilon(7.365173011959558, worksheet.lever_graphs_o2008, 0.002); end
  def test_lever_graphs_p2008; assert_in_epsilon(6.933741971978007, worksheet.lever_graphs_p2008, 0.002); end
  def test_lever_graphs_q2008; assert_in_epsilon(6.52758294420273, worksheet.lever_graphs_q2008, 0.002); end
  def test_lever_graphs_r2008; assert_in_epsilon(6.145215565512471, worksheet.lever_graphs_r2008, 0.002); end
  def test_lever_graphs_b2009; assert_in_epsilon(3.0, worksheet.lever_graphs_b2009, 0.002); end
  def test_lever_graphs_j2009; assert_in_epsilon(9.96, worksheet.lever_graphs_j2009, 0.002); end
  def test_lever_graphs_k2009; assert_in_epsilon(9.141699210404024, worksheet.lever_graphs_k2009, 0.002); end
  def test_lever_graphs_l2009; assert_in_epsilon(8.390628961194935, worksheet.lever_graphs_l2009, 0.002); end
  def test_lever_graphs_m2009; assert_in_epsilon(7.701265677645468, worksheet.lever_graphs_m2009, 0.002); end
  def test_lever_graphs_n2009; assert_in_epsilon(7.068539594823612, worksheet.lever_graphs_n2009, 0.002); end
  def test_lever_graphs_o2009; assert_in_epsilon(6.487797473163512, worksheet.lever_graphs_o2009, 0.002); end
  def test_lever_graphs_p2009; assert_in_epsilon(5.954768377277118, worksheet.lever_graphs_p2009, 0.002); end
  def test_lever_graphs_q2009; assert_in_epsilon(5.4655322663346455, worksheet.lever_graphs_q2009, 0.002); end
  def test_lever_graphs_r2009; assert_in_epsilon(5.01649116501899, worksheet.lever_graphs_r2009, 0.002); end
  def test_lever_graphs_b2010; assert_in_epsilon(4.0, worksheet.lever_graphs_b2010, 0.002); end
  def test_lever_graphs_j2010; assert_in_epsilon(9.96, worksheet.lever_graphs_j2010, 0.002); end
  def test_lever_graphs_k2010; assert_in_epsilon(8.957210848876155, worksheet.lever_graphs_k2010, 0.002); end
  def test_lever_graphs_l2010; assert_in_epsilon(8.05538415574545, worksheet.lever_graphs_l2010, 0.002); end
  def test_lever_graphs_m2010; assert_in_epsilon(7.244354854589179, worksheet.lever_graphs_m2010, 0.002); end
  def test_lever_graphs_n2010; assert_in_epsilon(6.514981314923176, worksheet.lever_graphs_n2010, 0.002); end
  def test_lever_graphs_o2010; assert_in_epsilon(5.859042300628043, worksheet.lever_graphs_o2010, 0.002); end
  def test_lever_graphs_p2010; assert_in_epsilon(5.269144303133515, worksheet.lever_graphs_p2010, 0.002); end
  def test_lever_graphs_q2010; assert_in_epsilon(4.73863820444995, worksheet.lever_graphs_q2010, 0.002); end
  def test_lever_graphs_r2010; assert_in_epsilon(4.2615443307026215, worksheet.lever_graphs_r2010, 0.002); end
  def test_lever_graphs_d2301; assert_equal("Title", worksheet.lever_graphs_d2301); end
  def test_lever_graphs_e2301; assert_equal("Design for Steel Materials demand per product", worksheet.lever_graphs_e2301); end
  def test_lever_graphs_f2301; assert_equal("Design for Chemicals Materials demand per product", worksheet.lever_graphs_f2301); end
  def test_lever_graphs_g2301; assert_equal("Design for Aluminium Materials demand per product", worksheet.lever_graphs_g2301); end
  def test_lever_graphs_h2301; assert_equal("Design for Cement Materials demand per product", worksheet.lever_graphs_h2301); end
  def test_lever_graphs_i2301; assert_equal("Design for Paper Materials demand per product", worksheet.lever_graphs_i2301); end
  def test_lever_graphs_j2301; assert_equal("Design for Timber Materials demand per product", worksheet.lever_graphs_j2301); end
  def test_lever_graphs_k2301; assert_equal("Design for Other industries Materials demand per product", worksheet.lever_graphs_k2301); end
  def test_lever_graphs_d2302; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2302, 0.002); end
  def test_lever_graphs_e2302; assert_in_delta(1.0, worksheet.lever_graphs_e2302, 0.002); end
  def test_lever_graphs_f2302; assert_in_delta(1.0, worksheet.lever_graphs_f2302, 0.002); end
  def test_lever_graphs_g2302; assert_in_delta(1.0, worksheet.lever_graphs_g2302, 0.002); end
  def test_lever_graphs_h2302; assert_in_delta(1.0, worksheet.lever_graphs_h2302, 0.002); end
  def test_lever_graphs_i2302; assert_in_delta(1.0, worksheet.lever_graphs_i2302, 0.002); end
  def test_lever_graphs_j2302; assert_in_delta(1.0, worksheet.lever_graphs_j2302, 0.002); end
  def test_lever_graphs_k2302; assert_in_delta(1.0, worksheet.lever_graphs_k2302, 0.002); end
  def test_lever_graphs_d2303; assert_equal("2050: Level 1", worksheet.lever_graphs_d2303); end
  def test_lever_graphs_e2303; assert_in_delta(1.0, worksheet.lever_graphs_e2303, 0.002); end
  def test_lever_graphs_f2303; assert_in_delta(1.0, worksheet.lever_graphs_f2303, 0.002); end
  def test_lever_graphs_g2303; assert_in_delta(1.0, worksheet.lever_graphs_g2303, 0.002); end
  def test_lever_graphs_h2303; assert_in_delta(1.0, worksheet.lever_graphs_h2303, 0.002); end
  def test_lever_graphs_i2303; assert_in_delta(1.0, worksheet.lever_graphs_i2303, 0.002); end
  def test_lever_graphs_j2303; assert_in_delta(1.0, worksheet.lever_graphs_j2303, 0.002); end
  def test_lever_graphs_k2303; assert_in_delta(1.0, worksheet.lever_graphs_k2303, 0.002); end
  def test_lever_graphs_d2304; assert_equal("2050: Level 2", worksheet.lever_graphs_d2304); end
  def test_lever_graphs_e2304; assert_in_delta(0.9, worksheet.lever_graphs_e2304, 0.002); end
  def test_lever_graphs_f2304; assert_in_delta(0.9, worksheet.lever_graphs_f2304, 0.002); end
  def test_lever_graphs_g2304; assert_in_delta(0.9, worksheet.lever_graphs_g2304, 0.002); end
  def test_lever_graphs_h2304; assert_in_delta(0.9, worksheet.lever_graphs_h2304, 0.002); end
  def test_lever_graphs_i2304; assert_in_delta(0.95, worksheet.lever_graphs_i2304, 0.002); end
  def test_lever_graphs_j2304; assert_in_delta(0.9, worksheet.lever_graphs_j2304, 0.002); end
  def test_lever_graphs_k2304; assert_in_delta(0.9, worksheet.lever_graphs_k2304, 0.002); end
  def test_lever_graphs_d2305; assert_equal("2050: Level 3", worksheet.lever_graphs_d2305); end
  def test_lever_graphs_e2305; assert_in_delta(0.8, worksheet.lever_graphs_e2305, 0.002); end
  def test_lever_graphs_f2305; assert_in_delta(0.8, worksheet.lever_graphs_f2305, 0.002); end
  def test_lever_graphs_g2305; assert_in_delta(0.8, worksheet.lever_graphs_g2305, 0.002); end
  def test_lever_graphs_h2305; assert_in_delta(0.8, worksheet.lever_graphs_h2305, 0.002); end
  def test_lever_graphs_i2305; assert_in_delta(0.9, worksheet.lever_graphs_i2305, 0.002); end
  def test_lever_graphs_j2305; assert_in_delta(0.8, worksheet.lever_graphs_j2305, 0.002); end
  def test_lever_graphs_k2305; assert_in_delta(0.8, worksheet.lever_graphs_k2305, 0.002); end
  def test_lever_graphs_d2306; assert_equal("2050: Level 4", worksheet.lever_graphs_d2306); end
  def test_lever_graphs_e2306; assert_in_delta(0.7, worksheet.lever_graphs_e2306, 0.002); end
  def test_lever_graphs_f2306; assert_in_delta(0.7, worksheet.lever_graphs_f2306, 0.002); end
  def test_lever_graphs_g2306; assert_in_delta(0.7, worksheet.lever_graphs_g2306, 0.002); end
  def test_lever_graphs_h2306; assert_in_delta(0.7, worksheet.lever_graphs_h2306, 0.002); end
  def test_lever_graphs_i2306; assert_in_delta(0.8, worksheet.lever_graphs_i2306, 0.002); end
  def test_lever_graphs_j2306; assert_in_delta(0.7, worksheet.lever_graphs_j2306, 0.002); end
  def test_lever_graphs_k2306; assert_in_delta(0.7, worksheet.lever_graphs_k2306, 0.002); end
  def test_lever_graphs_c2511; assert_equal("1975", worksheet.lever_graphs_c2511); end
  def test_lever_graphs_d2511; assert_equal("1980", worksheet.lever_graphs_d2511); end
  def test_lever_graphs_e2511; assert_equal("1985", worksheet.lever_graphs_e2511); end
  def test_lever_graphs_f2511; assert_equal("1990", worksheet.lever_graphs_f2511); end
  def test_lever_graphs_g2511; assert_equal("1995", worksheet.lever_graphs_g2511); end
  def test_lever_graphs_h2511; assert_equal("2000", worksheet.lever_graphs_h2511); end
  def test_lever_graphs_i2511; assert_equal("2005", worksheet.lever_graphs_i2511); end
  def test_lever_graphs_j2511; assert_equal("2011", worksheet.lever_graphs_j2511); end
  def test_lever_graphs_k2511; assert_equal("2015", worksheet.lever_graphs_k2511); end
  def test_lever_graphs_l2511; assert_equal("2020", worksheet.lever_graphs_l2511); end
  def test_lever_graphs_m2511; assert_equal("2025", worksheet.lever_graphs_m2511); end
  def test_lever_graphs_n2511; assert_equal("2030", worksheet.lever_graphs_n2511); end
  def test_lever_graphs_o2511; assert_equal("2035", worksheet.lever_graphs_o2511); end
  def test_lever_graphs_p2511; assert_equal("2040", worksheet.lever_graphs_p2511); end
  def test_lever_graphs_q2511; assert_equal("2045", worksheet.lever_graphs_q2511); end
  def test_lever_graphs_r2511; assert_equal("2050", worksheet.lever_graphs_r2511); end
  def test_lever_graphs_b2512; assert_equal("Historic data", worksheet.lever_graphs_b2512); end
  def test_lever_graphs_b2513; assert_in_delta(1.0, worksheet.lever_graphs_b2513, 0.002); end
  def test_lever_graphs_j2513; assert_in_delta(1.0, worksheet.lever_graphs_j2513, 0.002); end
  def test_lever_graphs_k2513; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2513, 0.002); end
  def test_lever_graphs_l2513; assert_in_delta(1.0, worksheet.lever_graphs_l2513, 0.002); end
  def test_lever_graphs_m2513; assert_in_delta(1.0, worksheet.lever_graphs_m2513, 0.002); end
  def test_lever_graphs_n2513; assert_in_delta(1.0, worksheet.lever_graphs_n2513, 0.002); end
  def test_lever_graphs_o2513; assert_in_delta(1.0, worksheet.lever_graphs_o2513, 0.002); end
  def test_lever_graphs_p2513; assert_in_delta(1.0, worksheet.lever_graphs_p2513, 0.002); end
  def test_lever_graphs_q2513; assert_in_delta(1.0, worksheet.lever_graphs_q2513, 0.002); end
  def test_lever_graphs_r2513; assert_in_delta(1.0, worksheet.lever_graphs_r2513, 0.002); end
  def test_lever_graphs_b2514; assert_in_epsilon(2.0, worksheet.lever_graphs_b2514, 0.002); end
  def test_lever_graphs_j2514; assert_in_delta(1.0, worksheet.lever_graphs_j2514, 0.002); end
  def test_lever_graphs_k2514; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2514, 0.002); end
  def test_lever_graphs_l2514; assert_in_delta(0.9769230769230769, worksheet.lever_graphs_l2514, 0.002); end
  def test_lever_graphs_m2514; assert_in_delta(0.9641025641025641, worksheet.lever_graphs_m2514, 0.002); end
  def test_lever_graphs_n2514; assert_in_delta(0.9512820512820512, worksheet.lever_graphs_n2514, 0.002); end
  def test_lever_graphs_o2514; assert_in_delta(0.9384615384615385, worksheet.lever_graphs_o2514, 0.002); end
  def test_lever_graphs_p2514; assert_in_delta(0.9256410256410257, worksheet.lever_graphs_p2514, 0.002); end
  def test_lever_graphs_q2514; assert_in_delta(0.9128205128205128, worksheet.lever_graphs_q2514, 0.002); end
  def test_lever_graphs_r2514; assert_in_delta(0.9, worksheet.lever_graphs_r2514, 0.002); end
  def test_lever_graphs_b2515; assert_in_epsilon(3.0, worksheet.lever_graphs_b2515, 0.002); end
  def test_lever_graphs_j2515; assert_in_delta(1.0, worksheet.lever_graphs_j2515, 0.002); end
  def test_lever_graphs_k2515; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2515, 0.002); end
  def test_lever_graphs_l2515; assert_in_delta(0.9538461538461539, worksheet.lever_graphs_l2515, 0.002); end
  def test_lever_graphs_m2515; assert_in_delta(0.9282051282051282, worksheet.lever_graphs_m2515, 0.002); end
  def test_lever_graphs_n2515; assert_in_delta(0.9025641025641026, worksheet.lever_graphs_n2515, 0.002); end
  def test_lever_graphs_o2515; assert_in_delta(0.8769230769230769, worksheet.lever_graphs_o2515, 0.002); end
  def test_lever_graphs_p2515; assert_in_delta(0.8512820512820514, worksheet.lever_graphs_p2515, 0.002); end
  def test_lever_graphs_q2515; assert_in_delta(0.8256410256410257, worksheet.lever_graphs_q2515, 0.002); end
  def test_lever_graphs_r2515; assert_in_delta(0.8, worksheet.lever_graphs_r2515, 0.002); end
  def test_lever_graphs_b2516; assert_in_epsilon(4.0, worksheet.lever_graphs_b2516, 0.002); end
  def test_lever_graphs_j2516; assert_in_delta(1.0, worksheet.lever_graphs_j2516, 0.002); end
  def test_lever_graphs_k2516; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2516, 0.002); end
  def test_lever_graphs_l2516; assert_in_delta(0.9307692307692308, worksheet.lever_graphs_l2516, 0.002); end
  def test_lever_graphs_m2516; assert_in_delta(0.8923076923076922, worksheet.lever_graphs_m2516, 0.002); end
  def test_lever_graphs_n2516; assert_in_delta(0.8538461538461538, worksheet.lever_graphs_n2516, 0.002); end
  def test_lever_graphs_o2516; assert_in_delta(0.8153846153846154, worksheet.lever_graphs_o2516, 0.002); end
  def test_lever_graphs_p2516; assert_in_delta(0.7769230769230768, worksheet.lever_graphs_p2516, 0.002); end
  def test_lever_graphs_q2516; assert_in_delta(0.7384615384615384, worksheet.lever_graphs_q2516, 0.002); end
  def test_lever_graphs_r2516; assert_in_delta(0.7, worksheet.lever_graphs_r2516, 0.002); end
  def test_lever_graphs_c2427; assert_equal("1975", worksheet.lever_graphs_c2427); end
  def test_lever_graphs_d2427; assert_equal("1980", worksheet.lever_graphs_d2427); end
  def test_lever_graphs_e2427; assert_equal("1985", worksheet.lever_graphs_e2427); end
  def test_lever_graphs_f2427; assert_equal("1990", worksheet.lever_graphs_f2427); end
  def test_lever_graphs_g2427; assert_equal("1995", worksheet.lever_graphs_g2427); end
  def test_lever_graphs_h2427; assert_equal("2000", worksheet.lever_graphs_h2427); end
  def test_lever_graphs_i2427; assert_equal("2005", worksheet.lever_graphs_i2427); end
  def test_lever_graphs_j2427; assert_equal("2011", worksheet.lever_graphs_j2427); end
  def test_lever_graphs_k2427; assert_equal("2015", worksheet.lever_graphs_k2427); end
  def test_lever_graphs_l2427; assert_equal("2020", worksheet.lever_graphs_l2427); end
  def test_lever_graphs_m2427; assert_equal("2025", worksheet.lever_graphs_m2427); end
  def test_lever_graphs_n2427; assert_equal("2030", worksheet.lever_graphs_n2427); end
  def test_lever_graphs_o2427; assert_equal("2035", worksheet.lever_graphs_o2427); end
  def test_lever_graphs_p2427; assert_equal("2040", worksheet.lever_graphs_p2427); end
  def test_lever_graphs_q2427; assert_equal("2045", worksheet.lever_graphs_q2427); end
  def test_lever_graphs_r2427; assert_equal("2050", worksheet.lever_graphs_r2427); end
  def test_lever_graphs_b2428; assert_equal("Historic data", worksheet.lever_graphs_b2428); end
  def test_lever_graphs_b2429; assert_in_delta(1.0, worksheet.lever_graphs_b2429, 0.002); end
  def test_lever_graphs_j2429; assert_in_delta(1.0, worksheet.lever_graphs_j2429, 0.002); end
  def test_lever_graphs_k2429; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2429, 0.002); end
  def test_lever_graphs_l2429; assert_in_delta(1.0, worksheet.lever_graphs_l2429, 0.002); end
  def test_lever_graphs_m2429; assert_in_delta(1.0, worksheet.lever_graphs_m2429, 0.002); end
  def test_lever_graphs_n2429; assert_in_delta(1.0, worksheet.lever_graphs_n2429, 0.002); end
  def test_lever_graphs_o2429; assert_in_delta(1.0, worksheet.lever_graphs_o2429, 0.002); end
  def test_lever_graphs_p2429; assert_in_delta(1.0, worksheet.lever_graphs_p2429, 0.002); end
  def test_lever_graphs_q2429; assert_in_delta(1.0, worksheet.lever_graphs_q2429, 0.002); end
  def test_lever_graphs_r2429; assert_in_delta(1.0, worksheet.lever_graphs_r2429, 0.002); end
  def test_lever_graphs_b2430; assert_in_epsilon(2.0, worksheet.lever_graphs_b2430, 0.002); end
  def test_lever_graphs_j2430; assert_in_delta(1.0, worksheet.lever_graphs_j2430, 0.002); end
  def test_lever_graphs_k2430; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2430, 0.002); end
  def test_lever_graphs_l2430; assert_in_delta(0.9769230769230769, worksheet.lever_graphs_l2430, 0.002); end
  def test_lever_graphs_m2430; assert_in_delta(0.9641025641025641, worksheet.lever_graphs_m2430, 0.002); end
  def test_lever_graphs_n2430; assert_in_delta(0.9512820512820512, worksheet.lever_graphs_n2430, 0.002); end
  def test_lever_graphs_o2430; assert_in_delta(0.9384615384615385, worksheet.lever_graphs_o2430, 0.002); end
  def test_lever_graphs_p2430; assert_in_delta(0.9256410256410257, worksheet.lever_graphs_p2430, 0.002); end
  def test_lever_graphs_q2430; assert_in_delta(0.9128205128205128, worksheet.lever_graphs_q2430, 0.002); end
  def test_lever_graphs_r2430; assert_in_delta(0.9, worksheet.lever_graphs_r2430, 0.002); end
  def test_lever_graphs_b2431; assert_in_epsilon(3.0, worksheet.lever_graphs_b2431, 0.002); end
  def test_lever_graphs_j2431; assert_in_delta(1.0, worksheet.lever_graphs_j2431, 0.002); end
  def test_lever_graphs_k2431; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2431, 0.002); end
  def test_lever_graphs_l2431; assert_in_delta(0.9538461538461539, worksheet.lever_graphs_l2431, 0.002); end
  def test_lever_graphs_m2431; assert_in_delta(0.9282051282051282, worksheet.lever_graphs_m2431, 0.002); end
  def test_lever_graphs_n2431; assert_in_delta(0.9025641025641026, worksheet.lever_graphs_n2431, 0.002); end
  def test_lever_graphs_o2431; assert_in_delta(0.8769230769230769, worksheet.lever_graphs_o2431, 0.002); end
  def test_lever_graphs_p2431; assert_in_delta(0.8512820512820514, worksheet.lever_graphs_p2431, 0.002); end
  def test_lever_graphs_q2431; assert_in_delta(0.8256410256410257, worksheet.lever_graphs_q2431, 0.002); end
  def test_lever_graphs_r2431; assert_in_delta(0.8, worksheet.lever_graphs_r2431, 0.002); end
  def test_lever_graphs_b2432; assert_in_epsilon(4.0, worksheet.lever_graphs_b2432, 0.002); end
  def test_lever_graphs_j2432; assert_in_delta(1.0, worksheet.lever_graphs_j2432, 0.002); end
  def test_lever_graphs_k2432; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2432, 0.002); end
  def test_lever_graphs_l2432; assert_in_delta(0.9307692307692308, worksheet.lever_graphs_l2432, 0.002); end
  def test_lever_graphs_m2432; assert_in_delta(0.8923076923076922, worksheet.lever_graphs_m2432, 0.002); end
  def test_lever_graphs_n2432; assert_in_delta(0.8538461538461538, worksheet.lever_graphs_n2432, 0.002); end
  def test_lever_graphs_o2432; assert_in_delta(0.8153846153846154, worksheet.lever_graphs_o2432, 0.002); end
  def test_lever_graphs_p2432; assert_in_delta(0.7769230769230768, worksheet.lever_graphs_p2432, 0.002); end
  def test_lever_graphs_q2432; assert_in_delta(0.7384615384615384, worksheet.lever_graphs_q2432, 0.002); end
  def test_lever_graphs_r2432; assert_in_delta(0.7, worksheet.lever_graphs_r2432, 0.002); end
  def test_lever_graphs_d2357; assert_equal("Title", worksheet.lever_graphs_d2357); end
  def test_lever_graphs_e2357; assert_equal("Steel", worksheet.lever_graphs_e2357); end
  def test_lever_graphs_f2357; assert_equal("Chemicals & petrochemicals", worksheet.lever_graphs_f2357); end
  def test_lever_graphs_g2357; assert_equal("Pulp & paper", worksheet.lever_graphs_g2357); end
  def test_lever_graphs_d2358; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2358, 0.002); end
  def test_lever_graphs_e2358; assert_in_delta(0.0, (worksheet.lever_graphs_e2358||0), 0.002); end
  def test_lever_graphs_f2358; assert_in_delta(0.0, (worksheet.lever_graphs_f2358||0), 0.002); end
  def test_lever_graphs_g2358; assert_in_delta(0.0, (worksheet.lever_graphs_g2358||0), 0.002); end
  def test_lever_graphs_d2359; assert_equal("2050: Level 1", worksheet.lever_graphs_d2359); end
  def test_lever_graphs_e2359; assert_in_delta(0.0, (worksheet.lever_graphs_e2359||0), 0.002); end
  def test_lever_graphs_f2359; assert_in_delta(0.07624999999999993, worksheet.lever_graphs_f2359, 0.002); end
  def test_lever_graphs_g2359; assert_in_delta(0.0, (worksheet.lever_graphs_g2359||0), 0.002); end
  def test_lever_graphs_d2360; assert_equal("2050: Level 2", worksheet.lever_graphs_d2360); end
  def test_lever_graphs_e2360; assert_in_delta(0.1549295774647888, worksheet.lever_graphs_e2360, 0.002); end
  def test_lever_graphs_f2360; assert_in_delta(0.15500000000000025, worksheet.lever_graphs_f2360, 0.002); end
  def test_lever_graphs_g2360; assert_in_delta(0.09090909090909091, worksheet.lever_graphs_g2360, 0.002); end
  def test_lever_graphs_d2361; assert_equal("2050: Level 3", worksheet.lever_graphs_d2361); end
  def test_lever_graphs_e2361; assert_in_delta(0.295774647887324, worksheet.lever_graphs_e2361, 0.002); end
  def test_lever_graphs_f2361; assert_in_delta(0.23624999999999985, worksheet.lever_graphs_f2361, 0.002); end
  def test_lever_graphs_g2361; assert_in_delta(0.2424242424242424, worksheet.lever_graphs_g2361, 0.002); end
  def test_lever_graphs_d2362; assert_equal("2050: Level 4", worksheet.lever_graphs_d2362); end
  def test_lever_graphs_e2362; assert_in_delta(0.647887323943662, worksheet.lever_graphs_e2362, 0.002); end
  def test_lever_graphs_f2362; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_f2362, 0.002); end
  def test_lever_graphs_g2362; assert_in_delta(0.3939393939393939, worksheet.lever_graphs_g2362, 0.002); end
  def test_lever_graphs_d2368; assert_equal("Title", worksheet.lever_graphs_d2368); end
  def test_lever_graphs_e2368; assert_equal("Aluminium", worksheet.lever_graphs_e2368); end
  def test_lever_graphs_d2369; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2369, 0.002); end
  def test_lever_graphs_e2369; assert_in_delta(0.0, (worksheet.lever_graphs_e2369||0), 0.002); end
  def test_lever_graphs_d2370; assert_equal("2050: Level 1", worksheet.lever_graphs_d2370); end
  def test_lever_graphs_e2370; assert_in_delta(-0.8750000000000001, worksheet.lever_graphs_e2370, 0.002); end
  def test_lever_graphs_d2371; assert_equal("2050: Level 2", worksheet.lever_graphs_d2371); end
  def test_lever_graphs_e2371; assert_in_delta(-0.7708333333333334, worksheet.lever_graphs_e2371, 0.002); end
  def test_lever_graphs_d2372; assert_equal("2050: Level 3", worksheet.lever_graphs_d2372); end
  def test_lever_graphs_e2372; assert_in_delta(-0.6666666666666667, worksheet.lever_graphs_e2372, 0.002); end
  def test_lever_graphs_d2373; assert_equal("2050: Level 4", worksheet.lever_graphs_d2373); end
  def test_lever_graphs_e2373; assert_in_delta(-0.5625000000000001, worksheet.lever_graphs_e2373, 0.002); end
  def test_lever_graphs_d2311; assert_equal("Title", worksheet.lever_graphs_d2311); end
  def test_lever_graphs_e2311; assert_equal("Global Oxygen steel technology", worksheet.lever_graphs_e2311); end
  def test_lever_graphs_f2311; assert_equal("Global Hisarna Oxygen steel technology", worksheet.lever_graphs_f2311); end
  def test_lever_graphs_g2311; assert_equal("Global Electric steel technology", worksheet.lever_graphs_g2311); end
  def test_lever_graphs_h2311; assert_equal("Global DRI Electric steel technology", worksheet.lever_graphs_h2311); end
  def test_lever_graphs_i2311; assert_equal("Global Alumina Aluminium technology", worksheet.lever_graphs_i2311); end
  def test_lever_graphs_j2311; assert_equal("Global Primary Aluminium technology", worksheet.lever_graphs_j2311); end
  def test_lever_graphs_k2311; assert_equal("Global Secondary Aluminium technology", worksheet.lever_graphs_k2311); end
  def test_lever_graphs_l2311; assert_equal("Global Chemicals: High Value Chemicals  technology", worksheet.lever_graphs_l2311); end
  def test_lever_graphs_m2311; assert_equal("Global Chemicals: Ammonia technology", worksheet.lever_graphs_m2311); end
  def test_lever_graphs_n2311; assert_equal("Global Chemicals: Methanol technology", worksheet.lever_graphs_n2311); end
  def test_lever_graphs_o2311; assert_equal("Global Chemicals: Others technology", worksheet.lever_graphs_o2311); end
  def test_lever_graphs_p2311; assert_equal("Global Pulp & paper: Pulp technology", worksheet.lever_graphs_p2311); end
  def test_lever_graphs_q2311; assert_equal("Global Pulp & paper: Virgin technology", worksheet.lever_graphs_q2311); end
  def test_lever_graphs_r2311; assert_equal("Global Pulp & paper: Recycled technology", worksheet.lever_graphs_r2311); end
  def test_lever_graphs_s2311; assert_equal("Global Cement technology", worksheet.lever_graphs_s2311); end
  def test_lever_graphs_t2311; assert_equal("Global Timber technology", worksheet.lever_graphs_t2311); end
  def test_lever_graphs_u2311; assert_equal("Global Other industries technology", worksheet.lever_graphs_u2311); end
  def test_lever_graphs_d2312; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2312, 0.002); end
  def test_lever_graphs_e2312; assert_in_delta(0.0, (worksheet.lever_graphs_e2312||0), 0.002); end
  def test_lever_graphs_f2312; assert_in_delta(0.0, (worksheet.lever_graphs_f2312||0), 0.002); end
  def test_lever_graphs_g2312; assert_in_delta(0.0, (worksheet.lever_graphs_g2312||0), 0.002); end
  def test_lever_graphs_h2312; assert_in_delta(0.0, (worksheet.lever_graphs_h2312||0), 0.002); end
  def test_lever_graphs_i2312; assert_in_delta(0.0, (worksheet.lever_graphs_i2312||0), 0.002); end
  def test_lever_graphs_j2312; assert_in_delta(0.0, (worksheet.lever_graphs_j2312||0), 0.002); end
  def test_lever_graphs_k2312; assert_in_delta(0.0, (worksheet.lever_graphs_k2312||0), 0.002); end
  def test_lever_graphs_l2312; assert_in_delta(0.0, (worksheet.lever_graphs_l2312||0), 0.002); end
  def test_lever_graphs_m2312; assert_in_delta(0.0, (worksheet.lever_graphs_m2312||0), 0.002); end
  def test_lever_graphs_n2312; assert_in_delta(0.0, (worksheet.lever_graphs_n2312||0), 0.002); end
  def test_lever_graphs_o2312; assert_in_delta(0.0, (worksheet.lever_graphs_o2312||0), 0.002); end
  def test_lever_graphs_p2312; assert_in_delta(0.0, (worksheet.lever_graphs_p2312||0), 0.002); end
  def test_lever_graphs_q2312; assert_in_delta(0.0, (worksheet.lever_graphs_q2312||0), 0.002); end
  def test_lever_graphs_r2312; assert_in_delta(0.0, (worksheet.lever_graphs_r2312||0), 0.002); end
  def test_lever_graphs_s2312; assert_in_delta(0.0, (worksheet.lever_graphs_s2312||0), 0.002); end
  def test_lever_graphs_t2312; assert_in_delta(0.0, (worksheet.lever_graphs_t2312||0), 0.002); end
  def test_lever_graphs_u2312; assert_in_delta(0.0, (worksheet.lever_graphs_u2312||0), 0.002); end
  def test_lever_graphs_d2313; assert_equal("2050: Level 1", worksheet.lever_graphs_d2313); end
  def test_lever_graphs_e2313; assert_in_delta(0.0, (worksheet.lever_graphs_e2313||0), 0.002); end
  def test_lever_graphs_f2313; assert_in_delta(0.0, (worksheet.lever_graphs_f2313||0), 0.002); end
  def test_lever_graphs_g2313; assert_in_delta(0.0, (worksheet.lever_graphs_g2313||0), 0.002); end
  def test_lever_graphs_h2313; assert_in_delta(0.0, (worksheet.lever_graphs_h2313||0), 0.002); end
  def test_lever_graphs_i2313; assert_in_delta(0.0, (worksheet.lever_graphs_i2313||0), 0.002); end
  def test_lever_graphs_j2313; assert_in_delta(0.0, (worksheet.lever_graphs_j2313||0), 0.002); end
  def test_lever_graphs_k2313; assert_in_delta(0.0, (worksheet.lever_graphs_k2313||0), 0.002); end
  def test_lever_graphs_l2313; assert_in_delta(0.0, (worksheet.lever_graphs_l2313||0), 0.002); end
  def test_lever_graphs_m2313; assert_in_delta(0.0, (worksheet.lever_graphs_m2313||0), 0.002); end
  def test_lever_graphs_n2313; assert_in_delta(0.0, (worksheet.lever_graphs_n2313||0), 0.002); end
  def test_lever_graphs_o2313; assert_in_delta(0.0, (worksheet.lever_graphs_o2313||0), 0.002); end
  def test_lever_graphs_p2313; assert_in_delta(0.0, (worksheet.lever_graphs_p2313||0), 0.002); end
  def test_lever_graphs_q2313; assert_in_delta(0.0, (worksheet.lever_graphs_q2313||0), 0.002); end
  def test_lever_graphs_r2313; assert_in_delta(0.0, (worksheet.lever_graphs_r2313||0), 0.002); end
  def test_lever_graphs_s2313; assert_in_delta(0.05, worksheet.lever_graphs_s2313, 0.002); end
  def test_lever_graphs_t2313; assert_in_delta(0.0, (worksheet.lever_graphs_t2313||0), 0.002); end
  def test_lever_graphs_u2313; assert_in_delta(0.0, (worksheet.lever_graphs_u2313||0), 0.002); end
  def test_lever_graphs_d2314; assert_equal("2050: Level 2", worksheet.lever_graphs_d2314); end
  def test_lever_graphs_e2314; assert_in_delta(0.05, worksheet.lever_graphs_e2314, 0.002); end
  def test_lever_graphs_f2314; assert_in_delta(0.0, (worksheet.lever_graphs_f2314||0), 0.002); end
  def test_lever_graphs_g2314; assert_in_delta(0.0, (worksheet.lever_graphs_g2314||0), 0.002); end
  def test_lever_graphs_h2314; assert_in_delta(0.0, (worksheet.lever_graphs_h2314||0), 0.002); end
  def test_lever_graphs_i2314; assert_in_delta(0.025, worksheet.lever_graphs_i2314, 0.002); end
  def test_lever_graphs_j2314; assert_in_delta(0.025, worksheet.lever_graphs_j2314, 0.002); end
  def test_lever_graphs_k2314; assert_in_delta(0.025, worksheet.lever_graphs_k2314, 0.002); end
  def test_lever_graphs_l2314; assert_in_delta(0.05, worksheet.lever_graphs_l2314, 0.002); end
  def test_lever_graphs_m2314; assert_in_delta(0.075, worksheet.lever_graphs_m2314, 0.002); end
  def test_lever_graphs_n2314; assert_in_delta(0.075, worksheet.lever_graphs_n2314, 0.002); end
  def test_lever_graphs_o2314; assert_in_delta(0.05, worksheet.lever_graphs_o2314, 0.002); end
  def test_lever_graphs_p2314; assert_in_delta(0.2, worksheet.lever_graphs_p2314, 0.002); end
  def test_lever_graphs_q2314; assert_in_delta(0.2, worksheet.lever_graphs_q2314, 0.002); end
  def test_lever_graphs_r2314; assert_in_delta(0.2, worksheet.lever_graphs_r2314, 0.002); end
  def test_lever_graphs_s2314; assert_in_delta(0.09, worksheet.lever_graphs_s2314, 0.002); end
  def test_lever_graphs_t2314; assert_in_delta(0.2, worksheet.lever_graphs_t2314, 0.002); end
  def test_lever_graphs_u2314; assert_in_delta(0.0, (worksheet.lever_graphs_u2314||0), 0.002); end
  def test_lever_graphs_d2315; assert_equal("2050: Level 3", worksheet.lever_graphs_d2315); end
  def test_lever_graphs_e2315; assert_in_delta(0.07, worksheet.lever_graphs_e2315, 0.002); end
  def test_lever_graphs_f2315; assert_in_delta(0.0, (worksheet.lever_graphs_f2315||0), 0.002); end
  def test_lever_graphs_g2315; assert_in_delta(0.0, (worksheet.lever_graphs_g2315||0), 0.002); end
  def test_lever_graphs_h2315; assert_in_delta(0.0, (worksheet.lever_graphs_h2315||0), 0.002); end
  def test_lever_graphs_i2315; assert_in_delta(0.05, worksheet.lever_graphs_i2315, 0.002); end
  def test_lever_graphs_j2315; assert_in_delta(0.05, worksheet.lever_graphs_j2315, 0.002); end
  def test_lever_graphs_k2315; assert_in_delta(0.05, worksheet.lever_graphs_k2315, 0.002); end
  def test_lever_graphs_l2315; assert_in_delta(0.1, worksheet.lever_graphs_l2315, 0.002); end
  def test_lever_graphs_m2315; assert_in_delta(0.15, worksheet.lever_graphs_m2315, 0.002); end
  def test_lever_graphs_n2315; assert_in_delta(0.15, worksheet.lever_graphs_n2315, 0.002); end
  def test_lever_graphs_o2315; assert_in_delta(0.1, worksheet.lever_graphs_o2315, 0.002); end
  def test_lever_graphs_p2315; assert_in_delta(0.3, worksheet.lever_graphs_p2315, 0.002); end
  def test_lever_graphs_q2315; assert_in_delta(0.3, worksheet.lever_graphs_q2315, 0.002); end
  def test_lever_graphs_r2315; assert_in_delta(0.3, worksheet.lever_graphs_r2315, 0.002); end
  def test_lever_graphs_s2315; assert_in_delta(0.18, worksheet.lever_graphs_s2315, 0.002); end
  def test_lever_graphs_t2315; assert_in_delta(0.3, worksheet.lever_graphs_t2315, 0.002); end
  def test_lever_graphs_u2315; assert_in_delta(0.0, (worksheet.lever_graphs_u2315||0), 0.002); end
  def test_lever_graphs_d2316; assert_equal("2050: Level 4", worksheet.lever_graphs_d2316); end
  def test_lever_graphs_e2316; assert_in_delta(0.1, worksheet.lever_graphs_e2316, 0.002); end
  def test_lever_graphs_f2316; assert_in_delta(0.0, (worksheet.lever_graphs_f2316||0), 0.002); end
  def test_lever_graphs_g2316; assert_in_delta(0.0, (worksheet.lever_graphs_g2316||0), 0.002); end
  def test_lever_graphs_h2316; assert_in_delta(0.0, (worksheet.lever_graphs_h2316||0), 0.002); end
  def test_lever_graphs_i2316; assert_in_delta(0.1, worksheet.lever_graphs_i2316, 0.002); end
  def test_lever_graphs_j2316; assert_in_delta(0.1, worksheet.lever_graphs_j2316, 0.002); end
  def test_lever_graphs_k2316; assert_in_delta(0.1, worksheet.lever_graphs_k2316, 0.002); end
  def test_lever_graphs_l2316; assert_in_delta(0.2, worksheet.lever_graphs_l2316, 0.002); end
  def test_lever_graphs_m2316; assert_in_delta(0.3, worksheet.lever_graphs_m2316, 0.002); end
  def test_lever_graphs_n2316; assert_in_delta(0.3, worksheet.lever_graphs_n2316, 0.002); end
  def test_lever_graphs_o2316; assert_in_delta(0.2, worksheet.lever_graphs_o2316, 0.002); end
  def test_lever_graphs_p2316; assert_in_delta(0.4, worksheet.lever_graphs_p2316, 0.002); end
  def test_lever_graphs_q2316; assert_in_delta(0.4, worksheet.lever_graphs_q2316, 0.002); end
  def test_lever_graphs_r2316; assert_in_delta(0.4, worksheet.lever_graphs_r2316, 0.002); end
  def test_lever_graphs_s2316; assert_in_delta(0.3, worksheet.lever_graphs_s2316, 0.002); end
  def test_lever_graphs_t2316; assert_in_delta(0.4, worksheet.lever_graphs_t2316, 0.002); end
  def test_lever_graphs_u2316; assert_in_delta(0.0, (worksheet.lever_graphs_u2316||0), 0.002); end
  def test_lever_graphs_c2417; assert_equal("1975", worksheet.lever_graphs_c2417); end
  def test_lever_graphs_d2417; assert_equal("1980", worksheet.lever_graphs_d2417); end
  def test_lever_graphs_e2417; assert_equal("1985", worksheet.lever_graphs_e2417); end
  def test_lever_graphs_f2417; assert_equal("1990", worksheet.lever_graphs_f2417); end
  def test_lever_graphs_g2417; assert_equal("1995", worksheet.lever_graphs_g2417); end
  def test_lever_graphs_h2417; assert_equal("2000", worksheet.lever_graphs_h2417); end
  def test_lever_graphs_i2417; assert_equal("2005", worksheet.lever_graphs_i2417); end
  def test_lever_graphs_j2417; assert_equal("2011", worksheet.lever_graphs_j2417); end
  def test_lever_graphs_k2417; assert_equal("2015", worksheet.lever_graphs_k2417); end
  def test_lever_graphs_l2417; assert_equal("2020", worksheet.lever_graphs_l2417); end
  def test_lever_graphs_m2417; assert_equal("2025", worksheet.lever_graphs_m2417); end
  def test_lever_graphs_n2417; assert_equal("2030", worksheet.lever_graphs_n2417); end
  def test_lever_graphs_o2417; assert_equal("2035", worksheet.lever_graphs_o2417); end
  def test_lever_graphs_p2417; assert_equal("2040", worksheet.lever_graphs_p2417); end
  def test_lever_graphs_q2417; assert_equal("2045", worksheet.lever_graphs_q2417); end
  def test_lever_graphs_r2417; assert_equal("2050", worksheet.lever_graphs_r2417); end
  def test_lever_graphs_b2418; assert_equal("Historic data", worksheet.lever_graphs_b2418); end
  def test_lever_graphs_b2419; assert_in_delta(1.0, worksheet.lever_graphs_b2419, 0.002); end
  def test_lever_graphs_j2419; assert_in_delta(0.0, (worksheet.lever_graphs_j2419||0), 0.002); end
  def test_lever_graphs_k2419; assert_in_delta(0.002564102564102564, worksheet.lever_graphs_k2419, 0.002); end
  def test_lever_graphs_l2419; assert_in_delta(0.0, (worksheet.lever_graphs_l2419||0), 0.002); end
  def test_lever_graphs_m2419; assert_in_delta(0.0, (worksheet.lever_graphs_m2419||0), 0.002); end
  def test_lever_graphs_n2419; assert_in_delta(0.0, (worksheet.lever_graphs_n2419||0), 0.002); end
  def test_lever_graphs_o2419; assert_in_delta(0.0, (worksheet.lever_graphs_o2419||0), 0.002); end
  def test_lever_graphs_p2419; assert_in_delta(0.0, (worksheet.lever_graphs_p2419||0), 0.002); end
  def test_lever_graphs_q2419; assert_in_delta(0.0, (worksheet.lever_graphs_q2419||0), 0.002); end
  def test_lever_graphs_r2419; assert_in_delta(0.0, (worksheet.lever_graphs_r2419||0), 0.002); end
  def test_lever_graphs_b2420; assert_in_epsilon(2.0, worksheet.lever_graphs_b2420, 0.002); end
  def test_lever_graphs_j2420; assert_in_delta(0.0, (worksheet.lever_graphs_j2420||0), 0.002); end
  def test_lever_graphs_k2420; assert_in_delta(0.002564102564102564, worksheet.lever_graphs_k2420, 0.002); end
  def test_lever_graphs_l2420; assert_in_delta(0.0057692307692307696, worksheet.lever_graphs_l2420, 0.002); end
  def test_lever_graphs_m2420; assert_in_delta(0.008974358974358974, worksheet.lever_graphs_m2420, 0.002); end
  def test_lever_graphs_n2420; assert_in_delta(0.01217948717948718, worksheet.lever_graphs_n2420, 0.002); end
  def test_lever_graphs_o2420; assert_in_delta(0.015384615384615385, worksheet.lever_graphs_o2420, 0.002); end
  def test_lever_graphs_p2420; assert_in_delta(0.01858974358974359, worksheet.lever_graphs_p2420, 0.002); end
  def test_lever_graphs_q2420; assert_in_delta(0.021794871794871794, worksheet.lever_graphs_q2420, 0.002); end
  def test_lever_graphs_r2420; assert_in_delta(0.025, worksheet.lever_graphs_r2420, 0.002); end
  def test_lever_graphs_b2421; assert_in_epsilon(3.0, worksheet.lever_graphs_b2421, 0.002); end
  def test_lever_graphs_j2421; assert_in_delta(0.0, (worksheet.lever_graphs_j2421||0), 0.002); end
  def test_lever_graphs_k2421; assert_in_delta(0.002564102564102564, worksheet.lever_graphs_k2421, 0.002); end
  def test_lever_graphs_l2421; assert_in_delta(0.011538461538461539, worksheet.lever_graphs_l2421, 0.002); end
  def test_lever_graphs_m2421; assert_in_delta(0.017948717948717947, worksheet.lever_graphs_m2421, 0.002); end
  def test_lever_graphs_n2421; assert_in_delta(0.02435897435897436, worksheet.lever_graphs_n2421, 0.002); end
  def test_lever_graphs_o2421; assert_in_delta(0.03076923076923077, worksheet.lever_graphs_o2421, 0.002); end
  def test_lever_graphs_p2421; assert_in_delta(0.03717948717948718, worksheet.lever_graphs_p2421, 0.002); end
  def test_lever_graphs_q2421; assert_in_delta(0.04358974358974359, worksheet.lever_graphs_q2421, 0.002); end
  def test_lever_graphs_r2421; assert_in_delta(0.05, worksheet.lever_graphs_r2421, 0.002); end
  def test_lever_graphs_b2422; assert_in_epsilon(4.0, worksheet.lever_graphs_b2422, 0.002); end
  def test_lever_graphs_j2422; assert_in_delta(0.0, (worksheet.lever_graphs_j2422||0), 0.002); end
  def test_lever_graphs_k2422; assert_in_delta(0.002564102564102564, worksheet.lever_graphs_k2422, 0.002); end
  def test_lever_graphs_l2422; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2422, 0.002); end
  def test_lever_graphs_m2422; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2422, 0.002); end
  def test_lever_graphs_n2422; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2422, 0.002); end
  def test_lever_graphs_o2422; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2422, 0.002); end
  def test_lever_graphs_p2422; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2422, 0.002); end
  def test_lever_graphs_q2422; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2422, 0.002); end
  def test_lever_graphs_r2422; assert_in_delta(0.1, worksheet.lever_graphs_r2422, 0.002); end
  def test_lever_graphs_c2445; assert_equal("1975", worksheet.lever_graphs_c2445); end
  def test_lever_graphs_d2445; assert_equal("1980", worksheet.lever_graphs_d2445); end
  def test_lever_graphs_e2445; assert_equal("1985", worksheet.lever_graphs_e2445); end
  def test_lever_graphs_f2445; assert_equal("1990", worksheet.lever_graphs_f2445); end
  def test_lever_graphs_g2445; assert_equal("1995", worksheet.lever_graphs_g2445); end
  def test_lever_graphs_h2445; assert_equal("2000", worksheet.lever_graphs_h2445); end
  def test_lever_graphs_i2445; assert_equal("2005", worksheet.lever_graphs_i2445); end
  def test_lever_graphs_j2445; assert_equal("2011", worksheet.lever_graphs_j2445); end
  def test_lever_graphs_k2445; assert_equal("2015", worksheet.lever_graphs_k2445); end
  def test_lever_graphs_l2445; assert_equal("2020", worksheet.lever_graphs_l2445); end
  def test_lever_graphs_m2445; assert_equal("2025", worksheet.lever_graphs_m2445); end
  def test_lever_graphs_n2445; assert_equal("2030", worksheet.lever_graphs_n2445); end
  def test_lever_graphs_o2445; assert_equal("2035", worksheet.lever_graphs_o2445); end
  def test_lever_graphs_p2445; assert_equal("2040", worksheet.lever_graphs_p2445); end
  def test_lever_graphs_q2445; assert_equal("2045", worksheet.lever_graphs_q2445); end
  def test_lever_graphs_r2445; assert_equal("2050", worksheet.lever_graphs_r2445); end
  def test_lever_graphs_b2446; assert_equal("Historic data", worksheet.lever_graphs_b2446); end
  def test_lever_graphs_b2447; assert_in_delta(1.0, worksheet.lever_graphs_b2447, 0.002); end
  def test_lever_graphs_j2447; assert_in_delta(0.0, (worksheet.lever_graphs_j2447||0), 0.002); end
  def test_lever_graphs_k2447; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2447, 0.002); end
  def test_lever_graphs_l2447; assert_in_delta(0.0, (worksheet.lever_graphs_l2447||0), 0.002); end
  def test_lever_graphs_m2447; assert_in_delta(0.0, (worksheet.lever_graphs_m2447||0), 0.002); end
  def test_lever_graphs_n2447; assert_in_delta(0.0, (worksheet.lever_graphs_n2447||0), 0.002); end
  def test_lever_graphs_o2447; assert_in_delta(0.0, (worksheet.lever_graphs_o2447||0), 0.002); end
  def test_lever_graphs_p2447; assert_in_delta(0.0, (worksheet.lever_graphs_p2447||0), 0.002); end
  def test_lever_graphs_q2447; assert_in_delta(0.0, (worksheet.lever_graphs_q2447||0), 0.002); end
  def test_lever_graphs_r2447; assert_in_delta(0.0, (worksheet.lever_graphs_r2447||0), 0.002); end
  def test_lever_graphs_b2448; assert_in_epsilon(2.0, worksheet.lever_graphs_b2448, 0.002); end
  def test_lever_graphs_j2448; assert_in_delta(0.0, (worksheet.lever_graphs_j2448||0), 0.002); end
  def test_lever_graphs_k2448; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2448, 0.002); end
  def test_lever_graphs_l2448; assert_in_delta(0.011538461538461539, worksheet.lever_graphs_l2448, 0.002); end
  def test_lever_graphs_m2448; assert_in_delta(0.017948717948717947, worksheet.lever_graphs_m2448, 0.002); end
  def test_lever_graphs_n2448; assert_in_delta(0.02435897435897436, worksheet.lever_graphs_n2448, 0.002); end
  def test_lever_graphs_o2448; assert_in_delta(0.03076923076923077, worksheet.lever_graphs_o2448, 0.002); end
  def test_lever_graphs_p2448; assert_in_delta(0.03717948717948718, worksheet.lever_graphs_p2448, 0.002); end
  def test_lever_graphs_q2448; assert_in_delta(0.04358974358974359, worksheet.lever_graphs_q2448, 0.002); end
  def test_lever_graphs_r2448; assert_in_delta(0.05, worksheet.lever_graphs_r2448, 0.002); end
  def test_lever_graphs_b2449; assert_in_epsilon(3.0, worksheet.lever_graphs_b2449, 0.002); end
  def test_lever_graphs_j2449; assert_in_delta(0.0, (worksheet.lever_graphs_j2449||0), 0.002); end
  def test_lever_graphs_k2449; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2449, 0.002); end
  def test_lever_graphs_l2449; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2449, 0.002); end
  def test_lever_graphs_m2449; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2449, 0.002); end
  def test_lever_graphs_n2449; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2449, 0.002); end
  def test_lever_graphs_o2449; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2449, 0.002); end
  def test_lever_graphs_p2449; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2449, 0.002); end
  def test_lever_graphs_q2449; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2449, 0.002); end
  def test_lever_graphs_r2449; assert_in_delta(0.1, worksheet.lever_graphs_r2449, 0.002); end
  def test_lever_graphs_b2450; assert_in_epsilon(4.0, worksheet.lever_graphs_b2450, 0.002); end
  def test_lever_graphs_j2450; assert_in_delta(0.0, (worksheet.lever_graphs_j2450||0), 0.002); end
  def test_lever_graphs_k2450; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2450, 0.002); end
  def test_lever_graphs_l2450; assert_in_delta(0.046153846153846156, worksheet.lever_graphs_l2450, 0.002); end
  def test_lever_graphs_m2450; assert_in_delta(0.07179487179487179, worksheet.lever_graphs_m2450, 0.002); end
  def test_lever_graphs_n2450; assert_in_delta(0.09743589743589744, worksheet.lever_graphs_n2450, 0.002); end
  def test_lever_graphs_o2450; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_o2450, 0.002); end
  def test_lever_graphs_p2450; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_p2450, 0.002); end
  def test_lever_graphs_q2450; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_q2450, 0.002); end
  def test_lever_graphs_r2450; assert_in_delta(0.2, worksheet.lever_graphs_r2450, 0.002); end
  def test_lever_graphs_c2483; assert_equal("1975", worksheet.lever_graphs_c2483); end
  def test_lever_graphs_d2483; assert_equal("1980", worksheet.lever_graphs_d2483); end
  def test_lever_graphs_e2483; assert_equal("1985", worksheet.lever_graphs_e2483); end
  def test_lever_graphs_f2483; assert_equal("1990", worksheet.lever_graphs_f2483); end
  def test_lever_graphs_g2483; assert_equal("1995", worksheet.lever_graphs_g2483); end
  def test_lever_graphs_h2483; assert_equal("2000", worksheet.lever_graphs_h2483); end
  def test_lever_graphs_i2483; assert_equal("2005", worksheet.lever_graphs_i2483); end
  def test_lever_graphs_j2483; assert_equal("2011", worksheet.lever_graphs_j2483); end
  def test_lever_graphs_k2483; assert_equal("2015", worksheet.lever_graphs_k2483); end
  def test_lever_graphs_l2483; assert_equal("2020", worksheet.lever_graphs_l2483); end
  def test_lever_graphs_m2483; assert_equal("2025", worksheet.lever_graphs_m2483); end
  def test_lever_graphs_n2483; assert_equal("2030", worksheet.lever_graphs_n2483); end
  def test_lever_graphs_o2483; assert_equal("2035", worksheet.lever_graphs_o2483); end
  def test_lever_graphs_p2483; assert_equal("2040", worksheet.lever_graphs_p2483); end
  def test_lever_graphs_q2483; assert_equal("2045", worksheet.lever_graphs_q2483); end
  def test_lever_graphs_r2483; assert_equal("2050", worksheet.lever_graphs_r2483); end
  def test_lever_graphs_b2484; assert_equal("Historic data", worksheet.lever_graphs_b2484); end
  def test_lever_graphs_b2485; assert_in_delta(1.0, worksheet.lever_graphs_b2485, 0.002); end
  def test_lever_graphs_j2485; assert_in_delta(0.0, (worksheet.lever_graphs_j2485||0), 0.002); end
  def test_lever_graphs_k2485; assert_in_delta(0.0, (worksheet.lever_graphs_k2485||0), 0.002); end
  def test_lever_graphs_l2485; assert_in_delta(0.0, (worksheet.lever_graphs_l2485||0), 0.002); end
  def test_lever_graphs_m2485; assert_in_delta(0.0, (worksheet.lever_graphs_m2485||0), 0.002); end
  def test_lever_graphs_n2485; assert_in_delta(0.0, (worksheet.lever_graphs_n2485||0), 0.002); end
  def test_lever_graphs_o2485; assert_in_delta(0.0, (worksheet.lever_graphs_o2485||0), 0.002); end
  def test_lever_graphs_p2485; assert_in_delta(0.0, (worksheet.lever_graphs_p2485||0), 0.002); end
  def test_lever_graphs_q2485; assert_in_delta(0.0, (worksheet.lever_graphs_q2485||0), 0.002); end
  def test_lever_graphs_r2485; assert_in_delta(0.0, (worksheet.lever_graphs_r2485||0), 0.002); end
  def test_lever_graphs_b2486; assert_in_epsilon(2.0, worksheet.lever_graphs_b2486, 0.002); end
  def test_lever_graphs_j2486; assert_in_delta(0.0, (worksheet.lever_graphs_j2486||0), 0.002); end
  def test_lever_graphs_k2486; assert_in_delta(0.0, (worksheet.lever_graphs_k2486||0), 0.002); end
  def test_lever_graphs_l2486; assert_in_delta(0.0, (worksheet.lever_graphs_l2486||0), 0.002); end
  def test_lever_graphs_m2486; assert_in_delta(0.0, (worksheet.lever_graphs_m2486||0), 0.002); end
  def test_lever_graphs_n2486; assert_in_delta(0.0, (worksheet.lever_graphs_n2486||0), 0.002); end
  def test_lever_graphs_o2486; assert_in_delta(0.0, (worksheet.lever_graphs_o2486||0), 0.002); end
  def test_lever_graphs_p2486; assert_in_delta(0.0, (worksheet.lever_graphs_p2486||0), 0.002); end
  def test_lever_graphs_q2486; assert_in_delta(0.0, (worksheet.lever_graphs_q2486||0), 0.002); end
  def test_lever_graphs_r2486; assert_in_delta(0.0, (worksheet.lever_graphs_r2486||0), 0.002); end
  def test_lever_graphs_b2487; assert_in_epsilon(3.0, worksheet.lever_graphs_b2487, 0.002); end
  def test_lever_graphs_j2487; assert_in_delta(0.0, (worksheet.lever_graphs_j2487||0), 0.002); end
  def test_lever_graphs_k2487; assert_in_delta(0.0, (worksheet.lever_graphs_k2487||0), 0.002); end
  def test_lever_graphs_l2487; assert_in_delta(0.0, (worksheet.lever_graphs_l2487||0), 0.002); end
  def test_lever_graphs_m2487; assert_in_delta(0.0, (worksheet.lever_graphs_m2487||0), 0.002); end
  def test_lever_graphs_n2487; assert_in_delta(0.0, (worksheet.lever_graphs_n2487||0), 0.002); end
  def test_lever_graphs_o2487; assert_in_delta(0.0, (worksheet.lever_graphs_o2487||0), 0.002); end
  def test_lever_graphs_p2487; assert_in_delta(0.0, (worksheet.lever_graphs_p2487||0), 0.002); end
  def test_lever_graphs_q2487; assert_in_delta(0.0, (worksheet.lever_graphs_q2487||0), 0.002); end
  def test_lever_graphs_r2487; assert_in_delta(0.0, (worksheet.lever_graphs_r2487||0), 0.002); end
  def test_lever_graphs_b2488; assert_in_epsilon(4.0, worksheet.lever_graphs_b2488, 0.002); end
  def test_lever_graphs_j2488; assert_in_delta(0.0, (worksheet.lever_graphs_j2488||0), 0.002); end
  def test_lever_graphs_k2488; assert_in_delta(0.0, (worksheet.lever_graphs_k2488||0), 0.002); end
  def test_lever_graphs_l2488; assert_in_delta(0.0, (worksheet.lever_graphs_l2488||0), 0.002); end
  def test_lever_graphs_m2488; assert_in_delta(0.0, (worksheet.lever_graphs_m2488||0), 0.002); end
  def test_lever_graphs_n2488; assert_in_delta(0.0, (worksheet.lever_graphs_n2488||0), 0.002); end
  def test_lever_graphs_o2488; assert_in_delta(0.0, (worksheet.lever_graphs_o2488||0), 0.002); end
  def test_lever_graphs_p2488; assert_in_delta(0.0, (worksheet.lever_graphs_p2488||0), 0.002); end
  def test_lever_graphs_q2488; assert_in_delta(0.0, (worksheet.lever_graphs_q2488||0), 0.002); end
  def test_lever_graphs_r2488; assert_in_delta(0.0, (worksheet.lever_graphs_r2488||0), 0.002); end
  def test_lever_graphs_c2473; assert_equal("1975", worksheet.lever_graphs_c2473); end
  def test_lever_graphs_d2473; assert_equal("1980", worksheet.lever_graphs_d2473); end
  def test_lever_graphs_e2473; assert_equal("1985", worksheet.lever_graphs_e2473); end
  def test_lever_graphs_f2473; assert_equal("1990", worksheet.lever_graphs_f2473); end
  def test_lever_graphs_g2473; assert_equal("1995", worksheet.lever_graphs_g2473); end
  def test_lever_graphs_h2473; assert_equal("2000", worksheet.lever_graphs_h2473); end
  def test_lever_graphs_i2473; assert_equal("2005", worksheet.lever_graphs_i2473); end
  def test_lever_graphs_j2473; assert_equal("2011", worksheet.lever_graphs_j2473); end
  def test_lever_graphs_k2473; assert_equal("2015", worksheet.lever_graphs_k2473); end
  def test_lever_graphs_l2473; assert_equal("2020", worksheet.lever_graphs_l2473); end
  def test_lever_graphs_m2473; assert_equal("2025", worksheet.lever_graphs_m2473); end
  def test_lever_graphs_n2473; assert_equal("2030", worksheet.lever_graphs_n2473); end
  def test_lever_graphs_o2473; assert_equal("2035", worksheet.lever_graphs_o2473); end
  def test_lever_graphs_p2473; assert_equal("2040", worksheet.lever_graphs_p2473); end
  def test_lever_graphs_q2473; assert_equal("2045", worksheet.lever_graphs_q2473); end
  def test_lever_graphs_r2473; assert_equal("2050", worksheet.lever_graphs_r2473); end
  def test_lever_graphs_b2474; assert_equal("Historic data", worksheet.lever_graphs_b2474); end
  def test_lever_graphs_b2475; assert_in_delta(1.0, worksheet.lever_graphs_b2475, 0.002); end
  def test_lever_graphs_j2475; assert_in_delta(0.0, (worksheet.lever_graphs_j2475||0), 0.002); end
  def test_lever_graphs_k2475; assert_in_delta(0.020512820512820513, worksheet.lever_graphs_k2475, 0.002); end
  def test_lever_graphs_l2475; assert_in_delta(0.0, (worksheet.lever_graphs_l2475||0), 0.002); end
  def test_lever_graphs_m2475; assert_in_delta(0.0, (worksheet.lever_graphs_m2475||0), 0.002); end
  def test_lever_graphs_n2475; assert_in_delta(0.0, (worksheet.lever_graphs_n2475||0), 0.002); end
  def test_lever_graphs_o2475; assert_in_delta(0.0, (worksheet.lever_graphs_o2475||0), 0.002); end
  def test_lever_graphs_p2475; assert_in_delta(0.0, (worksheet.lever_graphs_p2475||0), 0.002); end
  def test_lever_graphs_q2475; assert_in_delta(0.0, (worksheet.lever_graphs_q2475||0), 0.002); end
  def test_lever_graphs_r2475; assert_in_delta(0.0, (worksheet.lever_graphs_r2475||0), 0.002); end
  def test_lever_graphs_b2476; assert_in_epsilon(2.0, worksheet.lever_graphs_b2476, 0.002); end
  def test_lever_graphs_j2476; assert_in_delta(0.0, (worksheet.lever_graphs_j2476||0), 0.002); end
  def test_lever_graphs_k2476; assert_in_delta(0.020512820512820513, worksheet.lever_graphs_k2476, 0.002); end
  def test_lever_graphs_l2476; assert_in_delta(0.046153846153846156, worksheet.lever_graphs_l2476, 0.002); end
  def test_lever_graphs_m2476; assert_in_delta(0.07179487179487179, worksheet.lever_graphs_m2476, 0.002); end
  def test_lever_graphs_n2476; assert_in_delta(0.09743589743589744, worksheet.lever_graphs_n2476, 0.002); end
  def test_lever_graphs_o2476; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_o2476, 0.002); end
  def test_lever_graphs_p2476; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_p2476, 0.002); end
  def test_lever_graphs_q2476; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_q2476, 0.002); end
  def test_lever_graphs_r2476; assert_in_delta(0.2, worksheet.lever_graphs_r2476, 0.002); end
  def test_lever_graphs_b2477; assert_in_epsilon(3.0, worksheet.lever_graphs_b2477, 0.002); end
  def test_lever_graphs_j2477; assert_in_delta(0.0, (worksheet.lever_graphs_j2477||0), 0.002); end
  def test_lever_graphs_k2477; assert_in_delta(0.020512820512820513, worksheet.lever_graphs_k2477, 0.002); end
  def test_lever_graphs_l2477; assert_in_delta(0.06923076923076922, worksheet.lever_graphs_l2477, 0.002); end
  def test_lever_graphs_m2477; assert_in_delta(0.10769230769230768, worksheet.lever_graphs_m2477, 0.002); end
  def test_lever_graphs_n2477; assert_in_delta(0.14615384615384613, worksheet.lever_graphs_n2477, 0.002); end
  def test_lever_graphs_o2477; assert_in_delta(0.1846153846153846, worksheet.lever_graphs_o2477, 0.002); end
  def test_lever_graphs_p2477; assert_in_delta(0.22307692307692306, worksheet.lever_graphs_p2477, 0.002); end
  def test_lever_graphs_q2477; assert_in_delta(0.2615384615384615, worksheet.lever_graphs_q2477, 0.002); end
  def test_lever_graphs_r2477; assert_in_delta(0.3, worksheet.lever_graphs_r2477, 0.002); end
  def test_lever_graphs_b2478; assert_in_epsilon(4.0, worksheet.lever_graphs_b2478, 0.002); end
  def test_lever_graphs_j2478; assert_in_delta(0.0, (worksheet.lever_graphs_j2478||0), 0.002); end
  def test_lever_graphs_k2478; assert_in_delta(0.020512820512820513, worksheet.lever_graphs_k2478, 0.002); end
  def test_lever_graphs_l2478; assert_in_delta(0.09230769230769231, worksheet.lever_graphs_l2478, 0.002); end
  def test_lever_graphs_m2478; assert_in_delta(0.14358974358974358, worksheet.lever_graphs_m2478, 0.002); end
  def test_lever_graphs_n2478; assert_in_delta(0.19487179487179487, worksheet.lever_graphs_n2478, 0.002); end
  def test_lever_graphs_o2478; assert_in_delta(0.24615384615384617, worksheet.lever_graphs_o2478, 0.002); end
  def test_lever_graphs_p2478; assert_in_delta(0.29743589743589743, worksheet.lever_graphs_p2478, 0.002); end
  def test_lever_graphs_q2478; assert_in_delta(0.3487179487179487, worksheet.lever_graphs_q2478, 0.002); end
  def test_lever_graphs_r2478; assert_in_delta(0.4, worksheet.lever_graphs_r2478, 0.002); end
  def test_lever_graphs_c2407; assert_equal("1975", worksheet.lever_graphs_c2407); end
  def test_lever_graphs_d2407; assert_equal("1980", worksheet.lever_graphs_d2407); end
  def test_lever_graphs_e2407; assert_equal("1985", worksheet.lever_graphs_e2407); end
  def test_lever_graphs_f2407; assert_equal("1990", worksheet.lever_graphs_f2407); end
  def test_lever_graphs_g2407; assert_equal("1995", worksheet.lever_graphs_g2407); end
  def test_lever_graphs_h2407; assert_equal("2000", worksheet.lever_graphs_h2407); end
  def test_lever_graphs_i2407; assert_equal("2005", worksheet.lever_graphs_i2407); end
  def test_lever_graphs_j2407; assert_equal("2011", worksheet.lever_graphs_j2407); end
  def test_lever_graphs_k2407; assert_equal("2015", worksheet.lever_graphs_k2407); end
  def test_lever_graphs_l2407; assert_equal("2020", worksheet.lever_graphs_l2407); end
  def test_lever_graphs_m2407; assert_equal("2025", worksheet.lever_graphs_m2407); end
  def test_lever_graphs_n2407; assert_equal("2030", worksheet.lever_graphs_n2407); end
  def test_lever_graphs_o2407; assert_equal("2035", worksheet.lever_graphs_o2407); end
  def test_lever_graphs_p2407; assert_equal("2040", worksheet.lever_graphs_p2407); end
  def test_lever_graphs_q2407; assert_equal("2045", worksheet.lever_graphs_q2407); end
  def test_lever_graphs_r2407; assert_equal("2050", worksheet.lever_graphs_r2407); end
  def test_lever_graphs_b2408; assert_equal("Historic data", worksheet.lever_graphs_b2408); end
  def test_lever_graphs_b2409; assert_in_delta(1.0, worksheet.lever_graphs_b2409, 0.002); end
  def test_lever_graphs_j2409; assert_in_delta(0.0, (worksheet.lever_graphs_j2409||0), 0.002); end
  def test_lever_graphs_k2409; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2409, 0.002); end
  def test_lever_graphs_l2409; assert_in_delta(0.0, (worksheet.lever_graphs_l2409||0), 0.002); end
  def test_lever_graphs_m2409; assert_in_delta(0.0, (worksheet.lever_graphs_m2409||0), 0.002); end
  def test_lever_graphs_n2409; assert_in_delta(0.0, (worksheet.lever_graphs_n2409||0), 0.002); end
  def test_lever_graphs_o2409; assert_in_delta(0.0, (worksheet.lever_graphs_o2409||0), 0.002); end
  def test_lever_graphs_p2409; assert_in_delta(0.0, (worksheet.lever_graphs_p2409||0), 0.002); end
  def test_lever_graphs_q2409; assert_in_delta(0.0, (worksheet.lever_graphs_q2409||0), 0.002); end
  def test_lever_graphs_r2409; assert_in_delta(0.0, (worksheet.lever_graphs_r2409||0), 0.002); end
  def test_lever_graphs_b2410; assert_in_epsilon(2.0, worksheet.lever_graphs_b2410, 0.002); end
  def test_lever_graphs_j2410; assert_in_delta(0.0, (worksheet.lever_graphs_j2410||0), 0.002); end
  def test_lever_graphs_k2410; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2410, 0.002); end
  def test_lever_graphs_l2410; assert_in_delta(0.011538461538461539, worksheet.lever_graphs_l2410, 0.002); end
  def test_lever_graphs_m2410; assert_in_delta(0.017948717948717947, worksheet.lever_graphs_m2410, 0.002); end
  def test_lever_graphs_n2410; assert_in_delta(0.02435897435897436, worksheet.lever_graphs_n2410, 0.002); end
  def test_lever_graphs_o2410; assert_in_delta(0.03076923076923077, worksheet.lever_graphs_o2410, 0.002); end
  def test_lever_graphs_p2410; assert_in_delta(0.03717948717948718, worksheet.lever_graphs_p2410, 0.002); end
  def test_lever_graphs_q2410; assert_in_delta(0.04358974358974359, worksheet.lever_graphs_q2410, 0.002); end
  def test_lever_graphs_r2410; assert_in_delta(0.05, worksheet.lever_graphs_r2410, 0.002); end
  def test_lever_graphs_b2411; assert_in_epsilon(3.0, worksheet.lever_graphs_b2411, 0.002); end
  def test_lever_graphs_j2411; assert_in_delta(0.0, (worksheet.lever_graphs_j2411||0), 0.002); end
  def test_lever_graphs_k2411; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2411, 0.002); end
  def test_lever_graphs_l2411; assert_in_delta(0.016153846153846158, worksheet.lever_graphs_l2411, 0.002); end
  def test_lever_graphs_m2411; assert_in_delta(0.02512820512820513, worksheet.lever_graphs_m2411, 0.002); end
  def test_lever_graphs_n2411; assert_in_delta(0.034102564102564105, worksheet.lever_graphs_n2411, 0.002); end
  def test_lever_graphs_o2411; assert_in_delta(0.04307692307692308, worksheet.lever_graphs_o2411, 0.002); end
  def test_lever_graphs_p2411; assert_in_delta(0.05205128205128206, worksheet.lever_graphs_p2411, 0.002); end
  def test_lever_graphs_q2411; assert_in_delta(0.061025641025641036, worksheet.lever_graphs_q2411, 0.002); end
  def test_lever_graphs_r2411; assert_in_delta(0.07, worksheet.lever_graphs_r2411, 0.002); end
  def test_lever_graphs_b2412; assert_in_epsilon(4.0, worksheet.lever_graphs_b2412, 0.002); end
  def test_lever_graphs_j2412; assert_in_delta(0.0, (worksheet.lever_graphs_j2412||0), 0.002); end
  def test_lever_graphs_k2412; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2412, 0.002); end
  def test_lever_graphs_l2412; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2412, 0.002); end
  def test_lever_graphs_m2412; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2412, 0.002); end
  def test_lever_graphs_n2412; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2412, 0.002); end
  def test_lever_graphs_o2412; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2412, 0.002); end
  def test_lever_graphs_p2412; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2412, 0.002); end
  def test_lever_graphs_q2412; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2412, 0.002); end
  def test_lever_graphs_r2412; assert_in_delta(0.1, worksheet.lever_graphs_r2412, 0.002); end
  def test_lever_graphs_c2386; assert_equal("1975", worksheet.lever_graphs_c2386); end
  def test_lever_graphs_d2386; assert_equal("1980", worksheet.lever_graphs_d2386); end
  def test_lever_graphs_e2386; assert_equal("1985", worksheet.lever_graphs_e2386); end
  def test_lever_graphs_f2386; assert_equal("1990", worksheet.lever_graphs_f2386); end
  def test_lever_graphs_g2386; assert_equal("1995", worksheet.lever_graphs_g2386); end
  def test_lever_graphs_h2386; assert_equal("2000", worksheet.lever_graphs_h2386); end
  def test_lever_graphs_i2386; assert_equal("2005", worksheet.lever_graphs_i2386); end
  def test_lever_graphs_j2386; assert_equal("2011", worksheet.lever_graphs_j2386); end
  def test_lever_graphs_k2386; assert_equal("2015", worksheet.lever_graphs_k2386); end
  def test_lever_graphs_l2386; assert_equal("2020", worksheet.lever_graphs_l2386); end
  def test_lever_graphs_m2386; assert_equal("2025", worksheet.lever_graphs_m2386); end
  def test_lever_graphs_n2386; assert_equal("2030", worksheet.lever_graphs_n2386); end
  def test_lever_graphs_o2386; assert_equal("2035", worksheet.lever_graphs_o2386); end
  def test_lever_graphs_p2386; assert_equal("2040", worksheet.lever_graphs_p2386); end
  def test_lever_graphs_q2386; assert_equal("2045", worksheet.lever_graphs_q2386); end
  def test_lever_graphs_r2386; assert_equal("2050", worksheet.lever_graphs_r2386); end
  def test_lever_graphs_b2387; assert_equal("Historic data", worksheet.lever_graphs_b2387); end
  def test_lever_graphs_b2388; assert_in_delta(1.0, worksheet.lever_graphs_b2388, 0.002); end
  def test_lever_graphs_j2388; assert_in_delta(0.0, (worksheet.lever_graphs_j2388||0), 0.002); end
  def test_lever_graphs_k2388; assert_in_delta(0.0038461538461538464, worksheet.lever_graphs_k2388, 0.002); end
  def test_lever_graphs_l2388; assert_in_delta(0.0, (worksheet.lever_graphs_l2388||0), 0.002); end
  def test_lever_graphs_m2388; assert_in_delta(0.0, (worksheet.lever_graphs_m2388||0), 0.002); end
  def test_lever_graphs_n2388; assert_in_delta(0.0, (worksheet.lever_graphs_n2388||0), 0.002); end
  def test_lever_graphs_o2388; assert_in_delta(0.0, (worksheet.lever_graphs_o2388||0), 0.002); end
  def test_lever_graphs_p2388; assert_in_delta(0.0, (worksheet.lever_graphs_p2388||0), 0.002); end
  def test_lever_graphs_q2388; assert_in_delta(0.0, (worksheet.lever_graphs_q2388||0), 0.002); end
  def test_lever_graphs_r2388; assert_in_delta(0.0, (worksheet.lever_graphs_r2388||0), 0.002); end
  def test_lever_graphs_b2389; assert_in_epsilon(2.0, worksheet.lever_graphs_b2389, 0.002); end
  def test_lever_graphs_j2389; assert_in_delta(0.0, (worksheet.lever_graphs_j2389||0), 0.002); end
  def test_lever_graphs_k2389; assert_in_delta(0.0038461538461538464, worksheet.lever_graphs_k2389, 0.002); end
  def test_lever_graphs_l2389; assert_in_delta(0.008653846153846154, worksheet.lever_graphs_l2389, 0.002); end
  def test_lever_graphs_m2389; assert_in_delta(0.01346153846153846, worksheet.lever_graphs_m2389, 0.002); end
  def test_lever_graphs_n2389; assert_in_delta(0.01826923076923077, worksheet.lever_graphs_n2389, 0.002); end
  def test_lever_graphs_o2389; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_o2389, 0.002); end
  def test_lever_graphs_p2389; assert_in_delta(0.027884615384615383, worksheet.lever_graphs_p2389, 0.002); end
  def test_lever_graphs_q2389; assert_in_delta(0.03269230769230769, worksheet.lever_graphs_q2389, 0.002); end
  def test_lever_graphs_r2389; assert_in_delta(0.037500000000000006, worksheet.lever_graphs_r2389, 0.002); end
  def test_lever_graphs_b2390; assert_in_epsilon(3.0, worksheet.lever_graphs_b2390, 0.002); end
  def test_lever_graphs_j2390; assert_in_delta(0.0, (worksheet.lever_graphs_j2390||0), 0.002); end
  def test_lever_graphs_k2390; assert_in_delta(0.0038461538461538464, worksheet.lever_graphs_k2390, 0.002); end
  def test_lever_graphs_l2390; assert_in_delta(0.013846153846153848, worksheet.lever_graphs_l2390, 0.002); end
  def test_lever_graphs_m2390; assert_in_delta(0.02153846153846154, worksheet.lever_graphs_m2390, 0.002); end
  def test_lever_graphs_n2390; assert_in_delta(0.029230769230769234, worksheet.lever_graphs_n2390, 0.002); end
  def test_lever_graphs_o2390; assert_in_delta(0.036923076923076927, worksheet.lever_graphs_o2390, 0.002); end
  def test_lever_graphs_p2390; assert_in_delta(0.04461538461538462, worksheet.lever_graphs_p2390, 0.002); end
  def test_lever_graphs_q2390; assert_in_delta(0.05230769230769231, worksheet.lever_graphs_q2390, 0.002); end
  def test_lever_graphs_r2390; assert_in_delta(0.060000000000000005, worksheet.lever_graphs_r2390, 0.002); end
  def test_lever_graphs_b2391; assert_in_epsilon(4.0, worksheet.lever_graphs_b2391, 0.002); end
  def test_lever_graphs_j2391; assert_in_delta(0.0, (worksheet.lever_graphs_j2391||0), 0.002); end
  def test_lever_graphs_k2391; assert_in_delta(0.0038461538461538464, worksheet.lever_graphs_k2391, 0.002); end
  def test_lever_graphs_l2391; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2391, 0.002); end
  def test_lever_graphs_m2391; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2391, 0.002); end
  def test_lever_graphs_n2391; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2391, 0.002); end
  def test_lever_graphs_o2391; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2391, 0.002); end
  def test_lever_graphs_p2391; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2391, 0.002); end
  def test_lever_graphs_q2391; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2391, 0.002); end
  def test_lever_graphs_r2391; assert_in_delta(0.1, worksheet.lever_graphs_r2391, 0.002); end
  def test_lever_graphs_c2057; assert_equal("1975", worksheet.lever_graphs_c2057); end
  def test_lever_graphs_d2057; assert_equal("1980", worksheet.lever_graphs_d2057); end
  def test_lever_graphs_e2057; assert_equal("1985", worksheet.lever_graphs_e2057); end
  def test_lever_graphs_f2057; assert_equal("1990", worksheet.lever_graphs_f2057); end
  def test_lever_graphs_g2057; assert_equal("1995", worksheet.lever_graphs_g2057); end
  def test_lever_graphs_h2057; assert_equal("2000", worksheet.lever_graphs_h2057); end
  def test_lever_graphs_i2057; assert_equal("2005", worksheet.lever_graphs_i2057); end
  def test_lever_graphs_j2057; assert_equal("2011", worksheet.lever_graphs_j2057); end
  def test_lever_graphs_k2057; assert_equal("2015", worksheet.lever_graphs_k2057); end
  def test_lever_graphs_l2057; assert_equal("2020", worksheet.lever_graphs_l2057); end
  def test_lever_graphs_m2057; assert_equal("2025", worksheet.lever_graphs_m2057); end
  def test_lever_graphs_n2057; assert_equal("2030", worksheet.lever_graphs_n2057); end
  def test_lever_graphs_o2057; assert_equal("2035", worksheet.lever_graphs_o2057); end
  def test_lever_graphs_p2057; assert_equal("2040", worksheet.lever_graphs_p2057); end
  def test_lever_graphs_q2057; assert_equal("2045", worksheet.lever_graphs_q2057); end
  def test_lever_graphs_r2057; assert_equal("2050", worksheet.lever_graphs_r2057); end
  def test_lever_graphs_b2058; assert_equal("Historic data", worksheet.lever_graphs_b2058); end
  def test_lever_graphs_b2059; assert_in_delta(1.0, worksheet.lever_graphs_b2059, 0.002); end
  def test_lever_graphs_j2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_j2059, 0.002); end
  def test_lever_graphs_k2059; assert_in_epsilon(12.58733212950103, worksheet.lever_graphs_k2059, 0.002); end
  def test_lever_graphs_l2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_l2059, 0.002); end
  def test_lever_graphs_m2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_m2059, 0.002); end
  def test_lever_graphs_n2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_n2059, 0.002); end
  def test_lever_graphs_o2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_o2059, 0.002); end
  def test_lever_graphs_p2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_p2059, 0.002); end
  def test_lever_graphs_q2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_q2059, 0.002); end
  def test_lever_graphs_r2059; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_r2059, 0.002); end
  def test_lever_graphs_b2060; assert_in_epsilon(2.0, worksheet.lever_graphs_b2060, 0.002); end
  def test_lever_graphs_j2060; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_j2060, 0.002); end
  def test_lever_graphs_k2060; assert_in_epsilon(12.58733212950103, worksheet.lever_graphs_k2060, 0.002); end
  def test_lever_graphs_l2060; assert_in_epsilon(12.747069846880484, worksheet.lever_graphs_l2060, 0.002); end
  def test_lever_graphs_m2060; assert_in_epsilon(12.906807564259939, worksheet.lever_graphs_m2060, 0.002); end
  def test_lever_graphs_n2060; assert_in_epsilon(13.066545281639394, worksheet.lever_graphs_n2060, 0.002); end
  def test_lever_graphs_o2060; assert_in_epsilon(13.22628299901885, worksheet.lever_graphs_o2060, 0.002); end
  def test_lever_graphs_p2060; assert_in_epsilon(13.386020716398303, worksheet.lever_graphs_p2060, 0.002); end
  def test_lever_graphs_q2060; assert_in_epsilon(13.545758433777758, worksheet.lever_graphs_q2060, 0.002); end
  def test_lever_graphs_r2060; assert_in_epsilon(13.705496151157213, worksheet.lever_graphs_r2060, 0.002); end
  def test_lever_graphs_b2061; assert_in_epsilon(3.0, worksheet.lever_graphs_b2061, 0.002); end
  def test_lever_graphs_j2061; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_j2061, 0.002); end
  def test_lever_graphs_k2061; assert_in_epsilon(12.58733212950103, worksheet.lever_graphs_k2061, 0.002); end
  def test_lever_graphs_l2061; assert_in_epsilon(13.034597738163502, worksheet.lever_graphs_l2061, 0.002); end
  def test_lever_graphs_m2061; assert_in_epsilon(13.354073172922412, worksheet.lever_graphs_m2061, 0.002); end
  def test_lever_graphs_n2061; assert_in_epsilon(13.67354860768132, worksheet.lever_graphs_n2061, 0.002); end
  def test_lever_graphs_o2061; assert_in_epsilon(13.993024042440231, worksheet.lever_graphs_o2061, 0.002); end
  def test_lever_graphs_p2061; assert_in_epsilon(14.31249947719914, worksheet.lever_graphs_p2061, 0.002); end
  def test_lever_graphs_q2061; assert_in_epsilon(14.63197491195805, worksheet.lever_graphs_q2061, 0.002); end
  def test_lever_graphs_r2061; assert_in_epsilon(14.951450346716959, worksheet.lever_graphs_r2061, 0.002); end
  def test_lever_graphs_b2062; assert_in_epsilon(4.0, worksheet.lever_graphs_b2062, 0.002); end
  def test_lever_graphs_j2062; assert_in_epsilon(12.459541955597466, worksheet.lever_graphs_j2062, 0.002); end
  def test_lever_graphs_k2062; assert_in_epsilon(12.58733212950103, worksheet.lever_graphs_k2062, 0.002); end
  def test_lever_graphs_l2062; assert_in_epsilon(13.322125629446521, worksheet.lever_graphs_l2062, 0.002); end
  def test_lever_graphs_m2062; assert_in_epsilon(13.801338781584885, worksheet.lever_graphs_m2062, 0.002); end
  def test_lever_graphs_n2062; assert_in_epsilon(14.28055193372325, worksheet.lever_graphs_n2062, 0.002); end
  def test_lever_graphs_o2062; assert_in_epsilon(14.759765085861615, worksheet.lever_graphs_o2062, 0.002); end
  def test_lever_graphs_p2062; assert_in_epsilon(15.238978237999978, worksheet.lever_graphs_p2062, 0.002); end
  def test_lever_graphs_q2062; assert_in_epsilon(15.718191390138344, worksheet.lever_graphs_q2062, 0.002); end
  def test_lever_graphs_r2062; assert_in_epsilon(16.197404542276708, worksheet.lever_graphs_r2062, 0.002); end
  def test_lever_graphs_c2067; assert_equal("1975", worksheet.lever_graphs_c2067); end
  def test_lever_graphs_d2067; assert_equal("1980", worksheet.lever_graphs_d2067); end
  def test_lever_graphs_e2067; assert_equal("1985", worksheet.lever_graphs_e2067); end
  def test_lever_graphs_f2067; assert_equal("1990", worksheet.lever_graphs_f2067); end
  def test_lever_graphs_g2067; assert_equal("1995", worksheet.lever_graphs_g2067); end
  def test_lever_graphs_h2067; assert_equal("2000", worksheet.lever_graphs_h2067); end
  def test_lever_graphs_i2067; assert_equal("2005", worksheet.lever_graphs_i2067); end
  def test_lever_graphs_j2067; assert_equal("2011", worksheet.lever_graphs_j2067); end
  def test_lever_graphs_k2067; assert_equal("2015", worksheet.lever_graphs_k2067); end
  def test_lever_graphs_l2067; assert_equal("2020", worksheet.lever_graphs_l2067); end
  def test_lever_graphs_m2067; assert_equal("2025", worksheet.lever_graphs_m2067); end
  def test_lever_graphs_n2067; assert_equal("2030", worksheet.lever_graphs_n2067); end
  def test_lever_graphs_o2067; assert_equal("2035", worksheet.lever_graphs_o2067); end
  def test_lever_graphs_p2067; assert_equal("2040", worksheet.lever_graphs_p2067); end
  def test_lever_graphs_q2067; assert_equal("2045", worksheet.lever_graphs_q2067); end
  def test_lever_graphs_r2067; assert_equal("2050", worksheet.lever_graphs_r2067); end
  def test_lever_graphs_b2068; assert_equal("Historic data", worksheet.lever_graphs_b2068); end
  def test_lever_graphs_b2069; assert_in_delta(1.0, worksheet.lever_graphs_b2069, 0.002); end
  def test_lever_graphs_j2069; assert_in_epsilon(7.0, worksheet.lever_graphs_j2069, 0.002); end
  def test_lever_graphs_k2069; assert_in_epsilon(7.0, worksheet.lever_graphs_k2069, 0.002); end
  def test_lever_graphs_l2069; assert_in_epsilon(6.538461538461538, worksheet.lever_graphs_l2069, 0.002); end
  def test_lever_graphs_m2069; assert_in_epsilon(6.282051282051282, worksheet.lever_graphs_m2069, 0.002); end
  def test_lever_graphs_n2069; assert_in_epsilon(6.0256410256410255, worksheet.lever_graphs_n2069, 0.002); end
  def test_lever_graphs_o2069; assert_in_epsilon(5.769230769230769, worksheet.lever_graphs_o2069, 0.002); end
  def test_lever_graphs_p2069; assert_in_epsilon(5.512820512820513, worksheet.lever_graphs_p2069, 0.002); end
  def test_lever_graphs_q2069; assert_in_epsilon(5.256410256410256, worksheet.lever_graphs_q2069, 0.002); end
  def test_lever_graphs_r2069; assert_in_epsilon(5.0, worksheet.lever_graphs_r2069, 0.002); end
  def test_lever_graphs_b2070; assert_in_epsilon(2.0, worksheet.lever_graphs_b2070, 0.002); end
  def test_lever_graphs_j2070; assert_in_epsilon(7.0, worksheet.lever_graphs_j2070, 0.002); end
  def test_lever_graphs_k2070; assert_in_epsilon(7.0, worksheet.lever_graphs_k2070, 0.002); end
  def test_lever_graphs_l2070; assert_in_epsilon(7.0, worksheet.lever_graphs_l2070, 0.002); end
  def test_lever_graphs_m2070; assert_in_epsilon(7.0, worksheet.lever_graphs_m2070, 0.002); end
  def test_lever_graphs_n2070; assert_in_epsilon(7.0, worksheet.lever_graphs_n2070, 0.002); end
  def test_lever_graphs_o2070; assert_in_epsilon(7.0, worksheet.lever_graphs_o2070, 0.002); end
  def test_lever_graphs_p2070; assert_in_epsilon(7.0, worksheet.lever_graphs_p2070, 0.002); end
  def test_lever_graphs_q2070; assert_in_epsilon(7.0, worksheet.lever_graphs_q2070, 0.002); end
  def test_lever_graphs_r2070; assert_in_epsilon(7.0, worksheet.lever_graphs_r2070, 0.002); end
  def test_lever_graphs_b2071; assert_in_epsilon(3.0, worksheet.lever_graphs_b2071, 0.002); end
  def test_lever_graphs_j2071; assert_in_epsilon(7.0, worksheet.lever_graphs_j2071, 0.002); end
  def test_lever_graphs_k2071; assert_in_epsilon(7.0, worksheet.lever_graphs_k2071, 0.002); end
  def test_lever_graphs_l2071; assert_in_epsilon(7.6923076923076925, worksheet.lever_graphs_l2071, 0.002); end
  def test_lever_graphs_m2071; assert_in_epsilon(8.076923076923077, worksheet.lever_graphs_m2071, 0.002); end
  def test_lever_graphs_n2071; assert_in_epsilon(8.461538461538462, worksheet.lever_graphs_n2071, 0.002); end
  def test_lever_graphs_o2071; assert_in_epsilon(8.846153846153847, worksheet.lever_graphs_o2071, 0.002); end
  def test_lever_graphs_p2071; assert_in_epsilon(9.23076923076923, worksheet.lever_graphs_p2071, 0.002); end
  def test_lever_graphs_q2071; assert_in_epsilon(9.615384615384615, worksheet.lever_graphs_q2071, 0.002); end
  def test_lever_graphs_r2071; assert_in_epsilon(10.0, worksheet.lever_graphs_r2071, 0.002); end
  def test_lever_graphs_b2072; assert_in_epsilon(4.0, worksheet.lever_graphs_b2072, 0.002); end
  def test_lever_graphs_j2072; assert_in_epsilon(7.0, worksheet.lever_graphs_j2072, 0.002); end
  def test_lever_graphs_k2072; assert_in_epsilon(7.0, worksheet.lever_graphs_k2072, 0.002); end
  def test_lever_graphs_l2072; assert_in_epsilon(8.846153846153847, worksheet.lever_graphs_l2072, 0.002); end
  def test_lever_graphs_m2072; assert_in_epsilon(9.871794871794872, worksheet.lever_graphs_m2072, 0.002); end
  def test_lever_graphs_n2072; assert_in_epsilon(10.897435897435898, worksheet.lever_graphs_n2072, 0.002); end
  def test_lever_graphs_o2072; assert_in_epsilon(11.923076923076923, worksheet.lever_graphs_o2072, 0.002); end
  def test_lever_graphs_p2072; assert_in_epsilon(12.948717948717949, worksheet.lever_graphs_p2072, 0.002); end
  def test_lever_graphs_q2072; assert_in_epsilon(13.974358974358974, worksheet.lever_graphs_q2072, 0.002); end
  def test_lever_graphs_r2072; assert_in_epsilon(15.0, worksheet.lever_graphs_r2072, 0.002); end
  def test_lever_graphs_d2335; assert_equal("Title", worksheet.lever_graphs_d2335); end
  def test_lever_graphs_e2335; assert_equal("Material switch for Steel Materials demand per product", worksheet.lever_graphs_e2335); end
  def test_lever_graphs_d2336; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2336, 0.002); end
  def test_lever_graphs_e2336; assert_in_delta(0.0, (worksheet.lever_graphs_e2336||0), 0.002); end
  def test_lever_graphs_d2337; assert_equal("2050: Level 1", worksheet.lever_graphs_d2337); end
  def test_lever_graphs_e2337; assert_in_delta(0.0, (worksheet.lever_graphs_e2337||0), 0.002); end
  def test_lever_graphs_d2338; assert_equal("2050: Level 2", worksheet.lever_graphs_d2338); end
  def test_lever_graphs_e2338; assert_in_delta(0.005, worksheet.lever_graphs_e2338, 0.002); end
  def test_lever_graphs_d2339; assert_equal("2050: Level 3", worksheet.lever_graphs_d2339); end
  def test_lever_graphs_e2339; assert_in_delta(0.01, worksheet.lever_graphs_e2339, 0.002); end
  def test_lever_graphs_d2340; assert_equal("2050: Level 4", worksheet.lever_graphs_d2340); end
  def test_lever_graphs_e2340; assert_in_delta(0.02, worksheet.lever_graphs_e2340, 0.002); end
  def test_lever_graphs_d2346; assert_equal("Title", worksheet.lever_graphs_d2346); end
  def test_lever_graphs_e2346; assert_equal("Material switch for Steel Materials demand per product", worksheet.lever_graphs_e2346); end
  def test_lever_graphs_f2346; assert_equal("Material switch for Cement Materials demand per product", worksheet.lever_graphs_f2346); end
  def test_lever_graphs_d2347; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2347, 0.002); end
  def test_lever_graphs_e2347; assert_in_delta(0.0, (worksheet.lever_graphs_e2347||0), 0.002); end
  def test_lever_graphs_f2347; assert_in_delta(0.0, (worksheet.lever_graphs_f2347||0), 0.002); end
  def test_lever_graphs_d2348; assert_equal("2050: Level 1", worksheet.lever_graphs_d2348); end
  def test_lever_graphs_e2348; assert_in_delta(0.0, (worksheet.lever_graphs_e2348||0), 0.002); end
  def test_lever_graphs_f2348; assert_in_delta(0.0, (worksheet.lever_graphs_f2348||0), 0.002); end
  def test_lever_graphs_d2349; assert_equal("2050: Level 2", worksheet.lever_graphs_d2349); end
  def test_lever_graphs_e2349; assert_in_delta(0.0025, worksheet.lever_graphs_e2349, 0.002); end
  def test_lever_graphs_f2349; assert_in_delta(0.0125, worksheet.lever_graphs_f2349, 0.002); end
  def test_lever_graphs_d2350; assert_equal("2050: Level 3", worksheet.lever_graphs_d2350); end
  def test_lever_graphs_e2350; assert_in_delta(0.005, worksheet.lever_graphs_e2350, 0.002); end
  def test_lever_graphs_f2350; assert_in_delta(0.025, worksheet.lever_graphs_f2350, 0.002); end
  def test_lever_graphs_d2351; assert_equal("2050: Level 4", worksheet.lever_graphs_d2351); end
  def test_lever_graphs_e2351; assert_in_delta(0.01, worksheet.lever_graphs_e2351, 0.002); end
  def test_lever_graphs_f2351; assert_in_delta(0.05, worksheet.lever_graphs_f2351, 0.002); end
  def test_lever_graphs_d2324; assert_equal("Title", worksheet.lever_graphs_d2324); end
  def test_lever_graphs_e2324; assert_equal("Material switch for Steel Materials demand per product", worksheet.lever_graphs_e2324); end
  def test_lever_graphs_f2324; assert_equal("Material switch for Cement Materials demand per product", worksheet.lever_graphs_f2324); end
  def test_lever_graphs_d2325; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2325, 0.002); end
  def test_lever_graphs_e2325; assert_in_delta(0.0, (worksheet.lever_graphs_e2325||0), 0.002); end
  def test_lever_graphs_f2325; assert_in_delta(0.0, (worksheet.lever_graphs_f2325||0), 0.002); end
  def test_lever_graphs_d2326; assert_equal("2050: Level 1", worksheet.lever_graphs_d2326); end
  def test_lever_graphs_e2326; assert_in_delta(0.0, (worksheet.lever_graphs_e2326||0), 0.002); end
  def test_lever_graphs_f2326; assert_in_delta(0.0, (worksheet.lever_graphs_f2326||0), 0.002); end
  def test_lever_graphs_d2327; assert_equal("2050: Level 2", worksheet.lever_graphs_d2327); end
  def test_lever_graphs_e2327; assert_in_delta(0.0175, worksheet.lever_graphs_e2327, 0.002); end
  def test_lever_graphs_f2327; assert_in_delta(0.04, worksheet.lever_graphs_f2327, 0.002); end
  def test_lever_graphs_d2328; assert_equal("2050: Level 3", worksheet.lever_graphs_d2328); end
  def test_lever_graphs_e2328; assert_in_delta(0.035, worksheet.lever_graphs_e2328, 0.002); end
  def test_lever_graphs_f2328; assert_in_delta(0.08, worksheet.lever_graphs_f2328, 0.002); end
  def test_lever_graphs_d2329; assert_equal("2050: Level 4", worksheet.lever_graphs_d2329); end
  def test_lever_graphs_e2329; assert_in_delta(0.07, worksheet.lever_graphs_e2329, 0.002); end
  def test_lever_graphs_f2329; assert_in_delta(0.16, worksheet.lever_graphs_f2329, 0.002); end
  def test_lever_graphs_c2521; assert_equal("1975", worksheet.lever_graphs_c2521); end
  def test_lever_graphs_d2521; assert_equal("1980", worksheet.lever_graphs_d2521); end
  def test_lever_graphs_e2521; assert_equal("1985", worksheet.lever_graphs_e2521); end
  def test_lever_graphs_f2521; assert_equal("1990", worksheet.lever_graphs_f2521); end
  def test_lever_graphs_g2521; assert_equal("1995", worksheet.lever_graphs_g2521); end
  def test_lever_graphs_h2521; assert_equal("2000", worksheet.lever_graphs_h2521); end
  def test_lever_graphs_i2521; assert_equal("2005", worksheet.lever_graphs_i2521); end
  def test_lever_graphs_j2521; assert_equal("2011", worksheet.lever_graphs_j2521); end
  def test_lever_graphs_k2521; assert_equal("2015", worksheet.lever_graphs_k2521); end
  def test_lever_graphs_l2521; assert_equal("2020", worksheet.lever_graphs_l2521); end
  def test_lever_graphs_m2521; assert_equal("2025", worksheet.lever_graphs_m2521); end
  def test_lever_graphs_n2521; assert_equal("2030", worksheet.lever_graphs_n2521); end
  def test_lever_graphs_o2521; assert_equal("2035", worksheet.lever_graphs_o2521); end
  def test_lever_graphs_p2521; assert_equal("2040", worksheet.lever_graphs_p2521); end
  def test_lever_graphs_q2521; assert_equal("2045", worksheet.lever_graphs_q2521); end
  def test_lever_graphs_r2521; assert_equal("2050", worksheet.lever_graphs_r2521); end
  def test_lever_graphs_b2522; assert_equal("Historic data", worksheet.lever_graphs_b2522); end
  def test_lever_graphs_b2523; assert_in_delta(1.0, worksheet.lever_graphs_b2523, 0.002); end
  def test_lever_graphs_j2523; assert_in_delta(0.0, (worksheet.lever_graphs_j2523||0), 0.002); end
  def test_lever_graphs_k2523; assert_in_delta(0.00427350427350427, worksheet.lever_graphs_k2523, 0.002); end
  def test_lever_graphs_l2523; assert_in_delta(0.0, (worksheet.lever_graphs_l2523||0), 0.002); end
  def test_lever_graphs_m2523; assert_in_delta(0.0, (worksheet.lever_graphs_m2523||0), 0.002); end
  def test_lever_graphs_n2523; assert_in_delta(0.0, (worksheet.lever_graphs_n2523||0), 0.002); end
  def test_lever_graphs_o2523; assert_in_delta(0.0, (worksheet.lever_graphs_o2523||0), 0.002); end
  def test_lever_graphs_p2523; assert_in_delta(0.0, (worksheet.lever_graphs_p2523||0), 0.002); end
  def test_lever_graphs_q2523; assert_in_delta(0.0, (worksheet.lever_graphs_q2523||0), 0.002); end
  def test_lever_graphs_r2523; assert_in_delta(0.0, (worksheet.lever_graphs_r2523||0), 0.002); end
  def test_lever_graphs_b2524; assert_in_epsilon(2.0, worksheet.lever_graphs_b2524, 0.002); end
  def test_lever_graphs_j2524; assert_in_delta(0.0, (worksheet.lever_graphs_j2524||0), 0.002); end
  def test_lever_graphs_k2524; assert_in_delta(0.00427350427350427, worksheet.lever_graphs_k2524, 0.002); end
  def test_lever_graphs_l2524; assert_in_delta(0.009615384615384607, worksheet.lever_graphs_l2524, 0.002); end
  def test_lever_graphs_m2524; assert_in_delta(0.014957264957264944, worksheet.lever_graphs_m2524, 0.002); end
  def test_lever_graphs_n2524; assert_in_delta(0.02029914529914528, worksheet.lever_graphs_n2524, 0.002); end
  def test_lever_graphs_o2524; assert_in_delta(0.02564102564102562, worksheet.lever_graphs_o2524, 0.002); end
  def test_lever_graphs_p2524; assert_in_delta(0.030982905982905956, worksheet.lever_graphs_p2524, 0.002); end
  def test_lever_graphs_q2524; assert_in_delta(0.03632478632478629, worksheet.lever_graphs_q2524, 0.002); end
  def test_lever_graphs_r2524; assert_in_delta(0.04166666666666663, worksheet.lever_graphs_r2524, 0.002); end
  def test_lever_graphs_b2525; assert_in_epsilon(3.0, worksheet.lever_graphs_b2525, 0.002); end
  def test_lever_graphs_j2525; assert_in_delta(0.0, (worksheet.lever_graphs_j2525||0), 0.002); end
  def test_lever_graphs_k2525; assert_in_delta(0.00427350427350427, worksheet.lever_graphs_k2525, 0.002); end
  def test_lever_graphs_l2525; assert_in_delta(0.01923076923076923, worksheet.lever_graphs_l2525, 0.002); end
  def test_lever_graphs_m2525; assert_in_delta(0.029914529914529912, worksheet.lever_graphs_m2525, 0.002); end
  def test_lever_graphs_n2525; assert_in_delta(0.04059829059829059, worksheet.lever_graphs_n2525, 0.002); end
  def test_lever_graphs_o2525; assert_in_delta(0.05128205128205128, worksheet.lever_graphs_o2525, 0.002); end
  def test_lever_graphs_p2525; assert_in_delta(0.06196581196581196, worksheet.lever_graphs_p2525, 0.002); end
  def test_lever_graphs_q2525; assert_in_delta(0.07264957264957264, worksheet.lever_graphs_q2525, 0.002); end
  def test_lever_graphs_r2525; assert_in_delta(0.08333333333333333, worksheet.lever_graphs_r2525, 0.002); end
  def test_lever_graphs_b2526; assert_in_epsilon(4.0, worksheet.lever_graphs_b2526, 0.002); end
  def test_lever_graphs_j2526; assert_in_delta(0.0, (worksheet.lever_graphs_j2526||0), 0.002); end
  def test_lever_graphs_k2526; assert_in_delta(0.00427350427350427, worksheet.lever_graphs_k2526, 0.002); end
  def test_lever_graphs_l2526; assert_in_delta(0.19871794871794873, worksheet.lever_graphs_l2526, 0.002); end
  def test_lever_graphs_m2526; assert_in_delta(0.30911680911680917, worksheet.lever_graphs_m2526, 0.002); end
  def test_lever_graphs_n2526; assert_in_delta(0.41951566951566954, worksheet.lever_graphs_n2526, 0.002); end
  def test_lever_graphs_o2526; assert_in_delta(0.52991452991453, worksheet.lever_graphs_o2526, 0.002); end
  def test_lever_graphs_p2526; assert_in_delta(0.6403133903133904, worksheet.lever_graphs_p2526, 0.002); end
  def test_lever_graphs_q2526; assert_in_delta(0.7507122507122508, worksheet.lever_graphs_q2526, 0.002); end
  def test_lever_graphs_r2526; assert_in_delta(0.8611111111111112, worksheet.lever_graphs_r2526, 0.002); end
  def test_lever_graphs_c2455; assert_equal("1975", worksheet.lever_graphs_c2455); end
  def test_lever_graphs_d2455; assert_equal("1980", worksheet.lever_graphs_d2455); end
  def test_lever_graphs_e2455; assert_equal("1985", worksheet.lever_graphs_e2455); end
  def test_lever_graphs_f2455; assert_equal("1990", worksheet.lever_graphs_f2455); end
  def test_lever_graphs_g2455; assert_equal("1995", worksheet.lever_graphs_g2455); end
  def test_lever_graphs_h2455; assert_equal("2000", worksheet.lever_graphs_h2455); end
  def test_lever_graphs_i2455; assert_equal("2005", worksheet.lever_graphs_i2455); end
  def test_lever_graphs_j2455; assert_equal("2011", worksheet.lever_graphs_j2455); end
  def test_lever_graphs_k2455; assert_equal("2015", worksheet.lever_graphs_k2455); end
  def test_lever_graphs_l2455; assert_equal("2020", worksheet.lever_graphs_l2455); end
  def test_lever_graphs_m2455; assert_equal("2025", worksheet.lever_graphs_m2455); end
  def test_lever_graphs_n2455; assert_equal("2030", worksheet.lever_graphs_n2455); end
  def test_lever_graphs_o2455; assert_equal("2035", worksheet.lever_graphs_o2455); end
  def test_lever_graphs_p2455; assert_equal("2040", worksheet.lever_graphs_p2455); end
  def test_lever_graphs_q2455; assert_equal("2045", worksheet.lever_graphs_q2455); end
  def test_lever_graphs_r2455; assert_equal("2050", worksheet.lever_graphs_r2455); end
  def test_lever_graphs_b2456; assert_equal("Historic data", worksheet.lever_graphs_b2456); end
  def test_lever_graphs_b2457; assert_in_delta(1.0, worksheet.lever_graphs_b2457, 0.002); end
  def test_lever_graphs_j2457; assert_in_delta(0.0, (worksheet.lever_graphs_j2457||0), 0.002); end
  def test_lever_graphs_k2457; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2457, 0.002); end
  def test_lever_graphs_l2457; assert_in_delta(0.0, (worksheet.lever_graphs_l2457||0), 0.002); end
  def test_lever_graphs_m2457; assert_in_delta(0.0, (worksheet.lever_graphs_m2457||0), 0.002); end
  def test_lever_graphs_n2457; assert_in_delta(0.0, (worksheet.lever_graphs_n2457||0), 0.002); end
  def test_lever_graphs_o2457; assert_in_delta(0.0, (worksheet.lever_graphs_o2457||0), 0.002); end
  def test_lever_graphs_p2457; assert_in_delta(0.0, (worksheet.lever_graphs_p2457||0), 0.002); end
  def test_lever_graphs_q2457; assert_in_delta(0.0, (worksheet.lever_graphs_q2457||0), 0.002); end
  def test_lever_graphs_r2457; assert_in_delta(0.0, (worksheet.lever_graphs_r2457||0), 0.002); end
  def test_lever_graphs_b2458; assert_in_epsilon(2.0, worksheet.lever_graphs_b2458, 0.002); end
  def test_lever_graphs_j2458; assert_in_delta(0.0, (worksheet.lever_graphs_j2458||0), 0.002); end
  def test_lever_graphs_k2458; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2458, 0.002); end
  def test_lever_graphs_l2458; assert_in_delta(0.011538461538461539, worksheet.lever_graphs_l2458, 0.002); end
  def test_lever_graphs_m2458; assert_in_delta(0.017948717948717947, worksheet.lever_graphs_m2458, 0.002); end
  def test_lever_graphs_n2458; assert_in_delta(0.02435897435897436, worksheet.lever_graphs_n2458, 0.002); end
  def test_lever_graphs_o2458; assert_in_delta(0.03076923076923077, worksheet.lever_graphs_o2458, 0.002); end
  def test_lever_graphs_p2458; assert_in_delta(0.03717948717948718, worksheet.lever_graphs_p2458, 0.002); end
  def test_lever_graphs_q2458; assert_in_delta(0.04358974358974359, worksheet.lever_graphs_q2458, 0.002); end
  def test_lever_graphs_r2458; assert_in_delta(0.05, worksheet.lever_graphs_r2458, 0.002); end
  def test_lever_graphs_b2459; assert_in_epsilon(3.0, worksheet.lever_graphs_b2459, 0.002); end
  def test_lever_graphs_j2459; assert_in_delta(0.0, (worksheet.lever_graphs_j2459||0), 0.002); end
  def test_lever_graphs_k2459; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2459, 0.002); end
  def test_lever_graphs_l2459; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2459, 0.002); end
  def test_lever_graphs_m2459; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2459, 0.002); end
  def test_lever_graphs_n2459; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2459, 0.002); end
  def test_lever_graphs_o2459; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2459, 0.002); end
  def test_lever_graphs_p2459; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2459, 0.002); end
  def test_lever_graphs_q2459; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2459, 0.002); end
  def test_lever_graphs_r2459; assert_in_delta(0.1, worksheet.lever_graphs_r2459, 0.002); end
  def test_lever_graphs_b2460; assert_in_epsilon(4.0, worksheet.lever_graphs_b2460, 0.002); end
  def test_lever_graphs_j2460; assert_in_delta(0.0, (worksheet.lever_graphs_j2460||0), 0.002); end
  def test_lever_graphs_k2460; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2460, 0.002); end
  def test_lever_graphs_l2460; assert_in_delta(0.046153846153846156, worksheet.lever_graphs_l2460, 0.002); end
  def test_lever_graphs_m2460; assert_in_delta(0.07179487179487179, worksheet.lever_graphs_m2460, 0.002); end
  def test_lever_graphs_n2460; assert_in_delta(0.09743589743589744, worksheet.lever_graphs_n2460, 0.002); end
  def test_lever_graphs_o2460; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_o2460, 0.002); end
  def test_lever_graphs_p2460; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_p2460, 0.002); end
  def test_lever_graphs_q2460; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_q2460, 0.002); end
  def test_lever_graphs_r2460; assert_in_delta(0.2, worksheet.lever_graphs_r2460, 0.002); end
  def test_lever_graphs_c2493; assert_equal("1975", worksheet.lever_graphs_c2493); end
  def test_lever_graphs_d2493; assert_equal("1980", worksheet.lever_graphs_d2493); end
  def test_lever_graphs_e2493; assert_equal("1985", worksheet.lever_graphs_e2493); end
  def test_lever_graphs_f2493; assert_equal("1990", worksheet.lever_graphs_f2493); end
  def test_lever_graphs_g2493; assert_equal("1995", worksheet.lever_graphs_g2493); end
  def test_lever_graphs_h2493; assert_equal("2000", worksheet.lever_graphs_h2493); end
  def test_lever_graphs_i2493; assert_equal("2005", worksheet.lever_graphs_i2493); end
  def test_lever_graphs_j2493; assert_equal("2011", worksheet.lever_graphs_j2493); end
  def test_lever_graphs_k2493; assert_equal("2015", worksheet.lever_graphs_k2493); end
  def test_lever_graphs_l2493; assert_equal("2020", worksheet.lever_graphs_l2493); end
  def test_lever_graphs_m2493; assert_equal("2025", worksheet.lever_graphs_m2493); end
  def test_lever_graphs_n2493; assert_equal("2030", worksheet.lever_graphs_n2493); end
  def test_lever_graphs_o2493; assert_equal("2035", worksheet.lever_graphs_o2493); end
  def test_lever_graphs_p2493; assert_equal("2040", worksheet.lever_graphs_p2493); end
  def test_lever_graphs_q2493; assert_equal("2045", worksheet.lever_graphs_q2493); end
  def test_lever_graphs_r2493; assert_equal("2050", worksheet.lever_graphs_r2493); end
  def test_lever_graphs_b2494; assert_equal("Historic data", worksheet.lever_graphs_b2494); end
  def test_lever_graphs_b2495; assert_in_delta(1.0, worksheet.lever_graphs_b2495, 0.002); end
  def test_lever_graphs_j2495; assert_in_delta(0.0, (worksheet.lever_graphs_j2495||0), 0.002); end
  def test_lever_graphs_k2495; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2495, 0.002); end
  def test_lever_graphs_l2495; assert_in_delta(0.0, (worksheet.lever_graphs_l2495||0), 0.002); end
  def test_lever_graphs_m2495; assert_in_delta(0.0, (worksheet.lever_graphs_m2495||0), 0.002); end
  def test_lever_graphs_n2495; assert_in_delta(0.0, (worksheet.lever_graphs_n2495||0), 0.002); end
  def test_lever_graphs_o2495; assert_in_delta(0.0, (worksheet.lever_graphs_o2495||0), 0.002); end
  def test_lever_graphs_p2495; assert_in_delta(0.0, (worksheet.lever_graphs_p2495||0), 0.002); end
  def test_lever_graphs_q2495; assert_in_delta(0.0, (worksheet.lever_graphs_q2495||0), 0.002); end
  def test_lever_graphs_r2495; assert_in_delta(0.0, (worksheet.lever_graphs_r2495||0), 0.002); end
  def test_lever_graphs_b2496; assert_in_epsilon(2.0, worksheet.lever_graphs_b2496, 0.002); end
  def test_lever_graphs_j2496; assert_in_delta(0.0, (worksheet.lever_graphs_j2496||0), 0.002); end
  def test_lever_graphs_k2496; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2496, 0.002); end
  def test_lever_graphs_l2496; assert_in_delta(0.011538461538461539, worksheet.lever_graphs_l2496, 0.002); end
  def test_lever_graphs_m2496; assert_in_delta(0.017948717948717947, worksheet.lever_graphs_m2496, 0.002); end
  def test_lever_graphs_n2496; assert_in_delta(0.02435897435897436, worksheet.lever_graphs_n2496, 0.002); end
  def test_lever_graphs_o2496; assert_in_delta(0.03076923076923077, worksheet.lever_graphs_o2496, 0.002); end
  def test_lever_graphs_p2496; assert_in_delta(0.03717948717948718, worksheet.lever_graphs_p2496, 0.002); end
  def test_lever_graphs_q2496; assert_in_delta(0.04358974358974359, worksheet.lever_graphs_q2496, 0.002); end
  def test_lever_graphs_r2496; assert_in_delta(0.05, worksheet.lever_graphs_r2496, 0.002); end
  def test_lever_graphs_b2497; assert_in_epsilon(3.0, worksheet.lever_graphs_b2497, 0.002); end
  def test_lever_graphs_j2497; assert_in_delta(0.0, (worksheet.lever_graphs_j2497||0), 0.002); end
  def test_lever_graphs_k2497; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2497, 0.002); end
  def test_lever_graphs_l2497; assert_in_delta(0.023076923076923078, worksheet.lever_graphs_l2497, 0.002); end
  def test_lever_graphs_m2497; assert_in_delta(0.035897435897435895, worksheet.lever_graphs_m2497, 0.002); end
  def test_lever_graphs_n2497; assert_in_delta(0.04871794871794872, worksheet.lever_graphs_n2497, 0.002); end
  def test_lever_graphs_o2497; assert_in_delta(0.06153846153846154, worksheet.lever_graphs_o2497, 0.002); end
  def test_lever_graphs_p2497; assert_in_delta(0.07435897435897436, worksheet.lever_graphs_p2497, 0.002); end
  def test_lever_graphs_q2497; assert_in_delta(0.08717948717948718, worksheet.lever_graphs_q2497, 0.002); end
  def test_lever_graphs_r2497; assert_in_delta(0.1, worksheet.lever_graphs_r2497, 0.002); end
  def test_lever_graphs_b2498; assert_in_epsilon(4.0, worksheet.lever_graphs_b2498, 0.002); end
  def test_lever_graphs_j2498; assert_in_delta(0.0, (worksheet.lever_graphs_j2498||0), 0.002); end
  def test_lever_graphs_k2498; assert_in_delta(0.005128205128205128, worksheet.lever_graphs_k2498, 0.002); end
  def test_lever_graphs_l2498; assert_in_delta(0.046153846153846156, worksheet.lever_graphs_l2498, 0.002); end
  def test_lever_graphs_m2498; assert_in_delta(0.07179487179487179, worksheet.lever_graphs_m2498, 0.002); end
  def test_lever_graphs_n2498; assert_in_delta(0.09743589743589744, worksheet.lever_graphs_n2498, 0.002); end
  def test_lever_graphs_o2498; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_o2498, 0.002); end
  def test_lever_graphs_p2498; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_p2498, 0.002); end
  def test_lever_graphs_q2498; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_q2498, 0.002); end
  def test_lever_graphs_r2498; assert_in_delta(0.2, worksheet.lever_graphs_r2498, 0.002); end
  def test_lever_graphs_c2396; assert_equal("1975", worksheet.lever_graphs_c2396); end
  def test_lever_graphs_d2396; assert_equal("1980", worksheet.lever_graphs_d2396); end
  def test_lever_graphs_e2396; assert_equal("1985", worksheet.lever_graphs_e2396); end
  def test_lever_graphs_f2396; assert_equal("1990", worksheet.lever_graphs_f2396); end
  def test_lever_graphs_g2396; assert_equal("1995", worksheet.lever_graphs_g2396); end
  def test_lever_graphs_h2396; assert_equal("2000", worksheet.lever_graphs_h2396); end
  def test_lever_graphs_i2396; assert_equal("2005", worksheet.lever_graphs_i2396); end
  def test_lever_graphs_j2396; assert_equal("2011", worksheet.lever_graphs_j2396); end
  def test_lever_graphs_k2396; assert_equal("2015", worksheet.lever_graphs_k2396); end
  def test_lever_graphs_l2396; assert_equal("2020", worksheet.lever_graphs_l2396); end
  def test_lever_graphs_m2396; assert_equal("2025", worksheet.lever_graphs_m2396); end
  def test_lever_graphs_n2396; assert_equal("2030", worksheet.lever_graphs_n2396); end
  def test_lever_graphs_o2396; assert_equal("2035", worksheet.lever_graphs_o2396); end
  def test_lever_graphs_p2396; assert_equal("2040", worksheet.lever_graphs_p2396); end
  def test_lever_graphs_q2396; assert_equal("2045", worksheet.lever_graphs_q2396); end
  def test_lever_graphs_r2396; assert_equal("2050", worksheet.lever_graphs_r2396); end
  def test_lever_graphs_b2397; assert_equal("Historic data", worksheet.lever_graphs_b2397); end
  def test_lever_graphs_b2398; assert_in_delta(1.0, worksheet.lever_graphs_b2398, 0.002); end
  def test_lever_graphs_j2398; assert_in_delta(0.0, (worksheet.lever_graphs_j2398||0), 0.002); end
  def test_lever_graphs_k2398; assert_in_delta(-0.0006837606837606838, worksheet.lever_graphs_k2398, 0.002); end
  def test_lever_graphs_l2398; assert_in_delta(0.0, (worksheet.lever_graphs_l2398||0), 0.002); end
  def test_lever_graphs_m2398; assert_in_delta(0.0, (worksheet.lever_graphs_m2398||0), 0.002); end
  def test_lever_graphs_n2398; assert_in_delta(0.0, (worksheet.lever_graphs_n2398||0), 0.002); end
  def test_lever_graphs_o2398; assert_in_delta(0.0, (worksheet.lever_graphs_o2398||0), 0.002); end
  def test_lever_graphs_p2398; assert_in_delta(0.0, (worksheet.lever_graphs_p2398||0), 0.002); end
  def test_lever_graphs_q2398; assert_in_delta(0.0, (worksheet.lever_graphs_q2398||0), 0.002); end
  def test_lever_graphs_r2398; assert_in_delta(0.0, (worksheet.lever_graphs_r2398||0), 0.002); end
  def test_lever_graphs_b2399; assert_in_epsilon(2.0, worksheet.lever_graphs_b2399, 0.002); end
  def test_lever_graphs_j2399; assert_in_delta(0.0, (worksheet.lever_graphs_j2399||0), 0.002); end
  def test_lever_graphs_k2399; assert_in_delta(-0.0006837606837606838, worksheet.lever_graphs_k2399, 0.002); end
  def test_lever_graphs_l2399; assert_in_delta(-0.0015384615384615385, worksheet.lever_graphs_l2399, 0.002); end
  def test_lever_graphs_m2399; assert_in_delta(-0.002393162393162393, worksheet.lever_graphs_m2399, 0.002); end
  def test_lever_graphs_n2399; assert_in_delta(-0.003247863247863248, worksheet.lever_graphs_n2399, 0.002); end
  def test_lever_graphs_o2399; assert_in_delta(-0.0041025641025641026, worksheet.lever_graphs_o2399, 0.002); end
  def test_lever_graphs_p2399; assert_in_delta(-0.004957264957264958, worksheet.lever_graphs_p2399, 0.002); end
  def test_lever_graphs_q2399; assert_in_delta(-0.005811965811965812, worksheet.lever_graphs_q2399, 0.002); end
  def test_lever_graphs_r2399; assert_in_delta(-0.006666666666666667, worksheet.lever_graphs_r2399, 0.002); end
  def test_lever_graphs_b2400; assert_in_epsilon(3.0, worksheet.lever_graphs_b2400, 0.002); end
  def test_lever_graphs_j2400; assert_in_delta(0.0, (worksheet.lever_graphs_j2400||0), 0.002); end
  def test_lever_graphs_k2400; assert_in_delta(-0.0006837606837606838, worksheet.lever_graphs_k2400, 0.002); end
  def test_lever_graphs_l2400; assert_in_delta(-0.005128205128205129, worksheet.lever_graphs_l2400, 0.002); end
  def test_lever_graphs_m2400; assert_in_delta(-0.007977207977207978, worksheet.lever_graphs_m2400, 0.002); end
  def test_lever_graphs_n2400; assert_in_delta(-0.010826210826210828, worksheet.lever_graphs_n2400, 0.002); end
  def test_lever_graphs_o2400; assert_in_delta(-0.013675213675213677, worksheet.lever_graphs_o2400, 0.002); end
  def test_lever_graphs_p2400; assert_in_delta(-0.016524216524216526, worksheet.lever_graphs_p2400, 0.002); end
  def test_lever_graphs_q2400; assert_in_delta(-0.019373219373219376, worksheet.lever_graphs_q2400, 0.002); end
  def test_lever_graphs_r2400; assert_in_delta(-0.022222222222222223, worksheet.lever_graphs_r2400, 0.002); end
  def test_lever_graphs_b2401; assert_in_epsilon(4.0, worksheet.lever_graphs_b2401, 0.002); end
  def test_lever_graphs_j2401; assert_in_delta(0.0, (worksheet.lever_graphs_j2401||0), 0.002); end
  def test_lever_graphs_k2401; assert_in_delta(-0.0006837606837606838, worksheet.lever_graphs_k2401, 0.002); end
  def test_lever_graphs_l2401; assert_in_delta(0.03846153846153846, worksheet.lever_graphs_l2401, 0.002); end
  def test_lever_graphs_m2401; assert_in_delta(0.059829059829059825, worksheet.lever_graphs_m2401, 0.002); end
  def test_lever_graphs_n2401; assert_in_delta(0.08119658119658119, worksheet.lever_graphs_n2401, 0.002); end
  def test_lever_graphs_o2401; assert_in_delta(0.10256410256410256, worksheet.lever_graphs_o2401, 0.002); end
  def test_lever_graphs_p2401; assert_in_delta(0.12393162393162392, worksheet.lever_graphs_p2401, 0.002); end
  def test_lever_graphs_q2401; assert_in_delta(0.14529914529914528, worksheet.lever_graphs_q2401, 0.002); end
  def test_lever_graphs_r2401; assert_in_delta(0.16666666666666666, worksheet.lever_graphs_r2401, 0.002); end
  def test_lever_graphs_d1607; assert_equal("Title", worksheet.lever_graphs_d1607); end
  def test_lever_graphs_e1607; assert_equal("Open-cycle gas turbine power plant", worksheet.lever_graphs_e1607); end
  def test_lever_graphs_f1607; assert_equal("Combined cycle gas turbine power plant", worksheet.lever_graphs_f1607); end
  def test_lever_graphs_d1608; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1608, 0.002); end
  def test_lever_graphs_e1608; assert_in_delta(0.35, worksheet.lever_graphs_e1608, 0.002); end
  def test_lever_graphs_f1608; assert_in_delta(0.65, worksheet.lever_graphs_f1608, 0.002); end
  def test_lever_graphs_d1609; assert_equal("2050: Level 1", worksheet.lever_graphs_d1609); end
  def test_lever_graphs_e1609; assert_in_delta(0.61, worksheet.lever_graphs_e1609, 0.002); end
  def test_lever_graphs_f1609; assert_in_delta(0.39, worksheet.lever_graphs_f1609, 0.002); end
  def test_lever_graphs_d1610; assert_equal("2050: Level 2", worksheet.lever_graphs_d1610); end
  def test_lever_graphs_e1610; assert_in_delta(0.475, worksheet.lever_graphs_e1610, 0.002); end
  def test_lever_graphs_f1610; assert_in_delta(0.525, worksheet.lever_graphs_f1610, 0.002); end
  def test_lever_graphs_d1611; assert_equal("2050: Level 3", worksheet.lever_graphs_d1611); end
  def test_lever_graphs_e1611; assert_in_delta(0.175, worksheet.lever_graphs_e1611, 0.002); end
  def test_lever_graphs_f1611; assert_in_delta(0.825, worksheet.lever_graphs_f1611, 0.002); end
  def test_lever_graphs_d1612; assert_equal("2050: Level 4", worksheet.lever_graphs_d1612); end
  def test_lever_graphs_e1612; assert_in_delta(0.07, worksheet.lever_graphs_e1612, 0.002); end
  def test_lever_graphs_f1612; assert_in_delta(0.9299999999999999, worksheet.lever_graphs_f1612, 0.002); end
  def test_lever_graphs_c2177; assert_equal("1975", worksheet.lever_graphs_c2177); end
  def test_lever_graphs_d2177; assert_equal("1980", worksheet.lever_graphs_d2177); end
  def test_lever_graphs_e2177; assert_equal("1985", worksheet.lever_graphs_e2177); end
  def test_lever_graphs_f2177; assert_equal("1990", worksheet.lever_graphs_f2177); end
  def test_lever_graphs_g2177; assert_equal("1995", worksheet.lever_graphs_g2177); end
  def test_lever_graphs_h2177; assert_equal("2000", worksheet.lever_graphs_h2177); end
  def test_lever_graphs_i2177; assert_equal("2005", worksheet.lever_graphs_i2177); end
  def test_lever_graphs_j2177; assert_equal("2011", worksheet.lever_graphs_j2177); end
  def test_lever_graphs_k2177; assert_equal("2015", worksheet.lever_graphs_k2177); end
  def test_lever_graphs_l2177; assert_equal("2020", worksheet.lever_graphs_l2177); end
  def test_lever_graphs_m2177; assert_equal("2025", worksheet.lever_graphs_m2177); end
  def test_lever_graphs_n2177; assert_equal("2030", worksheet.lever_graphs_n2177); end
  def test_lever_graphs_o2177; assert_equal("2035", worksheet.lever_graphs_o2177); end
  def test_lever_graphs_p2177; assert_equal("2040", worksheet.lever_graphs_p2177); end
  def test_lever_graphs_q2177; assert_equal("2045", worksheet.lever_graphs_q2177); end
  def test_lever_graphs_r2177; assert_equal("2050", worksheet.lever_graphs_r2177); end
  def test_lever_graphs_b2178; assert_equal("Historic data", worksheet.lever_graphs_b2178); end
  def test_lever_graphs_b2179; assert_in_delta(1.0, worksheet.lever_graphs_b2179, 0.002); end
  def test_lever_graphs_j2179; assert_in_epsilon(9131.25, worksheet.lever_graphs_j2179, 0.002); end
  def test_lever_graphs_k2179; assert_in_epsilon(9318.557692307693, worksheet.lever_graphs_k2179, 0.002); end
  def test_lever_graphs_l2179; assert_in_epsilon(9552.692307692309, worksheet.lever_graphs_l2179, 0.002); end
  def test_lever_graphs_m2179; assert_in_epsilon(9786.826923076924, worksheet.lever_graphs_m2179, 0.002); end
  def test_lever_graphs_n2179; assert_in_epsilon(10020.961538461539, worksheet.lever_graphs_n2179, 0.002); end
  def test_lever_graphs_o2179; assert_in_epsilon(10255.096153846154, worksheet.lever_graphs_o2179, 0.002); end
  def test_lever_graphs_p2179; assert_in_epsilon(10489.23076923077, worksheet.lever_graphs_p2179, 0.002); end
  def test_lever_graphs_q2179; assert_in_epsilon(10723.365384615385, worksheet.lever_graphs_q2179, 0.002); end
  def test_lever_graphs_r2179; assert_in_epsilon(10957.5, worksheet.lever_graphs_r2179, 0.002); end
  def test_lever_graphs_b2180; assert_in_epsilon(2.0, worksheet.lever_graphs_b2180, 0.002); end
  def test_lever_graphs_j2180; assert_in_epsilon(9131.25, worksheet.lever_graphs_j2180, 0.002); end
  def test_lever_graphs_k2180; assert_in_epsilon(9224.903846153848, worksheet.lever_graphs_k2180, 0.002); end
  def test_lever_graphs_l2180; assert_in_epsilon(9341.971153846154, worksheet.lever_graphs_l2180, 0.002); end
  def test_lever_graphs_m2180; assert_in_epsilon(9459.038461538461, worksheet.lever_graphs_m2180, 0.002); end
  def test_lever_graphs_n2180; assert_in_epsilon(9576.10576923077, worksheet.lever_graphs_n2180, 0.002); end
  def test_lever_graphs_o2180; assert_in_epsilon(9693.173076923078, worksheet.lever_graphs_o2180, 0.002); end
  def test_lever_graphs_p2180; assert_in_epsilon(9810.240384615385, worksheet.lever_graphs_p2180, 0.002); end
  def test_lever_graphs_q2180; assert_in_epsilon(9927.307692307691, worksheet.lever_graphs_q2180, 0.002); end
  def test_lever_graphs_r2180; assert_in_epsilon(10044.375, worksheet.lever_graphs_r2180, 0.002); end
  def test_lever_graphs_b2181; assert_in_epsilon(3.0, worksheet.lever_graphs_b2181, 0.002); end
  def test_lever_graphs_j2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_j2181, 0.002); end
  def test_lever_graphs_k2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_k2181, 0.002); end
  def test_lever_graphs_l2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_l2181, 0.002); end
  def test_lever_graphs_m2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_m2181, 0.002); end
  def test_lever_graphs_n2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_n2181, 0.002); end
  def test_lever_graphs_o2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_o2181, 0.002); end
  def test_lever_graphs_p2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_p2181, 0.002); end
  def test_lever_graphs_q2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_q2181, 0.002); end
  def test_lever_graphs_r2181; assert_in_epsilon(9131.25, worksheet.lever_graphs_r2181, 0.002); end
  def test_lever_graphs_b2182; assert_in_epsilon(4.0, worksheet.lever_graphs_b2182, 0.002); end
  def test_lever_graphs_j2182; assert_in_epsilon(9131.25, worksheet.lever_graphs_j2182, 0.002); end
  def test_lever_graphs_k2182; assert_in_epsilon(8943.942307692309, worksheet.lever_graphs_k2182, 0.002); end
  def test_lever_graphs_l2182; assert_in_epsilon(8709.807692307693, worksheet.lever_graphs_l2182, 0.002); end
  def test_lever_graphs_m2182; assert_in_epsilon(8475.673076923078, worksheet.lever_graphs_m2182, 0.002); end
  def test_lever_graphs_n2182; assert_in_epsilon(8241.538461538461, worksheet.lever_graphs_n2182, 0.002); end
  def test_lever_graphs_o2182; assert_in_epsilon(8007.403846153846, worksheet.lever_graphs_o2182, 0.002); end
  def test_lever_graphs_p2182; assert_in_epsilon(7773.2692307692305, worksheet.lever_graphs_p2182, 0.002); end
  def test_lever_graphs_q2182; assert_in_epsilon(7539.134615384615, worksheet.lever_graphs_q2182, 0.002); end
  def test_lever_graphs_r2182; assert_in_epsilon(7305.0, worksheet.lever_graphs_r2182, 0.002); end
  def test_lever_graphs_c2167; assert_equal("1975", worksheet.lever_graphs_c2167); end
  def test_lever_graphs_d2167; assert_equal("1980", worksheet.lever_graphs_d2167); end
  def test_lever_graphs_e2167; assert_equal("1985", worksheet.lever_graphs_e2167); end
  def test_lever_graphs_f2167; assert_equal("1990", worksheet.lever_graphs_f2167); end
  def test_lever_graphs_g2167; assert_equal("1995", worksheet.lever_graphs_g2167); end
  def test_lever_graphs_h2167; assert_equal("2000", worksheet.lever_graphs_h2167); end
  def test_lever_graphs_i2167; assert_equal("2005", worksheet.lever_graphs_i2167); end
  def test_lever_graphs_j2167; assert_equal("2011", worksheet.lever_graphs_j2167); end
  def test_lever_graphs_k2167; assert_equal("2015", worksheet.lever_graphs_k2167); end
  def test_lever_graphs_l2167; assert_equal("2020", worksheet.lever_graphs_l2167); end
  def test_lever_graphs_m2167; assert_equal("2025", worksheet.lever_graphs_m2167); end
  def test_lever_graphs_n2167; assert_equal("2030", worksheet.lever_graphs_n2167); end
  def test_lever_graphs_o2167; assert_equal("2035", worksheet.lever_graphs_o2167); end
  def test_lever_graphs_p2167; assert_equal("2040", worksheet.lever_graphs_p2167); end
  def test_lever_graphs_q2167; assert_equal("2045", worksheet.lever_graphs_q2167); end
  def test_lever_graphs_r2167; assert_equal("2050", worksheet.lever_graphs_r2167); end
  def test_lever_graphs_b2168; assert_equal("Historic data", worksheet.lever_graphs_b2168); end
  def test_lever_graphs_b2169; assert_in_delta(1.0, worksheet.lever_graphs_b2169, 0.002); end
  def test_lever_graphs_j2169; assert_in_epsilon(18262.5, worksheet.lever_graphs_j2169, 0.002); end
  def test_lever_graphs_k2169; assert_in_epsilon(18637.115384615387, worksheet.lever_graphs_k2169, 0.002); end
  def test_lever_graphs_l2169; assert_in_epsilon(19105.384615384617, worksheet.lever_graphs_l2169, 0.002); end
  def test_lever_graphs_m2169; assert_in_epsilon(19573.653846153848, worksheet.lever_graphs_m2169, 0.002); end
  def test_lever_graphs_n2169; assert_in_epsilon(20041.923076923078, worksheet.lever_graphs_n2169, 0.002); end
  def test_lever_graphs_o2169; assert_in_epsilon(20510.19230769231, worksheet.lever_graphs_o2169, 0.002); end
  def test_lever_graphs_p2169; assert_in_epsilon(20978.46153846154, worksheet.lever_graphs_p2169, 0.002); end
  def test_lever_graphs_q2169; assert_in_epsilon(21446.73076923077, worksheet.lever_graphs_q2169, 0.002); end
  def test_lever_graphs_r2169; assert_in_epsilon(21915.0, worksheet.lever_graphs_r2169, 0.002); end
  def test_lever_graphs_b2170; assert_in_epsilon(2.0, worksheet.lever_graphs_b2170, 0.002); end
  def test_lever_graphs_j2170; assert_in_epsilon(18262.5, worksheet.lever_graphs_j2170, 0.002); end
  def test_lever_graphs_k2170; assert_in_epsilon(18449.807692307695, worksheet.lever_graphs_k2170, 0.002); end
  def test_lever_graphs_l2170; assert_in_epsilon(18683.94230769231, worksheet.lever_graphs_l2170, 0.002); end
  def test_lever_graphs_m2170; assert_in_epsilon(18918.076923076922, worksheet.lever_graphs_m2170, 0.002); end
  def test_lever_graphs_n2170; assert_in_epsilon(19152.21153846154, worksheet.lever_graphs_n2170, 0.002); end
  def test_lever_graphs_o2170; assert_in_epsilon(19386.346153846156, worksheet.lever_graphs_o2170, 0.002); end
  def test_lever_graphs_p2170; assert_in_epsilon(19620.48076923077, worksheet.lever_graphs_p2170, 0.002); end
  def test_lever_graphs_q2170; assert_in_epsilon(19854.615384615383, worksheet.lever_graphs_q2170, 0.002); end
  def test_lever_graphs_r2170; assert_in_epsilon(20088.75, worksheet.lever_graphs_r2170, 0.002); end
  def test_lever_graphs_b2171; assert_in_epsilon(3.0, worksheet.lever_graphs_b2171, 0.002); end
  def test_lever_graphs_j2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_j2171, 0.002); end
  def test_lever_graphs_k2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_k2171, 0.002); end
  def test_lever_graphs_l2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_l2171, 0.002); end
  def test_lever_graphs_m2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_m2171, 0.002); end
  def test_lever_graphs_n2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_n2171, 0.002); end
  def test_lever_graphs_o2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_o2171, 0.002); end
  def test_lever_graphs_p2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_p2171, 0.002); end
  def test_lever_graphs_q2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_q2171, 0.002); end
  def test_lever_graphs_r2171; assert_in_epsilon(18262.5, worksheet.lever_graphs_r2171, 0.002); end
  def test_lever_graphs_b2172; assert_in_epsilon(4.0, worksheet.lever_graphs_b2172, 0.002); end
  def test_lever_graphs_j2172; assert_in_epsilon(18262.5, worksheet.lever_graphs_j2172, 0.002); end
  def test_lever_graphs_k2172; assert_in_epsilon(17887.884615384617, worksheet.lever_graphs_k2172, 0.002); end
  def test_lever_graphs_l2172; assert_in_epsilon(17419.615384615387, worksheet.lever_graphs_l2172, 0.002); end
  def test_lever_graphs_m2172; assert_in_epsilon(16951.346153846156, worksheet.lever_graphs_m2172, 0.002); end
  def test_lever_graphs_n2172; assert_in_epsilon(16483.076923076922, worksheet.lever_graphs_n2172, 0.002); end
  def test_lever_graphs_o2172; assert_in_epsilon(16014.807692307691, worksheet.lever_graphs_o2172, 0.002); end
  def test_lever_graphs_p2172; assert_in_epsilon(15546.538461538461, worksheet.lever_graphs_p2172, 0.002); end
  def test_lever_graphs_q2172; assert_in_epsilon(15078.26923076923, worksheet.lever_graphs_q2172, 0.002); end
  def test_lever_graphs_r2172; assert_in_epsilon(14610.0, worksheet.lever_graphs_r2172, 0.002); end
  def test_lever_graphs_c2283; assert_equal("1975", worksheet.lever_graphs_c2283); end
  def test_lever_graphs_d2283; assert_equal("1980", worksheet.lever_graphs_d2283); end
  def test_lever_graphs_e2283; assert_equal("1985", worksheet.lever_graphs_e2283); end
  def test_lever_graphs_f2283; assert_equal("1990", worksheet.lever_graphs_f2283); end
  def test_lever_graphs_g2283; assert_equal("1995", worksheet.lever_graphs_g2283); end
  def test_lever_graphs_h2283; assert_equal("2000", worksheet.lever_graphs_h2283); end
  def test_lever_graphs_i2283; assert_equal("2005", worksheet.lever_graphs_i2283); end
  def test_lever_graphs_j2283; assert_equal("2011", worksheet.lever_graphs_j2283); end
  def test_lever_graphs_k2283; assert_equal("2015", worksheet.lever_graphs_k2283); end
  def test_lever_graphs_l2283; assert_equal("2020", worksheet.lever_graphs_l2283); end
  def test_lever_graphs_m2283; assert_equal("2025", worksheet.lever_graphs_m2283); end
  def test_lever_graphs_n2283; assert_equal("2030", worksheet.lever_graphs_n2283); end
  def test_lever_graphs_o2283; assert_equal("2035", worksheet.lever_graphs_o2283); end
  def test_lever_graphs_p2283; assert_equal("2040", worksheet.lever_graphs_p2283); end
  def test_lever_graphs_q2283; assert_equal("2045", worksheet.lever_graphs_q2283); end
  def test_lever_graphs_r2283; assert_equal("2050", worksheet.lever_graphs_r2283); end
  def test_lever_graphs_b2284; assert_equal("Historic data", worksheet.lever_graphs_b2284); end
  def test_lever_graphs_b2285; assert_in_delta(1.0, worksheet.lever_graphs_b2285, 0.002); end
  def test_lever_graphs_j2285; assert_in_epsilon(18.0, worksheet.lever_graphs_j2285, 0.002); end
  def test_lever_graphs_k2285; assert_in_epsilon(17.384615384615383, worksheet.lever_graphs_k2285, 0.002); end
  def test_lever_graphs_l2285; assert_in_epsilon(16.615384615384617, worksheet.lever_graphs_l2285, 0.002); end
  def test_lever_graphs_m2285; assert_in_epsilon(15.846153846153847, worksheet.lever_graphs_m2285, 0.002); end
  def test_lever_graphs_n2285; assert_in_epsilon(15.076923076923077, worksheet.lever_graphs_n2285, 0.002); end
  def test_lever_graphs_o2285; assert_in_epsilon(14.307692307692308, worksheet.lever_graphs_o2285, 0.002); end
  def test_lever_graphs_p2285; assert_in_epsilon(13.538461538461538, worksheet.lever_graphs_p2285, 0.002); end
  def test_lever_graphs_q2285; assert_in_epsilon(12.76923076923077, worksheet.lever_graphs_q2285, 0.002); end
  def test_lever_graphs_r2285; assert_in_epsilon(12.0, worksheet.lever_graphs_r2285, 0.002); end
  def test_lever_graphs_b2286; assert_in_epsilon(2.0, worksheet.lever_graphs_b2286, 0.002); end
  def test_lever_graphs_j2286; assert_in_epsilon(18.0, worksheet.lever_graphs_j2286, 0.002); end
  def test_lever_graphs_k2286; assert_in_epsilon(17.076923076923077, worksheet.lever_graphs_k2286, 0.002); end
  def test_lever_graphs_l2286; assert_in_epsilon(15.923076923076923, worksheet.lever_graphs_l2286, 0.002); end
  def test_lever_graphs_m2286; assert_in_epsilon(14.76923076923077, worksheet.lever_graphs_m2286, 0.002); end
  def test_lever_graphs_n2286; assert_in_epsilon(13.615384615384613, worksheet.lever_graphs_n2286, 0.002); end
  def test_lever_graphs_o2286; assert_in_epsilon(12.461538461538462, worksheet.lever_graphs_o2286, 0.002); end
  def test_lever_graphs_p2286; assert_in_epsilon(11.307692307692307, worksheet.lever_graphs_p2286, 0.002); end
  def test_lever_graphs_q2286; assert_in_epsilon(10.153846153846153, worksheet.lever_graphs_q2286, 0.002); end
  def test_lever_graphs_r2286; assert_in_epsilon(9.0, worksheet.lever_graphs_r2286, 0.002); end
  def test_lever_graphs_b2287; assert_in_epsilon(3.0, worksheet.lever_graphs_b2287, 0.002); end
  def test_lever_graphs_j2287; assert_in_epsilon(18.0, worksheet.lever_graphs_j2287, 0.002); end
  def test_lever_graphs_k2287; assert_in_epsilon(16.76923076923077, worksheet.lever_graphs_k2287, 0.002); end
  def test_lever_graphs_l2287; assert_in_epsilon(15.230769230769232, worksheet.lever_graphs_l2287, 0.002); end
  def test_lever_graphs_m2287; assert_in_epsilon(13.692307692307693, worksheet.lever_graphs_m2287, 0.002); end
  def test_lever_graphs_n2287; assert_in_epsilon(12.153846153846153, worksheet.lever_graphs_n2287, 0.002); end
  def test_lever_graphs_o2287; assert_in_epsilon(10.615384615384617, worksheet.lever_graphs_o2287, 0.002); end
  def test_lever_graphs_p2287; assert_in_epsilon(9.076923076923077, worksheet.lever_graphs_p2287, 0.002); end
  def test_lever_graphs_q2287; assert_in_epsilon(7.538461538461538, worksheet.lever_graphs_q2287, 0.002); end
  def test_lever_graphs_r2287; assert_in_epsilon(6.0, worksheet.lever_graphs_r2287, 0.002); end
  def test_lever_graphs_b2288; assert_in_epsilon(4.0, worksheet.lever_graphs_b2288, 0.002); end
  def test_lever_graphs_j2288; assert_in_epsilon(18.0, worksheet.lever_graphs_j2288, 0.002); end
  def test_lever_graphs_k2288; assert_in_epsilon(16.564102564102562, worksheet.lever_graphs_k2288, 0.002); end
  def test_lever_graphs_l2288; assert_in_epsilon(14.76923076923077, worksheet.lever_graphs_l2288, 0.002); end
  def test_lever_graphs_m2288; assert_in_epsilon(12.974358974358976, worksheet.lever_graphs_m2288, 0.002); end
  def test_lever_graphs_n2288; assert_in_epsilon(11.179487179487179, worksheet.lever_graphs_n2288, 0.002); end
  def test_lever_graphs_o2288; assert_in_epsilon(9.384615384615385, worksheet.lever_graphs_o2288, 0.002); end
  def test_lever_graphs_p2288; assert_in_epsilon(7.589743589743589, worksheet.lever_graphs_p2288, 0.002); end
  def test_lever_graphs_q2288; assert_in_epsilon(5.794871794871796, worksheet.lever_graphs_q2288, 0.002); end
  def test_lever_graphs_r2288; assert_in_epsilon(4.000000000000001, worksheet.lever_graphs_r2288, 0.002); end
  def test_lever_graphs_c2273; assert_equal("1975", worksheet.lever_graphs_c2273); end
  def test_lever_graphs_d2273; assert_equal("1980", worksheet.lever_graphs_d2273); end
  def test_lever_graphs_e2273; assert_equal("1985", worksheet.lever_graphs_e2273); end
  def test_lever_graphs_f2273; assert_equal("1990", worksheet.lever_graphs_f2273); end
  def test_lever_graphs_g2273; assert_equal("1995", worksheet.lever_graphs_g2273); end
  def test_lever_graphs_h2273; assert_equal("2000", worksheet.lever_graphs_h2273); end
  def test_lever_graphs_i2273; assert_equal("2005", worksheet.lever_graphs_i2273); end
  def test_lever_graphs_j2273; assert_equal("2011", worksheet.lever_graphs_j2273); end
  def test_lever_graphs_k2273; assert_equal("2015", worksheet.lever_graphs_k2273); end
  def test_lever_graphs_l2273; assert_equal("2020", worksheet.lever_graphs_l2273); end
  def test_lever_graphs_m2273; assert_equal("2025", worksheet.lever_graphs_m2273); end
  def test_lever_graphs_n2273; assert_equal("2030", worksheet.lever_graphs_n2273); end
  def test_lever_graphs_o2273; assert_equal("2035", worksheet.lever_graphs_o2273); end
  def test_lever_graphs_p2273; assert_equal("2040", worksheet.lever_graphs_p2273); end
  def test_lever_graphs_q2273; assert_equal("2045", worksheet.lever_graphs_q2273); end
  def test_lever_graphs_r2273; assert_equal("2050", worksheet.lever_graphs_r2273); end
  def test_lever_graphs_b2274; assert_equal("Historic data", worksheet.lever_graphs_b2274); end
  def test_lever_graphs_b2275; assert_in_delta(1.0, worksheet.lever_graphs_b2275, 0.002); end
  def test_lever_graphs_j2275; assert_in_epsilon(15.000000000000002, worksheet.lever_graphs_j2275, 0.002); end
  def test_lever_graphs_k2275; assert_in_epsilon(14.692307692307693, worksheet.lever_graphs_k2275, 0.002); end
  def test_lever_graphs_l2275; assert_in_epsilon(14.30769230769231, worksheet.lever_graphs_l2275, 0.002); end
  def test_lever_graphs_m2275; assert_in_epsilon(13.923076923076923, worksheet.lever_graphs_m2275, 0.002); end
  def test_lever_graphs_n2275; assert_in_epsilon(13.538461538461538, worksheet.lever_graphs_n2275, 0.002); end
  def test_lever_graphs_o2275; assert_in_epsilon(13.153846153846155, worksheet.lever_graphs_o2275, 0.002); end
  def test_lever_graphs_p2275; assert_in_epsilon(12.76923076923077, worksheet.lever_graphs_p2275, 0.002); end
  def test_lever_graphs_q2275; assert_in_epsilon(12.384615384615385, worksheet.lever_graphs_q2275, 0.002); end
  def test_lever_graphs_r2275; assert_in_epsilon(12.0, worksheet.lever_graphs_r2275, 0.002); end
  def test_lever_graphs_b2276; assert_in_epsilon(2.0, worksheet.lever_graphs_b2276, 0.002); end
  def test_lever_graphs_j2276; assert_in_epsilon(15.000000000000002, worksheet.lever_graphs_j2276, 0.002); end
  def test_lever_graphs_k2276; assert_in_epsilon(14.384615384615387, worksheet.lever_graphs_k2276, 0.002); end
  def test_lever_graphs_l2276; assert_in_epsilon(13.615384615384617, worksheet.lever_graphs_l2276, 0.002); end
  def test_lever_graphs_m2276; assert_in_epsilon(12.846153846153847, worksheet.lever_graphs_m2276, 0.002); end
  def test_lever_graphs_n2276; assert_in_epsilon(12.076923076923077, worksheet.lever_graphs_n2276, 0.002); end
  def test_lever_graphs_o2276; assert_in_epsilon(11.307692307692308, worksheet.lever_graphs_o2276, 0.002); end
  def test_lever_graphs_p2276; assert_in_epsilon(10.538461538461538, worksheet.lever_graphs_p2276, 0.002); end
  def test_lever_graphs_q2276; assert_in_epsilon(9.76923076923077, worksheet.lever_graphs_q2276, 0.002); end
  def test_lever_graphs_r2276; assert_in_epsilon(9.0, worksheet.lever_graphs_r2276, 0.002); end
  def test_lever_graphs_b2277; assert_in_epsilon(3.0, worksheet.lever_graphs_b2277, 0.002); end
  def test_lever_graphs_j2277; assert_in_epsilon(15.000000000000002, worksheet.lever_graphs_j2277, 0.002); end
  def test_lever_graphs_k2277; assert_in_epsilon(14.076923076923078, worksheet.lever_graphs_k2277, 0.002); end
  def test_lever_graphs_l2277; assert_in_epsilon(12.923076923076925, worksheet.lever_graphs_l2277, 0.002); end
  def test_lever_graphs_m2277; assert_in_epsilon(11.76923076923077, worksheet.lever_graphs_m2277, 0.002); end
  def test_lever_graphs_n2277; assert_in_epsilon(10.615384615384615, worksheet.lever_graphs_n2277, 0.002); end
  def test_lever_graphs_o2277; assert_in_epsilon(9.461538461538463, worksheet.lever_graphs_o2277, 0.002); end
  def test_lever_graphs_p2277; assert_in_epsilon(8.307692307692308, worksheet.lever_graphs_p2277, 0.002); end
  def test_lever_graphs_q2277; assert_in_epsilon(7.153846153846154, worksheet.lever_graphs_q2277, 0.002); end
  def test_lever_graphs_r2277; assert_in_epsilon(6.0, worksheet.lever_graphs_r2277, 0.002); end
  def test_lever_graphs_b2278; assert_in_epsilon(4.0, worksheet.lever_graphs_b2278, 0.002); end
  def test_lever_graphs_j2278; assert_in_epsilon(15.000000000000002, worksheet.lever_graphs_j2278, 0.002); end
  def test_lever_graphs_k2278; assert_in_epsilon(13.871794871794874, worksheet.lever_graphs_k2278, 0.002); end
  def test_lever_graphs_l2278; assert_in_epsilon(12.461538461538463, worksheet.lever_graphs_l2278, 0.002); end
  def test_lever_graphs_m2278; assert_in_epsilon(11.051282051282053, worksheet.lever_graphs_m2278, 0.002); end
  def test_lever_graphs_n2278; assert_in_epsilon(9.641025641025642, worksheet.lever_graphs_n2278, 0.002); end
  def test_lever_graphs_o2278; assert_in_epsilon(8.230769230769232, worksheet.lever_graphs_o2278, 0.002); end
  def test_lever_graphs_p2278; assert_in_epsilon(6.820512820512821, worksheet.lever_graphs_p2278, 0.002); end
  def test_lever_graphs_q2278; assert_in_epsilon(5.4102564102564115, worksheet.lever_graphs_q2278, 0.002); end
  def test_lever_graphs_r2278; assert_in_epsilon(4.000000000000001, worksheet.lever_graphs_r2278, 0.002); end
  def test_lever_graphs_c2137; assert_equal("1975", worksheet.lever_graphs_c2137); end
  def test_lever_graphs_d2137; assert_equal("1980", worksheet.lever_graphs_d2137); end
  def test_lever_graphs_e2137; assert_equal("1985", worksheet.lever_graphs_e2137); end
  def test_lever_graphs_f2137; assert_equal("1990", worksheet.lever_graphs_f2137); end
  def test_lever_graphs_g2137; assert_equal("1995", worksheet.lever_graphs_g2137); end
  def test_lever_graphs_h2137; assert_equal("2000", worksheet.lever_graphs_h2137); end
  def test_lever_graphs_i2137; assert_equal("2005", worksheet.lever_graphs_i2137); end
  def test_lever_graphs_j2137; assert_equal("2011", worksheet.lever_graphs_j2137); end
  def test_lever_graphs_k2137; assert_equal("2015", worksheet.lever_graphs_k2137); end
  def test_lever_graphs_l2137; assert_equal("2020", worksheet.lever_graphs_l2137); end
  def test_lever_graphs_m2137; assert_equal("2025", worksheet.lever_graphs_m2137); end
  def test_lever_graphs_n2137; assert_equal("2030", worksheet.lever_graphs_n2137); end
  def test_lever_graphs_o2137; assert_equal("2035", worksheet.lever_graphs_o2137); end
  def test_lever_graphs_p2137; assert_equal("2040", worksheet.lever_graphs_p2137); end
  def test_lever_graphs_q2137; assert_equal("2045", worksheet.lever_graphs_q2137); end
  def test_lever_graphs_r2137; assert_equal("2050", worksheet.lever_graphs_r2137); end
  def test_lever_graphs_b2138; assert_equal("Historic data", worksheet.lever_graphs_b2138); end
  def test_lever_graphs_b2139; assert_in_delta(1.0, worksheet.lever_graphs_b2139, 0.002); end
  def test_lever_graphs_j2139; assert_in_epsilon(29.0, worksheet.lever_graphs_j2139, 0.002); end
  def test_lever_graphs_k2139; assert_in_epsilon(28.48717948717949, worksheet.lever_graphs_k2139, 0.002); end
  def test_lever_graphs_l2139; assert_in_epsilon(27.846153846153847, worksheet.lever_graphs_l2139, 0.002); end
  def test_lever_graphs_m2139; assert_in_epsilon(27.205128205128204, worksheet.lever_graphs_m2139, 0.002); end
  def test_lever_graphs_n2139; assert_in_epsilon(26.564102564102562, worksheet.lever_graphs_n2139, 0.002); end
  def test_lever_graphs_o2139; assert_in_epsilon(25.923076923076927, worksheet.lever_graphs_o2139, 0.002); end
  def test_lever_graphs_p2139; assert_in_epsilon(25.28205128205128, worksheet.lever_graphs_p2139, 0.002); end
  def test_lever_graphs_q2139; assert_in_epsilon(24.641025641025642, worksheet.lever_graphs_q2139, 0.002); end
  def test_lever_graphs_r2139; assert_in_epsilon(24.0, worksheet.lever_graphs_r2139, 0.002); end
  def test_lever_graphs_b2140; assert_in_epsilon(2.0, worksheet.lever_graphs_b2140, 0.002); end
  def test_lever_graphs_j2140; assert_in_epsilon(29.0, worksheet.lever_graphs_j2140, 0.002); end
  def test_lever_graphs_k2140; assert_in_epsilon(28.58974358974359, worksheet.lever_graphs_k2140, 0.002); end
  def test_lever_graphs_l2140; assert_in_epsilon(28.07692307692308, worksheet.lever_graphs_l2140, 0.002); end
  def test_lever_graphs_m2140; assert_in_epsilon(27.564102564102566, worksheet.lever_graphs_m2140, 0.002); end
  def test_lever_graphs_n2140; assert_in_epsilon(27.05128205128205, worksheet.lever_graphs_n2140, 0.002); end
  def test_lever_graphs_o2140; assert_in_epsilon(26.53846153846154, worksheet.lever_graphs_o2140, 0.002); end
  def test_lever_graphs_p2140; assert_in_epsilon(26.025641025641026, worksheet.lever_graphs_p2140, 0.002); end
  def test_lever_graphs_q2140; assert_in_epsilon(25.512820512820515, worksheet.lever_graphs_q2140, 0.002); end
  def test_lever_graphs_r2140; assert_in_epsilon(25.0, worksheet.lever_graphs_r2140, 0.002); end
  def test_lever_graphs_b2141; assert_in_epsilon(3.0, worksheet.lever_graphs_b2141, 0.002); end
  def test_lever_graphs_j2141; assert_in_epsilon(29.0, worksheet.lever_graphs_j2141, 0.002); end
  def test_lever_graphs_k2141; assert_in_epsilon(28.692307692307693, worksheet.lever_graphs_k2141, 0.002); end
  def test_lever_graphs_l2141; assert_in_epsilon(28.30769230769231, worksheet.lever_graphs_l2141, 0.002); end
  def test_lever_graphs_m2141; assert_in_epsilon(27.923076923076927, worksheet.lever_graphs_m2141, 0.002); end
  def test_lever_graphs_n2141; assert_in_epsilon(27.538461538461537, worksheet.lever_graphs_n2141, 0.002); end
  def test_lever_graphs_o2141; assert_in_epsilon(27.153846153846153, worksheet.lever_graphs_o2141, 0.002); end
  def test_lever_graphs_p2141; assert_in_epsilon(26.76923076923077, worksheet.lever_graphs_p2141, 0.002); end
  def test_lever_graphs_q2141; assert_in_epsilon(26.384615384615387, worksheet.lever_graphs_q2141, 0.002); end
  def test_lever_graphs_r2141; assert_in_epsilon(26.0, worksheet.lever_graphs_r2141, 0.002); end
  def test_lever_graphs_b2142; assert_in_epsilon(4.0, worksheet.lever_graphs_b2142, 0.002); end
  def test_lever_graphs_j2142; assert_in_epsilon(29.0, worksheet.lever_graphs_j2142, 0.002); end
  def test_lever_graphs_k2142; assert_in_epsilon(28.794871794871796, worksheet.lever_graphs_k2142, 0.002); end
  def test_lever_graphs_l2142; assert_in_epsilon(28.53846153846154, worksheet.lever_graphs_l2142, 0.002); end
  def test_lever_graphs_m2142; assert_in_epsilon(28.282051282051285, worksheet.lever_graphs_m2142, 0.002); end
  def test_lever_graphs_n2142; assert_in_epsilon(28.025641025641022, worksheet.lever_graphs_n2142, 0.002); end
  def test_lever_graphs_o2142; assert_in_epsilon(27.769230769230774, worksheet.lever_graphs_o2142, 0.002); end
  def test_lever_graphs_p2142; assert_in_epsilon(27.51282051282051, worksheet.lever_graphs_p2142, 0.002); end
  def test_lever_graphs_q2142; assert_in_epsilon(27.25641025641026, worksheet.lever_graphs_q2142, 0.002); end
  def test_lever_graphs_r2142; assert_in_epsilon(27.0, worksheet.lever_graphs_r2142, 0.002); end
  def test_lever_graphs_c2127; assert_equal("1975", worksheet.lever_graphs_c2127); end
  def test_lever_graphs_d2127; assert_equal("1980", worksheet.lever_graphs_d2127); end
  def test_lever_graphs_e2127; assert_equal("1985", worksheet.lever_graphs_e2127); end
  def test_lever_graphs_f2127; assert_equal("1990", worksheet.lever_graphs_f2127); end
  def test_lever_graphs_g2127; assert_equal("1995", worksheet.lever_graphs_g2127); end
  def test_lever_graphs_h2127; assert_equal("2000", worksheet.lever_graphs_h2127); end
  def test_lever_graphs_i2127; assert_equal("2005", worksheet.lever_graphs_i2127); end
  def test_lever_graphs_j2127; assert_equal("2011", worksheet.lever_graphs_j2127); end
  def test_lever_graphs_k2127; assert_equal("2015", worksheet.lever_graphs_k2127); end
  def test_lever_graphs_l2127; assert_equal("2020", worksheet.lever_graphs_l2127); end
  def test_lever_graphs_m2127; assert_equal("2025", worksheet.lever_graphs_m2127); end
  def test_lever_graphs_n2127; assert_equal("2030", worksheet.lever_graphs_n2127); end
  def test_lever_graphs_o2127; assert_equal("2035", worksheet.lever_graphs_o2127); end
  def test_lever_graphs_p2127; assert_equal("2040", worksheet.lever_graphs_p2127); end
  def test_lever_graphs_q2127; assert_equal("2045", worksheet.lever_graphs_q2127); end
  def test_lever_graphs_r2127; assert_equal("2050", worksheet.lever_graphs_r2127); end
  def test_lever_graphs_b2128; assert_equal("Historic data", worksheet.lever_graphs_b2128); end
  def test_lever_graphs_b2129; assert_in_delta(1.0, worksheet.lever_graphs_b2129, 0.002); end
  def test_lever_graphs_j2129; assert_in_epsilon(26.5, worksheet.lever_graphs_j2129, 0.002); end
  def test_lever_graphs_k2129; assert_in_epsilon(26.243589743589745, worksheet.lever_graphs_k2129, 0.002); end
  def test_lever_graphs_l2129; assert_in_epsilon(25.923076923076927, worksheet.lever_graphs_l2129, 0.002); end
  def test_lever_graphs_m2129; assert_in_epsilon(25.602564102564102, worksheet.lever_graphs_m2129, 0.002); end
  def test_lever_graphs_n2129; assert_in_epsilon(25.282051282051277, worksheet.lever_graphs_n2129, 0.002); end
  def test_lever_graphs_o2129; assert_in_epsilon(24.961538461538463, worksheet.lever_graphs_o2129, 0.002); end
  def test_lever_graphs_p2129; assert_in_epsilon(24.641025641025642, worksheet.lever_graphs_p2129, 0.002); end
  def test_lever_graphs_q2129; assert_in_epsilon(24.32051282051282, worksheet.lever_graphs_q2129, 0.002); end
  def test_lever_graphs_r2129; assert_in_epsilon(24.0, worksheet.lever_graphs_r2129, 0.002); end
  def test_lever_graphs_b2130; assert_in_epsilon(2.0, worksheet.lever_graphs_b2130, 0.002); end
  def test_lever_graphs_j2130; assert_in_epsilon(26.5, worksheet.lever_graphs_j2130, 0.002); end
  def test_lever_graphs_k2130; assert_in_epsilon(26.346153846153847, worksheet.lever_graphs_k2130, 0.002); end
  def test_lever_graphs_l2130; assert_in_epsilon(26.153846153846157, worksheet.lever_graphs_l2130, 0.002); end
  def test_lever_graphs_m2130; assert_in_epsilon(25.961538461538463, worksheet.lever_graphs_m2130, 0.002); end
  def test_lever_graphs_n2130; assert_in_epsilon(25.769230769230766, worksheet.lever_graphs_n2130, 0.002); end
  def test_lever_graphs_o2130; assert_in_epsilon(25.57692307692308, worksheet.lever_graphs_o2130, 0.002); end
  def test_lever_graphs_p2130; assert_in_epsilon(25.384615384615387, worksheet.lever_graphs_p2130, 0.002); end
  def test_lever_graphs_q2130; assert_in_epsilon(25.192307692307693, worksheet.lever_graphs_q2130, 0.002); end
  def test_lever_graphs_r2130; assert_in_epsilon(25.0, worksheet.lever_graphs_r2130, 0.002); end
  def test_lever_graphs_b2131; assert_in_epsilon(3.0, worksheet.lever_graphs_b2131, 0.002); end
  def test_lever_graphs_j2131; assert_in_epsilon(26.5, worksheet.lever_graphs_j2131, 0.002); end
  def test_lever_graphs_k2131; assert_in_epsilon(26.448717948717952, worksheet.lever_graphs_k2131, 0.002); end
  def test_lever_graphs_l2131; assert_in_epsilon(26.384615384615387, worksheet.lever_graphs_l2131, 0.002); end
  def test_lever_graphs_m2131; assert_in_epsilon(26.320512820512825, worksheet.lever_graphs_m2131, 0.002); end
  def test_lever_graphs_n2131; assert_in_epsilon(26.256410256410255, worksheet.lever_graphs_n2131, 0.002); end
  def test_lever_graphs_o2131; assert_in_epsilon(26.192307692307693, worksheet.lever_graphs_o2131, 0.002); end
  def test_lever_graphs_p2131; assert_in_epsilon(26.12820512820513, worksheet.lever_graphs_p2131, 0.002); end
  def test_lever_graphs_q2131; assert_in_epsilon(26.064102564102566, worksheet.lever_graphs_q2131, 0.002); end
  def test_lever_graphs_r2131; assert_in_epsilon(26.0, worksheet.lever_graphs_r2131, 0.002); end
  def test_lever_graphs_b2132; assert_in_epsilon(4.0, worksheet.lever_graphs_b2132, 0.002); end
  def test_lever_graphs_j2132; assert_in_epsilon(26.5, worksheet.lever_graphs_j2132, 0.002); end
  def test_lever_graphs_k2132; assert_in_epsilon(26.551282051282055, worksheet.lever_graphs_k2132, 0.002); end
  def test_lever_graphs_l2132; assert_in_epsilon(26.615384615384617, worksheet.lever_graphs_l2132, 0.002); end
  def test_lever_graphs_m2132; assert_in_epsilon(26.679487179487182, worksheet.lever_graphs_m2132, 0.002); end
  def test_lever_graphs_n2132; assert_in_epsilon(26.74358974358974, worksheet.lever_graphs_n2132, 0.002); end
  def test_lever_graphs_o2132; assert_in_epsilon(26.80769230769231, worksheet.lever_graphs_o2132, 0.002); end
  def test_lever_graphs_p2132; assert_in_epsilon(26.87179487179487, worksheet.lever_graphs_p2132, 0.002); end
  def test_lever_graphs_q2132; assert_in_epsilon(26.935897435897438, worksheet.lever_graphs_q2132, 0.002); end
  def test_lever_graphs_r2132; assert_in_epsilon(27.0, worksheet.lever_graphs_r2132, 0.002); end
  def test_lever_graphs_c2157; assert_equal("1975", worksheet.lever_graphs_c2157); end
  def test_lever_graphs_d2157; assert_equal("1980", worksheet.lever_graphs_d2157); end
  def test_lever_graphs_e2157; assert_equal("1985", worksheet.lever_graphs_e2157); end
  def test_lever_graphs_f2157; assert_equal("1990", worksheet.lever_graphs_f2157); end
  def test_lever_graphs_g2157; assert_equal("1995", worksheet.lever_graphs_g2157); end
  def test_lever_graphs_h2157; assert_equal("2000", worksheet.lever_graphs_h2157); end
  def test_lever_graphs_i2157; assert_equal("2005", worksheet.lever_graphs_i2157); end
  def test_lever_graphs_j2157; assert_equal("2011", worksheet.lever_graphs_j2157); end
  def test_lever_graphs_k2157; assert_equal("2015", worksheet.lever_graphs_k2157); end
  def test_lever_graphs_l2157; assert_equal("2020", worksheet.lever_graphs_l2157); end
  def test_lever_graphs_m2157; assert_equal("2025", worksheet.lever_graphs_m2157); end
  def test_lever_graphs_n2157; assert_equal("2030", worksheet.lever_graphs_n2157); end
  def test_lever_graphs_o2157; assert_equal("2035", worksheet.lever_graphs_o2157); end
  def test_lever_graphs_p2157; assert_equal("2040", worksheet.lever_graphs_p2157); end
  def test_lever_graphs_q2157; assert_equal("2045", worksheet.lever_graphs_q2157); end
  def test_lever_graphs_r2157; assert_equal("2050", worksheet.lever_graphs_r2157); end
  def test_lever_graphs_b2158; assert_equal("Historic data", worksheet.lever_graphs_b2158); end
  def test_lever_graphs_b2159; assert_in_delta(1.0, worksheet.lever_graphs_b2159, 0.002); end
  def test_lever_graphs_j2159; assert_in_epsilon(13.0, worksheet.lever_graphs_j2159, 0.002); end
  def test_lever_graphs_k2159; assert_in_epsilon(13.410256410256412, worksheet.lever_graphs_k2159, 0.002); end
  def test_lever_graphs_l2159; assert_in_epsilon(13.923076923076923, worksheet.lever_graphs_l2159, 0.002); end
  def test_lever_graphs_m2159; assert_in_epsilon(14.435897435897436, worksheet.lever_graphs_m2159, 0.002); end
  def test_lever_graphs_n2159; assert_in_epsilon(14.948717948717947, worksheet.lever_graphs_n2159, 0.002); end
  def test_lever_graphs_o2159; assert_in_epsilon(15.461538461538462, worksheet.lever_graphs_o2159, 0.002); end
  def test_lever_graphs_p2159; assert_in_epsilon(15.974358974358974, worksheet.lever_graphs_p2159, 0.002); end
  def test_lever_graphs_q2159; assert_in_epsilon(16.48717948717949, worksheet.lever_graphs_q2159, 0.002); end
  def test_lever_graphs_r2159; assert_in_epsilon(17.0, worksheet.lever_graphs_r2159, 0.002); end
  def test_lever_graphs_b2160; assert_in_epsilon(2.0, worksheet.lever_graphs_b2160, 0.002); end
  def test_lever_graphs_j2160; assert_in_epsilon(13.0, worksheet.lever_graphs_j2160, 0.002); end
  def test_lever_graphs_k2160; assert_in_epsilon(13.307692307692308, worksheet.lever_graphs_k2160, 0.002); end
  def test_lever_graphs_l2160; assert_in_epsilon(13.692307692307693, worksheet.lever_graphs_l2160, 0.002); end
  def test_lever_graphs_m2160; assert_in_epsilon(14.076923076923077, worksheet.lever_graphs_m2160, 0.002); end
  def test_lever_graphs_n2160; assert_in_epsilon(14.46153846153846, worksheet.lever_graphs_n2160, 0.002); end
  def test_lever_graphs_o2160; assert_in_epsilon(14.846153846153847, worksheet.lever_graphs_o2160, 0.002); end
  def test_lever_graphs_p2160; assert_in_epsilon(15.23076923076923, worksheet.lever_graphs_p2160, 0.002); end
  def test_lever_graphs_q2160; assert_in_epsilon(15.615384615384615, worksheet.lever_graphs_q2160, 0.002); end
  def test_lever_graphs_r2160; assert_in_epsilon(16.0, worksheet.lever_graphs_r2160, 0.002); end
  def test_lever_graphs_b2161; assert_in_epsilon(3.0, worksheet.lever_graphs_b2161, 0.002); end
  def test_lever_graphs_j2161; assert_in_epsilon(13.0, worksheet.lever_graphs_j2161, 0.002); end
  def test_lever_graphs_k2161; assert_in_epsilon(13.205128205128206, worksheet.lever_graphs_k2161, 0.002); end
  def test_lever_graphs_l2161; assert_in_epsilon(13.461538461538462, worksheet.lever_graphs_l2161, 0.002); end
  def test_lever_graphs_m2161; assert_in_epsilon(13.717948717948719, worksheet.lever_graphs_m2161, 0.002); end
  def test_lever_graphs_n2161; assert_in_epsilon(13.974358974358974, worksheet.lever_graphs_n2161, 0.002); end
  def test_lever_graphs_o2161; assert_in_epsilon(14.230769230769232, worksheet.lever_graphs_o2161, 0.002); end
  def test_lever_graphs_p2161; assert_in_epsilon(14.487179487179485, worksheet.lever_graphs_p2161, 0.002); end
  def test_lever_graphs_q2161; assert_in_epsilon(14.743589743589743, worksheet.lever_graphs_q2161, 0.002); end
  def test_lever_graphs_r2161; assert_in_epsilon(15.0, worksheet.lever_graphs_r2161, 0.002); end
  def test_lever_graphs_b2162; assert_in_epsilon(4.0, worksheet.lever_graphs_b2162, 0.002); end
  def test_lever_graphs_j2162; assert_in_epsilon(13.0, worksheet.lever_graphs_j2162, 0.002); end
  def test_lever_graphs_k2162; assert_in_epsilon(13.102564102564104, worksheet.lever_graphs_k2162, 0.002); end
  def test_lever_graphs_l2162; assert_in_epsilon(13.23076923076923, worksheet.lever_graphs_l2162, 0.002); end
  def test_lever_graphs_m2162; assert_in_epsilon(13.35897435897436, worksheet.lever_graphs_m2162, 0.002); end
  def test_lever_graphs_n2162; assert_in_epsilon(13.487179487179485, worksheet.lever_graphs_n2162, 0.002); end
  def test_lever_graphs_o2162; assert_in_epsilon(13.615384615384617, worksheet.lever_graphs_o2162, 0.002); end
  def test_lever_graphs_p2162; assert_in_epsilon(13.743589743589745, worksheet.lever_graphs_p2162, 0.002); end
  def test_lever_graphs_q2162; assert_in_epsilon(13.87179487179487, worksheet.lever_graphs_q2162, 0.002); end
  def test_lever_graphs_r2162; assert_in_epsilon(14.0, worksheet.lever_graphs_r2162, 0.002); end
  def test_lever_graphs_c2147; assert_equal("1975", worksheet.lever_graphs_c2147); end
  def test_lever_graphs_d2147; assert_equal("1980", worksheet.lever_graphs_d2147); end
  def test_lever_graphs_e2147; assert_equal("1985", worksheet.lever_graphs_e2147); end
  def test_lever_graphs_f2147; assert_equal("1990", worksheet.lever_graphs_f2147); end
  def test_lever_graphs_g2147; assert_equal("1995", worksheet.lever_graphs_g2147); end
  def test_lever_graphs_h2147; assert_equal("2000", worksheet.lever_graphs_h2147); end
  def test_lever_graphs_i2147; assert_equal("2005", worksheet.lever_graphs_i2147); end
  def test_lever_graphs_j2147; assert_equal("2011", worksheet.lever_graphs_j2147); end
  def test_lever_graphs_k2147; assert_equal("2015", worksheet.lever_graphs_k2147); end
  def test_lever_graphs_l2147; assert_equal("2020", worksheet.lever_graphs_l2147); end
  def test_lever_graphs_m2147; assert_equal("2025", worksheet.lever_graphs_m2147); end
  def test_lever_graphs_n2147; assert_equal("2030", worksheet.lever_graphs_n2147); end
  def test_lever_graphs_o2147; assert_equal("2035", worksheet.lever_graphs_o2147); end
  def test_lever_graphs_p2147; assert_equal("2040", worksheet.lever_graphs_p2147); end
  def test_lever_graphs_q2147; assert_equal("2045", worksheet.lever_graphs_q2147); end
  def test_lever_graphs_r2147; assert_equal("2050", worksheet.lever_graphs_r2147); end
  def test_lever_graphs_b2148; assert_equal("Historic data", worksheet.lever_graphs_b2148); end
  def test_lever_graphs_b2149; assert_in_delta(1.0, worksheet.lever_graphs_b2149, 0.002); end
  def test_lever_graphs_j2149; assert_in_epsilon(17.5, worksheet.lever_graphs_j2149, 0.002); end
  def test_lever_graphs_k2149; assert_in_epsilon(17.756410256410255, worksheet.lever_graphs_k2149, 0.002); end
  def test_lever_graphs_l2149; assert_in_epsilon(18.076923076923077, worksheet.lever_graphs_l2149, 0.002); end
  def test_lever_graphs_m2149; assert_in_epsilon(18.397435897435898, worksheet.lever_graphs_m2149, 0.002); end
  def test_lever_graphs_n2149; assert_in_epsilon(18.717948717948715, worksheet.lever_graphs_n2149, 0.002); end
  def test_lever_graphs_o2149; assert_in_epsilon(19.03846153846154, worksheet.lever_graphs_o2149, 0.002); end
  def test_lever_graphs_p2149; assert_in_epsilon(19.358974358974358, worksheet.lever_graphs_p2149, 0.002); end
  def test_lever_graphs_q2149; assert_in_epsilon(19.679487179487182, worksheet.lever_graphs_q2149, 0.002); end
  def test_lever_graphs_r2149; assert_in_epsilon(20.0, worksheet.lever_graphs_r2149, 0.002); end
  def test_lever_graphs_b2150; assert_in_epsilon(2.0, worksheet.lever_graphs_b2150, 0.002); end
  def test_lever_graphs_j2150; assert_in_epsilon(17.5, worksheet.lever_graphs_j2150, 0.002); end
  def test_lever_graphs_k2150; assert_in_epsilon(17.653846153846153, worksheet.lever_graphs_k2150, 0.002); end
  def test_lever_graphs_l2150; assert_in_epsilon(17.846153846153847, worksheet.lever_graphs_l2150, 0.002); end
  def test_lever_graphs_m2150; assert_in_epsilon(18.03846153846154, worksheet.lever_graphs_m2150, 0.002); end
  def test_lever_graphs_n2150; assert_in_epsilon(18.23076923076923, worksheet.lever_graphs_n2150, 0.002); end
  def test_lever_graphs_o2150; assert_in_epsilon(18.423076923076923, worksheet.lever_graphs_o2150, 0.002); end
  def test_lever_graphs_p2150; assert_in_epsilon(18.615384615384613, worksheet.lever_graphs_p2150, 0.002); end
  def test_lever_graphs_q2150; assert_in_epsilon(18.80769230769231, worksheet.lever_graphs_q2150, 0.002); end
  def test_lever_graphs_r2150; assert_in_epsilon(19.0, worksheet.lever_graphs_r2150, 0.002); end
  def test_lever_graphs_b2151; assert_in_epsilon(3.0, worksheet.lever_graphs_b2151, 0.002); end
  def test_lever_graphs_j2151; assert_in_epsilon(17.5, worksheet.lever_graphs_j2151, 0.002); end
  def test_lever_graphs_k2151; assert_in_epsilon(17.55128205128205, worksheet.lever_graphs_k2151, 0.002); end
  def test_lever_graphs_l2151; assert_in_epsilon(17.615384615384617, worksheet.lever_graphs_l2151, 0.002); end
  def test_lever_graphs_m2151; assert_in_epsilon(17.679487179487182, worksheet.lever_graphs_m2151, 0.002); end
  def test_lever_graphs_n2151; assert_in_epsilon(17.743589743589745, worksheet.lever_graphs_n2151, 0.002); end
  def test_lever_graphs_o2151; assert_in_epsilon(17.807692307692307, worksheet.lever_graphs_o2151, 0.002); end
  def test_lever_graphs_p2151; assert_in_epsilon(17.871794871794872, worksheet.lever_graphs_p2151, 0.002); end
  def test_lever_graphs_q2151; assert_in_epsilon(17.935897435897438, worksheet.lever_graphs_q2151, 0.002); end
  def test_lever_graphs_r2151; assert_in_epsilon(18.0, worksheet.lever_graphs_r2151, 0.002); end
  def test_lever_graphs_b2152; assert_in_epsilon(4.0, worksheet.lever_graphs_b2152, 0.002); end
  def test_lever_graphs_j2152; assert_in_epsilon(17.5, worksheet.lever_graphs_j2152, 0.002); end
  def test_lever_graphs_k2152; assert_in_epsilon(17.44871794871795, worksheet.lever_graphs_k2152, 0.002); end
  def test_lever_graphs_l2152; assert_in_epsilon(17.384615384615387, worksheet.lever_graphs_l2152, 0.002); end
  def test_lever_graphs_m2152; assert_in_epsilon(17.32051282051282, worksheet.lever_graphs_m2152, 0.002); end
  def test_lever_graphs_n2152; assert_in_epsilon(17.256410256410255, worksheet.lever_graphs_n2152, 0.002); end
  def test_lever_graphs_o2152; assert_in_epsilon(17.192307692307693, worksheet.lever_graphs_o2152, 0.002); end
  def test_lever_graphs_p2152; assert_in_epsilon(17.12820512820513, worksheet.lever_graphs_p2152, 0.002); end
  def test_lever_graphs_q2152; assert_in_epsilon(17.064102564102566, worksheet.lever_graphs_q2152, 0.002); end
  def test_lever_graphs_r2152; assert_in_epsilon(17.0, worksheet.lever_graphs_r2152, 0.002); end
  def test_lever_graphs_d1568; assert_equal("Title", worksheet.lever_graphs_d1568); end
  def test_lever_graphs_e1568; assert_equal("Solid fueled", worksheet.lever_graphs_e1568); end
  def test_lever_graphs_f1568; assert_equal("Liquid fueled", worksheet.lever_graphs_f1568); end
  def test_lever_graphs_g1568; assert_equal("Gas fueled", worksheet.lever_graphs_g1568); end
  def test_lever_graphs_d1569; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1569, 0.002); end
  def test_lever_graphs_e1569; assert_in_delta(0.6119554536906642, worksheet.lever_graphs_e1569, 0.002); end
  def test_lever_graphs_f1569; assert_in_delta(0.06785132715399025, worksheet.lever_graphs_f1569, 0.002); end
  def test_lever_graphs_g1569; assert_in_delta(0.3201932191553456, worksheet.lever_graphs_g1569, 0.002); end
  def test_lever_graphs_d1570; assert_equal("2050: Level 1", worksheet.lever_graphs_d1570); end
  def test_lever_graphs_e1570; assert_in_delta(0.6119554536906642, worksheet.lever_graphs_e1570, 0.002); end
  def test_lever_graphs_f1570; assert_in_delta(0.2909, worksheet.lever_graphs_f1570, 0.002); end
  def test_lever_graphs_g1570; assert_in_delta(0.09714454630933583, worksheet.lever_graphs_g1570, 0.002); end
  def test_lever_graphs_d1571; assert_equal("2050: Level 2", worksheet.lever_graphs_d1571); end
  def test_lever_graphs_e1571; assert_in_delta(0.4, worksheet.lever_graphs_e1571, 0.002); end
  def test_lever_graphs_f1571; assert_in_delta(0.19, worksheet.lever_graphs_f1571, 0.002); end
  def test_lever_graphs_g1571; assert_in_delta(0.41, worksheet.lever_graphs_g1571, 0.002); end
  def test_lever_graphs_d1572; assert_equal("2050: Level 3", worksheet.lever_graphs_d1572); end
  def test_lever_graphs_e1572; assert_in_delta(0.32, worksheet.lever_graphs_e1572, 0.002); end
  def test_lever_graphs_f1572; assert_in_delta(0.06, worksheet.lever_graphs_f1572, 0.002); end
  def test_lever_graphs_g1572; assert_in_delta(0.6199999999999999, worksheet.lever_graphs_g1572, 0.002); end
  def test_lever_graphs_d1573; assert_equal("2050: Level 4", worksheet.lever_graphs_d1573); end
  def test_lever_graphs_e1573; assert_in_delta(0.2641, worksheet.lever_graphs_e1573, 0.002); end
  def test_lever_graphs_f1573; assert_in_delta(0.0188, worksheet.lever_graphs_f1573, 0.002); end
  def test_lever_graphs_g1573; assert_in_delta(0.7171, worksheet.lever_graphs_g1573, 0.002); end
  def test_lever_graphs_c2621; assert_equal("1975", worksheet.lever_graphs_c2621); end
  def test_lever_graphs_d2621; assert_equal("1980", worksheet.lever_graphs_d2621); end
  def test_lever_graphs_e2621; assert_equal("1985", worksheet.lever_graphs_e2621); end
  def test_lever_graphs_f2621; assert_equal("1990", worksheet.lever_graphs_f2621); end
  def test_lever_graphs_g2621; assert_equal("1995", worksheet.lever_graphs_g2621); end
  def test_lever_graphs_h2621; assert_equal("2000", worksheet.lever_graphs_h2621); end
  def test_lever_graphs_i2621; assert_equal("2005", worksheet.lever_graphs_i2621); end
  def test_lever_graphs_j2621; assert_equal("2011", worksheet.lever_graphs_j2621); end
  def test_lever_graphs_k2621; assert_equal("2015", worksheet.lever_graphs_k2621); end
  def test_lever_graphs_l2621; assert_equal("2020", worksheet.lever_graphs_l2621); end
  def test_lever_graphs_m2621; assert_equal("2025", worksheet.lever_graphs_m2621); end
  def test_lever_graphs_n2621; assert_equal("2030", worksheet.lever_graphs_n2621); end
  def test_lever_graphs_o2621; assert_equal("2035", worksheet.lever_graphs_o2621); end
  def test_lever_graphs_p2621; assert_equal("2040", worksheet.lever_graphs_p2621); end
  def test_lever_graphs_q2621; assert_equal("2045", worksheet.lever_graphs_q2621); end
  def test_lever_graphs_r2621; assert_equal("2050", worksheet.lever_graphs_r2621); end
  def test_lever_graphs_b2622; assert_equal("Historic data", worksheet.lever_graphs_b2622); end
  def test_lever_graphs_b2623; assert_in_delta(1.0, worksheet.lever_graphs_b2623, 0.002); end
  def test_lever_graphs_j2623; assert_in_delta(1.0, worksheet.lever_graphs_j2623, 0.002); end
  def test_lever_graphs_k2623; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2623, 0.002); end
  def test_lever_graphs_l2623; assert_in_epsilon(1.0054945054945055, worksheet.lever_graphs_l2623, 0.002); end
  def test_lever_graphs_m2623; assert_in_epsilon(1.0212454212454214, worksheet.lever_graphs_m2623, 0.002); end
  def test_lever_graphs_n2623; assert_in_epsilon(1.036996336996337, worksheet.lever_graphs_n2623, 0.002); end
  def test_lever_graphs_o2623; assert_in_epsilon(1.0527472527472528, worksheet.lever_graphs_o2623, 0.002); end
  def test_lever_graphs_p2623; assert_in_epsilon(1.0684981684981685, worksheet.lever_graphs_p2623, 0.002); end
  def test_lever_graphs_q2623; assert_in_epsilon(1.0842490842490844, worksheet.lever_graphs_q2623, 0.002); end
  def test_lever_graphs_r2623; assert_in_epsilon(1.1, worksheet.lever_graphs_r2623, 0.002); end
  def test_lever_graphs_b2624; assert_in_epsilon(2.0, worksheet.lever_graphs_b2624, 0.002); end
  def test_lever_graphs_j2624; assert_in_delta(1.0, worksheet.lever_graphs_j2624, 0.002); end
  def test_lever_graphs_k2624; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2624, 0.002); end
  def test_lever_graphs_l2624; assert_in_delta(0.9912087912087912, worksheet.lever_graphs_l2624, 0.002); end
  def test_lever_graphs_m2624; assert_in_delta(0.9926739926739927, worksheet.lever_graphs_m2624, 0.002); end
  def test_lever_graphs_n2624; assert_in_delta(0.9941391941391942, worksheet.lever_graphs_n2624, 0.002); end
  def test_lever_graphs_o2624; assert_in_delta(0.9956043956043956, worksheet.lever_graphs_o2624, 0.002); end
  def test_lever_graphs_p2624; assert_in_delta(0.9970695970695971, worksheet.lever_graphs_p2624, 0.002); end
  def test_lever_graphs_q2624; assert_in_delta(0.9985347985347985, worksheet.lever_graphs_q2624, 0.002); end
  def test_lever_graphs_r2624; assert_in_delta(1.0, worksheet.lever_graphs_r2624, 0.002); end
  def test_lever_graphs_b2625; assert_in_epsilon(3.0, worksheet.lever_graphs_b2625, 0.002); end
  def test_lever_graphs_j2625; assert_in_delta(1.0, worksheet.lever_graphs_j2625, 0.002); end
  def test_lever_graphs_k2625; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2625, 0.002); end
  def test_lever_graphs_l2625; assert_in_delta(0.976923076923077, worksheet.lever_graphs_l2625, 0.002); end
  def test_lever_graphs_m2625; assert_in_delta(0.9641025641025641, worksheet.lever_graphs_m2625, 0.002); end
  def test_lever_graphs_n2625; assert_in_delta(0.9512820512820513, worksheet.lever_graphs_n2625, 0.002); end
  def test_lever_graphs_o2625; assert_in_delta(0.9384615384615385, worksheet.lever_graphs_o2625, 0.002); end
  def test_lever_graphs_p2625; assert_in_delta(0.9256410256410257, worksheet.lever_graphs_p2625, 0.002); end
  def test_lever_graphs_q2625; assert_in_delta(0.9128205128205129, worksheet.lever_graphs_q2625, 0.002); end
  def test_lever_graphs_r2625; assert_in_delta(0.9, worksheet.lever_graphs_r2625, 0.002); end
  def test_lever_graphs_b2626; assert_in_epsilon(4.0, worksheet.lever_graphs_b2626, 0.002); end
  def test_lever_graphs_j2626; assert_in_delta(1.0, worksheet.lever_graphs_j2626, 0.002); end
  def test_lever_graphs_k2626; assert_in_delta(0.9897435897435898, worksheet.lever_graphs_k2626, 0.002); end
  def test_lever_graphs_l2626; assert_in_delta(0.9483516483516484, worksheet.lever_graphs_l2626, 0.002); end
  def test_lever_graphs_m2626; assert_in_delta(0.906959706959707, worksheet.lever_graphs_m2626, 0.002); end
  def test_lever_graphs_n2626; assert_in_delta(0.8655677655677656, worksheet.lever_graphs_n2626, 0.002); end
  def test_lever_graphs_o2626; assert_in_delta(0.8241758241758241, worksheet.lever_graphs_o2626, 0.002); end
  def test_lever_graphs_p2626; assert_in_delta(0.7827838827838828, worksheet.lever_graphs_p2626, 0.002); end
  def test_lever_graphs_q2626; assert_in_delta(0.7413919413919414, worksheet.lever_graphs_q2626, 0.002); end
  def test_lever_graphs_r2626; assert_in_delta(0.7, worksheet.lever_graphs_r2626, 0.002); end
  def test_lever_graphs_d2716; assert_equal("Title", worksheet.lever_graphs_d2716); end
  def test_lever_graphs_e2716; assert_equal("Forest", worksheet.lever_graphs_e2716); end
  def test_lever_graphs_f2716; assert_equal("Arable.bio", worksheet.lever_graphs_f2716); end
  def test_lever_graphs_g2716; assert_equal("Other.Land.productive", worksheet.lever_graphs_g2716); end
  def test_lever_graphs_d2717; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2717, 0.002); end
  def test_lever_graphs_e2717; assert_in_delta(0.8, worksheet.lever_graphs_e2717, 0.002); end
  def test_lever_graphs_f2717; assert_in_delta(0.0, (worksheet.lever_graphs_f2717||0), 0.002); end
  def test_lever_graphs_g2717; assert_in_delta(0.0, (worksheet.lever_graphs_g2717||0), 0.002); end
  def test_lever_graphs_d2718; assert_equal("2050: Level 1", worksheet.lever_graphs_d2718); end
  def test_lever_graphs_e2718; assert_in_delta(0.8, worksheet.lever_graphs_e2718, 0.002); end
  def test_lever_graphs_f2718; assert_in_delta(0.0, (worksheet.lever_graphs_f2718||0), 0.002); end
  def test_lever_graphs_g2718; assert_in_delta(0.0, (worksheet.lever_graphs_g2718||0), 0.002); end
  def test_lever_graphs_d2719; assert_equal("2050: Level 2", worksheet.lever_graphs_d2719); end
  def test_lever_graphs_e2719; assert_in_delta(0.48, worksheet.lever_graphs_e2719, 0.002); end
  def test_lever_graphs_f2719; assert_in_delta(0.4, worksheet.lever_graphs_f2719, 0.002); end
  def test_lever_graphs_g2719; assert_in_delta(0.0, (worksheet.lever_graphs_g2719||0), 0.002); end
  def test_lever_graphs_d2720; assert_equal("2050: Level 3", worksheet.lever_graphs_d2720); end
  def test_lever_graphs_e2720; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_e2720, 0.002); end
  def test_lever_graphs_f2720; assert_in_delta(0.6, worksheet.lever_graphs_f2720, 0.002); end
  def test_lever_graphs_g2720; assert_in_delta(0.0, (worksheet.lever_graphs_g2720||0), 0.002); end
  def test_lever_graphs_d2721; assert_equal("2050: Level 4", worksheet.lever_graphs_d2721); end
  def test_lever_graphs_e2721; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_e2721, 0.002); end
  def test_lever_graphs_f2721; assert_in_delta(0.8, worksheet.lever_graphs_f2721, 0.002); end
  def test_lever_graphs_g2721; assert_in_delta(0.0, (worksheet.lever_graphs_g2721||0), 0.002); end
  def test_lever_graphs_c2705; assert_equal("1975", worksheet.lever_graphs_c2705); end
  def test_lever_graphs_d2705; assert_equal("1980", worksheet.lever_graphs_d2705); end
  def test_lever_graphs_e2705; assert_equal("1985", worksheet.lever_graphs_e2705); end
  def test_lever_graphs_f2705; assert_equal("1990", worksheet.lever_graphs_f2705); end
  def test_lever_graphs_g2705; assert_equal("1995", worksheet.lever_graphs_g2705); end
  def test_lever_graphs_h2705; assert_equal("2000", worksheet.lever_graphs_h2705); end
  def test_lever_graphs_i2705; assert_equal("2005", worksheet.lever_graphs_i2705); end
  def test_lever_graphs_j2705; assert_equal("2011", worksheet.lever_graphs_j2705); end
  def test_lever_graphs_k2705; assert_equal("2015", worksheet.lever_graphs_k2705); end
  def test_lever_graphs_l2705; assert_equal("2020", worksheet.lever_graphs_l2705); end
  def test_lever_graphs_m2705; assert_equal("2025", worksheet.lever_graphs_m2705); end
  def test_lever_graphs_n2705; assert_equal("2030", worksheet.lever_graphs_n2705); end
  def test_lever_graphs_o2705; assert_equal("2035", worksheet.lever_graphs_o2705); end
  def test_lever_graphs_p2705; assert_equal("2040", worksheet.lever_graphs_p2705); end
  def test_lever_graphs_q2705; assert_equal("2045", worksheet.lever_graphs_q2705); end
  def test_lever_graphs_r2705; assert_equal("2050", worksheet.lever_graphs_r2705); end
  def test_lever_graphs_b2706; assert_equal("Historic data", worksheet.lever_graphs_b2706); end
  def test_lever_graphs_b2707; assert_in_delta(1.0, worksheet.lever_graphs_b2707, 0.002); end
  def test_lever_graphs_j2707; assert_in_delta(0.8, worksheet.lever_graphs_j2707, 0.002); end
  def test_lever_graphs_k2707; assert_in_delta(0.8, worksheet.lever_graphs_k2707, 0.002); end
  def test_lever_graphs_l2707; assert_in_delta(0.8, worksheet.lever_graphs_l2707, 0.002); end
  def test_lever_graphs_m2707; assert_in_delta(0.8, worksheet.lever_graphs_m2707, 0.002); end
  def test_lever_graphs_n2707; assert_in_delta(0.8, worksheet.lever_graphs_n2707, 0.002); end
  def test_lever_graphs_o2707; assert_in_delta(0.8, worksheet.lever_graphs_o2707, 0.002); end
  def test_lever_graphs_p2707; assert_in_delta(0.8, worksheet.lever_graphs_p2707, 0.002); end
  def test_lever_graphs_q2707; assert_in_delta(0.8, worksheet.lever_graphs_q2707, 0.002); end
  def test_lever_graphs_r2707; assert_in_delta(0.8, worksheet.lever_graphs_r2707, 0.002); end
  def test_lever_graphs_b2708; assert_in_epsilon(2.0, worksheet.lever_graphs_b2708, 0.002); end
  def test_lever_graphs_j2708; assert_in_delta(0.48, worksheet.lever_graphs_j2708, 0.002); end
  def test_lever_graphs_k2708; assert_in_delta(0.48, worksheet.lever_graphs_k2708, 0.002); end
  def test_lever_graphs_l2708; assert_in_delta(0.48, worksheet.lever_graphs_l2708, 0.002); end
  def test_lever_graphs_m2708; assert_in_delta(0.48, worksheet.lever_graphs_m2708, 0.002); end
  def test_lever_graphs_n2708; assert_in_delta(0.48, worksheet.lever_graphs_n2708, 0.002); end
  def test_lever_graphs_o2708; assert_in_delta(0.48, worksheet.lever_graphs_o2708, 0.002); end
  def test_lever_graphs_p2708; assert_in_delta(0.48, worksheet.lever_graphs_p2708, 0.002); end
  def test_lever_graphs_q2708; assert_in_delta(0.48, worksheet.lever_graphs_q2708, 0.002); end
  def test_lever_graphs_r2708; assert_in_delta(0.48, worksheet.lever_graphs_r2708, 0.002); end
  def test_lever_graphs_b2709; assert_in_epsilon(3.0, worksheet.lever_graphs_b2709, 0.002); end
  def test_lever_graphs_j2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_j2709, 0.002); end
  def test_lever_graphs_k2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_k2709, 0.002); end
  def test_lever_graphs_l2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_l2709, 0.002); end
  def test_lever_graphs_m2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_m2709, 0.002); end
  def test_lever_graphs_n2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_n2709, 0.002); end
  def test_lever_graphs_o2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_o2709, 0.002); end
  def test_lever_graphs_p2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_p2709, 0.002); end
  def test_lever_graphs_q2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_q2709, 0.002); end
  def test_lever_graphs_r2709; assert_in_delta(0.32000000000000006, worksheet.lever_graphs_r2709, 0.002); end
  def test_lever_graphs_b2710; assert_in_epsilon(4.0, worksheet.lever_graphs_b2710, 0.002); end
  def test_lever_graphs_j2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_j2710, 0.002); end
  def test_lever_graphs_k2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_k2710, 0.002); end
  def test_lever_graphs_l2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_l2710, 0.002); end
  def test_lever_graphs_m2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_m2710, 0.002); end
  def test_lever_graphs_n2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_n2710, 0.002); end
  def test_lever_graphs_o2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_o2710, 0.002); end
  def test_lever_graphs_p2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_p2710, 0.002); end
  def test_lever_graphs_q2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_q2710, 0.002); end
  def test_lever_graphs_r2710; assert_in_delta(0.15999999999999998, worksheet.lever_graphs_r2710, 0.002); end
  def test_lever_graphs_c2231; assert_equal("1975", worksheet.lever_graphs_c2231); end
  def test_lever_graphs_d2231; assert_equal("1980", worksheet.lever_graphs_d2231); end
  def test_lever_graphs_e2231; assert_equal("1985", worksheet.lever_graphs_e2231); end
  def test_lever_graphs_f2231; assert_equal("1990", worksheet.lever_graphs_f2231); end
  def test_lever_graphs_g2231; assert_equal("1995", worksheet.lever_graphs_g2231); end
  def test_lever_graphs_h2231; assert_equal("2000", worksheet.lever_graphs_h2231); end
  def test_lever_graphs_i2231; assert_equal("2005", worksheet.lever_graphs_i2231); end
  def test_lever_graphs_j2231; assert_equal("2011", worksheet.lever_graphs_j2231); end
  def test_lever_graphs_k2231; assert_equal("2015", worksheet.lever_graphs_k2231); end
  def test_lever_graphs_l2231; assert_equal("2020", worksheet.lever_graphs_l2231); end
  def test_lever_graphs_m2231; assert_equal("2025", worksheet.lever_graphs_m2231); end
  def test_lever_graphs_n2231; assert_equal("2030", worksheet.lever_graphs_n2231); end
  def test_lever_graphs_o2231; assert_equal("2035", worksheet.lever_graphs_o2231); end
  def test_lever_graphs_p2231; assert_equal("2040", worksheet.lever_graphs_p2231); end
  def test_lever_graphs_q2231; assert_equal("2045", worksheet.lever_graphs_q2231); end
  def test_lever_graphs_r2231; assert_equal("2050", worksheet.lever_graphs_r2231); end
  def test_lever_graphs_b2232; assert_equal("Historic data", worksheet.lever_graphs_b2232); end
  def test_lever_graphs_b2233; assert_in_delta(1.0, worksheet.lever_graphs_b2233, 0.002); end
  def test_lever_graphs_j2233; assert_in_epsilon(24.0, worksheet.lever_graphs_j2233, 0.002); end
  def test_lever_graphs_k2233; assert_in_epsilon(25.641025641025642, worksheet.lever_graphs_k2233, 0.002); end
  def test_lever_graphs_l2233; assert_in_epsilon(27.692307692307693, worksheet.lever_graphs_l2233, 0.002); end
  def test_lever_graphs_m2233; assert_in_epsilon(29.743589743589745, worksheet.lever_graphs_m2233, 0.002); end
  def test_lever_graphs_n2233; assert_in_epsilon(31.794871794871792, worksheet.lever_graphs_n2233, 0.002); end
  def test_lever_graphs_o2233; assert_in_epsilon(33.84615384615385, worksheet.lever_graphs_o2233, 0.002); end
  def test_lever_graphs_p2233; assert_in_epsilon(35.8974358974359, worksheet.lever_graphs_p2233, 0.002); end
  def test_lever_graphs_q2233; assert_in_epsilon(37.948717948717956, worksheet.lever_graphs_q2233, 0.002); end
  def test_lever_graphs_r2233; assert_in_epsilon(40.0, worksheet.lever_graphs_r2233, 0.002); end
  def test_lever_graphs_b2234; assert_in_epsilon(2.0, worksheet.lever_graphs_b2234, 0.002); end
  def test_lever_graphs_j2234; assert_in_epsilon(24.0, worksheet.lever_graphs_j2234, 0.002); end
  def test_lever_graphs_k2234; assert_in_epsilon(25.12820512820513, worksheet.lever_graphs_k2234, 0.002); end
  def test_lever_graphs_l2234; assert_in_epsilon(26.53846153846154, worksheet.lever_graphs_l2234, 0.002); end
  def test_lever_graphs_m2234; assert_in_epsilon(27.94871794871795, worksheet.lever_graphs_m2234, 0.002); end
  def test_lever_graphs_n2234; assert_in_epsilon(29.358974358974358, worksheet.lever_graphs_n2234, 0.002); end
  def test_lever_graphs_o2234; assert_in_epsilon(30.769230769230774, worksheet.lever_graphs_o2234, 0.002); end
  def test_lever_graphs_p2234; assert_in_epsilon(32.17948717948718, worksheet.lever_graphs_p2234, 0.002); end
  def test_lever_graphs_q2234; assert_in_epsilon(33.58974358974359, worksheet.lever_graphs_q2234, 0.002); end
  def test_lever_graphs_r2234; assert_in_epsilon(35.0, worksheet.lever_graphs_r2234, 0.002); end
  def test_lever_graphs_b2235; assert_in_epsilon(3.0, worksheet.lever_graphs_b2235, 0.002); end
  def test_lever_graphs_j2235; assert_in_epsilon(24.0, worksheet.lever_graphs_j2235, 0.002); end
  def test_lever_graphs_k2235; assert_in_epsilon(24.615384615384617, worksheet.lever_graphs_k2235, 0.002); end
  def test_lever_graphs_l2235; assert_in_epsilon(25.384615384615387, worksheet.lever_graphs_l2235, 0.002); end
  def test_lever_graphs_m2235; assert_in_epsilon(26.153846153846157, worksheet.lever_graphs_m2235, 0.002); end
  def test_lever_graphs_n2235; assert_in_epsilon(26.92307692307692, worksheet.lever_graphs_n2235, 0.002); end
  def test_lever_graphs_o2235; assert_in_epsilon(27.692307692307693, worksheet.lever_graphs_o2235, 0.002); end
  def test_lever_graphs_p2235; assert_in_epsilon(28.46153846153846, worksheet.lever_graphs_p2235, 0.002); end
  def test_lever_graphs_q2235; assert_in_epsilon(29.23076923076923, worksheet.lever_graphs_q2235, 0.002); end
  def test_lever_graphs_r2235; assert_in_epsilon(30.0, worksheet.lever_graphs_r2235, 0.002); end
  def test_lever_graphs_b2236; assert_in_epsilon(4.0, worksheet.lever_graphs_b2236, 0.002); end
  def test_lever_graphs_j2236; assert_in_epsilon(24.0, worksheet.lever_graphs_j2236, 0.002); end
  def test_lever_graphs_k2236; assert_in_epsilon(24.102564102564102, worksheet.lever_graphs_k2236, 0.002); end
  def test_lever_graphs_l2236; assert_in_epsilon(24.230769230769234, worksheet.lever_graphs_l2236, 0.002); end
  def test_lever_graphs_m2236; assert_in_epsilon(24.35897435897436, worksheet.lever_graphs_m2236, 0.002); end
  def test_lever_graphs_n2236; assert_in_epsilon(24.487179487179485, worksheet.lever_graphs_n2236, 0.002); end
  def test_lever_graphs_o2236; assert_in_epsilon(24.615384615384617, worksheet.lever_graphs_o2236, 0.002); end
  def test_lever_graphs_p2236; assert_in_epsilon(24.743589743589745, worksheet.lever_graphs_p2236, 0.002); end
  def test_lever_graphs_q2236; assert_in_epsilon(24.871794871794872, worksheet.lever_graphs_q2236, 0.002); end
  def test_lever_graphs_r2236; assert_in_epsilon(25.0, worksheet.lever_graphs_r2236, 0.002); end
  def test_lever_graphs_d2241; assert_equal("Title", worksheet.lever_graphs_d2241); end
  def test_lever_graphs_e2241; assert_equal("Global urban incandescent light bulb", worksheet.lever_graphs_e2241); end
  def test_lever_graphs_f2241; assert_equal("Global urban halogens light bulb", worksheet.lever_graphs_f2241); end
  def test_lever_graphs_g2241; assert_equal("Global urban compact fluorescent lamp", worksheet.lever_graphs_g2241); end
  def test_lever_graphs_h2241; assert_equal("Global urban LEDs bulb", worksheet.lever_graphs_h2241); end
  def test_lever_graphs_d2242; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2242, 0.002); end
  def test_lever_graphs_e2242; assert_in_delta(0.717, worksheet.lever_graphs_e2242, 0.002); end
  def test_lever_graphs_f2242; assert_in_delta(0.03, worksheet.lever_graphs_f2242, 0.002); end
  def test_lever_graphs_g2242; assert_in_delta(0.25, worksheet.lever_graphs_g2242, 0.002); end
  def test_lever_graphs_h2242; assert_in_delta(0.0030000000000000027, worksheet.lever_graphs_h2242, 0.002); end
  def test_lever_graphs_d2243; assert_equal("2050: Level 1", worksheet.lever_graphs_d2243); end
  def test_lever_graphs_e2243; assert_in_delta(0.717, worksheet.lever_graphs_e2243, 0.002); end
  def test_lever_graphs_f2243; assert_in_delta(0.03, worksheet.lever_graphs_f2243, 0.002); end
  def test_lever_graphs_g2243; assert_in_delta(0.25, worksheet.lever_graphs_g2243, 0.002); end
  def test_lever_graphs_h2243; assert_in_delta(0.0030000000000000027, worksheet.lever_graphs_h2243, 0.002); end
  def test_lever_graphs_d2244; assert_equal("2050: Level 2", worksheet.lever_graphs_d2244); end
  def test_lever_graphs_e2244; assert_in_delta(0.48, worksheet.lever_graphs_e2244, 0.002); end
  def test_lever_graphs_f2244; assert_in_delta(0.02, worksheet.lever_graphs_f2244, 0.002); end
  def test_lever_graphs_g2244; assert_in_delta(0.45, worksheet.lever_graphs_g2244, 0.002); end
  def test_lever_graphs_h2244; assert_in_delta(0.04999999999999999, worksheet.lever_graphs_h2244, 0.002); end
  def test_lever_graphs_d2245; assert_equal("2050: Level 3", worksheet.lever_graphs_d2245); end
  def test_lever_graphs_e2245; assert_in_delta(0.18199999999999994, worksheet.lever_graphs_e2245, 0.002); end
  def test_lever_graphs_f2245; assert_in_delta(0.018, worksheet.lever_graphs_f2245, 0.002); end
  def test_lever_graphs_g2245; assert_in_delta(0.45, worksheet.lever_graphs_g2245, 0.002); end
  def test_lever_graphs_h2245; assert_in_delta(0.35000000000000003, worksheet.lever_graphs_h2245, 0.002); end
  def test_lever_graphs_d2246; assert_equal("2050: Level 4", worksheet.lever_graphs_d2246); end
  def test_lever_graphs_e2246; assert_in_delta(0.0, (worksheet.lever_graphs_e2246||0), 0.002); end
  def test_lever_graphs_f2246; assert_in_delta(0.01, worksheet.lever_graphs_f2246, 0.002); end
  def test_lever_graphs_g2246; assert_in_delta(0.34, worksheet.lever_graphs_g2246, 0.002); end
  def test_lever_graphs_h2246; assert_in_delta(0.6499999999999999, worksheet.lever_graphs_h2246, 0.002); end
  def test_lever_graphs_d1597; assert_equal("Title", worksheet.lever_graphs_d1597); end
  def test_lever_graphs_e1597; assert_equal("liquid-fuel efficient power plant", worksheet.lever_graphs_e1597); end
  def test_lever_graphs_f1597; assert_equal("Liquid-fuel inefficient power plant", worksheet.lever_graphs_f1597); end
  def test_lever_graphs_d1598; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1598, 0.002); end
  def test_lever_graphs_e1598; assert_in_delta(0.3, worksheet.lever_graphs_e1598, 0.002); end
  def test_lever_graphs_f1598; assert_in_delta(0.7, worksheet.lever_graphs_f1598, 0.002); end
  def test_lever_graphs_d1599; assert_equal("2050: Level 1", worksheet.lever_graphs_d1599); end
  def test_lever_graphs_e1599; assert_in_delta(0.3288, worksheet.lever_graphs_e1599, 0.002); end
  def test_lever_graphs_f1599; assert_in_delta(0.6712, worksheet.lever_graphs_f1599, 0.002); end
  def test_lever_graphs_d1600; assert_equal("2050: Level 2", worksheet.lever_graphs_d1600); end
  def test_lever_graphs_e1600; assert_in_delta(0.47, worksheet.lever_graphs_e1600, 0.002); end
  def test_lever_graphs_f1600; assert_in_delta(0.53, worksheet.lever_graphs_f1600, 0.002); end
  def test_lever_graphs_d1601; assert_equal("2050: Level 3", worksheet.lever_graphs_d1601); end
  def test_lever_graphs_e1601; assert_in_delta(0.65, worksheet.lever_graphs_e1601, 0.002); end
  def test_lever_graphs_f1601; assert_in_delta(0.35, worksheet.lever_graphs_f1601, 0.002); end
  def test_lever_graphs_d1602; assert_equal("2050: Level 4", worksheet.lever_graphs_d1602); end
  def test_lever_graphs_e1602; assert_in_delta(0.7142, worksheet.lever_graphs_e1602, 0.002); end
  def test_lever_graphs_f1602; assert_in_delta(0.28580000000000005, worksheet.lever_graphs_f1602, 0.002); end
  def test_lever_graphs_c1452; assert_equal("1975", worksheet.lever_graphs_c1452); end
  def test_lever_graphs_d1452; assert_equal("1980", worksheet.lever_graphs_d1452); end
  def test_lever_graphs_e1452; assert_equal("1985", worksheet.lever_graphs_e1452); end
  def test_lever_graphs_f1452; assert_equal("1990", worksheet.lever_graphs_f1452); end
  def test_lever_graphs_g1452; assert_equal("1995", worksheet.lever_graphs_g1452); end
  def test_lever_graphs_h1452; assert_equal("2000", worksheet.lever_graphs_h1452); end
  def test_lever_graphs_i1452; assert_equal("2005", worksheet.lever_graphs_i1452); end
  def test_lever_graphs_j1452; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1452, 0.002); end
  def test_lever_graphs_k1452; assert_equal("2015", worksheet.lever_graphs_k1452); end
  def test_lever_graphs_l1452; assert_equal("2020", worksheet.lever_graphs_l1452); end
  def test_lever_graphs_m1452; assert_equal("2025", worksheet.lever_graphs_m1452); end
  def test_lever_graphs_n1452; assert_equal("2030", worksheet.lever_graphs_n1452); end
  def test_lever_graphs_o1452; assert_equal("2035", worksheet.lever_graphs_o1452); end
  def test_lever_graphs_p1452; assert_equal("2040", worksheet.lever_graphs_p1452); end
  def test_lever_graphs_q1452; assert_equal("2045", worksheet.lever_graphs_q1452); end
  def test_lever_graphs_r1452; assert_equal("2050", worksheet.lever_graphs_r1452); end
  def test_lever_graphs_b1453; assert_equal("Historic data", worksheet.lever_graphs_b1453); end
  def test_lever_graphs_b1454; assert_in_delta(1.0, worksheet.lever_graphs_b1454, 0.002); end
  def test_lever_graphs_j1454; assert_in_delta(0.24, worksheet.lever_graphs_j1454, 0.002); end
  def test_lever_graphs_k1454; assert_in_delta(0.24, worksheet.lever_graphs_k1454, 0.002); end
  def test_lever_graphs_l1454; assert_in_delta(0.24, worksheet.lever_graphs_l1454, 0.002); end
  def test_lever_graphs_m1454; assert_in_delta(0.24, worksheet.lever_graphs_m1454, 0.002); end
  def test_lever_graphs_n1454; assert_in_delta(0.24, worksheet.lever_graphs_n1454, 0.002); end
  def test_lever_graphs_o1454; assert_in_delta(0.24, worksheet.lever_graphs_o1454, 0.002); end
  def test_lever_graphs_p1454; assert_in_delta(0.24, worksheet.lever_graphs_p1454, 0.002); end
  def test_lever_graphs_q1454; assert_in_delta(0.24, worksheet.lever_graphs_q1454, 0.002); end
  def test_lever_graphs_r1454; assert_in_delta(0.24, worksheet.lever_graphs_r1454, 0.002); end
  def test_lever_graphs_b1455; assert_in_epsilon(2.0, worksheet.lever_graphs_b1455, 0.002); end
  def test_lever_graphs_j1455; assert_in_delta(0.24, worksheet.lever_graphs_j1455, 0.002); end
  def test_lever_graphs_k1455; assert_in_delta(0.24246153846153845, worksheet.lever_graphs_k1455, 0.002); end
  def test_lever_graphs_l1455; assert_in_delta(0.24553846153846157, worksheet.lever_graphs_l1455, 0.002); end
  def test_lever_graphs_m1455; assert_in_delta(0.24861538461538463, worksheet.lever_graphs_m1455, 0.002); end
  def test_lever_graphs_n1455; assert_in_delta(0.25169230769230766, worksheet.lever_graphs_n1455, 0.002); end
  def test_lever_graphs_o1455; assert_in_delta(0.25476923076923075, worksheet.lever_graphs_o1455, 0.002); end
  def test_lever_graphs_p1455; assert_in_delta(0.2578461538461539, worksheet.lever_graphs_p1455, 0.002); end
  def test_lever_graphs_q1455; assert_in_delta(0.2609230769230769, worksheet.lever_graphs_q1455, 0.002); end
  def test_lever_graphs_r1455; assert_in_delta(0.264, worksheet.lever_graphs_r1455, 0.002); end
  def test_lever_graphs_b1456; assert_in_epsilon(3.0, worksheet.lever_graphs_b1456, 0.002); end
  def test_lever_graphs_j1456; assert_in_delta(0.24, worksheet.lever_graphs_j1456, 0.002); end
  def test_lever_graphs_k1456; assert_in_delta(0.2449230769230769, worksheet.lever_graphs_k1456, 0.002); end
  def test_lever_graphs_l1456; assert_in_delta(0.2510769230769231, worksheet.lever_graphs_l1456, 0.002); end
  def test_lever_graphs_m1456; assert_in_delta(0.2572307692307692, worksheet.lever_graphs_m1456, 0.002); end
  def test_lever_graphs_n1456; assert_in_delta(0.26338461538461533, worksheet.lever_graphs_n1456, 0.002); end
  def test_lever_graphs_o1456; assert_in_delta(0.2695384615384615, worksheet.lever_graphs_o1456, 0.002); end
  def test_lever_graphs_p1456; assert_in_delta(0.2756923076923077, worksheet.lever_graphs_p1456, 0.002); end
  def test_lever_graphs_q1456; assert_in_delta(0.28184615384615386, worksheet.lever_graphs_q1456, 0.002); end
  def test_lever_graphs_r1456; assert_in_delta(0.288, worksheet.lever_graphs_r1456, 0.002); end
  def test_lever_graphs_b1457; assert_in_epsilon(4.0, worksheet.lever_graphs_b1457, 0.002); end
  def test_lever_graphs_j1457; assert_in_delta(0.24, worksheet.lever_graphs_j1457, 0.002); end
  def test_lever_graphs_k1457; assert_in_delta(0.2473846153846154, worksheet.lever_graphs_k1457, 0.002); end
  def test_lever_graphs_l1457; assert_in_delta(0.25661538461538463, worksheet.lever_graphs_l1457, 0.002); end
  def test_lever_graphs_m1457; assert_in_delta(0.26584615384615384, worksheet.lever_graphs_m1457, 0.002); end
  def test_lever_graphs_n1457; assert_in_delta(0.27507692307692305, worksheet.lever_graphs_n1457, 0.002); end
  def test_lever_graphs_o1457; assert_in_delta(0.2843076923076923, worksheet.lever_graphs_o1457, 0.002); end
  def test_lever_graphs_p1457; assert_in_delta(0.2935384615384615, worksheet.lever_graphs_p1457, 0.002); end
  def test_lever_graphs_q1457; assert_in_delta(0.30276923076923073, worksheet.lever_graphs_q1457, 0.002); end
  def test_lever_graphs_r1457; assert_in_delta(0.312, worksheet.lever_graphs_r1457, 0.002); end
  def test_lever_graphs_c1464; assert_equal("1975", worksheet.lever_graphs_c1464); end
  def test_lever_graphs_d1464; assert_equal("1980", worksheet.lever_graphs_d1464); end
  def test_lever_graphs_e1464; assert_equal("1985", worksheet.lever_graphs_e1464); end
  def test_lever_graphs_f1464; assert_equal("1990", worksheet.lever_graphs_f1464); end
  def test_lever_graphs_g1464; assert_equal("1995", worksheet.lever_graphs_g1464); end
  def test_lever_graphs_h1464; assert_equal("2000", worksheet.lever_graphs_h1464); end
  def test_lever_graphs_i1464; assert_equal("2005", worksheet.lever_graphs_i1464); end
  def test_lever_graphs_j1464; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1464, 0.002); end
  def test_lever_graphs_k1464; assert_equal("2015", worksheet.lever_graphs_k1464); end
  def test_lever_graphs_l1464; assert_equal("2020", worksheet.lever_graphs_l1464); end
  def test_lever_graphs_m1464; assert_equal("2025", worksheet.lever_graphs_m1464); end
  def test_lever_graphs_n1464; assert_equal("2030", worksheet.lever_graphs_n1464); end
  def test_lever_graphs_o1464; assert_equal("2035", worksheet.lever_graphs_o1464); end
  def test_lever_graphs_p1464; assert_equal("2040", worksheet.lever_graphs_p1464); end
  def test_lever_graphs_q1464; assert_equal("2045", worksheet.lever_graphs_q1464); end
  def test_lever_graphs_r1464; assert_equal("2050", worksheet.lever_graphs_r1464); end
  def test_lever_graphs_b1465; assert_equal("Historic data", worksheet.lever_graphs_b1465); end
  def test_lever_graphs_b1466; assert_in_delta(1.0, worksheet.lever_graphs_b1466, 0.002); end
  def test_lever_graphs_j1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_j1466, 0.002); end
  def test_lever_graphs_k1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_k1466, 0.002); end
  def test_lever_graphs_l1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_l1466, 0.002); end
  def test_lever_graphs_m1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_m1466, 0.002); end
  def test_lever_graphs_n1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_n1466, 0.002); end
  def test_lever_graphs_o1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_o1466, 0.002); end
  def test_lever_graphs_p1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_p1466, 0.002); end
  def test_lever_graphs_q1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_q1466, 0.002); end
  def test_lever_graphs_r1466; assert_in_epsilon(60000.0, worksheet.lever_graphs_r1466, 0.002); end
  def test_lever_graphs_b1467; assert_in_epsilon(2.0, worksheet.lever_graphs_b1467, 0.002); end
  def test_lever_graphs_j1467; assert_in_epsilon(60000.0, worksheet.lever_graphs_j1467, 0.002); end
  def test_lever_graphs_k1467; assert_in_epsilon(60307.692307692305, worksheet.lever_graphs_k1467, 0.002); end
  def test_lever_graphs_l1467; assert_in_epsilon(60692.30769230769, worksheet.lever_graphs_l1467, 0.002); end
  def test_lever_graphs_m1467; assert_in_epsilon(61076.92307692307, worksheet.lever_graphs_m1467, 0.002); end
  def test_lever_graphs_n1467; assert_in_epsilon(61461.538461538454, worksheet.lever_graphs_n1467, 0.002); end
  def test_lever_graphs_o1467; assert_in_epsilon(61846.15384615385, worksheet.lever_graphs_o1467, 0.002); end
  def test_lever_graphs_p1467; assert_in_epsilon(62230.76923076922, worksheet.lever_graphs_p1467, 0.002); end
  def test_lever_graphs_q1467; assert_in_epsilon(62615.38461538462, worksheet.lever_graphs_q1467, 0.002); end
  def test_lever_graphs_r1467; assert_in_epsilon(63000.0, worksheet.lever_graphs_r1467, 0.002); end
  def test_lever_graphs_b1468; assert_in_epsilon(3.0, worksheet.lever_graphs_b1468, 0.002); end
  def test_lever_graphs_j1468; assert_in_epsilon(60000.0, worksheet.lever_graphs_j1468, 0.002); end
  def test_lever_graphs_k1468; assert_in_epsilon(60615.38461538461, worksheet.lever_graphs_k1468, 0.002); end
  def test_lever_graphs_l1468; assert_in_epsilon(61384.61538461539, worksheet.lever_graphs_l1468, 0.002); end
  def test_lever_graphs_m1468; assert_in_epsilon(62153.846153846156, worksheet.lever_graphs_m1468, 0.002); end
  def test_lever_graphs_n1468; assert_in_epsilon(62923.076923076915, worksheet.lever_graphs_n1468, 0.002); end
  def test_lever_graphs_o1468; assert_in_epsilon(63692.307692307695, worksheet.lever_graphs_o1468, 0.002); end
  def test_lever_graphs_p1468; assert_in_epsilon(64461.538461538476, worksheet.lever_graphs_p1468, 0.002); end
  def test_lever_graphs_q1468; assert_in_epsilon(65230.76923076924, worksheet.lever_graphs_q1468, 0.002); end
  def test_lever_graphs_r1468; assert_in_epsilon(66000.0, worksheet.lever_graphs_r1468, 0.002); end
  def test_lever_graphs_b1469; assert_in_epsilon(4.0, worksheet.lever_graphs_b1469, 0.002); end
  def test_lever_graphs_j1469; assert_in_epsilon(60000.0, worksheet.lever_graphs_j1469, 0.002); end
  def test_lever_graphs_k1469; assert_in_epsilon(60923.07692307692, worksheet.lever_graphs_k1469, 0.002); end
  def test_lever_graphs_l1469; assert_in_epsilon(62076.923076923085, worksheet.lever_graphs_l1469, 0.002); end
  def test_lever_graphs_m1469; assert_in_epsilon(63230.769230769234, worksheet.lever_graphs_m1469, 0.002); end
  def test_lever_graphs_n1469; assert_in_epsilon(64384.61538461537, worksheet.lever_graphs_n1469, 0.002); end
  def test_lever_graphs_o1469; assert_in_epsilon(65538.46153846155, worksheet.lever_graphs_o1469, 0.002); end
  def test_lever_graphs_p1469; assert_in_epsilon(66692.3076923077, worksheet.lever_graphs_p1469, 0.002); end
  def test_lever_graphs_q1469; assert_in_epsilon(67846.15384615384, worksheet.lever_graphs_q1469, 0.002); end
  def test_lever_graphs_r1469; assert_in_epsilon(69000.0, worksheet.lever_graphs_r1469, 0.002); end
  def test_lever_graphs_c2564; assert_equal("1975", worksheet.lever_graphs_c2564); end
  def test_lever_graphs_d2564; assert_equal("1980", worksheet.lever_graphs_d2564); end
  def test_lever_graphs_e2564; assert_equal("1985", worksheet.lever_graphs_e2564); end
  def test_lever_graphs_f2564; assert_equal("1990", worksheet.lever_graphs_f2564); end
  def test_lever_graphs_g2564; assert_equal("1995", worksheet.lever_graphs_g2564); end
  def test_lever_graphs_h2564; assert_equal("2000", worksheet.lever_graphs_h2564); end
  def test_lever_graphs_i2564; assert_equal("2005", worksheet.lever_graphs_i2564); end
  def test_lever_graphs_j2564; assert_equal("2011", worksheet.lever_graphs_j2564); end
  def test_lever_graphs_k2564; assert_equal("2015", worksheet.lever_graphs_k2564); end
  def test_lever_graphs_l2564; assert_equal("2020", worksheet.lever_graphs_l2564); end
  def test_lever_graphs_m2564; assert_equal("2025", worksheet.lever_graphs_m2564); end
  def test_lever_graphs_n2564; assert_equal("2030", worksheet.lever_graphs_n2564); end
  def test_lever_graphs_o2564; assert_equal("2035", worksheet.lever_graphs_o2564); end
  def test_lever_graphs_p2564; assert_equal("2040", worksheet.lever_graphs_p2564); end
  def test_lever_graphs_q2564; assert_equal("2045", worksheet.lever_graphs_q2564); end
  def test_lever_graphs_r2564; assert_equal("2050", worksheet.lever_graphs_r2564); end
  def test_lever_graphs_b2565; assert_equal("Historic data", worksheet.lever_graphs_b2565); end
  def test_lever_graphs_d2565; assert_in_epsilon(125.55000000000001, worksheet.lever_graphs_d2565, 0.002); end
  def test_lever_graphs_e2565; assert_in_epsilon(132.03, worksheet.lever_graphs_e2565, 0.002); end
  def test_lever_graphs_f2565; assert_in_epsilon(143.37, worksheet.lever_graphs_f2565, 0.002); end
  def test_lever_graphs_g2565; assert_in_epsilon(153.09, worksheet.lever_graphs_g2565, 0.002); end
  def test_lever_graphs_h2565; assert_in_epsilon(164.43, worksheet.lever_graphs_h2565, 0.002); end
  def test_lever_graphs_i2565; assert_in_epsilon(170.91000000000003, worksheet.lever_graphs_i2565, 0.002); end
  def test_lever_graphs_b2566; assert_in_delta(1.0, worksheet.lever_graphs_b2566, 0.002); end
  def test_lever_graphs_j2566; assert_in_epsilon(191.0, worksheet.lever_graphs_j2566, 0.002); end
  def test_lever_graphs_k2566; assert_in_epsilon(191.0, worksheet.lever_graphs_k2566, 0.002); end
  def test_lever_graphs_l2566; assert_in_epsilon(192.81960145650922, worksheet.lever_graphs_l2566, 0.002); end
  def test_lever_graphs_m2566; assert_in_epsilon(197.21917383125842, worksheet.lever_graphs_m2566, 0.002); end
  def test_lever_graphs_n2566; assert_in_epsilon(209.89650895013503, worksheet.lever_graphs_n2566, 0.002); end
  def test_lever_graphs_o2566; assert_in_epsilon(234.50000000000003, worksheet.lever_graphs_o2566, 0.002); end
  def test_lever_graphs_p2566; assert_in_epsilon(259.103491049865, worksheet.lever_graphs_p2566, 0.002); end
  def test_lever_graphs_q2566; assert_in_epsilon(271.7808261687416, worksheet.lever_graphs_q2566, 0.002); end
  def test_lever_graphs_r2566; assert_in_epsilon(278.0, worksheet.lever_graphs_r2566, 0.002); end
  def test_lever_graphs_b2567; assert_in_epsilon(2.0, worksheet.lever_graphs_b2567, 0.002); end
  def test_lever_graphs_j2567; assert_in_epsilon(191.0, worksheet.lever_graphs_j2567, 0.002); end
  def test_lever_graphs_k2567; assert_in_epsilon(191.0, worksheet.lever_graphs_k2567, 0.002); end
  def test_lever_graphs_l2567; assert_in_epsilon(191.0, worksheet.lever_graphs_l2567, 0.002); end
  def test_lever_graphs_m2567; assert_in_epsilon(191.0, worksheet.lever_graphs_m2567, 0.002); end
  def test_lever_graphs_n2567; assert_in_epsilon(191.0, worksheet.lever_graphs_n2567, 0.002); end
  def test_lever_graphs_o2567; assert_in_epsilon(191.0, worksheet.lever_graphs_o2567, 0.002); end
  def test_lever_graphs_p2567; assert_in_epsilon(191.0, worksheet.lever_graphs_p2567, 0.002); end
  def test_lever_graphs_q2567; assert_in_epsilon(191.0, worksheet.lever_graphs_q2567, 0.002); end
  def test_lever_graphs_r2567; assert_in_epsilon(191.0, worksheet.lever_graphs_r2567, 0.002); end
  def test_lever_graphs_b2568; assert_in_epsilon(3.0, worksheet.lever_graphs_b2568, 0.002); end
  def test_lever_graphs_j2568; assert_in_epsilon(191.0, worksheet.lever_graphs_j2568, 0.002); end
  def test_lever_graphs_k2568; assert_in_epsilon(191.0, worksheet.lever_graphs_k2568, 0.002); end
  def test_lever_graphs_l2568; assert_in_epsilon(190.3934661811636, worksheet.lever_graphs_l2568, 0.002); end
  def test_lever_graphs_m2568; assert_in_epsilon(188.9269420562472, worksheet.lever_graphs_m2568, 0.002); end
  def test_lever_graphs_n2568; assert_in_epsilon(184.7011636832883, worksheet.lever_graphs_n2568, 0.002); end
  def test_lever_graphs_o2568; assert_in_epsilon(176.5, worksheet.lever_graphs_o2568, 0.002); end
  def test_lever_graphs_p2568; assert_in_epsilon(168.2988363167117, worksheet.lever_graphs_p2568, 0.002); end
  def test_lever_graphs_q2568; assert_in_epsilon(164.0730579437528, worksheet.lever_graphs_q2568, 0.002); end
  def test_lever_graphs_r2568; assert_in_epsilon(162.0, worksheet.lever_graphs_r2568, 0.002); end
  def test_lever_graphs_b2569; assert_in_epsilon(4.0, worksheet.lever_graphs_b2569, 0.002); end
  def test_lever_graphs_j2569; assert_in_epsilon(191.0, worksheet.lever_graphs_j2569, 0.002); end
  def test_lever_graphs_k2569; assert_in_epsilon(191.0, worksheet.lever_graphs_k2569, 0.002); end
  def test_lever_graphs_l2569; assert_in_epsilon(187.29805220917095, worksheet.lever_graphs_l2569, 0.002); end
  def test_lever_graphs_m2569; assert_in_epsilon(178.3471980674398, worksheet.lever_graphs_m2569, 0.002); end
  def test_lever_graphs_n2569; assert_in_epsilon(152.55537834282873, worksheet.lever_graphs_n2569, 0.002); end
  def test_lever_graphs_o2569; assert_in_epsilon(102.50000000000001, worksheet.lever_graphs_o2569, 0.002); end
  def test_lever_graphs_p2569; assert_in_epsilon(52.44462165717131, worksheet.lever_graphs_p2569, 0.002); end
  def test_lever_graphs_q2569; assert_in_epsilon(26.652801932560205, worksheet.lever_graphs_q2569, 0.002); end
  def test_lever_graphs_r2569; assert_in_epsilon(14.0, worksheet.lever_graphs_r2569, 0.002); end
  def test_lever_graphs_b2570; assert_equal("USA today", worksheet.lever_graphs_b2570); end
  def test_lever_graphs_j2570; assert_in_epsilon(389.0, worksheet.lever_graphs_j2570, 0.002); end
  def test_lever_graphs_b2571; assert_equal("EU today", worksheet.lever_graphs_b2571); end
  def test_lever_graphs_j2571; assert_in_epsilon(309.0, worksheet.lever_graphs_j2571, 0.002); end
  def test_lever_graphs_b2572; assert_equal("Colombia today", worksheet.lever_graphs_b2572); end
  def test_lever_graphs_j2572; assert_in_epsilon(196.0, worksheet.lever_graphs_j2572, 0.002); end
  def test_lever_graphs_b2573; assert_equal("Japan today", worksheet.lever_graphs_b2573); end
  def test_lever_graphs_j2573; assert_in_epsilon(167.0, worksheet.lever_graphs_j2573, 0.002); end
  def test_lever_graphs_b2574; assert_equal("India today", worksheet.lever_graphs_b2574); end
  def test_lever_graphs_j2574; assert_in_epsilon(15.0, worksheet.lever_graphs_j2574, 0.002); end
  def test_lever_graphs_b2575; assert_equal("WHO healthy diet recommendation", worksheet.lever_graphs_b2575); end
  def test_lever_graphs_j2575; assert_in_epsilon(162.0, worksheet.lever_graphs_j2575, 0.002); end
  def test_lever_graphs_d1391; assert_equal("Title", worksheet.lever_graphs_d1391); end
  def test_lever_graphs_e1391; assert_equal("Urban passenger walk", worksheet.lever_graphs_e1391); end
  def test_lever_graphs_f1391; assert_equal("Urban passenger bike", worksheet.lever_graphs_f1391); end
  def test_lever_graphs_g1391; assert_equal("Urban passenger motorbike", worksheet.lever_graphs_g1391); end
  def test_lever_graphs_h1391; assert_equal("Urban passenger car", worksheet.lever_graphs_h1391); end
  def test_lever_graphs_i1391; assert_equal("Urban passenger bus", worksheet.lever_graphs_i1391); end
  def test_lever_graphs_j1391; assert_equal("Urban passenger train", worksheet.lever_graphs_j1391); end
  def test_lever_graphs_d1392; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1392, 0.002); end
  def test_lever_graphs_e1392; assert_in_delta(0.015507080535660264, worksheet.lever_graphs_e1392, 0.002); end
  def test_lever_graphs_f1392; assert_in_delta(0.0034792482929148173, worksheet.lever_graphs_f1392, 0.002); end
  def test_lever_graphs_g1392; assert_in_delta(0.012141563527703942, worksheet.lever_graphs_g1392, 0.002); end
  def test_lever_graphs_h1392; assert_in_delta(0.7808966542956052, worksheet.lever_graphs_h1392, 0.002); end
  def test_lever_graphs_i1392; assert_in_delta(0.1319655903223447, worksheet.lever_graphs_i1392, 0.002); end
  def test_lever_graphs_j1392; assert_in_delta(0.05600986302577115, worksheet.lever_graphs_j1392, 0.002); end
  def test_lever_graphs_d1393; assert_equal("2050: Level 1", worksheet.lever_graphs_d1393); end
  def test_lever_graphs_e1393; assert_in_delta(0.011251832010415743, worksheet.lever_graphs_e1393, 0.002); end
  def test_lever_graphs_f1393; assert_in_delta(0.003324397894609336, worksheet.lever_graphs_f1393, 0.002); end
  def test_lever_graphs_g1393; assert_in_delta(0.02387680187251377, worksheet.lever_graphs_g1393, 0.002); end
  def test_lever_graphs_h1393; assert_in_delta(0.7819377110673233, worksheet.lever_graphs_h1393, 0.002); end
  def test_lever_graphs_i1393; assert_in_delta(0.1260922169659082, worksheet.lever_graphs_i1393, 0.002); end
  def test_lever_graphs_j1393; assert_in_delta(0.05351704018922964, worksheet.lever_graphs_j1393, 0.002); end
  def test_lever_graphs_d1394; assert_equal("2050: Level 2", worksheet.lever_graphs_d1394); end
  def test_lever_graphs_e1394; assert_in_delta(0.02597259165894617, worksheet.lever_graphs_e1394, 0.002); end
  def test_lever_graphs_f1394; assert_in_delta(0.010838186744898594, worksheet.lever_graphs_f1394, 0.002); end
  def test_lever_graphs_g1394; assert_in_delta(0.036922769307271244, worksheet.lever_graphs_g1394, 0.002); end
  def test_lever_graphs_h1394; assert_in_delta(0.6994265430998902, worksheet.lever_graphs_h1394, 0.002); end
  def test_lever_graphs_i1394; assert_in_delta(0.15591515442445067, worksheet.lever_graphs_i1394, 0.002); end
  def test_lever_graphs_j1394; assert_in_delta(0.07092475476454325, worksheet.lever_graphs_j1394, 0.002); end
  def test_lever_graphs_d1395; assert_equal("2050: Level 3", worksheet.lever_graphs_d1395); end
  def test_lever_graphs_e1395; assert_in_delta(0.028697511633068187, worksheet.lever_graphs_e1395, 0.002); end
  def test_lever_graphs_f1395; assert_in_delta(0.011176925583405509, worksheet.lever_graphs_f1395, 0.002); end
  def test_lever_graphs_g1395; assert_in_delta(0.0653316409650743, worksheet.lever_graphs_g1395, 0.002); end
  def test_lever_graphs_h1395; assert_in_delta(0.5738122970130435, worksheet.lever_graphs_h1395, 0.002); end
  def test_lever_graphs_i1395; assert_in_delta(0.22028860153148505, worksheet.lever_graphs_i1395, 0.002); end
  def test_lever_graphs_j1395; assert_in_delta(0.10069302327392349, worksheet.lever_graphs_j1395, 0.002); end
  def test_lever_graphs_d1396; assert_equal("2050: Level 4", worksheet.lever_graphs_d1396); end
  def test_lever_graphs_e1396; assert_in_delta(0.03990968782558564, worksheet.lever_graphs_e1396, 0.002); end
  def test_lever_graphs_f1396; assert_in_delta(0.030224003353294396, worksheet.lever_graphs_f1396, 0.002); end
  def test_lever_graphs_g1396; assert_in_delta(0.10599965370815287, worksheet.lever_graphs_g1396, 0.002); end
  def test_lever_graphs_h1396; assert_in_delta(0.4551104752040469, worksheet.lever_graphs_h1396, 0.002); end
  def test_lever_graphs_i1396; assert_in_delta(0.2520611862668567, worksheet.lever_graphs_i1396, 0.002); end
  def test_lever_graphs_j1396; assert_in_delta(0.11669499364206332, worksheet.lever_graphs_j1396, 0.002); end
  def test_lever_graphs_d1413; assert_equal("Title", worksheet.lever_graphs_d1413); end
  def test_lever_graphs_e1413; assert_equal("Urban passenger walk", worksheet.lever_graphs_e1413); end
  def test_lever_graphs_f1413; assert_equal("Urban passenger bike", worksheet.lever_graphs_f1413); end
  def test_lever_graphs_g1413; assert_equal("Urban passenger motorbike", worksheet.lever_graphs_g1413); end
  def test_lever_graphs_h1413; assert_equal("Urban passenger car", worksheet.lever_graphs_h1413); end
  def test_lever_graphs_i1413; assert_equal("Urban passenger bus", worksheet.lever_graphs_i1413); end
  def test_lever_graphs_j1413; assert_equal("Urban passenger train", worksheet.lever_graphs_j1413); end
  def test_lever_graphs_d1414; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1414, 0.002); end
  def test_lever_graphs_e1414; assert_in_delta(0.11148900182723108, worksheet.lever_graphs_e1414, 0.002); end
  def test_lever_graphs_f1414; assert_in_delta(0.08357908158611507, worksheet.lever_graphs_f1414, 0.002); end
  def test_lever_graphs_g1414; assert_in_delta(0.14076286877965222, worksheet.lever_graphs_g1414, 0.002); end
  def test_lever_graphs_h1414; assert_in_delta(0.24186452782219042, worksheet.lever_graphs_h1414, 0.002); end
  def test_lever_graphs_i1414; assert_in_delta(0.40723433044037066, worksheet.lever_graphs_i1414, 0.002); end
  def test_lever_graphs_j1414; assert_in_delta(0.015070189544440485, worksheet.lever_graphs_j1414, 0.002); end
  def test_lever_graphs_d1415; assert_equal("2050: Level 1", worksheet.lever_graphs_d1415); end
  def test_lever_graphs_e1415; assert_in_delta(0.02435070224884275, worksheet.lever_graphs_e1415, 0.002); end
  def test_lever_graphs_f1415; assert_in_delta(0.003738046397848669, worksheet.lever_graphs_f1415, 0.002); end
  def test_lever_graphs_g1415; assert_in_delta(0.1922423861750744, worksheet.lever_graphs_g1415, 0.002); end
  def test_lever_graphs_h1415; assert_in_delta(0.5874072910905052, worksheet.lever_graphs_h1415, 0.002); end
  def test_lever_graphs_i1415; assert_in_delta(0.18692150780508796, worksheet.lever_graphs_i1415, 0.002); end
  def test_lever_graphs_j1415; assert_in_delta(0.005340066282640956, worksheet.lever_graphs_j1415, 0.002); end
  def test_lever_graphs_d1416; assert_equal("2050: Level 2", worksheet.lever_graphs_d1416); end
  def test_lever_graphs_e1416; assert_in_delta(0.03514873584532978, worksheet.lever_graphs_e1416, 0.002); end
  def test_lever_graphs_f1416; assert_in_delta(0.02589906851761142, worksheet.lever_graphs_f1416, 0.002); end
  def test_lever_graphs_g1416; assert_in_delta(0.22643185618254555, worksheet.lever_graphs_g1416, 0.002); end
  def test_lever_graphs_h1416; assert_in_delta(0.44398403173048157, worksheet.lever_graphs_h1416, 0.002); end
  def test_lever_graphs_i1416; assert_in_delta(0.25497012897671156, worksheet.lever_graphs_i1416, 0.002); end
  def test_lever_graphs_j1416; assert_in_delta(0.01356617874732027, worksheet.lever_graphs_j1416, 0.002); end
  def test_lever_graphs_d1417; assert_equal("2050: Level 3", worksheet.lever_graphs_d1417); end
  def test_lever_graphs_e1417; assert_in_delta(0.04864648171177004, worksheet.lever_graphs_e1417, 0.002); end
  def test_lever_graphs_f1417; assert_in_delta(0.034782306911936095, worksheet.lever_graphs_f1417, 0.002); end
  def test_lever_graphs_g1417; assert_in_delta(0.16407107281879899, worksheet.lever_graphs_g1417, 0.002); end
  def test_lever_graphs_h1417; assert_in_delta(0.3802471855265136, worksheet.lever_graphs_h1417, 0.002); end
  def test_lever_graphs_i1417; assert_in_delta(0.34277694530994707, worksheet.lever_graphs_i1417, 0.002); end
  def test_lever_graphs_j1417; assert_in_delta(0.029476007721034158, worksheet.lever_graphs_j1417, 0.002); end
  def test_lever_graphs_d1418; assert_equal("2050: Level 4", worksheet.lever_graphs_d1418); end
  def test_lever_graphs_e1418; assert_in_delta(0.06483945670353654, worksheet.lever_graphs_e1418, 0.002); end
  def test_lever_graphs_f1418; assert_in_delta(0.05960611049164361, worksheet.lever_graphs_f1418, 0.002); end
  def test_lever_graphs_g1418; assert_in_delta(0.18521343770871196, worksheet.lever_graphs_g1418, 0.002); end
  def test_lever_graphs_h1418; assert_in_delta(0.22899115934895292, worksheet.lever_graphs_h1418, 0.002); end
  def test_lever_graphs_i1418; assert_in_delta(0.41757211410691414, worksheet.lever_graphs_i1418, 0.002); end
  def test_lever_graphs_j1418; assert_in_delta(0.043777721640241, worksheet.lever_graphs_j1418, 0.002); end
  def test_lever_graphs_d1402; assert_equal("Title", worksheet.lever_graphs_d1402); end
  def test_lever_graphs_e1402; assert_equal("Urban passenger walk", worksheet.lever_graphs_e1402); end
  def test_lever_graphs_f1402; assert_equal("Urban passenger bike", worksheet.lever_graphs_f1402); end
  def test_lever_graphs_g1402; assert_equal("Urban passenger motorbike", worksheet.lever_graphs_g1402); end
  def test_lever_graphs_h1402; assert_equal("Urban passenger car", worksheet.lever_graphs_h1402); end
  def test_lever_graphs_i1402; assert_equal("Urban passenger bus", worksheet.lever_graphs_i1402); end
  def test_lever_graphs_j1402; assert_equal("Urban passenger train", worksheet.lever_graphs_j1402); end
  def test_lever_graphs_d1403; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1403, 0.002); end
  def test_lever_graphs_e1403; assert_in_delta(0.04321991292777188, worksheet.lever_graphs_e1403, 0.002); end
  def test_lever_graphs_f1403; assert_in_delta(0.024651019499377053, worksheet.lever_graphs_f1403, 0.002); end
  def test_lever_graphs_g1403; assert_in_delta(0.06587424374056515, worksheet.lever_graphs_g1403, 0.002); end
  def test_lever_graphs_h1403; assert_in_delta(0.5868167028048443, worksheet.lever_graphs_h1403, 0.002); end
  def test_lever_graphs_i1403; assert_in_delta(0.2570013952439703, worksheet.lever_graphs_i1403, 0.002); end
  def test_lever_graphs_j1403; assert_in_delta(0.022436725783471334, worksheet.lever_graphs_j1403, 0.002); end
  def test_lever_graphs_d1404; assert_equal("2050: Level 1", worksheet.lever_graphs_d1404); end
  def test_lever_graphs_e1404; assert_in_delta(0.026225717721503585, worksheet.lever_graphs_e1404, 0.002); end
  def test_lever_graphs_f1404; assert_in_delta(0.017023711503432154, worksheet.lever_graphs_f1404, 0.002); end
  def test_lever_graphs_g1404; assert_in_delta(0.03866345219235265, worksheet.lever_graphs_g1404, 0.002); end
  def test_lever_graphs_h1404; assert_in_delta(0.7448137926232905, worksheet.lever_graphs_h1404, 0.002); end
  def test_lever_graphs_i1404; assert_in_delta(0.15366174205690428, worksheet.lever_graphs_i1404, 0.002); end
  def test_lever_graphs_j1404; assert_in_delta(0.019611583902516834, worksheet.lever_graphs_j1404, 0.002); end
  def test_lever_graphs_d1405; assert_equal("2050: Level 2", worksheet.lever_graphs_d1405); end
  def test_lever_graphs_e1405; assert_in_delta(0.03534089555409994, worksheet.lever_graphs_e1405, 0.002); end
  def test_lever_graphs_f1405; assert_in_delta(0.024290027284861262, worksheet.lever_graphs_f1405, 0.002); end
  def test_lever_graphs_g1405; assert_in_delta(0.06017799552555719, worksheet.lever_graphs_g1405, 0.002); end
  def test_lever_graphs_h1405; assert_in_delta(0.5875410771112931, worksheet.lever_graphs_h1405, 0.002); end
  def test_lever_graphs_i1405; assert_in_delta(0.2513373157450613, worksheet.lever_graphs_i1405, 0.002); end
  def test_lever_graphs_j1405; assert_in_delta(0.04131268877912732, worksheet.lever_graphs_j1405, 0.002); end
  def test_lever_graphs_d1406; assert_equal("2050: Level 3", worksheet.lever_graphs_d1406); end
  def test_lever_graphs_e1406; assert_in_delta(0.03955319845307432, worksheet.lever_graphs_e1406, 0.002); end
  def test_lever_graphs_f1406; assert_in_delta(0.02837750249126385, worksheet.lever_graphs_f1406, 0.002); end
  def test_lever_graphs_g1406; assert_in_delta(0.11374140147636165, worksheet.lever_graphs_g1406, 0.002); end
  def test_lever_graphs_h1406; assert_in_delta(0.44426618381626387, worksheet.lever_graphs_h1406, 0.002); end
  def test_lever_graphs_i1406; assert_in_delta(0.31160929515291885, worksheet.lever_graphs_i1406, 0.002); end
  def test_lever_graphs_j1406; assert_in_delta(0.06245241861011736, worksheet.lever_graphs_j1406, 0.002); end
  def test_lever_graphs_d1407; assert_equal("2050: Level 4", worksheet.lever_graphs_d1407); end
  def test_lever_graphs_e1407; assert_in_delta(0.04935744654692902, worksheet.lever_graphs_e1407, 0.002); end
  def test_lever_graphs_f1407; assert_in_delta(0.03803409554562839, worksheet.lever_graphs_f1407, 0.002); end
  def test_lever_graphs_g1407; assert_in_delta(0.1160317303251607, worksheet.lever_graphs_g1407, 0.002); end
  def test_lever_graphs_h1407; assert_in_delta(0.348095190975482, worksheet.lever_graphs_h1407, 0.002); end
  def test_lever_graphs_i1407; assert_in_delta(0.3514484579376308, worksheet.lever_graphs_i1407, 0.002); end
  def test_lever_graphs_j1407; assert_in_delta(0.09703307866916912, worksheet.lever_graphs_j1407, 0.002); end
  def test_lever_graphs_c1432; assert_equal("1975", worksheet.lever_graphs_c1432); end
  def test_lever_graphs_d1432; assert_equal("1980", worksheet.lever_graphs_d1432); end
  def test_lever_graphs_e1432; assert_equal("1985", worksheet.lever_graphs_e1432); end
  def test_lever_graphs_f1432; assert_equal("1990", worksheet.lever_graphs_f1432); end
  def test_lever_graphs_g1432; assert_equal("1995", worksheet.lever_graphs_g1432); end
  def test_lever_graphs_h1432; assert_equal("2000", worksheet.lever_graphs_h1432); end
  def test_lever_graphs_i1432; assert_equal("2005", worksheet.lever_graphs_i1432); end
  def test_lever_graphs_j1432; assert_equal("2011", worksheet.lever_graphs_j1432); end
  def test_lever_graphs_k1432; assert_equal("2015", worksheet.lever_graphs_k1432); end
  def test_lever_graphs_l1432; assert_equal("2020", worksheet.lever_graphs_l1432); end
  def test_lever_graphs_m1432; assert_equal("2025", worksheet.lever_graphs_m1432); end
  def test_lever_graphs_n1432; assert_equal("2030", worksheet.lever_graphs_n1432); end
  def test_lever_graphs_o1432; assert_equal("2035", worksheet.lever_graphs_o1432); end
  def test_lever_graphs_p1432; assert_equal("2040", worksheet.lever_graphs_p1432); end
  def test_lever_graphs_q1432; assert_equal("2045", worksheet.lever_graphs_q1432); end
  def test_lever_graphs_r1432; assert_equal("2050", worksheet.lever_graphs_r1432); end
  def test_lever_graphs_b1433; assert_equal("Historic data", worksheet.lever_graphs_b1433); end
  def test_lever_graphs_b1434; assert_in_delta(1.0, worksheet.lever_graphs_b1434, 0.002); end
  def test_lever_graphs_j1434; assert_in_epsilon(1.92, worksheet.lever_graphs_j1434, 0.002); end
  def test_lever_graphs_k1434; assert_in_epsilon(1.9003076923076923, worksheet.lever_graphs_k1434, 0.002); end
  def test_lever_graphs_l1434; assert_in_epsilon(1.8756923076923078, worksheet.lever_graphs_l1434, 0.002); end
  def test_lever_graphs_m1434; assert_in_epsilon(1.8510769230769233, worksheet.lever_graphs_m1434, 0.002); end
  def test_lever_graphs_n1434; assert_in_epsilon(1.8264615384615384, worksheet.lever_graphs_n1434, 0.002); end
  def test_lever_graphs_o1434; assert_in_epsilon(1.8018461538461539, worksheet.lever_graphs_o1434, 0.002); end
  def test_lever_graphs_p1434; assert_in_epsilon(1.7772307692307692, worksheet.lever_graphs_p1434, 0.002); end
  def test_lever_graphs_q1434; assert_in_epsilon(1.7526153846153845, worksheet.lever_graphs_q1434, 0.002); end
  def test_lever_graphs_r1434; assert_in_epsilon(1.728, worksheet.lever_graphs_r1434, 0.002); end
  def test_lever_graphs_b1435; assert_in_epsilon(2.0, worksheet.lever_graphs_b1435, 0.002); end
  def test_lever_graphs_j1435; assert_in_epsilon(1.92, worksheet.lever_graphs_j1435, 0.002); end
  def test_lever_graphs_k1435; assert_in_epsilon(1.92, worksheet.lever_graphs_k1435, 0.002); end
  def test_lever_graphs_l1435; assert_in_epsilon(1.92, worksheet.lever_graphs_l1435, 0.002); end
  def test_lever_graphs_m1435; assert_in_epsilon(1.92, worksheet.lever_graphs_m1435, 0.002); end
  def test_lever_graphs_n1435; assert_in_epsilon(1.92, worksheet.lever_graphs_n1435, 0.002); end
  def test_lever_graphs_o1435; assert_in_epsilon(1.92, worksheet.lever_graphs_o1435, 0.002); end
  def test_lever_graphs_p1435; assert_in_epsilon(1.92, worksheet.lever_graphs_p1435, 0.002); end
  def test_lever_graphs_q1435; assert_in_epsilon(1.92, worksheet.lever_graphs_q1435, 0.002); end
  def test_lever_graphs_r1435; assert_in_epsilon(1.92, worksheet.lever_graphs_r1435, 0.002); end
  def test_lever_graphs_b1436; assert_in_epsilon(3.0, worksheet.lever_graphs_b1436, 0.002); end
  def test_lever_graphs_j1436; assert_in_epsilon(1.92, worksheet.lever_graphs_j1436, 0.002); end
  def test_lever_graphs_k1436; assert_in_epsilon(1.9396923076923076, worksheet.lever_graphs_k1436, 0.002); end
  def test_lever_graphs_l1436; assert_in_epsilon(1.9643076923076925, worksheet.lever_graphs_l1436, 0.002); end
  def test_lever_graphs_m1436; assert_in_epsilon(1.988923076923077, worksheet.lever_graphs_m1436, 0.002); end
  def test_lever_graphs_n1436; assert_in_epsilon(2.0135384615384613, worksheet.lever_graphs_n1436, 0.002); end
  def test_lever_graphs_o1436; assert_in_epsilon(2.038153846153846, worksheet.lever_graphs_o1436, 0.002); end
  def test_lever_graphs_p1436; assert_in_epsilon(2.062769230769231, worksheet.lever_graphs_p1436, 0.002); end
  def test_lever_graphs_q1436; assert_in_epsilon(2.0873846153846154, worksheet.lever_graphs_q1436, 0.002); end
  def test_lever_graphs_r1436; assert_in_epsilon(2.112, worksheet.lever_graphs_r1436, 0.002); end
  def test_lever_graphs_b1437; assert_in_epsilon(4.0, worksheet.lever_graphs_b1437, 0.002); end
  def test_lever_graphs_j1437; assert_in_epsilon(1.92, worksheet.lever_graphs_j1437, 0.002); end
  def test_lever_graphs_k1437; assert_in_epsilon(1.9593846153846153, worksheet.lever_graphs_k1437, 0.002); end
  def test_lever_graphs_l1437; assert_in_epsilon(2.0086153846153847, worksheet.lever_graphs_l1437, 0.002); end
  def test_lever_graphs_m1437; assert_in_epsilon(2.0578461538461537, worksheet.lever_graphs_m1437, 0.002); end
  def test_lever_graphs_n1437; assert_in_epsilon(2.1070769230769226, worksheet.lever_graphs_n1437, 0.002); end
  def test_lever_graphs_o1437; assert_in_epsilon(2.156307692307692, worksheet.lever_graphs_o1437, 0.002); end
  def test_lever_graphs_p1437; assert_in_epsilon(2.2055384615384614, worksheet.lever_graphs_p1437, 0.002); end
  def test_lever_graphs_q1437; assert_in_epsilon(2.254769230769231, worksheet.lever_graphs_q1437, 0.002); end
  def test_lever_graphs_r1437; assert_in_epsilon(2.304, worksheet.lever_graphs_r1437, 0.002); end
  def test_lever_graphs_c2785; assert_equal("1975", worksheet.lever_graphs_c2785); end
  def test_lever_graphs_d2785; assert_equal("1980", worksheet.lever_graphs_d2785); end
  def test_lever_graphs_e2785; assert_equal("1985", worksheet.lever_graphs_e2785); end
  def test_lever_graphs_f2785; assert_equal("1990", worksheet.lever_graphs_f2785); end
  def test_lever_graphs_g2785; assert_equal("1995", worksheet.lever_graphs_g2785); end
  def test_lever_graphs_h2785; assert_equal("2000", worksheet.lever_graphs_h2785); end
  def test_lever_graphs_i2785; assert_equal("2005", worksheet.lever_graphs_i2785); end
  def test_lever_graphs_j2785; assert_equal("2011", worksheet.lever_graphs_j2785); end
  def test_lever_graphs_k2785; assert_equal("2015", worksheet.lever_graphs_k2785); end
  def test_lever_graphs_l2785; assert_equal("2020", worksheet.lever_graphs_l2785); end
  def test_lever_graphs_m2785; assert_equal("2025", worksheet.lever_graphs_m2785); end
  def test_lever_graphs_n2785; assert_equal("2030", worksheet.lever_graphs_n2785); end
  def test_lever_graphs_o2785; assert_equal("2035", worksheet.lever_graphs_o2785); end
  def test_lever_graphs_p2785; assert_equal("2040", worksheet.lever_graphs_p2785); end
  def test_lever_graphs_q2785; assert_equal("2045", worksheet.lever_graphs_q2785); end
  def test_lever_graphs_r2785; assert_equal("2050", worksheet.lever_graphs_r2785); end
  def test_lever_graphs_b2786; assert_equal("Historic data", worksheet.lever_graphs_b2786); end
  def test_lever_graphs_c2786; assert_in_epsilon(48.366777087544, worksheet.lever_graphs_c2786, 0.002); end
  def test_lever_graphs_d2786; assert_in_epsilon(100.8586055269058, worksheet.lever_graphs_d2786, 0.002); end
  def test_lever_graphs_e2786; assert_in_epsilon(57.79701296868199, worksheet.lever_graphs_e2786, 0.002); end
  def test_lever_graphs_f2786; assert_in_epsilon(40.96227805628421, worksheet.lever_graphs_f2786, 0.002); end
  def test_lever_graphs_g2786; assert_in_epsilon(25.195809116543934, worksheet.lever_graphs_g2786, 0.002); end
  def test_lever_graphs_h2786; assert_in_epsilon(37.34055877514925, worksheet.lever_graphs_h2786, 0.002); end
  def test_lever_graphs_i2786; assert_in_epsilon(62.994224615593296, worksheet.lever_graphs_i2786, 0.002); end
  def test_lever_graphs_j2786; assert_in_epsilon(111.60806135788701, worksheet.lever_graphs_j2786, 0.002); end
  def test_lever_graphs_b2787; assert_in_delta(1.0, worksheet.lever_graphs_b2787, 0.002); end
  def test_lever_graphs_b2788; assert_in_epsilon(2.0, worksheet.lever_graphs_b2788, 0.002); end
  def test_lever_graphs_b2789; assert_in_epsilon(3.0, worksheet.lever_graphs_b2789, 0.002); end
  def test_lever_graphs_b2790; assert_in_epsilon(4.0, worksheet.lever_graphs_b2790, 0.002); end
  def test_lever_graphs_c1215; assert_equal("1975", worksheet.lever_graphs_c1215); end
  def test_lever_graphs_d1215; assert_equal("1980", worksheet.lever_graphs_d1215); end
  def test_lever_graphs_e1215; assert_equal("1985", worksheet.lever_graphs_e1215); end
  def test_lever_graphs_f1215; assert_equal("1990", worksheet.lever_graphs_f1215); end
  def test_lever_graphs_g1215; assert_equal("1995", worksheet.lever_graphs_g1215); end
  def test_lever_graphs_h1215; assert_equal("2000", worksheet.lever_graphs_h1215); end
  def test_lever_graphs_i1215; assert_equal("2005", worksheet.lever_graphs_i1215); end
  def test_lever_graphs_j1215; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1215, 0.002); end
  def test_lever_graphs_k1215; assert_equal("2015", worksheet.lever_graphs_k1215); end
  def test_lever_graphs_l1215; assert_equal("2020", worksheet.lever_graphs_l1215); end
  def test_lever_graphs_m1215; assert_equal("2025", worksheet.lever_graphs_m1215); end
  def test_lever_graphs_n1215; assert_equal("2030", worksheet.lever_graphs_n1215); end
  def test_lever_graphs_o1215; assert_equal("2035", worksheet.lever_graphs_o1215); end
  def test_lever_graphs_p1215; assert_equal("2040", worksheet.lever_graphs_p1215); end
  def test_lever_graphs_q1215; assert_equal("2045", worksheet.lever_graphs_q1215); end
  def test_lever_graphs_r1215; assert_equal("2050", worksheet.lever_graphs_r1215); end
  def test_lever_graphs_b1216; assert_equal("Historic data", worksheet.lever_graphs_b1216); end
  def test_lever_graphs_b1217; assert_in_delta(1.0, worksheet.lever_graphs_b1217, 0.002); end
  def test_lever_graphs_j1217; assert_in_epsilon(10427.16296686, worksheet.lever_graphs_j1217, 0.002); end
  def test_lever_graphs_k1217; assert_in_epsilon(10627.567205423802, worksheet.lever_graphs_k1217, 0.002); end
  def test_lever_graphs_l1217; assert_in_epsilon(10883.497540721351, worksheet.lever_graphs_l1217, 0.002); end
  def test_lever_graphs_m1217; assert_in_epsilon(11145.591124414272, worksheet.lever_graphs_m1217, 0.002); end
  def test_lever_graphs_n1217; assert_in_epsilon(11413.996378262487, worksheet.lever_graphs_n1217, 0.002); end
  def test_lever_graphs_o1217; assert_in_epsilon(11688.865298280505, worksheet.lever_graphs_o1217, 0.002); end
  def test_lever_graphs_p1217; assert_in_epsilon(11970.353540811693, worksheet.lever_graphs_p1217, 0.002); end
  def test_lever_graphs_q1217; assert_in_epsilon(12258.620510675375, worksheet.lever_graphs_q1217, 0.002); end
  def test_lever_graphs_r1217; assert_in_epsilon(12553.829451436664, worksheet.lever_graphs_r1217, 0.002); end
  def test_lever_graphs_b1218; assert_in_epsilon(2.0, worksheet.lever_graphs_b1218, 0.002); end
  def test_lever_graphs_j1218; assert_in_epsilon(10427.16296686, worksheet.lever_graphs_j1218, 0.002); end
  def test_lever_graphs_k1218; assert_in_epsilon(10627.567205423802, worksheet.lever_graphs_k1218, 0.002); end
  def test_lever_graphs_l1218; assert_in_epsilon(10700.86773510627, worksheet.lever_graphs_l1218, 0.002); end
  def test_lever_graphs_m1218; assert_in_epsilon(10774.673833706618, worksheet.lever_graphs_m1218, 0.002); end
  def test_lever_graphs_n1218; assert_in_epsilon(10848.988988238265, worksheet.lever_graphs_n1218, 0.002); end
  def test_lever_graphs_o1218; assert_in_epsilon(10923.816709765284, worksheet.lever_graphs_o1218, 0.002); end
  def test_lever_graphs_p1218; assert_in_epsilon(10999.160533568283, worksheet.lever_graphs_p1218, 0.002); end
  def test_lever_graphs_q1218; assert_in_epsilon(11075.024019311435, worksheet.lever_graphs_q1218, 0.002); end
  def test_lever_graphs_r1218; assert_in_epsilon(11151.41075121065, worksheet.lever_graphs_r1218, 0.002); end
  def test_lever_graphs_b1219; assert_in_epsilon(3.0, worksheet.lever_graphs_b1219, 0.002); end
  def test_lever_graphs_j1219; assert_in_epsilon(10427.16296686, worksheet.lever_graphs_j1219, 0.002); end
  def test_lever_graphs_k1219; assert_in_epsilon(10627.567205423802, worksheet.lever_graphs_k1219, 0.002); end
  def test_lever_graphs_l1219; assert_in_epsilon(10642.258951404601, worksheet.lever_graphs_l1219, 0.002); end
  def test_lever_graphs_m1219; assert_in_epsilon(10656.971007527487, worksheet.lever_graphs_m1219, 0.002); end
  def test_lever_graphs_n1219; assert_in_epsilon(10671.703401869574, worksheet.lever_graphs_n1219, 0.002); end
  def test_lever_graphs_o1219; assert_in_epsilon(10686.456162546796, worksheet.lever_graphs_o1219, 0.002); end
  def test_lever_graphs_p1219; assert_in_epsilon(10701.22931771395, worksheet.lever_graphs_p1219, 0.002); end
  def test_lever_graphs_q1219; assert_in_epsilon(10716.02289556476, worksheet.lever_graphs_q1219, 0.002); end
  def test_lever_graphs_r1219; assert_in_epsilon(10730.83692433192, worksheet.lever_graphs_r1219, 0.002); end
  def test_lever_graphs_b1220; assert_in_epsilon(4.0, worksheet.lever_graphs_b1220, 0.002); end
  def test_lever_graphs_j1220; assert_in_epsilon(10427.16296686, worksheet.lever_graphs_j1220, 0.002); end
  def test_lever_graphs_k1220; assert_in_epsilon(10627.567205423802, worksheet.lever_graphs_k1220, 0.002); end
  def test_lever_graphs_l1220; assert_in_epsilon(10533.237408670511, worksheet.lever_graphs_l1220, 0.002); end
  def test_lever_graphs_m1220; assert_in_epsilon(10439.744878846097, worksheet.lever_graphs_m1220, 0.002); end
  def test_lever_graphs_n1220; assert_in_epsilon(10347.082184407884, worksheet.lever_graphs_n1220, 0.002); end
  def test_lever_graphs_o1220; assert_in_epsilon(10255.241959775225, worksheet.lever_graphs_o1220, 0.002); end
  def test_lever_graphs_p1220; assert_in_epsilon(10164.21690474403, worksheet.lever_graphs_p1220, 0.002); end
  def test_lever_graphs_q1220; assert_in_epsilon(10073.999783906482, worksheet.lever_graphs_q1220, 0.002); end
  def test_lever_graphs_r1220; assert_in_epsilon(9984.583426075913, worksheet.lever_graphs_r1220, 0.002); end
  def test_lever_graphs_c1235; assert_equal("1975", worksheet.lever_graphs_c1235); end
  def test_lever_graphs_d1235; assert_equal("1980", worksheet.lever_graphs_d1235); end
  def test_lever_graphs_e1235; assert_equal("1985", worksheet.lever_graphs_e1235); end
  def test_lever_graphs_f1235; assert_equal("1990", worksheet.lever_graphs_f1235); end
  def test_lever_graphs_g1235; assert_equal("1995", worksheet.lever_graphs_g1235); end
  def test_lever_graphs_h1235; assert_equal("2000", worksheet.lever_graphs_h1235); end
  def test_lever_graphs_i1235; assert_equal("2005", worksheet.lever_graphs_i1235); end
  def test_lever_graphs_j1235; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1235, 0.002); end
  def test_lever_graphs_k1235; assert_equal("2015", worksheet.lever_graphs_k1235); end
  def test_lever_graphs_l1235; assert_equal("2020", worksheet.lever_graphs_l1235); end
  def test_lever_graphs_m1235; assert_equal("2025", worksheet.lever_graphs_m1235); end
  def test_lever_graphs_n1235; assert_equal("2030", worksheet.lever_graphs_n1235); end
  def test_lever_graphs_o1235; assert_equal("2035", worksheet.lever_graphs_o1235); end
  def test_lever_graphs_p1235; assert_equal("2040", worksheet.lever_graphs_p1235); end
  def test_lever_graphs_q1235; assert_equal("2045", worksheet.lever_graphs_q1235); end
  def test_lever_graphs_r1235; assert_equal("2050", worksheet.lever_graphs_r1235); end
  def test_lever_graphs_b1236; assert_equal("Historic data", worksheet.lever_graphs_b1236); end
  def test_lever_graphs_b1237; assert_in_delta(1.0, worksheet.lever_graphs_b1237, 0.002); end
  def test_lever_graphs_j1237; assert_in_epsilon(8971.32836353237, worksheet.lever_graphs_j1237, 0.002); end
  def test_lever_graphs_k1237; assert_in_epsilon(9396.473382974675, worksheet.lever_graphs_k1237, 0.002); end
  def test_lever_graphs_l1237; assert_in_epsilon(9956.347744915838, worksheet.lever_graphs_l1237, 0.002); end
  def test_lever_graphs_m1237; assert_in_epsilon(10549.581356480056, worksheet.lever_graphs_m1237, 0.002); end
  def test_lever_graphs_n1237; assert_in_epsilon(11178.161877062113, worksheet.lever_graphs_n1237, 0.002); end
  def test_lever_graphs_o1237; assert_in_epsilon(11844.195397673648, worksheet.lever_graphs_o1237, 0.002); end
  def test_lever_graphs_p1237; assert_in_epsilon(12549.913497508218, worksheet.lever_graphs_p1237, 0.002); end
  def test_lever_graphs_q1237; assert_in_epsilon(13297.680720960923, worksheet.lever_graphs_q1237, 0.002); end
  def test_lever_graphs_r1237; assert_in_epsilon(14090.002500154684, worksheet.lever_graphs_r1237, 0.002); end
  def test_lever_graphs_b1238; assert_in_epsilon(2.0, worksheet.lever_graphs_b1238, 0.002); end
  def test_lever_graphs_j1238; assert_in_epsilon(8971.32836353237, worksheet.lever_graphs_j1238, 0.002); end
  def test_lever_graphs_k1238; assert_in_epsilon(9396.473382974675, worksheet.lever_graphs_k1238, 0.002); end
  def test_lever_graphs_l1238; assert_in_epsilon(9738.623123765085, worksheet.lever_graphs_l1238, 0.002); end
  def test_lever_graphs_m1238; assert_in_epsilon(10093.23141579612, worksheet.lever_graphs_m1238, 0.002); end
  def test_lever_graphs_n1238; assert_in_epsilon(10460.751906931595, worksheet.lever_graphs_n1238, 0.002); end
  def test_lever_graphs_o1238; assert_in_epsilon(10841.654763519731, worksheet.lever_graphs_o1238, 0.002); end
  def test_lever_graphs_p1238; assert_in_epsilon(11236.427271873612, worksheet.lever_graphs_p1238, 0.002); end
  def test_lever_graphs_q1238; assert_in_epsilon(11645.574461653101, worksheet.lever_graphs_q1238, 0.002); end
  def test_lever_graphs_r1238; assert_in_epsilon(12069.619751945685, worksheet.lever_graphs_r1238, 0.002); end
  def test_lever_graphs_b1239; assert_in_epsilon(3.0, worksheet.lever_graphs_b1239, 0.002); end
  def test_lever_graphs_j1239; assert_in_epsilon(8971.32836353237, worksheet.lever_graphs_j1239, 0.002); end
  def test_lever_graphs_k1239; assert_in_epsilon(9396.473382974675, worksheet.lever_graphs_k1239, 0.002); end
  def test_lever_graphs_l1239; assert_in_epsilon(9577.767462372236, worksheet.lever_graphs_l1239, 0.002); end
  def test_lever_graphs_m1239; assert_in_epsilon(9762.559401220362, worksheet.lever_graphs_m1239, 0.002); end
  def test_lever_graphs_n1239; assert_in_epsilon(9950.916686669081, worksheet.lever_graphs_n1239, 0.002); end
  def test_lever_graphs_o1239; assert_in_epsilon(10142.908107954881, worksheet.lever_graphs_o1239, 0.002); end
  def test_lever_graphs_p1239; assert_in_epsilon(10338.60378152296, worksheet.lever_graphs_p1239, 0.002); end
  def test_lever_graphs_q1239; assert_in_epsilon(10538.075176634175, worksheet.lever_graphs_q1239, 0.002); end
  def test_lever_graphs_r1239; assert_in_epsilon(10741.395141466062, worksheet.lever_graphs_r1239, 0.002); end
  def test_lever_graphs_b1240; assert_in_epsilon(4.0, worksheet.lever_graphs_b1240, 0.002); end
  def test_lever_graphs_j1240; assert_in_epsilon(8971.32836353237, worksheet.lever_graphs_j1240, 0.002); end
  def test_lever_graphs_k1240; assert_in_epsilon(9396.473382974675, worksheet.lever_graphs_k1240, 0.002); end
  def test_lever_graphs_l1240; assert_in_epsilon(9487.149591171363, worksheet.lever_graphs_l1240, 0.002); end
  def test_lever_graphs_m1240; assert_in_epsilon(9578.700827093646, worksheet.lever_graphs_m1240, 0.002); end
  def test_lever_graphs_n1240; assert_in_epsilon(9671.135534781431, worksheet.lever_graphs_n1240, 0.002); end
  def test_lever_graphs_o1240; assert_in_epsilon(9764.462239759827, worksheet.lever_graphs_o1240, 0.002); end
  def test_lever_graphs_p1240; assert_in_epsilon(9858.689549825474, worksheet.lever_graphs_p1240, 0.002); end
  def test_lever_graphs_q1240; assert_in_epsilon(9953.826155840472, worksheet.lever_graphs_q1240, 0.002); end
  def test_lever_graphs_r1240; assert_in_epsilon(10049.880832533963, worksheet.lever_graphs_r1240, 0.002); end
  def test_lever_graphs_c1225; assert_equal("1975", worksheet.lever_graphs_c1225); end
  def test_lever_graphs_d1225; assert_equal("1980", worksheet.lever_graphs_d1225); end
  def test_lever_graphs_e1225; assert_equal("1985", worksheet.lever_graphs_e1225); end
  def test_lever_graphs_f1225; assert_equal("1990", worksheet.lever_graphs_f1225); end
  def test_lever_graphs_g1225; assert_equal("1995", worksheet.lever_graphs_g1225); end
  def test_lever_graphs_h1225; assert_equal("2000", worksheet.lever_graphs_h1225); end
  def test_lever_graphs_i1225; assert_equal("2005", worksheet.lever_graphs_i1225); end
  def test_lever_graphs_j1225; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1225, 0.002); end
  def test_lever_graphs_k1225; assert_equal("2015", worksheet.lever_graphs_k1225); end
  def test_lever_graphs_l1225; assert_equal("2020", worksheet.lever_graphs_l1225); end
  def test_lever_graphs_m1225; assert_equal("2025", worksheet.lever_graphs_m1225); end
  def test_lever_graphs_n1225; assert_equal("2030", worksheet.lever_graphs_n1225); end
  def test_lever_graphs_o1225; assert_equal("2035", worksheet.lever_graphs_o1225); end
  def test_lever_graphs_p1225; assert_equal("2040", worksheet.lever_graphs_p1225); end
  def test_lever_graphs_q1225; assert_equal("2045", worksheet.lever_graphs_q1225); end
  def test_lever_graphs_r1225; assert_equal("2050", worksheet.lever_graphs_r1225); end
  def test_lever_graphs_b1226; assert_equal("Historic data", worksheet.lever_graphs_b1226); end
  def test_lever_graphs_b1227; assert_in_delta(1.0, worksheet.lever_graphs_b1227, 0.002); end
  def test_lever_graphs_j1227; assert_in_epsilon(8595.98128835765, worksheet.lever_graphs_j1227, 0.002); end
  def test_lever_graphs_k1227; assert_in_epsilon(8976.021829014844, worksheet.lever_graphs_k1227, 0.002); end
  def test_lever_graphs_l1227; assert_in_epsilon(9474.786844597846, worksheet.lever_graphs_l1227, 0.002); end
  def test_lever_graphs_m1227; assert_in_epsilon(10001.266425219601, worksheet.lever_graphs_m1227, 0.002); end
  def test_lever_graphs_n1227; assert_in_epsilon(10557.000568857695, worksheet.lever_graphs_n1227, 0.002); end
  def test_lever_graphs_o1227; assert_in_epsilon(11143.614845598371, worksheet.lever_graphs_o1227, 0.002); end
  def test_lever_graphs_p1227; assert_in_epsilon(11762.825152568608, worksheet.lever_graphs_p1227, 0.002); end
  def test_lever_graphs_q1227; assert_in_epsilon(12416.44273308255, worksheet.lever_graphs_q1227, 0.002); end
  def test_lever_graphs_r1227; assert_in_epsilon(13106.379474683707, worksheet.lever_graphs_r1227, 0.002); end
  def test_lever_graphs_b1228; assert_in_epsilon(2.0, worksheet.lever_graphs_b1228, 0.002); end
  def test_lever_graphs_j1228; assert_in_epsilon(8595.98128835765, worksheet.lever_graphs_j1228, 0.002); end
  def test_lever_graphs_k1228; assert_in_epsilon(8976.021829014844, worksheet.lever_graphs_k1228, 0.002); end
  def test_lever_graphs_l1228; assert_in_epsilon(9284.739853192128, worksheet.lever_graphs_l1228, 0.002); end
  def test_lever_graphs_m1228; assert_in_epsilon(9604.075812604802, worksheet.lever_graphs_m1228, 0.002); end
  def test_lever_graphs_n1228; assert_in_epsilon(9934.394896648475, worksheet.lever_graphs_n1228, 0.002); end
  def test_lever_graphs_o1228; assert_in_epsilon(10276.074854909764, worksheet.lever_graphs_o1228, 0.002); end
  def test_lever_graphs_p1228; assert_in_epsilon(10629.506429156927, worksheet.lever_graphs_p1228, 0.002); end
  def test_lever_graphs_q1228; assert_in_epsilon(10995.093800188222, worksheet.lever_graphs_q1228, 0.002); end
  def test_lever_graphs_r1228; assert_in_epsilon(11373.255050049014, worksheet.lever_graphs_r1228, 0.002); end
  def test_lever_graphs_b1229; assert_in_epsilon(3.0, worksheet.lever_graphs_b1229, 0.002); end
  def test_lever_graphs_j1229; assert_in_epsilon(8595.98128835765, worksheet.lever_graphs_j1229, 0.002); end
  def test_lever_graphs_k1229; assert_in_epsilon(8976.021829014844, worksheet.lever_graphs_k1229, 0.002); end
  def test_lever_graphs_l1229; assert_in_epsilon(9252.684641180966, worksheet.lever_graphs_l1229, 0.002); end
  def test_lever_graphs_m1229; assert_in_epsilon(9537.874873744868, worksheet.lever_graphs_m1229, 0.002); end
  def test_lever_graphs_n1229; assert_in_epsilon(9831.855362532122, worksheet.lever_graphs_n1229, 0.002); end
  def test_lever_graphs_o1229; assert_in_epsilon(10134.897044607358, worksheet.lever_graphs_o1229, 0.002); end
  def test_lever_graphs_p1229; assert_in_epsilon(10447.279207974148, worksheet.lever_graphs_p1229, 0.002); end
  def test_lever_graphs_q1229; assert_in_epsilon(10769.289748971241, worksheet.lever_graphs_q1229, 0.002); end
  def test_lever_graphs_r1229; assert_in_epsilon(11101.22543760238, worksheet.lever_graphs_r1229, 0.002); end
  def test_lever_graphs_b1230; assert_in_epsilon(4.0, worksheet.lever_graphs_b1230, 0.002); end
  def test_lever_graphs_j1230; assert_in_epsilon(8595.98128835765, worksheet.lever_graphs_j1230, 0.002); end
  def test_lever_graphs_k1230; assert_in_epsilon(8976.021829014844, worksheet.lever_graphs_k1230, 0.002); end
  def test_lever_graphs_l1230; assert_in_epsilon(9171.279213358283, worksheet.lever_graphs_l1230, 0.002); end
  def test_lever_graphs_m1230; assert_in_epsilon(9370.784074687284, worksheet.lever_graphs_m1230, 0.002); end
  def test_lever_graphs_n1230; assert_in_epsilon(9574.628809306363, worksheet.lever_graphs_n1230, 0.002); end
  def test_lever_graphs_o1230; assert_in_epsilon(9782.907823437246, worksheet.lever_graphs_o1230, 0.002); end
  def test_lever_graphs_p1230; assert_in_epsilon(9995.71757694104, worksheet.lever_graphs_p1230, 0.002); end
  def test_lever_graphs_q1230; assert_in_epsilon(10213.156627991506, worksheet.lever_graphs_q1230, 0.002); end
  def test_lever_graphs_r1230; assert_in_epsilon(10435.325678720114, worksheet.lever_graphs_r1230, 0.002); end
  def test_lever_graphs_c1848; assert_equal("1975", worksheet.lever_graphs_c1848); end
  def test_lever_graphs_d1848; assert_equal("1980", worksheet.lever_graphs_d1848); end
  def test_lever_graphs_e1848; assert_equal("1985", worksheet.lever_graphs_e1848); end
  def test_lever_graphs_f1848; assert_equal("1990", worksheet.lever_graphs_f1848); end
  def test_lever_graphs_g1848; assert_equal("1995", worksheet.lever_graphs_g1848); end
  def test_lever_graphs_h1848; assert_equal("2000", worksheet.lever_graphs_h1848); end
  def test_lever_graphs_i1848; assert_equal("2005", worksheet.lever_graphs_i1848); end
  def test_lever_graphs_j1848; assert_in_epsilon(2011.0, worksheet.lever_graphs_j1848, 0.002); end
  def test_lever_graphs_k1848; assert_equal("2015", worksheet.lever_graphs_k1848); end
  def test_lever_graphs_l1848; assert_equal("2020", worksheet.lever_graphs_l1848); end
  def test_lever_graphs_m1848; assert_equal("2025", worksheet.lever_graphs_m1848); end
  def test_lever_graphs_n1848; assert_equal("2030", worksheet.lever_graphs_n1848); end
  def test_lever_graphs_o1848; assert_equal("2035", worksheet.lever_graphs_o1848); end
  def test_lever_graphs_p1848; assert_equal("2040", worksheet.lever_graphs_p1848); end
  def test_lever_graphs_q1848; assert_equal("2045", worksheet.lever_graphs_q1848); end
  def test_lever_graphs_r1848; assert_equal("2050", worksheet.lever_graphs_r1848); end
  def test_lever_graphs_b1849; assert_equal("Historic data", worksheet.lever_graphs_b1849); end
  def test_lever_graphs_b1850; assert_in_delta(1.0, worksheet.lever_graphs_b1850, 0.002); end
  def test_lever_graphs_j1850; assert_in_epsilon(1.42, worksheet.lever_graphs_j1850, 0.002); end
  def test_lever_graphs_k1850; assert_in_epsilon(1.4343589743589742, worksheet.lever_graphs_k1850, 0.002); end
  def test_lever_graphs_l1850; assert_in_epsilon(1.4523076923076925, worksheet.lever_graphs_l1850, 0.002); end
  def test_lever_graphs_m1850; assert_in_epsilon(1.4702564102564102, worksheet.lever_graphs_m1850, 0.002); end
  def test_lever_graphs_n1850; assert_in_epsilon(1.488205128205128, worksheet.lever_graphs_n1850, 0.002); end
  def test_lever_graphs_o1850; assert_in_epsilon(1.5061538461538464, worksheet.lever_graphs_o1850, 0.002); end
  def test_lever_graphs_p1850; assert_in_epsilon(1.5241025641025643, worksheet.lever_graphs_p1850, 0.002); end
  def test_lever_graphs_q1850; assert_in_epsilon(1.5420512820512822, worksheet.lever_graphs_q1850, 0.002); end
  def test_lever_graphs_r1850; assert_in_epsilon(1.56, worksheet.lever_graphs_r1850, 0.002); end
  def test_lever_graphs_b1851; assert_in_epsilon(2.0, worksheet.lever_graphs_b1851, 0.002); end
  def test_lever_graphs_j1851; assert_in_epsilon(1.42, worksheet.lever_graphs_j1851, 0.002); end
  def test_lever_graphs_k1851; assert_in_epsilon(1.42, worksheet.lever_graphs_k1851, 0.002); end
  def test_lever_graphs_l1851; assert_in_epsilon(1.4200000000000002, worksheet.lever_graphs_l1851, 0.002); end
  def test_lever_graphs_m1851; assert_in_epsilon(1.42, worksheet.lever_graphs_m1851, 0.002); end
  def test_lever_graphs_n1851; assert_in_epsilon(1.42, worksheet.lever_graphs_n1851, 0.002); end
  def test_lever_graphs_o1851; assert_in_epsilon(1.42, worksheet.lever_graphs_o1851, 0.002); end
  def test_lever_graphs_p1851; assert_in_epsilon(1.42, worksheet.lever_graphs_p1851, 0.002); end
  def test_lever_graphs_q1851; assert_in_epsilon(1.42, worksheet.lever_graphs_q1851, 0.002); end
  def test_lever_graphs_r1851; assert_in_epsilon(1.42, worksheet.lever_graphs_r1851, 0.002); end
  def test_lever_graphs_b1852; assert_in_epsilon(3.0, worksheet.lever_graphs_b1852, 0.002); end
  def test_lever_graphs_j1852; assert_in_epsilon(1.42, worksheet.lever_graphs_j1852, 0.002); end
  def test_lever_graphs_k1852; assert_in_epsilon(1.4046153846153846, worksheet.lever_graphs_k1852, 0.002); end
  def test_lever_graphs_l1852; assert_in_epsilon(1.3853846153846154, worksheet.lever_graphs_l1852, 0.002); end
  def test_lever_graphs_m1852; assert_in_epsilon(1.3661538461538463, worksheet.lever_graphs_m1852, 0.002); end
  def test_lever_graphs_n1852; assert_in_epsilon(1.3469230769230767, worksheet.lever_graphs_n1852, 0.002); end
  def test_lever_graphs_o1852; assert_in_epsilon(1.327692307692308, worksheet.lever_graphs_o1852, 0.002); end
  def test_lever_graphs_p1852; assert_in_epsilon(1.3084615384615383, worksheet.lever_graphs_p1852, 0.002); end
  def test_lever_graphs_q1852; assert_in_epsilon(1.2892307692307692, worksheet.lever_graphs_q1852, 0.002); end
  def test_lever_graphs_r1852; assert_in_epsilon(1.27, worksheet.lever_graphs_r1852, 0.002); end
  def test_lever_graphs_b1853; assert_in_epsilon(4.0, worksheet.lever_graphs_b1853, 0.002); end
  def test_lever_graphs_j1853; assert_in_epsilon(1.42, worksheet.lever_graphs_j1853, 0.002); end
  def test_lever_graphs_k1853; assert_in_epsilon(1.3915897435897435, worksheet.lever_graphs_k1853, 0.002); end
  def test_lever_graphs_l1853; assert_in_epsilon(1.3560769230769232, worksheet.lever_graphs_l1853, 0.002); end
  def test_lever_graphs_m1853; assert_in_epsilon(1.3205641025641026, worksheet.lever_graphs_m1853, 0.002); end
  def test_lever_graphs_n1853; assert_in_epsilon(1.285051282051282, worksheet.lever_graphs_n1853, 0.002); end
  def test_lever_graphs_o1853; assert_in_epsilon(1.2495384615384615, worksheet.lever_graphs_o1853, 0.002); end
  def test_lever_graphs_p1853; assert_in_epsilon(1.214025641025641, worksheet.lever_graphs_p1853, 0.002); end
  def test_lever_graphs_q1853; assert_in_epsilon(1.1785128205128206, worksheet.lever_graphs_q1853, 0.002); end
  def test_lever_graphs_r1853; assert_in_epsilon(1.143, worksheet.lever_graphs_r1853, 0.002); end
  def test_lever_graphs_b1854; assert_equal("Comparator A", worksheet.lever_graphs_b1854); end
  def test_lever_graphs_b1855; assert_equal("Comparator B", worksheet.lever_graphs_b1855); end
  def test_lever_graphs_b1856; assert_equal("Comparator C", worksheet.lever_graphs_b1856); end
  def test_lever_graphs_c2756; assert_equal("1975", worksheet.lever_graphs_c2756); end
  def test_lever_graphs_d2756; assert_equal("1980", worksheet.lever_graphs_d2756); end
  def test_lever_graphs_e2756; assert_equal("1985", worksheet.lever_graphs_e2756); end
  def test_lever_graphs_f2756; assert_equal("1990", worksheet.lever_graphs_f2756); end
  def test_lever_graphs_g2756; assert_equal("1995", worksheet.lever_graphs_g2756); end
  def test_lever_graphs_h2756; assert_equal("2000", worksheet.lever_graphs_h2756); end
  def test_lever_graphs_i2756; assert_equal("2005", worksheet.lever_graphs_i2756); end
  def test_lever_graphs_j2756; assert_equal("2011", worksheet.lever_graphs_j2756); end
  def test_lever_graphs_k2756; assert_equal("2015", worksheet.lever_graphs_k2756); end
  def test_lever_graphs_l2756; assert_equal("2020", worksheet.lever_graphs_l2756); end
  def test_lever_graphs_m2756; assert_equal("2025", worksheet.lever_graphs_m2756); end
  def test_lever_graphs_n2756; assert_equal("2030", worksheet.lever_graphs_n2756); end
  def test_lever_graphs_o2756; assert_equal("2035", worksheet.lever_graphs_o2756); end
  def test_lever_graphs_p2756; assert_equal("2040", worksheet.lever_graphs_p2756); end
  def test_lever_graphs_q2756; assert_equal("2045", worksheet.lever_graphs_q2756); end
  def test_lever_graphs_r2756; assert_equal("2050", worksheet.lever_graphs_r2756); end
  def test_lever_graphs_b2757; assert_equal("Historic data", worksheet.lever_graphs_b2757); end
  def test_lever_graphs_b2758; assert_in_delta(1.0, worksheet.lever_graphs_b2758, 0.002); end
  def test_lever_graphs_j2758; assert_in_delta(0.1, worksheet.lever_graphs_j2758, 0.002); end
  def test_lever_graphs_k2758; assert_in_delta(0.1, worksheet.lever_graphs_k2758, 0.002); end
  def test_lever_graphs_l2758; assert_in_delta(0.1, worksheet.lever_graphs_l2758, 0.002); end
  def test_lever_graphs_m2758; assert_in_delta(0.1, worksheet.lever_graphs_m2758, 0.002); end
  def test_lever_graphs_n2758; assert_in_delta(0.1, worksheet.lever_graphs_n2758, 0.002); end
  def test_lever_graphs_o2758; assert_in_delta(0.1, worksheet.lever_graphs_o2758, 0.002); end
  def test_lever_graphs_p2758; assert_in_delta(0.1, worksheet.lever_graphs_p2758, 0.002); end
  def test_lever_graphs_q2758; assert_in_delta(0.1, worksheet.lever_graphs_q2758, 0.002); end
  def test_lever_graphs_r2758; assert_in_delta(0.1, worksheet.lever_graphs_r2758, 0.002); end
  def test_lever_graphs_b2759; assert_in_epsilon(2.0, worksheet.lever_graphs_b2759, 0.002); end
  def test_lever_graphs_j2759; assert_in_delta(0.1, worksheet.lever_graphs_j2759, 0.002); end
  def test_lever_graphs_k2759; assert_in_delta(0.11025641025641027, worksheet.lever_graphs_k2759, 0.002); end
  def test_lever_graphs_l2759; assert_in_delta(0.12307692307692308, worksheet.lever_graphs_l2759, 0.002); end
  def test_lever_graphs_m2759; assert_in_delta(0.13589743589743591, worksheet.lever_graphs_m2759, 0.002); end
  def test_lever_graphs_n2759; assert_in_delta(0.14871794871794872, worksheet.lever_graphs_n2759, 0.002); end
  def test_lever_graphs_o2759; assert_in_delta(0.16153846153846155, worksheet.lever_graphs_o2759, 0.002); end
  def test_lever_graphs_p2759; assert_in_delta(0.17435897435897435, worksheet.lever_graphs_p2759, 0.002); end
  def test_lever_graphs_q2759; assert_in_delta(0.18717948717948718, worksheet.lever_graphs_q2759, 0.002); end
  def test_lever_graphs_r2759; assert_in_delta(0.2, worksheet.lever_graphs_r2759, 0.002); end
  def test_lever_graphs_b2760; assert_in_epsilon(3.0, worksheet.lever_graphs_b2760, 0.002); end
  def test_lever_graphs_j2760; assert_in_delta(0.1, worksheet.lever_graphs_j2760, 0.002); end
  def test_lever_graphs_k2760; assert_in_delta(0.12051282051282051, worksheet.lever_graphs_k2760, 0.002); end
  def test_lever_graphs_l2760; assert_in_delta(0.14615384615384616, worksheet.lever_graphs_l2760, 0.002); end
  def test_lever_graphs_m2760; assert_in_delta(0.1717948717948718, worksheet.lever_graphs_m2760, 0.002); end
  def test_lever_graphs_n2760; assert_in_delta(0.19743589743589743, worksheet.lever_graphs_n2760, 0.002); end
  def test_lever_graphs_o2760; assert_in_delta(0.22307692307692306, worksheet.lever_graphs_o2760, 0.002); end
  def test_lever_graphs_p2760; assert_in_delta(0.24871794871794872, worksheet.lever_graphs_p2760, 0.002); end
  def test_lever_graphs_q2760; assert_in_delta(0.2743589743589744, worksheet.lever_graphs_q2760, 0.002); end
  def test_lever_graphs_r2760; assert_in_delta(0.3, worksheet.lever_graphs_r2760, 0.002); end
  def test_lever_graphs_b2761; assert_in_epsilon(4.0, worksheet.lever_graphs_b2761, 0.002); end
  def test_lever_graphs_j2761; assert_in_delta(0.1, worksheet.lever_graphs_j2761, 0.002); end
  def test_lever_graphs_k2761; assert_in_delta(0.13076923076923078, worksheet.lever_graphs_k2761, 0.002); end
  def test_lever_graphs_l2761; assert_in_delta(0.16923076923076924, worksheet.lever_graphs_l2761, 0.002); end
  def test_lever_graphs_m2761; assert_in_delta(0.20769230769230773, worksheet.lever_graphs_m2761, 0.002); end
  def test_lever_graphs_n2761; assert_in_delta(0.24615384615384617, worksheet.lever_graphs_n2761, 0.002); end
  def test_lever_graphs_o2761; assert_in_delta(0.28461538461538466, worksheet.lever_graphs_o2761, 0.002); end
  def test_lever_graphs_p2761; assert_in_delta(0.32307692307692315, worksheet.lever_graphs_p2761, 0.002); end
  def test_lever_graphs_q2761; assert_in_delta(0.3615384615384616, worksheet.lever_graphs_q2761, 0.002); end
  def test_lever_graphs_r2761; assert_in_delta(0.4, worksheet.lever_graphs_r2761, 0.002); end
  def test_lever_graphs_d2767; assert_equal("Title", worksheet.lever_graphs_d2767); end
  def test_lever_graphs_e2767; assert_equal("Food crops", worksheet.lever_graphs_e2767); end
  def test_lever_graphs_f2767; assert_equal("Cows and other bovines ", worksheet.lever_graphs_f2767); end
  def test_lever_graphs_g2767; assert_equal("Chickens and other poultry", worksheet.lever_graphs_g2767); end
  def test_lever_graphs_h2767; assert_equal("Pigs", worksheet.lever_graphs_h2767); end
  def test_lever_graphs_i2767; assert_equal("Sheep and goats", worksheet.lever_graphs_i2767); end
  def test_lever_graphs_j2767; assert_equal("Other animals", worksheet.lever_graphs_j2767); end
  def test_lever_graphs_k2767; assert_equal("Eggs", worksheet.lever_graphs_k2767); end
  def test_lever_graphs_l2767; assert_equal("Milk products", worksheet.lever_graphs_l2767); end
  def test_lever_graphs_d2768; assert_in_epsilon(2011.0, worksheet.lever_graphs_d2768, 0.002); end
  def test_lever_graphs_e2768; assert_in_delta(0.01, worksheet.lever_graphs_e2768, 0.002); end
  def test_lever_graphs_f2768; assert_in_delta(0.01, worksheet.lever_graphs_f2768, 0.002); end
  def test_lever_graphs_g2768; assert_in_delta(0.01, worksheet.lever_graphs_g2768, 0.002); end
  def test_lever_graphs_h2768; assert_in_delta(0.01, worksheet.lever_graphs_h2768, 0.002); end
  def test_lever_graphs_i2768; assert_in_delta(0.01, worksheet.lever_graphs_i2768, 0.002); end
  def test_lever_graphs_j2768; assert_in_delta(0.01, worksheet.lever_graphs_j2768, 0.002); end
  def test_lever_graphs_k2768; assert_in_delta(0.002, worksheet.lever_graphs_k2768, 0.002); end
  def test_lever_graphs_l2768; assert_in_delta(0.001, worksheet.lever_graphs_l2768, 0.002); end
  def test_lever_graphs_d2769; assert_equal("2050: Level 1", worksheet.lever_graphs_d2769); end
  def test_lever_graphs_e2769; assert_in_delta(0.05, worksheet.lever_graphs_e2769, 0.002); end
  def test_lever_graphs_f2769; assert_in_delta(0.05, worksheet.lever_graphs_f2769, 0.002); end
  def test_lever_graphs_g2769; assert_in_delta(0.05, worksheet.lever_graphs_g2769, 0.002); end
  def test_lever_graphs_h2769; assert_in_delta(0.05, worksheet.lever_graphs_h2769, 0.002); end
  def test_lever_graphs_i2769; assert_in_delta(0.05, worksheet.lever_graphs_i2769, 0.002); end
  def test_lever_graphs_j2769; assert_in_delta(0.05, worksheet.lever_graphs_j2769, 0.002); end
  def test_lever_graphs_k2769; assert_in_delta(0.005, worksheet.lever_graphs_k2769, 0.002); end
  def test_lever_graphs_l2769; assert_in_delta(0.005, worksheet.lever_graphs_l2769, 0.002); end
  def test_lever_graphs_d2770; assert_equal("2050: Level 2", worksheet.lever_graphs_d2770); end
  def test_lever_graphs_e2770; assert_in_delta(0.15, worksheet.lever_graphs_e2770, 0.002); end
  def test_lever_graphs_f2770; assert_in_delta(0.15, worksheet.lever_graphs_f2770, 0.002); end
  def test_lever_graphs_g2770; assert_in_delta(0.15, worksheet.lever_graphs_g2770, 0.002); end
  def test_lever_graphs_h2770; assert_in_delta(0.15, worksheet.lever_graphs_h2770, 0.002); end
  def test_lever_graphs_i2770; assert_in_delta(0.15, worksheet.lever_graphs_i2770, 0.002); end
  def test_lever_graphs_j2770; assert_in_delta(0.15, worksheet.lever_graphs_j2770, 0.002); end
  def test_lever_graphs_k2770; assert_in_delta(0.02, worksheet.lever_graphs_k2770, 0.002); end
  def test_lever_graphs_l2770; assert_in_delta(0.02, worksheet.lever_graphs_l2770, 0.002); end
  def test_lever_graphs_d2771; assert_equal("2050: Level 3", worksheet.lever_graphs_d2771); end
  def test_lever_graphs_e2771; assert_in_delta(0.2, worksheet.lever_graphs_e2771, 0.002); end
  def test_lever_graphs_f2771; assert_in_delta(0.2, worksheet.lever_graphs_f2771, 0.002); end
  def test_lever_graphs_g2771; assert_in_delta(0.2, worksheet.lever_graphs_g2771, 0.002); end
  def test_lever_graphs_h2771; assert_in_delta(0.2, worksheet.lever_graphs_h2771, 0.002); end
  def test_lever_graphs_i2771; assert_in_delta(0.2, worksheet.lever_graphs_i2771, 0.002); end
  def test_lever_graphs_j2771; assert_in_delta(0.2, worksheet.lever_graphs_j2771, 0.002); end
  def test_lever_graphs_k2771; assert_in_delta(0.05, worksheet.lever_graphs_k2771, 0.002); end
  def test_lever_graphs_l2771; assert_in_delta(0.05, worksheet.lever_graphs_l2771, 0.002); end
  def test_lever_graphs_d2772; assert_equal("2050: Level 4", worksheet.lever_graphs_d2772); end
  def test_lever_graphs_e2772; assert_in_delta(0.3, worksheet.lever_graphs_e2772, 0.002); end
  def test_lever_graphs_f2772; assert_in_delta(0.3, worksheet.lever_graphs_f2772, 0.002); end
  def test_lever_graphs_g2772; assert_in_delta(0.3, worksheet.lever_graphs_g2772, 0.002); end
  def test_lever_graphs_h2772; assert_in_delta(0.3, worksheet.lever_graphs_h2772, 0.002); end
  def test_lever_graphs_i2772; assert_in_delta(0.3, worksheet.lever_graphs_i2772, 0.002); end
  def test_lever_graphs_j2772; assert_in_delta(0.3, worksheet.lever_graphs_j2772, 0.002); end
  def test_lever_graphs_k2772; assert_in_delta(0.1, worksheet.lever_graphs_k2772, 0.002); end
  def test_lever_graphs_l2772; assert_in_delta(0.1, worksheet.lever_graphs_l2772, 0.002); end
  def test_lever_graphs_c1496; assert_equal("1975", worksheet.lever_graphs_c1496); end
  def test_lever_graphs_d1496; assert_equal("1980", worksheet.lever_graphs_d1496); end
  def test_lever_graphs_e1496; assert_equal("1985", worksheet.lever_graphs_e1496); end
  def test_lever_graphs_f1496; assert_equal("1990", worksheet.lever_graphs_f1496); end
  def test_lever_graphs_g1496; assert_equal("1995", worksheet.lever_graphs_g1496); end
  def test_lever_graphs_h1496; assert_equal("2000", worksheet.lever_graphs_h1496); end
  def test_lever_graphs_i1496; assert_equal("2005", worksheet.lever_graphs_i1496); end
  def test_lever_graphs_j1496; assert_equal("2010", worksheet.lever_graphs_j1496); end
  def test_lever_graphs_k1496; assert_equal("2015", worksheet.lever_graphs_k1496); end
  def test_lever_graphs_l1496; assert_equal("2020", worksheet.lever_graphs_l1496); end
  def test_lever_graphs_m1496; assert_equal("2025", worksheet.lever_graphs_m1496); end
  def test_lever_graphs_n1496; assert_equal("2030", worksheet.lever_graphs_n1496); end
  def test_lever_graphs_o1496; assert_equal("2035", worksheet.lever_graphs_o1496); end
  def test_lever_graphs_p1496; assert_equal("2040", worksheet.lever_graphs_p1496); end
  def test_lever_graphs_q1496; assert_equal("2045", worksheet.lever_graphs_q1496); end
  def test_lever_graphs_r1496; assert_equal("2050", worksheet.lever_graphs_r1496); end
  def test_lever_graphs_b1497; assert_equal("Historic data", worksheet.lever_graphs_b1497); end
  def test_lever_graphs_c1497; assert_in_epsilon(4071020000.0, worksheet.lever_graphs_c1497, 0.002); end
  def test_lever_graphs_d1497; assert_in_epsilon(4449049000.0, worksheet.lever_graphs_d1497, 0.002); end
  def test_lever_graphs_e1497; assert_in_epsilon(4863602000.0, worksheet.lever_graphs_e1497, 0.002); end
  def test_lever_graphs_f1497; assert_in_epsilon(5320817000.0, worksheet.lever_graphs_f1497, 0.002); end
  def test_lever_graphs_g1497; assert_in_epsilon(5741822000.0, worksheet.lever_graphs_g1497, 0.002); end
  def test_lever_graphs_h1497; assert_in_epsilon(6127700000.0, worksheet.lever_graphs_h1497, 0.002); end
  def test_lever_graphs_i1497; assert_in_epsilon(6514095000.0, worksheet.lever_graphs_i1497, 0.002); end
  def test_lever_graphs_j1497; assert_equal(:na, worksheet.lever_graphs_j1497); end
  def test_lever_graphs_b1498; assert_in_delta(1.0, worksheet.lever_graphs_b1498, 0.002); end
  def test_lever_graphs_j1498; assert_equal(:na, worksheet.lever_graphs_j1498); end
  def test_lever_graphs_k1498; assert_in_epsilon(7392233000.0, worksheet.lever_graphs_k1498, 0.002); end
  def test_lever_graphs_l1498; assert_in_epsilon(7893904000.0, worksheet.lever_graphs_l1498, 0.002); end
  def test_lever_graphs_m1498; assert_in_epsilon(8398226000.0, worksheet.lever_graphs_m1498, 0.002); end
  def test_lever_graphs_n1498; assert_in_epsilon(8881519000.0, worksheet.lever_graphs_n1498, 0.002); end
  def test_lever_graphs_o1498; assert_in_epsilon(9359400000.0, worksheet.lever_graphs_o1498, 0.002); end
  def test_lever_graphs_p1498; assert_in_epsilon(9847909000.0, worksheet.lever_graphs_p1498, 0.002); end
  def test_lever_graphs_q1498; assert_in_epsilon(10352435000.0, worksheet.lever_graphs_q1498, 0.002); end
  def test_lever_graphs_r1498; assert_in_epsilon(10868444000.0, worksheet.lever_graphs_r1498, 0.002); end
  def test_lever_graphs_b1499; assert_in_epsilon(2.0, worksheet.lever_graphs_b1499, 0.002); end
  def test_lever_graphs_j1499; assert_equal(:na, worksheet.lever_graphs_j1499); end
  def test_lever_graphs_k1499; assert_in_epsilon(7324782000.0, worksheet.lever_graphs_k1499, 0.002); end
  def test_lever_graphs_l1499; assert_in_epsilon(7716749000.0, worksheet.lever_graphs_l1499, 0.002); end
  def test_lever_graphs_m1499; assert_in_epsilon(8083413000.0, worksheet.lever_graphs_m1499, 0.002); end
  def test_lever_graphs_n1499; assert_in_epsilon(8424937000.0, worksheet.lever_graphs_n1499, 0.002); end
  def test_lever_graphs_o1499; assert_in_epsilon(8743447000.0, worksheet.lever_graphs_o1499, 0.002); end
  def test_lever_graphs_p1499; assert_in_epsilon(9038687000.0, worksheet.lever_graphs_p1499, 0.002); end
  def test_lever_graphs_q1499; assert_in_epsilon(9308438000.0, worksheet.lever_graphs_q1499, 0.002); end
  def test_lever_graphs_r1499; assert_in_epsilon(9550945000.0, worksheet.lever_graphs_r1499, 0.002); end
  def test_lever_graphs_b1500; assert_in_epsilon(3.0, worksheet.lever_graphs_b1500, 0.002); end
  def test_lever_graphs_j1500; assert_equal(:na, worksheet.lever_graphs_j1500); end
  def test_lever_graphs_k1500; assert_in_epsilon(7256925000.0, worksheet.lever_graphs_k1500, 0.002); end
  def test_lever_graphs_l1500; assert_in_epsilon(7539163000.0, worksheet.lever_graphs_l1500, 0.002); end
  def test_lever_graphs_m1500; assert_in_epsilon(7768450000.0, worksheet.lever_graphs_m1500, 0.002); end
  def test_lever_graphs_n1500; assert_in_epsilon(7969407000.0, worksheet.lever_graphs_n1500, 0.002); end
  def test_lever_graphs_o1500; assert_in_epsilon(8135087000.0, worksheet.lever_graphs_o1500, 0.002); end
  def test_lever_graphs_p1500; assert_in_epsilon(8255351000.0, worksheet.lever_graphs_p1500, 0.002); end
  def test_lever_graphs_q1500; assert_in_epsilon(8323978000.0, worksheet.lever_graphs_q1500, 0.002); end
  def test_lever_graphs_r1500; assert_in_epsilon(8341706000.0, worksheet.lever_graphs_r1500, 0.002); end
  def test_lever_graphs_d1481; assert_equal("Title", worksheet.lever_graphs_d1481); end
  def test_lever_graphs_e1481; assert_equal("Proportion of 15 year trend", worksheet.lever_graphs_e1481); end
  def test_lever_graphs_d1482; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1482, 0.002); end
  def test_lever_graphs_e1482; assert_in_delta(0.0, (worksheet.lever_graphs_e1482||0), 0.002); end
  def test_lever_graphs_d1483; assert_equal("2050: Level 1", worksheet.lever_graphs_d1483); end
  def test_lever_graphs_e1483; assert_in_delta(0.0, (worksheet.lever_graphs_e1483||0), 0.002); end
  def test_lever_graphs_d1484; assert_equal("2050: Level 2", worksheet.lever_graphs_d1484); end
  def test_lever_graphs_e1484; assert_in_delta(0.33, worksheet.lever_graphs_e1484, 0.002); end
  def test_lever_graphs_d1485; assert_equal("2050: Level 3", worksheet.lever_graphs_d1485); end
  def test_lever_graphs_e1485; assert_in_delta(0.66, worksheet.lever_graphs_e1485, 0.002); end
  def test_lever_graphs_d1486; assert_equal("2050: Level 4", worksheet.lever_graphs_d1486); end
  def test_lever_graphs_e1486; assert_in_epsilon(1.1592740742999998, worksheet.lever_graphs_e1486, 0.002); end
  def test_lever_graphs_d1587; assert_equal("Title", worksheet.lever_graphs_d1587); end
  def test_lever_graphs_e1587; assert_equal("Solid-fuel ultrasupercritical power plant", worksheet.lever_graphs_e1587); end
  def test_lever_graphs_f1587; assert_equal("Solid-fuel supercritical power plant", worksheet.lever_graphs_f1587); end
  def test_lever_graphs_g1587; assert_equal("Solid-fuel subcritical power plant", worksheet.lever_graphs_g1587); end
  def test_lever_graphs_d1588; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1588, 0.002); end
  def test_lever_graphs_e1588; assert_in_delta(0.08, worksheet.lever_graphs_e1588, 0.002); end
  def test_lever_graphs_f1588; assert_in_delta(0.17, worksheet.lever_graphs_f1588, 0.002); end
  def test_lever_graphs_g1588; assert_in_delta(0.75, worksheet.lever_graphs_g1588, 0.002); end
  def test_lever_graphs_d1589; assert_equal("2050: Level 1", worksheet.lever_graphs_d1589); end
  def test_lever_graphs_e1589; assert_in_delta(0.1435, worksheet.lever_graphs_e1589, 0.002); end
  def test_lever_graphs_f1589; assert_in_delta(0.2315, worksheet.lever_graphs_f1589, 0.002); end
  def test_lever_graphs_g1589; assert_in_delta(0.625, worksheet.lever_graphs_g1589, 0.002); end
  def test_lever_graphs_d1590; assert_equal("2050: Level 2", worksheet.lever_graphs_d1590); end
  def test_lever_graphs_e1590; assert_in_delta(0.18, worksheet.lever_graphs_e1590, 0.002); end
  def test_lever_graphs_f1590; assert_in_delta(0.27, worksheet.lever_graphs_f1590, 0.002); end
  def test_lever_graphs_g1590; assert_in_delta(0.55, worksheet.lever_graphs_g1590, 0.002); end
  def test_lever_graphs_d1591; assert_equal("2050: Level 3", worksheet.lever_graphs_d1591); end
  def test_lever_graphs_e1591; assert_in_delta(0.204, worksheet.lever_graphs_e1591, 0.002); end
  def test_lever_graphs_f1591; assert_in_delta(0.293, worksheet.lever_graphs_f1591, 0.002); end
  def test_lever_graphs_g1591; assert_in_delta(0.5030000000000001, worksheet.lever_graphs_g1591, 0.002); end
  def test_lever_graphs_d1592; assert_equal("2050: Level 4", worksheet.lever_graphs_d1592); end
  def test_lever_graphs_e1592; assert_in_delta(0.2324, worksheet.lever_graphs_e1592, 0.002); end
  def test_lever_graphs_f1592; assert_in_delta(0.3223, worksheet.lever_graphs_f1592, 0.002); end
  def test_lever_graphs_g1592; assert_in_delta(0.4453000000000001, worksheet.lever_graphs_g1592, 0.002); end
  def test_lever_graphs_d1886; assert_equal("Title", worksheet.lever_graphs_d1886); end
  def test_lever_graphs_e1886; assert_equal("Internal Combustion Engine (liquid)", worksheet.lever_graphs_e1886); end
  def test_lever_graphs_f1886; assert_equal("Internal Combustion Engine (gas)", worksheet.lever_graphs_f1886); end
  def test_lever_graphs_g1886; assert_equal("Plug-in hybrid technology (electric and internal combustion)", worksheet.lever_graphs_g1886); end
  def test_lever_graphs_h1886; assert_equal("Electric Vehicle", worksheet.lever_graphs_h1886); end
  def test_lever_graphs_i1886; assert_equal("Hydrogen", worksheet.lever_graphs_i1886); end
  def test_lever_graphs_d1887; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1887, 0.002); end
  def test_lever_graphs_e1887; assert_in_delta(0.9995553411198423, worksheet.lever_graphs_e1887, 0.002); end
  def test_lever_graphs_f1887; assert_in_delta(8.937397766306532e-08, worksheet.lever_graphs_f1887, 0.002); end
  def test_lever_graphs_g1887; assert_in_delta(0.0, (worksheet.lever_graphs_g1887||0), 0.002); end
  def test_lever_graphs_h1887; assert_in_delta(0.0004445695061800071, worksheet.lever_graphs_h1887, 0.002); end
  def test_lever_graphs_i1887; assert_in_delta(0.0, (worksheet.lever_graphs_i1887||0), 0.002); end
  def test_lever_graphs_d1888; assert_equal("2050: Level 1", worksheet.lever_graphs_d1888); end
  def test_lever_graphs_e1888; assert_in_delta(0.9299999999999999, worksheet.lever_graphs_e1888, 0.002); end
  def test_lever_graphs_f1888; assert_in_delta(0.03, worksheet.lever_graphs_f1888, 0.002); end
  def test_lever_graphs_g1888; assert_in_delta(0.03, worksheet.lever_graphs_g1888, 0.002); end
  def test_lever_graphs_h1888; assert_in_delta(0.01, worksheet.lever_graphs_h1888, 0.002); end
  def test_lever_graphs_i1888; assert_in_delta(0.0, (worksheet.lever_graphs_i1888||0), 0.002); end
  def test_lever_graphs_d1889; assert_equal("2050: Level 2", worksheet.lever_graphs_d1889); end
  def test_lever_graphs_e1889; assert_in_delta(0.7499999999999999, worksheet.lever_graphs_e1889, 0.002); end
  def test_lever_graphs_f1889; assert_in_delta(0.05, worksheet.lever_graphs_f1889, 0.002); end
  def test_lever_graphs_g1889; assert_in_delta(0.05, worksheet.lever_graphs_g1889, 0.002); end
  def test_lever_graphs_h1889; assert_in_delta(0.15, worksheet.lever_graphs_h1889, 0.002); end
  def test_lever_graphs_i1889; assert_in_delta(0.0, (worksheet.lever_graphs_i1889||0), 0.002); end
  def test_lever_graphs_d1890; assert_equal("2050: Level 3", worksheet.lever_graphs_d1890); end
  def test_lever_graphs_e1890; assert_in_delta(0.4, worksheet.lever_graphs_e1890, 0.002); end
  def test_lever_graphs_f1890; assert_in_delta(0.1, worksheet.lever_graphs_f1890, 0.002); end
  def test_lever_graphs_g1890; assert_in_delta(0.1, worksheet.lever_graphs_g1890, 0.002); end
  def test_lever_graphs_h1890; assert_in_delta(0.3, worksheet.lever_graphs_h1890, 0.002); end
  def test_lever_graphs_i1890; assert_in_delta(0.1, worksheet.lever_graphs_i1890, 0.002); end
  def test_lever_graphs_d1891; assert_equal("2050: Level 4", worksheet.lever_graphs_d1891); end
  def test_lever_graphs_e1891; assert_in_delta(0.04999999999999999, worksheet.lever_graphs_e1891, 0.002); end
  def test_lever_graphs_f1891; assert_in_delta(0.2, worksheet.lever_graphs_f1891, 0.002); end
  def test_lever_graphs_g1891; assert_in_delta(0.15, worksheet.lever_graphs_g1891, 0.002); end
  def test_lever_graphs_h1891; assert_in_delta(0.4, worksheet.lever_graphs_h1891, 0.002); end
  def test_lever_graphs_i1891; assert_in_delta(0.2, worksheet.lever_graphs_i1891, 0.002); end
  def test_lever_graphs_d1873; assert_equal("Title", worksheet.lever_graphs_d1873); end
  def test_lever_graphs_e1873; assert_equal("Internal Combustion Engine (liquid)", worksheet.lever_graphs_e1873); end
  def test_lever_graphs_f1873; assert_equal("Internal Combustion Engine (gas)", worksheet.lever_graphs_f1873); end
  def test_lever_graphs_g1873; assert_equal("Plug-in hybrid technology (electric and internal combustion)", worksheet.lever_graphs_g1873); end
  def test_lever_graphs_h1873; assert_equal("Electric Vehicle", worksheet.lever_graphs_h1873); end
  def test_lever_graphs_i1873; assert_equal("Hydrogen", worksheet.lever_graphs_i1873); end
  def test_lever_graphs_d1874; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1874, 0.002); end
  def test_lever_graphs_e1874; assert_in_delta(0.988235872414889, worksheet.lever_graphs_e1874, 0.002); end
  def test_lever_graphs_f1874; assert_in_delta(0.00959176661788106, worksheet.lever_graphs_f1874, 0.002); end
  def test_lever_graphs_g1874; assert_in_delta(2.834105983229307e-08, worksheet.lever_graphs_g1874, 0.002); end
  def test_lever_graphs_h1874; assert_in_delta(0.00217233262617009, worksheet.lever_graphs_h1874, 0.002); end
  def test_lever_graphs_i1874; assert_in_delta(0.0, (worksheet.lever_graphs_i1874||0), 0.002); end
  def test_lever_graphs_d1875; assert_equal("2050: Level 1", worksheet.lever_graphs_d1875); end
  def test_lever_graphs_e1875; assert_in_delta(0.9099999999999999, worksheet.lever_graphs_e1875, 0.002); end
  def test_lever_graphs_f1875; assert_in_delta(0.02, worksheet.lever_graphs_f1875, 0.002); end
  def test_lever_graphs_g1875; assert_in_delta(0.05, worksheet.lever_graphs_g1875, 0.002); end
  def test_lever_graphs_h1875; assert_in_delta(0.02, worksheet.lever_graphs_h1875, 0.002); end
  def test_lever_graphs_i1875; assert_in_delta(0.0, (worksheet.lever_graphs_i1875||0), 0.002); end
  def test_lever_graphs_d1876; assert_equal("2050: Level 2", worksheet.lever_graphs_d1876); end
  def test_lever_graphs_e1876; assert_in_delta(0.77, worksheet.lever_graphs_e1876, 0.002); end
  def test_lever_graphs_f1876; assert_in_delta(0.03, worksheet.lever_graphs_f1876, 0.002); end
  def test_lever_graphs_g1876; assert_in_delta(0.1, worksheet.lever_graphs_g1876, 0.002); end
  def test_lever_graphs_h1876; assert_in_delta(0.1, worksheet.lever_graphs_h1876, 0.002); end
  def test_lever_graphs_i1876; assert_in_delta(0.0, (worksheet.lever_graphs_i1876||0), 0.002); end
  def test_lever_graphs_d1877; assert_equal("2050: Level 3", worksheet.lever_graphs_d1877); end
  def test_lever_graphs_e1877; assert_in_delta(0.32999999999999996, worksheet.lever_graphs_e1877, 0.002); end
  def test_lever_graphs_f1877; assert_in_delta(0.07, worksheet.lever_graphs_f1877, 0.002); end
  def test_lever_graphs_g1877; assert_in_delta(0.25, worksheet.lever_graphs_g1877, 0.002); end
  def test_lever_graphs_h1877; assert_in_delta(0.2, worksheet.lever_graphs_h1877, 0.002); end
  def test_lever_graphs_i1877; assert_in_delta(0.15, worksheet.lever_graphs_i1877, 0.002); end
  def test_lever_graphs_d1878; assert_equal("2050: Level 4", worksheet.lever_graphs_d1878); end
  def test_lever_graphs_e1878; assert_in_delta(0.020000000000000073, worksheet.lever_graphs_e1878, 0.002); end
  def test_lever_graphs_f1878; assert_in_delta(0.1, worksheet.lever_graphs_f1878, 0.002); end
  def test_lever_graphs_g1878; assert_in_delta(0.33, worksheet.lever_graphs_g1878, 0.002); end
  def test_lever_graphs_h1878; assert_in_delta(0.35, worksheet.lever_graphs_h1878, 0.002); end
  def test_lever_graphs_i1878; assert_in_delta(0.2, worksheet.lever_graphs_i1878, 0.002); end
  def test_lever_graphs_d1912; assert_equal("Title", worksheet.lever_graphs_d1912); end
  def test_lever_graphs_e1912; assert_equal("Fuel-powered plane", worksheet.lever_graphs_e1912); end
  def test_lever_graphs_f1912; assert_equal("Hydrogen-powered plane", worksheet.lever_graphs_f1912); end
  def test_lever_graphs_d1913; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1913, 0.002); end
  def test_lever_graphs_e1913; assert_in_delta(0.562586153718789, worksheet.lever_graphs_e1913, 0.002); end
  def test_lever_graphs_f1913; assert_in_delta(0.43741384628121105, worksheet.lever_graphs_f1913, 0.002); end
  def test_lever_graphs_d1914; assert_equal("2050: Level 1", worksheet.lever_graphs_d1914); end
  def test_lever_graphs_e1914; assert_in_delta(0.6, worksheet.lever_graphs_e1914, 0.002); end
  def test_lever_graphs_f1914; assert_in_delta(0.4, worksheet.lever_graphs_f1914, 0.002); end
  def test_lever_graphs_d1915; assert_equal("2050: Level 2", worksheet.lever_graphs_d1915); end
  def test_lever_graphs_e1915; assert_in_delta(0.4, worksheet.lever_graphs_e1915, 0.002); end
  def test_lever_graphs_f1915; assert_in_delta(0.6, worksheet.lever_graphs_f1915, 0.002); end
  def test_lever_graphs_d1916; assert_equal("2050: Level 3", worksheet.lever_graphs_d1916); end
  def test_lever_graphs_e1916; assert_in_delta(0.29000000000000004, worksheet.lever_graphs_e1916, 0.002); end
  def test_lever_graphs_f1916; assert_in_delta(0.71, worksheet.lever_graphs_f1916, 0.002); end
  def test_lever_graphs_d1917; assert_equal("2050: Level 4", worksheet.lever_graphs_d1917); end
  def test_lever_graphs_e1917; assert_in_delta(0.19999999999999996, worksheet.lever_graphs_e1917, 0.002); end
  def test_lever_graphs_f1917; assert_in_delta(0.8, worksheet.lever_graphs_f1917, 0.002); end
  def test_lever_graphs_d1899; assert_equal("Title", worksheet.lever_graphs_d1899); end
  def test_lever_graphs_e1899; assert_equal("Fuel-powered train", worksheet.lever_graphs_e1899); end
  def test_lever_graphs_f1899; assert_equal("Electric-powered train", worksheet.lever_graphs_f1899); end
  def test_lever_graphs_d1900; assert_in_epsilon(2011.0, worksheet.lever_graphs_d1900, 0.002); end
  def test_lever_graphs_e1900; assert_in_delta(0.562586153718789, worksheet.lever_graphs_e1900, 0.002); end
  def test_lever_graphs_f1900; assert_in_delta(0.43741384628121105, worksheet.lever_graphs_f1900, 0.002); end
  def test_lever_graphs_d1901; assert_equal("2050: Level 1", worksheet.lever_graphs_d1901); end
  def test_lever_graphs_e1901; assert_in_delta(0.6, worksheet.lever_graphs_e1901, 0.002); end
  def test_lever_graphs_f1901; assert_in_delta(0.4, worksheet.lever_graphs_f1901, 0.002); end
  def test_lever_graphs_d1902; assert_equal("2050: Level 2", worksheet.lever_graphs_d1902); end
  def test_lever_graphs_e1902; assert_in_delta(0.4, worksheet.lever_graphs_e1902, 0.002); end
  def test_lever_graphs_f1902; assert_in_delta(0.6, worksheet.lever_graphs_f1902, 0.002); end
  def test_lever_graphs_d1903; assert_equal("2050: Level 3", worksheet.lever_graphs_d1903); end
  def test_lever_graphs_e1903; assert_in_delta(0.29000000000000004, worksheet.lever_graphs_e1903, 0.002); end
  def test_lever_graphs_f1903; assert_in_delta(0.71, worksheet.lever_graphs_f1903, 0.002); end
  def test_lever_graphs_d1904; assert_equal("2050: Level 4", worksheet.lever_graphs_d1904); end
  def test_lever_graphs_e1904; assert_in_delta(0.19999999999999996, worksheet.lever_graphs_e1904, 0.002); end
  def test_lever_graphs_f1904; assert_in_delta(0.8, worksheet.lever_graphs_f1904, 0.002); end
  def test_lever_graphs_c1512; assert_equal("1975", worksheet.lever_graphs_c1512); end
  def test_lever_graphs_d1512; assert_equal("1980", worksheet.lever_graphs_d1512); end
  def test_lever_graphs_e1512; assert_equal("1985", worksheet.lever_graphs_e1512); end
  def test_lever_graphs_f1512; assert_equal("1990", worksheet.lever_graphs_f1512); end
  def test_lever_graphs_g1512; assert_equal("1995", worksheet.lever_graphs_g1512); end
  def test_lever_graphs_h1512; assert_equal("2000", worksheet.lever_graphs_h1512); end
  def test_lever_graphs_i1512; assert_equal("2005", worksheet.lever_graphs_i1512); end
  def test_lever_graphs_j1512; assert_equal("2010", worksheet.lever_graphs_j1512); end
  def test_lever_graphs_k1512; assert_equal("2015", worksheet.lever_graphs_k1512); end
  def test_lever_graphs_l1512; assert_equal("2020", worksheet.lever_graphs_l1512); end
  def test_lever_graphs_m1512; assert_equal("2025", worksheet.lever_graphs_m1512); end
  def test_lever_graphs_n1512; assert_equal("2030", worksheet.lever_graphs_n1512); end
  def test_lever_graphs_o1512; assert_equal("2035", worksheet.lever_graphs_o1512); end
  def test_lever_graphs_p1512; assert_equal("2040", worksheet.lever_graphs_p1512); end
  def test_lever_graphs_q1512; assert_equal("2045", worksheet.lever_graphs_q1512); end
  def test_lever_graphs_r1512; assert_equal("2050", worksheet.lever_graphs_r1512); end
  def test_lever_graphs_b1513; assert_equal("Historic data", worksheet.lever_graphs_b1513); end
  def test_lever_graphs_c1513; assert_in_delta(0.377, worksheet.lever_graphs_c1513, 0.002); end
  def test_lever_graphs_d1513; assert_in_delta(0.39399999999999996, worksheet.lever_graphs_d1513, 0.002); end
  def test_lever_graphs_e1513; assert_in_delta(0.41200000000000003, worksheet.lever_graphs_e1513, 0.002); end
  def test_lever_graphs_f1513; assert_in_delta(0.43, worksheet.lever_graphs_f1513, 0.002); end
  def test_lever_graphs_g1513; assert_in_delta(0.44799999999999995, worksheet.lever_graphs_g1513, 0.002); end
  def test_lever_graphs_h1513; assert_in_delta(0.467, worksheet.lever_graphs_h1513, 0.002); end
  def test_lever_graphs_i1513; assert_in_delta(0.491, worksheet.lever_graphs_i1513, 0.002); end
  def test_lever_graphs_j1513; assert_equal(:na, worksheet.lever_graphs_j1513); end
  def test_lever_graphs_b1514; assert_in_delta(1.0, worksheet.lever_graphs_b1514, 0.002); end
  def test_lever_graphs_j1514; assert_equal(:na, worksheet.lever_graphs_j1514); end
  def test_lever_graphs_k1514; assert_in_delta(0.540259749906762, worksheet.lever_graphs_k1514, 0.002); end
  def test_lever_graphs_l1514; assert_in_delta(0.57, worksheet.lever_graphs_l1514, 0.002); end
  def test_lever_graphs_m1514; assert_in_delta(0.6, worksheet.lever_graphs_m1514, 0.002); end
  def test_lever_graphs_n1514; assert_in_delta(0.63, worksheet.lever_graphs_n1514, 0.002); end
  def test_lever_graphs_o1514; assert_in_delta(0.65, worksheet.lever_graphs_o1514, 0.002); end
  def test_lever_graphs_p1514; assert_in_delta(0.68, worksheet.lever_graphs_p1514, 0.002); end
  def test_lever_graphs_q1514; assert_in_delta(0.71, worksheet.lever_graphs_q1514, 0.002); end
  def test_lever_graphs_r1514; assert_in_delta(0.75, worksheet.lever_graphs_r1514, 0.002); end
  def test_lever_graphs_b1515; assert_in_epsilon(2.0, worksheet.lever_graphs_b1515, 0.002); end
  def test_lever_graphs_j1515; assert_equal(:na, worksheet.lever_graphs_j1515); end
  def test_lever_graphs_k1515; assert_in_delta(0.540259749906762, worksheet.lever_graphs_k1515, 0.002); end
  def test_lever_graphs_l1515; assert_in_delta(0.562155760202834, worksheet.lever_graphs_l1515, 0.002); end
  def test_lever_graphs_m1515; assert_in_delta(0.582151835653899, worksheet.lever_graphs_m1515, 0.002); end
  def test_lever_graphs_n1515; assert_in_delta(0.6003793471001849, worksheet.lever_graphs_n1515, 0.002); end
  def test_lever_graphs_o1515; assert_in_delta(0.61694601015062, worksheet.lever_graphs_o1515, 0.002); end
  def test_lever_graphs_p1515; assert_in_delta(0.632327785387248, worksheet.lever_graphs_p1515, 0.002); end
  def test_lever_graphs_q1515; assert_in_delta(0.647898600138288, worksheet.lever_graphs_q1515, 0.002); end
  def test_lever_graphs_r1515; assert_in_delta(0.663663288223238, worksheet.lever_graphs_r1515, 0.002); end
  def test_lever_graphs_b1516; assert_in_epsilon(3.0, worksheet.lever_graphs_b1516, 0.002); end
  def test_lever_graphs_j1516; assert_equal(:na, worksheet.lever_graphs_j1516); end
  def test_lever_graphs_k1516; assert_in_delta(0.53, worksheet.lever_graphs_k1516, 0.002); end
  def test_lever_graphs_l1516; assert_in_delta(0.54, worksheet.lever_graphs_l1516, 0.002); end
  def test_lever_graphs_m1516; assert_in_delta(0.55, worksheet.lever_graphs_m1516, 0.002); end
  def test_lever_graphs_n1516; assert_in_delta(0.56, worksheet.lever_graphs_n1516, 0.002); end
  def test_lever_graphs_o1516; assert_in_delta(0.57, worksheet.lever_graphs_o1516, 0.002); end
  def test_lever_graphs_p1516; assert_in_delta(0.57, worksheet.lever_graphs_p1516, 0.002); end
  def test_lever_graphs_q1516; assert_in_delta(0.57, worksheet.lever_graphs_q1516, 0.002); end
  def test_lever_graphs_r1516; assert_in_delta(0.58, worksheet.lever_graphs_r1516, 0.002); end
  def test_lever_graphs_b1517; assert_equal("Comparator A", worksheet.lever_graphs_b1517); end
  def test_lever_graphs_b1518; assert_equal("Comparator B", worksheet.lever_graphs_b1518); end
  def test_lever_graphs_b1519; assert_equal("Comparator C", worksheet.lever_graphs_b1519); end
  def test_lever_graphs_b1947; assert_equal("Technology code", worksheet.lever_graphs_b1947); end
  def test_lever_graphs_c1947; assert_equal("1975", worksheet.lever_graphs_c1947); end
  def test_lever_graphs_d1947; assert_equal("1980", worksheet.lever_graphs_d1947); end
  def test_lever_graphs_e1947; assert_equal("1985", worksheet.lever_graphs_e1947); end
  def test_lever_graphs_f1947; assert_equal("1990", worksheet.lever_graphs_f1947); end
  def test_lever_graphs_g1947; assert_equal("1995", worksheet.lever_graphs_g1947); end
  def test_lever_graphs_h1947; assert_equal("2000", worksheet.lever_graphs_h1947); end
  def test_lever_graphs_i1947; assert_equal("2005", worksheet.lever_graphs_i1947); end
  def test_lever_graphs_j1947; assert_equal("2011", worksheet.lever_graphs_j1947); end
  def test_lever_graphs_b1948; assert_equal("walk.passenger.urban", worksheet.lever_graphs_b1948); end
  def test_lever_graphs_j1948; assert_in_delta(0.0, (worksheet.lever_graphs_j1948||0), 0.002); end
  def test_lever_graphs_b1949; assert_equal("bike.passenger.urban", worksheet.lever_graphs_b1949); end
  def test_lever_graphs_j1949; assert_in_delta(0.0, (worksheet.lever_graphs_j1949||0), 0.002); end
  def test_lever_graphs_b1950; assert_equal("motorbike.passenger.urban.fuel", worksheet.lever_graphs_b1950); end
  def test_lever_graphs_j1950; assert_in_epsilon(4.320306698732465, worksheet.lever_graphs_j1950, 0.002); end
  def test_lever_graphs_b1951; assert_equal("motorbike.passenger.urban.elec", worksheet.lever_graphs_b1951); end
  def test_lever_graphs_j1951; assert_in_epsilon(1.198701595980695, worksheet.lever_graphs_j1951, 0.002); end
  def test_lever_graphs_b1952; assert_equal("car.passenger.urban.ICE.liquid", worksheet.lever_graphs_b1952); end
  def test_lever_graphs_j1952; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1952, 0.002); end
  def test_lever_graphs_b1953; assert_equal("car.passenger.urban.ICE.gas", worksheet.lever_graphs_b1953); end
  def test_lever_graphs_j1953; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1953, 0.002); end
  def test_lever_graphs_b1954; assert_equal("car.passenger.urban.PH", worksheet.lever_graphs_b1954); end
  def test_lever_graphs_j1954; assert_in_epsilon(6.537621244105451, worksheet.lever_graphs_j1954, 0.002); end
  def test_lever_graphs_b1955; assert_equal("car.passenger.urban.EV", worksheet.lever_graphs_b1955); end
  def test_lever_graphs_j1955; assert_in_epsilon(2.39740319196139, worksheet.lever_graphs_j1955, 0.002); end
  def test_lever_graphs_b1956; assert_equal("car.passenger.urban.H2", worksheet.lever_graphs_b1956); end
  def test_lever_graphs_j1956; assert_in_epsilon(7.894395740652819, worksheet.lever_graphs_j1956, 0.002); end
  def test_lever_graphs_b1957; assert_equal("bus.passenger.urban.ICE.liquid", worksheet.lever_graphs_b1957); end
  def test_lever_graphs_j1957; assert_in_epsilon(32.331711258141304, worksheet.lever_graphs_j1957, 0.002); end
  def test_lever_graphs_b1958; assert_equal("bus.passenger.urban.ICE.gas", worksheet.lever_graphs_b1958); end
  def test_lever_graphs_j1958; assert_in_epsilon(32.331711258141304, worksheet.lever_graphs_j1958, 0.002); end
  def test_lever_graphs_b1959; assert_equal("bus.passenger.urban.PH", worksheet.lever_graphs_b1959); end
  def test_lever_graphs_j1959; assert_in_epsilon(28.138535157781295, worksheet.lever_graphs_j1959, 0.002); end
  def test_lever_graphs_b1960; assert_equal("bus.passenger.urban.EV", worksheet.lever_graphs_b1960); end
  def test_lever_graphs_j1960; assert_in_epsilon(7.13287824899877, worksheet.lever_graphs_j1960, 0.002); end
  def test_lever_graphs_b1961; assert_equal("bus.passenger.urban.H2", worksheet.lever_graphs_b1961); end
  def test_lever_graphs_j1961; assert_in_epsilon(19.615415184746603, worksheet.lever_graphs_j1961, 0.002); end
  def test_lever_graphs_b1962; assert_equal("train.passenger.urban.fuel", worksheet.lever_graphs_b1962); end
  def test_lever_graphs_j1962; assert_in_epsilon(347.9830499369259, worksheet.lever_graphs_j1962, 0.002); end
  def test_lever_graphs_b1963; assert_equal("train.passenger.urban.elec", worksheet.lever_graphs_b1963); end
  def test_lever_graphs_j1963; assert_in_epsilon(143.2773007442537, worksheet.lever_graphs_j1963, 0.002); end
  def test_lever_graphs_b1964; assert_equal("walk.passenger.rural", worksheet.lever_graphs_b1964); end
  def test_lever_graphs_j1964; assert_in_delta(0.0, (worksheet.lever_graphs_j1964||0), 0.002); end
  def test_lever_graphs_b1965; assert_equal("bike.passenger.rural", worksheet.lever_graphs_b1965); end
  def test_lever_graphs_j1965; assert_in_delta(0.0, (worksheet.lever_graphs_j1965||0), 0.002); end
  def test_lever_graphs_b1966; assert_equal("motorbike.passenger.rural.fuel", worksheet.lever_graphs_b1966); end
  def test_lever_graphs_j1966; assert_in_epsilon(4.320306698732465, worksheet.lever_graphs_j1966, 0.002); end
  def test_lever_graphs_b1967; assert_equal("motorbike.passenger.rural.elec", worksheet.lever_graphs_b1967); end
  def test_lever_graphs_j1967; assert_in_epsilon(1.198701595980695, worksheet.lever_graphs_j1967, 0.002); end
  def test_lever_graphs_b1968; assert_equal("car.passenger.rural.ICE.liquid", worksheet.lever_graphs_b1968); end
  def test_lever_graphs_j1968; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1968, 0.002); end
  def test_lever_graphs_b1969; assert_equal("car.passenger.rural.ICE.gas", worksheet.lever_graphs_b1969); end
  def test_lever_graphs_j1969; assert_in_epsilon(8.64061339746493, worksheet.lever_graphs_j1969, 0.002); end
  def test_lever_graphs_b1970; assert_equal("car.passenger.rural.PH", worksheet.lever_graphs_b1970); end
  def test_lever_graphs_j1970; assert_in_epsilon(6.537621244105451, worksheet.lever_graphs_j1970, 0.002); end
  def test_lever_graphs_b1971; assert_equal("car.passenger.rural.EV", worksheet.lever_graphs_b1971); end
  def test_lever_graphs_j1971; assert_in_epsilon(2.39740319196139, worksheet.lever_graphs_j1971, 0.002); end
  def test_lever_graphs_b1972; assert_equal("car.passenger.rural.H2", worksheet.lever_graphs_b1972); end
  def test_lever_graphs_j1972; assert_in_epsilon(7.894395740652819, worksheet.lever_graphs_j1972, 0.002); end
  def test_lever_graphs_b1973; assert_equal("bus.passenger.rural.ICE.liquid", worksheet.lever_graphs_b1973); end
  def test_lever_graphs_j1973; assert_in_epsilon(32.331711258141304, worksheet.lever_graphs_j1973, 0.002); end
  def test_lever_graphs_b1974; assert_equal("bus.passenger.rural.ICE.gas", worksheet.lever_graphs_b1974); end
  def test_lever_graphs_j1974; assert_in_epsilon(32.331711258141304, worksheet.lever_graphs_j1974, 0.002); end
  def test_lever_graphs_b1975; assert_equal("bus.passenger.rural.PH", worksheet.lever_graphs_b1975); end
  def test_lever_graphs_j1975; assert_in_epsilon(28.138535157781295, worksheet.lever_graphs_j1975, 0.002); end
  def test_lever_graphs_b1976; assert_equal("bus.passenger.rural.EV", worksheet.lever_graphs_b1976); end
  def test_lever_graphs_j1976; assert_in_epsilon(7.13287824899877, worksheet.lever_graphs_j1976, 0.002); end
  def test_lever_graphs_b1977; assert_equal("bus.passenger.rural.H2", worksheet.lever_graphs_b1977); end
  def test_lever_graphs_j1977; assert_in_epsilon(19.615415184746603, worksheet.lever_graphs_j1977, 0.002); end
  def test_lever_graphs_b1978; assert_equal("train.passenger.rural.fuel", worksheet.lever_graphs_b1978); end
  def test_lever_graphs_j1978; assert_in_epsilon(347.9830499369259, worksheet.lever_graphs_j1978, 0.002); end
  def test_lever_graphs_b1979; assert_equal("train.passenger.rural.elec", worksheet.lever_graphs_b1979); end
  def test_lever_graphs_j1979; assert_in_epsilon(143.2773007442537, worksheet.lever_graphs_j1979, 0.002); end
  def test_lever_graphs_b1980; assert_equal("plane.passenger.international.short.fuel", worksheet.lever_graphs_b1980); end
  def test_lever_graphs_j1980; assert_in_epsilon(955.579493787423, worksheet.lever_graphs_j1980, 0.002); end
  def test_lever_graphs_b1981; assert_equal("plane.passenger.international.short.H2", worksheet.lever_graphs_b1981); end
  def test_lever_graphs_j1981; assert_in_epsilon(955.579493787423, worksheet.lever_graphs_j1981, 0.002); end
  def test_lever_graphs_b1982; assert_equal("plane.passenger.international.long.fuel", worksheet.lever_graphs_b1982); end
  def test_lever_graphs_j1982; assert_in_epsilon(687.3122998348063, worksheet.lever_graphs_j1982, 0.002); end
  def test_lever_graphs_b1983; assert_equal("plane.passenger.international.long.H2", worksheet.lever_graphs_b1983); end
  def test_lever_graphs_j1983; assert_in_epsilon(687.3122998348063, worksheet.lever_graphs_j1983, 0.002); end
  def test_lever_graphs_b1984; assert_equal("train.passenger.international.fuel", worksheet.lever_graphs_b1984); end
  def test_lever_graphs_j1984; assert_in_epsilon(347.9830499369259, worksheet.lever_graphs_j1984, 0.002); end
  def test_lever_graphs_b1985; assert_equal("train.passenger.international.elec", worksheet.lever_graphs_b1985); end
  def test_lever_graphs_j1985; assert_in_epsilon(143.2773007442537, worksheet.lever_graphs_j1985, 0.002); end
  def test_lever_graphs_b2019; assert_equal("Technology code", worksheet.lever_graphs_b2019); end
  def test_lever_graphs_c2019; assert_equal("1975", worksheet.lever_graphs_c2019); end
  def test_lever_graphs_d2019; assert_equal("1980", worksheet.lever_graphs_d2019); end
  def test_lever_graphs_e2019; assert_equal("1985", worksheet.lever_graphs_e2019); end
  def test_lever_graphs_f2019; assert_equal("1990", worksheet.lever_graphs_f2019); end
  def test_lever_graphs_g2019; assert_equal("1995", worksheet.lever_graphs_g2019); end
  def test_lever_graphs_h2019; assert_equal("2000", worksheet.lever_graphs_h2019); end
  def test_lever_graphs_i2019; assert_equal("2005", worksheet.lever_graphs_i2019); end
  def test_lever_graphs_j2019; assert_equal("2011", worksheet.lever_graphs_j2019); end
  def test_lever_graphs_b2020; assert_equal("light.truck.domestic.ICE.liquid", worksheet.lever_graphs_b2020); end
  def test_lever_graphs_j2020; assert_in_epsilon(9.96, worksheet.lever_graphs_j2020, 0.002); end
  def test_lever_graphs_b2021; assert_equal("light.truck.domestic.ICE.gas", worksheet.lever_graphs_b2021); end
  def test_lever_graphs_j2021; assert_in_epsilon(9.96, worksheet.lever_graphs_j2021, 0.002); end
  def test_lever_graphs_b2022; assert_equal("light.truck.domestic.PH", worksheet.lever_graphs_b2022); end
  def test_lever_graphs_j2022; assert_in_epsilon(9.060000000000002, worksheet.lever_graphs_j2022, 0.002); end
  def test_lever_graphs_b2023; assert_equal("light.truck.domestic.EV", worksheet.lever_graphs_b2023); end
  def test_lever_graphs_j2023; assert_in_epsilon(3.3999999999999995, worksheet.lever_graphs_j2023, 0.002); end
  def test_lever_graphs_b2024; assert_equal("light.truck.domestic.H2", worksheet.lever_graphs_b2024); end
  def test_lever_graphs_j2024; assert_in_epsilon(7.62, worksheet.lever_graphs_j2024, 0.002); end
  def test_lever_graphs_b2025; assert_equal("heavy.truck.domestic.ICE.liquid", worksheet.lever_graphs_b2025); end
  def test_lever_graphs_j2025; assert_in_epsilon(31.970000000000002, worksheet.lever_graphs_j2025, 0.002); end
  def test_lever_graphs_b2026; assert_equal("heavy.truck.domestic.ICE.gas", worksheet.lever_graphs_b2026); end
  def test_lever_graphs_j2026; assert_in_epsilon(31.970000000000002, worksheet.lever_graphs_j2026, 0.002); end
  def test_lever_graphs_b2027; assert_equal("heavy.truck.domestic.PH", worksheet.lever_graphs_b2027); end
  def test_lever_graphs_j2027; assert_in_epsilon(28.57, worksheet.lever_graphs_j2027, 0.002); end
  def test_lever_graphs_b2028; assert_equal("heavy.truck.domestic.EV", worksheet.lever_graphs_b2028); end
  def test_lever_graphs_j2028; assert_in_epsilon(12.37, worksheet.lever_graphs_j2028, 0.002); end
  def test_lever_graphs_b2029; assert_equal("heavy.truck.domestic.H2", worksheet.lever_graphs_b2029); end
  def test_lever_graphs_j2029; assert_in_epsilon(26.35, worksheet.lever_graphs_j2029, 0.002); end
  def test_lever_graphs_b2030; assert_equal("train.freight.domestic.fuel", worksheet.lever_graphs_b2030); end
  def test_lever_graphs_j2030; assert_in_epsilon(13847.986298180851, worksheet.lever_graphs_j2030, 0.002); end
  def test_lever_graphs_b2031; assert_equal("train.freight.domestic.elec", worksheet.lever_graphs_b2031); end
  def test_lever_graphs_j2031; assert_in_epsilon(13847.986298180851, worksheet.lever_graphs_j2031, 0.002); end
  def test_lever_graphs_b2032; assert_equal("ship.freight.domestic.fuel", worksheet.lever_graphs_b2032); end
  def test_lever_graphs_j2032; assert_in_epsilon(3852.2580065848556, worksheet.lever_graphs_j2032, 0.002); end
  def test_lever_graphs_b2033; assert_equal("ship.freight.domestic.H2", worksheet.lever_graphs_b2033); end
  def test_lever_graphs_j2033; assert_in_epsilon(3852.2580065848556, worksheet.lever_graphs_j2033, 0.002); end
  def test_lever_graphs_b2034; assert_equal("heavy.truck.international.ICE.liquid", worksheet.lever_graphs_b2034); end
  def test_lever_graphs_j2034; assert_in_epsilon(31.970000000000002, worksheet.lever_graphs_j2034, 0.002); end
  def test_lever_graphs_b2035; assert_equal("heavy.truck.international.ICE.gas", worksheet.lever_graphs_b2035); end
  def test_lever_graphs_j2035; assert_in_epsilon(31.970000000000002, worksheet.lever_graphs_j2035, 0.002); end
  def test_lever_graphs_b2036; assert_equal("heavy.truck.international.PH", worksheet.lever_graphs_b2036); end
  def test_lever_graphs_j2036; assert_in_epsilon(28.57, worksheet.lever_graphs_j2036, 0.002); end
  def test_lever_graphs_b2037; assert_equal("heavy.truck.international.EV", worksheet.lever_graphs_b2037); end
  def test_lever_graphs_j2037; assert_in_epsilon(12.37, worksheet.lever_graphs_j2037, 0.002); end
  def test_lever_graphs_b2038; assert_equal("heavy.truck.international.H2", worksheet.lever_graphs_b2038); end
  def test_lever_graphs_j2038; assert_in_epsilon(26.35, worksheet.lever_graphs_j2038, 0.002); end
  def test_lever_graphs_b2039; assert_equal("train.freight.international.fuel", worksheet.lever_graphs_b2039); end
  def test_lever_graphs_j2039; assert_in_epsilon(13847.986298180851, worksheet.lever_graphs_j2039, 0.002); end
  def test_lever_graphs_b2040; assert_equal("train.freight.international.elec", worksheet.lever_graphs_b2040); end
  def test_lever_graphs_j2040; assert_in_epsilon(13847.986298180851, worksheet.lever_graphs_j2040, 0.002); end
  def test_lever_graphs_b2041; assert_equal("ship.freight.international.fuel", worksheet.lever_graphs_b2041); end
  def test_lever_graphs_j2041; assert_in_epsilon(18490.838431607306, worksheet.lever_graphs_j2041, 0.002); end
  def test_lever_graphs_b2042; assert_equal("ship.freight.international.H2", worksheet.lever_graphs_b2042); end
  def test_lever_graphs_j2042; assert_in_epsilon(18490.838431607306, worksheet.lever_graphs_j2042, 0.002); end
  def test_lever_graphs_b2043; assert_equal("plane.freight.international.fuel", worksheet.lever_graphs_b2043); end
  def test_lever_graphs_j2043; assert_in_epsilon(1200.0000000000002, worksheet.lever_graphs_j2043, 0.002); end
  def test_lever_graphs_b2044; assert_equal("plane.freight.international.H2", worksheet.lever_graphs_b2044); end
  def test_lever_graphs_j2044; assert_in_epsilon(1200.0000000000002, worksheet.lever_graphs_j2044, 0.002); end
  def test_outputs_energy_d62; assert_equal("Transport", worksheet.outputs_energy_d62); end
  def test_outputs_energy_f62; assert_equal("Excludes pipeline transport", worksheet.outputs_energy_f62); end
  def test_outputs_energy_h62; assert_in_epsilon(45.51369989, worksheet.outputs_energy_h62, 0.002); end
  def test_outputs_energy_i62; assert_in_epsilon(51.52193813, worksheet.outputs_energy_i62, 0.002); end
  def test_outputs_energy_j62; assert_in_epsilon(54.43186451, worksheet.outputs_energy_j62, 0.002); end
  def test_outputs_energy_k62; assert_in_epsilon(63.75351718, worksheet.outputs_energy_k62, 0.002); end
  def test_outputs_energy_l62; assert_in_epsilon(69.78995546, worksheet.outputs_energy_l62, 0.002); end
  def test_outputs_energy_m62; assert_in_epsilon(79.59210571, worksheet.outputs_energy_m62, 0.002); end
  def test_outputs_energy_n62; assert_in_epsilon(89.33971209, worksheet.outputs_energy_n62, 0.002); end
  def test_outputs_energy_o62; assert_in_epsilon(98.25619647, worksheet.outputs_energy_o62, 0.002); end
  def test_outputs_energy_p62; assert_in_epsilon(99.72109669, worksheet.outputs_energy_p62, 0.002); end
  def test_outputs_energy_r62; assert_in_epsilon(99.3274387530582, worksheet.outputs_energy_r62, 0.002); end
  def test_outputs_energy_s62; assert_in_epsilon(107.53493034598348, worksheet.outputs_energy_s62, 0.002); end
  def test_outputs_energy_t62; assert_in_epsilon(116.61839469377932, worksheet.outputs_energy_t62, 0.002); end
  def test_outputs_energy_u62; assert_in_epsilon(125.88339958607942, worksheet.outputs_energy_u62, 0.002); end
  def test_outputs_energy_v62; assert_in_epsilon(135.35444889765694, worksheet.outputs_energy_v62, 0.002); end
  def test_outputs_energy_w62; assert_in_epsilon(145.07539048187567, worksheet.outputs_energy_w62, 0.002); end
  def test_outputs_energy_x62; assert_in_epsilon(155.07730787968052, worksheet.outputs_energy_x62, 0.002); end
  def test_outputs_energy_y62; assert_in_epsilon(165.3876076375226, worksheet.outputs_energy_y62, 0.002); end
  def test_outputs_energy_z62; assert_in_epsilon(176.0174047499795, worksheet.outputs_energy_z62, 0.002); end
  def test_outputs_energy_d64; assert_equal("Residential, public and commercial", worksheet.outputs_energy_d64); end
  def test_outputs_energy_h64; assert_in_epsilon(64.751263, worksheet.outputs_energy_h64, 0.002); end
  def test_outputs_energy_i64; assert_in_epsilon(71.065102, worksheet.outputs_energy_i64, 0.002); end
  def test_outputs_energy_j64; assert_in_epsilon(78.65053599999999, worksheet.outputs_energy_j64, 0.002); end
  def test_outputs_energy_k64; assert_in_epsilon(83.372944, worksheet.outputs_energy_k64, 0.002); end
  def test_outputs_energy_l64; assert_in_epsilon(93.688429, worksheet.outputs_energy_l64, 0.002); end
  def test_outputs_energy_m64; assert_in_epsilon(99.817678, worksheet.outputs_energy_m64, 0.002); end
  def test_outputs_energy_n64; assert_in_epsilon(108.462211, worksheet.outputs_energy_n64, 0.002); end
  def test_outputs_energy_o64; assert_in_epsilon(116.897329, worksheet.outputs_energy_o64, 0.002); end
  def test_outputs_energy_p64; assert_in_epsilon(116.729656, worksheet.outputs_energy_p64, 0.002); end
  def test_outputs_energy_r64; assert_in_epsilon(118.17437613923587, worksheet.outputs_energy_r64, 0.002); end
  def test_outputs_energy_s64; assert_in_epsilon(126.69246209154309, worksheet.outputs_energy_s64, 0.002); end
  def test_outputs_energy_t64; assert_in_epsilon(136.32565142864763, worksheet.outputs_energy_t64, 0.002); end
  def test_outputs_energy_u64; assert_in_epsilon(145.38068657352767, worksheet.outputs_energy_u64, 0.002); end
  def test_outputs_energy_v64; assert_in_epsilon(153.7900758626273, worksheet.outputs_energy_v64, 0.002); end
  def test_outputs_energy_w64; assert_in_epsilon(161.56546141205854, worksheet.outputs_energy_w64, 0.002); end
  def test_outputs_energy_x64; assert_in_epsilon(168.623063354162, worksheet.outputs_energy_x64, 0.002); end
  def test_outputs_energy_y64; assert_in_epsilon(175.01064718955422, worksheet.outputs_energy_y64, 0.002); end
  def test_outputs_energy_z64; assert_in_epsilon(180.5645845255009, worksheet.outputs_energy_z64, 0.002); end
  def test_outputs_energy_d66; assert_equal("Manufacturing", worksheet.outputs_energy_d66); end
  def test_outputs_energy_h66; assert_in_epsilon(77.74494084, worksheet.outputs_energy_h66, 0.002); end
  def test_outputs_energy_i66; assert_in_epsilon(90.57849988, worksheet.outputs_energy_i66, 0.002); end
  def test_outputs_energy_j66; assert_in_epsilon(89.51563572, worksheet.outputs_energy_j66, 0.002); end
  def test_outputs_energy_k66; assert_in_epsilon(96.13700115, worksheet.outputs_energy_k66, 0.002); end
  def test_outputs_energy_l66; assert_in_epsilon(97.93670919, worksheet.outputs_energy_l66, 0.002); end
  def test_outputs_energy_m66; assert_in_epsilon(105.12064196, worksheet.outputs_energy_m66, 0.002); end
  def test_outputs_energy_n66; assert_in_epsilon(120.32151098, worksheet.outputs_energy_n66, 0.002); end
  def test_outputs_energy_o66; assert_in_epsilon(137.98756298, worksheet.outputs_energy_o66, 0.002); end
  def test_outputs_energy_p66; assert_in_epsilon(143.27425753, worksheet.outputs_energy_p66, 0.002); end
  def test_outputs_energy_r66; assert_in_epsilon(141.15236433162164, worksheet.outputs_energy_r66, 0.002); end
  def test_outputs_energy_s66; assert_in_epsilon(159.73403345114036, worksheet.outputs_energy_s66, 0.002); end
  def test_outputs_energy_t66; assert_in_epsilon(173.61823453286016, worksheet.outputs_energy_t66, 0.002); end
  def test_outputs_energy_u66; assert_in_epsilon(186.32815819727512, worksheet.outputs_energy_u66, 0.002); end
  def test_outputs_energy_v66; assert_in_epsilon(199.57575242012717, worksheet.outputs_energy_v66, 0.002); end
  def test_outputs_energy_w66; assert_in_epsilon(212.47347266615, worksheet.outputs_energy_w66, 0.002); end
  def test_outputs_energy_x66; assert_in_epsilon(226.06964835935764, worksheet.outputs_energy_x66, 0.002); end
  def test_outputs_energy_y66; assert_in_epsilon(240.70431832347447, worksheet.outputs_energy_y66, 0.002); end
  def test_outputs_energy_z66; assert_in_epsilon(252.3798969378675, worksheet.outputs_energy_z66, 0.002); end
  def test_outputs_energy_d68; assert_equal("Other end uses", worksheet.outputs_energy_d68); end
  def test_outputs_energy_h68; assert_in_epsilon(1.3401449815913473, worksheet.outputs_energy_h68, 0.002); end
  def test_outputs_energy_i68; assert_in_epsilon(2.415932221913329, worksheet.outputs_energy_i68, 0.002); end
  def test_outputs_energy_j68; assert_in_epsilon(3.968346336620449, worksheet.outputs_energy_j68, 0.002); end
  def test_outputs_energy_k68; assert_in_epsilon(5.889644576135696, worksheet.outputs_energy_k68, 0.002); end
  def test_outputs_energy_l68; assert_in_epsilon(8.246034652855554, worksheet.outputs_energy_l68, 0.002); end
  def test_outputs_energy_m68; assert_in_epsilon(10.274019947456994, worksheet.outputs_energy_m68, 0.002); end
  def test_outputs_energy_n68; assert_in_epsilon(12.014733644713644, worksheet.outputs_energy_n68, 0.002); end
  def test_outputs_energy_o68; assert_in_epsilon(12.93054707578338, worksheet.outputs_energy_o68, 0.002); end
  def test_outputs_energy_p68; assert_in_epsilon(12.912, worksheet.outputs_energy_p68, 0.002); end
  def test_outputs_energy_r68; assert_in_epsilon(12.417000000000002, worksheet.outputs_energy_r68, 0.002); end
  def test_outputs_energy_s68; assert_in_epsilon(12.458306194403406, worksheet.outputs_energy_s68, 0.002); end
  def test_outputs_energy_t68; assert_in_epsilon(12.740216156514965, worksheet.outputs_energy_t68, 0.002); end
  def test_outputs_energy_u68; assert_in_epsilon(12.99784966973438, worksheet.outputs_energy_u68, 0.002); end
  def test_outputs_energy_v68; assert_in_epsilon(13.304499377331616, worksheet.outputs_energy_v68, 0.002); end
  def test_outputs_energy_w68; assert_in_epsilon(13.713116649183933, worksheet.outputs_energy_w68, 0.002); end
  def test_outputs_energy_x68; assert_in_epsilon(14.084524754450452, worksheet.outputs_energy_x68, 0.002); end
  def test_outputs_energy_y68; assert_in_epsilon(14.272425924708122, worksheet.outputs_energy_y68, 0.002); end
  def test_outputs_energy_z68; assert_in_epsilon(14.34080587870394, worksheet.outputs_energy_z68, 0.002); end
  def test_outputs_energy_d70; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_d70); end
  def test_outputs_energy_h70; assert_in_delta(0.0, (worksheet.outputs_energy_h70||0), 0.002); end
  def test_outputs_energy_i70; assert_in_delta(0.0, (worksheet.outputs_energy_i70||0), 0.002); end
  def test_outputs_energy_j70; assert_in_delta(0.0, (worksheet.outputs_energy_j70||0), 0.002); end
  def test_outputs_energy_k70; assert_in_delta(0.0, (worksheet.outputs_energy_k70||0), 0.002); end
  def test_outputs_energy_l70; assert_in_delta(0.0, (worksheet.outputs_energy_l70||0), 0.002); end
  def test_outputs_energy_m70; assert_in_delta(0.0, (worksheet.outputs_energy_m70||0), 0.002); end
  def test_outputs_energy_n70; assert_in_delta(0.0, (worksheet.outputs_energy_n70||0), 0.002); end
  def test_outputs_energy_o70; assert_in_delta(0.0, (worksheet.outputs_energy_o70||0), 0.002); end
  def test_outputs_energy_p70; assert_in_delta(0.0, (worksheet.outputs_energy_p70||0), 0.002); end
  def test_outputs_energy_r70; assert_in_delta(0.0, (worksheet.outputs_energy_r70||0), 0.002); end
  def test_outputs_energy_s70; assert_in_delta(0.0, (worksheet.outputs_energy_s70||0), 0.002); end
  def test_outputs_energy_t70; assert_in_delta(0.0, (worksheet.outputs_energy_t70||0), 0.002); end
  def test_outputs_energy_u70; assert_in_delta(0.0, (worksheet.outputs_energy_u70||0), 0.002); end
  def test_outputs_energy_v70; assert_in_delta(0.0, (worksheet.outputs_energy_v70||0), 0.002); end
  def test_outputs_energy_w70; assert_in_delta(0.0, (worksheet.outputs_energy_w70||0), 0.002); end
  def test_outputs_energy_x70; assert_in_delta(0.0, (worksheet.outputs_energy_x70||0), 0.002); end
  def test_outputs_energy_y70; assert_in_delta(0.0, (worksheet.outputs_energy_y70||0), 0.002); end
  def test_outputs_energy_z70; assert_in_delta(0.0, (worksheet.outputs_energy_z70||0), 0.002); end
  def test_outputs_energy_d110; assert_equal("Description", worksheet.outputs_energy_d110); end
  def test_outputs_energy_f110; assert_equal("Notes", worksheet.outputs_energy_f110); end
  def test_outputs_energy_h110; assert_equal("1975", worksheet.outputs_energy_h110); end
  def test_outputs_energy_i110; assert_equal("1980", worksheet.outputs_energy_i110); end
  def test_outputs_energy_j110; assert_equal("1985", worksheet.outputs_energy_j110); end
  def test_outputs_energy_k110; assert_equal("1990", worksheet.outputs_energy_k110); end
  def test_outputs_energy_l110; assert_equal("1995", worksheet.outputs_energy_l110); end
  def test_outputs_energy_m110; assert_equal("2000", worksheet.outputs_energy_m110); end
  def test_outputs_energy_n110; assert_equal("2005", worksheet.outputs_energy_n110); end
  def test_outputs_energy_o110; assert_in_epsilon(2010.0, worksheet.outputs_energy_o110, 0.002); end
  def test_outputs_energy_p110; assert_in_epsilon(2011.0, worksheet.outputs_energy_p110, 0.002); end
  def test_outputs_energy_r110; assert_in_epsilon(2011.0, worksheet.outputs_energy_r110, 0.002); end
  def test_outputs_energy_s110; assert_equal("2015", worksheet.outputs_energy_s110); end
  def test_outputs_energy_t110; assert_equal("2020", worksheet.outputs_energy_t110); end
  def test_outputs_energy_u110; assert_equal("2025", worksheet.outputs_energy_u110); end
  def test_outputs_energy_v110; assert_equal("2030", worksheet.outputs_energy_v110); end
  def test_outputs_energy_w110; assert_equal("2035", worksheet.outputs_energy_w110); end
  def test_outputs_energy_x110; assert_equal("2040", worksheet.outputs_energy_x110); end
  def test_outputs_energy_y110; assert_equal("2045", worksheet.outputs_energy_y110); end
  def test_outputs_energy_z110; assert_equal("2050", worksheet.outputs_energy_z110); end
  def test_outputs_energy_d111; assert_equal("Global nuclear fission", worksheet.outputs_energy_d111); end
  def test_outputs_energy_h111; assert_in_epsilon(4.19362582, worksheet.outputs_energy_h111, 0.002); end
  def test_outputs_energy_i111; assert_in_epsilon(7.8046283700000005, worksheet.outputs_energy_i111, 0.002); end
  def test_outputs_energy_j111; assert_in_epsilon(16.30822419, worksheet.outputs_energy_j111, 0.002); end
  def test_outputs_energy_k111; assert_in_epsilon(22.00642022, worksheet.outputs_energy_k111, 0.002); end
  def test_outputs_energy_l111; assert_in_epsilon(25.464435710000004, worksheet.outputs_energy_l111, 0.002); end
  def test_outputs_energy_m111; assert_in_epsilon(28.28553115, worksheet.outputs_energy_m111, 0.002); end
  def test_outputs_energy_n111; assert_in_epsilon(30.221805240000002, worksheet.outputs_energy_n111, 0.002); end
  def test_outputs_energy_o111; assert_in_epsilon(30.10136047, worksheet.outputs_energy_o111, 0.002); end
  def test_outputs_energy_p111; assert_in_epsilon(28.219279020000002, worksheet.outputs_energy_p111, 0.002); end
  def test_outputs_energy_r111; assert_in_epsilon(28.364194134679412, worksheet.outputs_energy_r111, 0.002); end
  def test_outputs_energy_s111; assert_in_epsilon(30.079108475420238, worksheet.outputs_energy_s111, 0.002); end
  def test_outputs_energy_t111; assert_in_epsilon(30.484933913827224, worksheet.outputs_energy_t111, 0.002); end
  def test_outputs_energy_u111; assert_in_epsilon(31.422413793579608, worksheet.outputs_energy_u111, 0.002); end
  def test_outputs_energy_v111; assert_in_epsilon(31.66327271788277, worksheet.outputs_energy_v111, 0.002); end
  def test_outputs_energy_w111; assert_in_epsilon(32.685107495888026, worksheet.outputs_energy_w111, 0.002); end
  def test_outputs_energy_x111; assert_in_epsilon(33.09253981576231, worksheet.outputs_energy_x111, 0.002); end
  def test_outputs_energy_y111; assert_in_epsilon(33.90231671085916, worksheet.outputs_energy_y111, 0.002); end
  def test_outputs_energy_z111; assert_in_epsilon(34.751120746493534, worksheet.outputs_energy_z111, 0.002); end
  def test_outputs_energy_d113; assert_equal("Global solar, wind, wave and tidal", worksheet.outputs_energy_d113); end
  def test_outputs_energy_h113; assert_in_delta(0.0020015000000000002, worksheet.outputs_energy_h113, 0.002); end
  def test_outputs_energy_i113; assert_in_delta(0.00299071, worksheet.outputs_energy_i113, 0.002); end
  def test_outputs_energy_j113; assert_in_delta(0.01511665, worksheet.outputs_energy_j113, 0.002); end
  def test_outputs_energy_k113; assert_in_delta(0.09888171, worksheet.outputs_energy_k113, 0.002); end
  def test_outputs_energy_l113; assert_in_delta(0.13671401, worksheet.outputs_energy_l113, 0.002); end
  def test_outputs_energy_m113; assert_in_delta(0.33011757999999997, worksheet.outputs_energy_m113, 0.002); end
  def test_outputs_energy_n113; assert_in_delta(0.6894200899999999, worksheet.outputs_energy_n113, 0.002); end
  def test_outputs_energy_o113; assert_in_epsilon(1.98106908, worksheet.outputs_energy_o113, 0.002); end
  def test_outputs_energy_p113; assert_in_epsilon(2.55947734, worksheet.outputs_energy_p113, 0.002); end
  def test_outputs_energy_r113; assert_in_epsilon(1.837256560951293, worksheet.outputs_energy_r113, 0.002); end
  def test_outputs_energy_s113; assert_in_epsilon(3.5415327183977108, worksheet.outputs_energy_s113, 0.002); end
  def test_outputs_energy_t113; assert_in_epsilon(5.051342619963565, worksheet.outputs_energy_t113, 0.002); end
  def test_outputs_energy_u113; assert_in_epsilon(5.469436203559699, worksheet.outputs_energy_u113, 0.002); end
  def test_outputs_energy_v113; assert_in_epsilon(6.29400523419845, worksheet.outputs_energy_v113, 0.002); end
  def test_outputs_energy_w113; assert_in_epsilon(7.049529950826868, worksheet.outputs_energy_w113, 0.002); end
  def test_outputs_energy_x113; assert_in_epsilon(8.461172096035288, worksheet.outputs_energy_x113, 0.002); end
  def test_outputs_energy_y113; assert_in_epsilon(11.848233177636045, worksheet.outputs_energy_y113, 0.002); end
  def test_outputs_energy_z113; assert_in_epsilon(14.957544015672099, worksheet.outputs_energy_z113, 0.002); end
  def test_outputs_energy_d115; assert_equal("Global geothermal", worksheet.outputs_energy_d115); end
  def test_outputs_energy_h115; assert_in_delta(0.30633308, worksheet.outputs_energy_h115, 0.002); end
  def test_outputs_energy_i115; assert_in_delta(0.51899125, worksheet.outputs_energy_i115, 0.002); end
  def test_outputs_energy_j115; assert_in_delta(0.87833525, worksheet.outputs_energy_j115, 0.002); end
  def test_outputs_energy_k115; assert_in_epsilon(1.42030705, worksheet.outputs_energy_k115, 0.002); end
  def test_outputs_energy_l115; assert_in_epsilon(1.64006674, worksheet.outputs_energy_l115, 0.002); end
  def test_outputs_energy_m115; assert_in_epsilon(2.1821505699999997, worksheet.outputs_energy_m115, 0.002); end
  def test_outputs_energy_n115; assert_in_epsilon(2.25915872, worksheet.outputs_energy_n115, 0.002); end
  def test_outputs_energy_o115; assert_in_epsilon(2.70416419, worksheet.outputs_energy_o115, 0.002); end
  def test_outputs_energy_p115; assert_in_epsilon(2.75792299, worksheet.outputs_energy_p115, 0.002); end
  def test_outputs_energy_r115; assert_in_epsilon(2.621983233971675, worksheet.outputs_energy_r115, 0.002); end
  def test_outputs_energy_s115; assert_in_epsilon(3.296186485474704, worksheet.outputs_energy_s115, 0.002); end
  def test_outputs_energy_t115; assert_in_epsilon(4.063535962914799, worksheet.outputs_energy_t115, 0.002); end
  def test_outputs_energy_u115; assert_in_epsilon(4.5991059606314035, worksheet.outputs_energy_u115, 0.002); end
  def test_outputs_energy_v115; assert_in_epsilon(4.90474958494987, worksheet.outputs_energy_v115, 0.002); end
  def test_outputs_energy_w115; assert_in_epsilon(7.564037637508921, worksheet.outputs_energy_w115, 0.002); end
  def test_outputs_energy_x115; assert_in_epsilon(9.396102366060536, worksheet.outputs_energy_x115, 0.002); end
  def test_outputs_energy_y115; assert_in_epsilon(12.344832850692296, worksheet.outputs_energy_y115, 0.002); end
  def test_outputs_energy_z115; assert_in_epsilon(15.457753450269726, worksheet.outputs_energy_z115, 0.002); end
  def test_outputs_energy_d117; assert_equal("Global hydro", worksheet.outputs_energy_d117); end
  def test_outputs_energy_h117; assert_in_epsilon(5.19828432, worksheet.outputs_energy_h117, 0.002); end
  def test_outputs_energy_i117; assert_in_epsilon(6.1818085300000005, worksheet.outputs_energy_i117, 0.002); end
  def test_outputs_energy_j117; assert_in_epsilon(7.10472662, worksheet.outputs_energy_j117, 0.002); end
  def test_outputs_energy_k117; assert_in_epsilon(7.721542830000001, worksheet.outputs_energy_k117, 0.002); end
  def test_outputs_energy_l117; assert_in_epsilon(8.93036678, worksheet.outputs_energy_l117, 0.002); end
  def test_outputs_energy_m117; assert_in_epsilon(9.43535406, worksheet.outputs_energy_m117, 0.002); end
  def test_outputs_energy_n117; assert_in_epsilon(10.548209940000001, worksheet.outputs_energy_n117, 0.002); end
  def test_outputs_energy_o117; assert_in_epsilon(12.39218819, worksheet.outputs_energy_o117, 0.002); end
  def test_outputs_energy_p117; assert_in_epsilon(12.56761896, worksheet.outputs_energy_p117, 0.002); end
  def test_outputs_energy_r117; assert_in_epsilon(13.179648636705306, worksheet.outputs_energy_r117, 0.002); end
  def test_outputs_energy_s117; assert_in_epsilon(13.676942595574804, worksheet.outputs_energy_s117, 0.002); end
  def test_outputs_energy_t117; assert_in_epsilon(14.712292313221141, worksheet.outputs_energy_t117, 0.002); end
  def test_outputs_energy_u117; assert_in_epsilon(15.829165630682146, worksheet.outputs_energy_u117, 0.002); end
  def test_outputs_energy_v117; assert_in_epsilon(17.03435618127571, worksheet.outputs_energy_v117, 0.002); end
  def test_outputs_energy_w117; assert_in_epsilon(18.319711605020377, worksheet.outputs_energy_w117, 0.002); end
  def test_outputs_energy_x117; assert_in_epsilon(19.689308081906866, worksheet.outputs_energy_x117, 0.002); end
  def test_outputs_energy_y117; assert_in_epsilon(21.071133098765557, worksheet.outputs_energy_y117, 0.002); end
  def test_outputs_energy_z117; assert_in_epsilon(22.550786435401854, worksheet.outputs_energy_z117, 0.002); end
  def test_outputs_energy_d119; assert_equal("Global bioenergy and waste", worksheet.outputs_energy_d119); end
  def test_outputs_energy_f119; assert_equal("Includes non-renewable waste", worksheet.outputs_energy_f119); end
  def test_outputs_energy_h119; assert_in_epsilon(27.98767366, worksheet.outputs_energy_h119, 0.002); end
  def test_outputs_energy_i119; assert_in_epsilon(31.29700324, worksheet.outputs_energy_i119, 0.002); end
  def test_outputs_energy_j119; assert_in_epsilon(34.98284341, worksheet.outputs_energy_j119, 0.002); end
  def test_outputs_energy_k119; assert_in_epsilon(37.95396458, worksheet.outputs_energy_k119, 0.002); end
  def test_outputs_energy_l119; assert_in_epsilon(40.54645287, worksheet.outputs_energy_l119, 0.002); end
  def test_outputs_energy_m119; assert_in_epsilon(43.24484074, worksheet.outputs_energy_m119, 0.002); end
  def test_outputs_energy_n119; assert_in_epsilon(47.20029634, worksheet.outputs_energy_n119, 0.002); end
  def test_outputs_energy_o119; assert_in_epsilon(54.22172151, worksheet.outputs_energy_o119, 0.002); end
  def test_outputs_energy_p119; assert_in_epsilon(54.93713229, worksheet.outputs_energy_p119, 0.002); end
  def test_outputs_energy_r119; assert_in_epsilon(58.71482111421111, worksheet.outputs_energy_r119, 0.002); end
  def test_outputs_energy_s119; assert_in_epsilon(59.3379147835843, worksheet.outputs_energy_s119, 0.002); end
  def test_outputs_energy_t119; assert_in_epsilon(60.03001296686542, worksheet.outputs_energy_t119, 0.002); end
  def test_outputs_energy_u119; assert_in_epsilon(60.507405915361666, worksheet.outputs_energy_u119, 0.002); end
  def test_outputs_energy_v119; assert_in_epsilon(60.700605221619256, worksheet.outputs_energy_v119, 0.002); end
  def test_outputs_energy_w119; assert_in_epsilon(60.94955958153394, worksheet.outputs_energy_w119, 0.002); end
  def test_outputs_energy_x119; assert_in_epsilon(61.14782606028669, worksheet.outputs_energy_x119, 0.002); end
  def test_outputs_energy_y119; assert_in_epsilon(61.967539541250176, worksheet.outputs_energy_y119, 0.002); end
  def test_outputs_energy_z119; assert_in_epsilon(62.849609963735034, worksheet.outputs_energy_z119, 0.002); end
  def test_outputs_energy_d121; assert_equal("Global heat", worksheet.outputs_energy_d121); end
  def test_outputs_energy_h121; assert_in_delta(0.0, (worksheet.outputs_energy_h121||0), 0.002); end
  def test_outputs_energy_i121; assert_in_delta(0.0, (worksheet.outputs_energy_i121||0), 0.002); end
  def test_outputs_energy_j121; assert_in_delta(0.0, (worksheet.outputs_energy_j121||0), 0.002); end
  def test_outputs_energy_k121; assert_in_delta(0.00596866, worksheet.outputs_energy_k121, 0.002); end
  def test_outputs_energy_l121; assert_in_delta(0.01832307, worksheet.outputs_energy_l121, 0.002); end
  def test_outputs_energy_m121; assert_in_delta(0.0302848, worksheet.outputs_energy_m121, 0.002); end
  def test_outputs_energy_n121; assert_in_delta(0.03805726, worksheet.outputs_energy_n121, 0.002); end
  def test_outputs_energy_o121; assert_in_delta(0.04253198, worksheet.outputs_energy_o121, 0.002); end
  def test_outputs_energy_p121; assert_in_delta(0.04491708, worksheet.outputs_energy_p121, 0.002); end
  def test_outputs_energy_r121; assert_in_epsilon(6.008758564052467, worksheet.outputs_energy_r121, 0.002); end
  def test_outputs_energy_s121; assert_in_epsilon(6.643533902890745, worksheet.outputs_energy_s121, 0.002); end
  def test_outputs_energy_t121; assert_in_epsilon(7.402973664633505, worksheet.outputs_energy_t121, 0.002); end
  def test_outputs_energy_u121; assert_in_epsilon(8.14464813631486, worksheet.outputs_energy_u121, 0.002); end
  def test_outputs_energy_v121; assert_in_epsilon(8.856211604468617, worksheet.outputs_energy_v121, 0.002); end
  def test_outputs_energy_w121; assert_in_epsilon(9.508329155209477, worksheet.outputs_energy_w121, 0.002); end
  def test_outputs_energy_x121; assert_in_epsilon(10.106235518611253, worksheet.outputs_energy_x121, 0.002); end
  def test_outputs_energy_y121; assert_in_epsilon(10.616916176452603, worksheet.outputs_energy_y121, 0.002); end
  def test_outputs_energy_z121; assert_in_epsilon(11.049633726544767, worksheet.outputs_energy_z121, 0.002); end
  def test_outputs_energy_d123; assert_equal("Global coal and peat", worksheet.outputs_energy_d123); end
  def test_outputs_energy_h123; assert_in_epsilon(64.46762364, worksheet.outputs_energy_h123, 0.002); end
  def test_outputs_energy_i123; assert_in_epsilon(74.84613603, worksheet.outputs_energy_i123, 0.002); end
  def test_outputs_energy_j123; assert_in_epsilon(84.35058561, worksheet.outputs_energy_j123, 0.002); end
  def test_outputs_energy_k123; assert_in_epsilon(93.38481894, worksheet.outputs_energy_k123, 0.002); end
  def test_outputs_energy_l123; assert_in_epsilon(93.03324736, worksheet.outputs_energy_l123, 0.002); end
  def test_outputs_energy_m123; assert_in_epsilon(98.72034811, worksheet.outputs_energy_m123, 0.002); end
  def test_outputs_energy_n123; assert_in_epsilon(124.50467193, worksheet.outputs_energy_n123, 0.002); end
  def test_outputs_energy_o123; assert_in_epsilon(150.53606094, worksheet.outputs_energy_o123, 0.002); end
  def test_outputs_energy_p123; assert_in_epsilon(158.09611592, worksheet.outputs_energy_p123, 0.002); end
  def test_outputs_energy_r123; assert_in_epsilon(173.4315697670127, worksheet.outputs_energy_r123, 0.002); end
  def test_outputs_energy_s123; assert_in_epsilon(198.27960736995584, worksheet.outputs_energy_s123, 0.002); end
  def test_outputs_energy_t123; assert_in_epsilon(212.89275611605416, worksheet.outputs_energy_t123, 0.002); end
  def test_outputs_energy_u123; assert_in_epsilon(238.38653999008045, worksheet.outputs_energy_u123, 0.002); end
  def test_outputs_energy_v123; assert_in_epsilon(251.08708325062074, worksheet.outputs_energy_v123, 0.002); end
  def test_outputs_energy_w123; assert_in_epsilon(269.5193181734887, worksheet.outputs_energy_w123, 0.002); end
  def test_outputs_energy_x123; assert_in_epsilon(283.60897263379763, worksheet.outputs_energy_x123, 0.002); end
  def test_outputs_energy_y123; assert_in_epsilon(288.4643812881694, worksheet.outputs_energy_y123, 0.002); end
  def test_outputs_energy_z123; assert_in_epsilon(294.040348202698, worksheet.outputs_energy_z123, 0.002); end
  def test_outputs_energy_d125; assert_equal("Global oil ", worksheet.outputs_energy_d125); end
  def test_outputs_energy_h125; assert_in_epsilon(116.5233284, worksheet.outputs_energy_h125, 0.002); end
  def test_outputs_energy_i125; assert_in_epsilon(131.85643926000003, worksheet.outputs_energy_i125, 0.002); end
  def test_outputs_energy_j125; assert_in_epsilon(122.84000791, worksheet.outputs_energy_j125, 0.002); end
  def test_outputs_energy_k125; assert_in_epsilon(137.87919456, worksheet.outputs_energy_k125, 0.002); end
  def test_outputs_energy_l125; assert_in_epsilon(143.51359745, worksheet.outputs_energy_l125, 0.002); end
  def test_outputs_energy_m125; assert_in_epsilon(156.74377747, worksheet.outputs_energy_m125, 0.002); end
  def test_outputs_energy_n125; assert_in_epsilon(171.78327319000002, worksheet.outputs_energy_n125, 0.002); end
  def test_outputs_energy_o125; assert_in_epsilon(175.91941010000002, worksheet.outputs_energy_o125, 0.002); end
  def test_outputs_energy_p125; assert_in_epsilon(176.66494085000002, worksheet.outputs_energy_p125, 0.002); end
  def test_outputs_energy_r125; assert_in_epsilon(180.68959258320615, worksheet.outputs_energy_r125, 0.002); end
  def test_outputs_energy_s125; assert_in_epsilon(199.9041898051109, worksheet.outputs_energy_s125, 0.002); end
  def test_outputs_energy_t125; assert_in_epsilon(230.56127893785614, worksheet.outputs_energy_t125, 0.002); end
  def test_outputs_energy_u125; assert_in_epsilon(256.0579441106575, worksheet.outputs_energy_u125, 0.002); end
  def test_outputs_energy_v125; assert_in_epsilon(281.7597199764081, worksheet.outputs_energy_v125, 0.002); end
  def test_outputs_energy_w125; assert_in_epsilon(304.4152935802188, worksheet.outputs_energy_w125, 0.002); end
  def test_outputs_energy_x125; assert_in_epsilon(333.6274994227454, worksheet.outputs_energy_x125, 0.002); end
  def test_outputs_energy_y125; assert_in_epsilon(366.2056929332094, worksheet.outputs_energy_y125, 0.002); end
  def test_outputs_energy_z125; assert_in_epsilon(394.01500867230516, worksheet.outputs_energy_z125, 0.002); end
  def test_outputs_energy_d127; assert_equal("Global gas ", worksheet.outputs_energy_d127); end
  def test_outputs_energy_h127; assert_in_epsilon(41.88575614, worksheet.outputs_energy_h127, 0.002); end
  def test_outputs_energy_i127; assert_in_epsilon(51.657453589999996, worksheet.outputs_energy_i127, 0.002); end
  def test_outputs_energy_j127; assert_in_epsilon(59.13014466, worksheet.outputs_energy_j127, 0.002); end
  def test_outputs_energy_k127; assert_in_epsilon(69.82757047999999, worksheet.outputs_energy_k127, 0.002); end
  def test_outputs_energy_l127; assert_in_epsilon(75.88166314, worksheet.outputs_energy_l127, 0.002); end
  def test_outputs_energy_m127; assert_in_epsilon(86.75456712, worksheet.outputs_energy_m127, 0.002); end
  def test_outputs_energy_n127; assert_in_epsilon(99.02950624, worksheet.outputs_energy_n127, 0.002); end
  def test_outputs_energy_o127; assert_in_epsilon(114.72290836, worksheet.outputs_energy_o127, 0.002); end
  def test_outputs_energy_p127; assert_in_epsilon(116.68415746000001, worksheet.outputs_energy_p127, 0.002); end
  def test_outputs_energy_r127; assert_in_epsilon(120.54639824929173, worksheet.outputs_energy_r127, 0.002); end
  def test_outputs_energy_s127; assert_in_epsilon(133.42935143488964, worksheet.outputs_energy_s127, 0.002); end
  def test_outputs_energy_t127; assert_in_epsilon(145.62507156711217, worksheet.outputs_energy_t127, 0.002); end
  def test_outputs_energy_u127; assert_in_epsilon(157.08212889017707, worksheet.outputs_energy_u127, 0.002); end
  def test_outputs_energy_v127; assert_in_epsilon(170.8718288190551, worksheet.outputs_energy_v127, 0.002); end
  def test_outputs_energy_w127; assert_in_epsilon(182.609550518755, worksheet.outputs_energy_w127, 0.002); end
  def test_outputs_energy_x127; assert_in_epsilon(197.40980801785955, worksheet.outputs_energy_x127, 0.002); end
  def test_outputs_energy_y127; assert_in_epsilon(219.0955608267079, worksheet.outputs_energy_y127, 0.002); end
  def test_outputs_energy_z127; assert_in_epsilon(242.90612693682436, worksheet.outputs_energy_z127, 0.002); end
  def test_outputs_energy_r138; assert_in_epsilon(4.539903114211106, worksheet.outputs_energy_r138, 0.002); end
  def test_outputs_energy_r140; assert_in_epsilon(19.75172898823776, worksheet.outputs_energy_r140, 0.002); end
  def test_outputs_energy_r142; assert_in_epsilon(11.875, worksheet.outputs_energy_r142, 0.002); end
  def test_outputs_energy_r144; assert_in_epsilon(21.048271011762246, worksheet.outputs_energy_r144, 0.002); end
  def test_outputs_energy_z138; assert_in_epsilon(6.81627043969819, worksheet.outputs_energy_z138, 0.002); end
  def test_outputs_energy_z140; assert_in_epsilon(18.83514402034971, worksheet.outputs_energy_z140, 0.002); end
  def test_outputs_energy_z142; assert_in_epsilon(18.05, worksheet.outputs_energy_z142, 0.002); end
  def test_outputs_energy_z144; assert_in_epsilon(17.648277503687133, worksheet.outputs_energy_z144, 0.002); end
  def test_outputs_energy_d154; assert_equal("Losses", worksheet.outputs_energy_d154); end
  def test_outputs_energy_r154; assert_in_epsilon(3.0559854671316664, worksheet.outputs_energy_r154, 0.002); end
  def test_outputs_energy_s154; assert_in_epsilon(3.102206722386592, worksheet.outputs_energy_s154, 0.002); end
  def test_outputs_energy_t154; assert_in_epsilon(3.1338049615899086, worksheet.outputs_energy_t154, 0.002); end
  def test_outputs_energy_u154; assert_in_epsilon(3.1387440553533414, worksheet.outputs_energy_u154, 0.002); end
  def test_outputs_energy_v154; assert_in_epsilon(3.0889650582229526, worksheet.outputs_energy_v154, 0.002); end
  def test_outputs_energy_w154; assert_in_epsilon(3.054702599839632, worksheet.outputs_energy_w154, 0.002); end
  def test_outputs_energy_x154; assert_in_epsilon(2.9966482664122687, worksheet.outputs_energy_x154, 0.002); end
  def test_outputs_energy_y154; assert_in_epsilon(2.905838123130935, worksheet.outputs_energy_y154, 0.002); end
  def test_outputs_energy_z154; assert_in_epsilon(2.7865429433165403, worksheet.outputs_energy_z154, 0.002); end
  def test_outputs_energy_d155; assert_equal("Oversupply", worksheet.outputs_energy_d155); end
  def test_outputs_energy_r155; assert_in_delta(0.0, (worksheet.outputs_energy_r155||0), 0.002); end
  def test_outputs_energy_s155; assert_in_delta(0.0, (worksheet.outputs_energy_s155||0), 0.002); end
  def test_outputs_energy_t155; assert_in_delta(0.0, (worksheet.outputs_energy_t155||0), 0.002); end
  def test_outputs_energy_u155; assert_in_delta(0.0, (worksheet.outputs_energy_u155||0), 0.002); end
  def test_outputs_energy_v155; assert_in_delta(0.0, (worksheet.outputs_energy_v155||0), 0.002); end
  def test_outputs_energy_w155; assert_in_delta(0.0, (worksheet.outputs_energy_w155||0), 0.002); end
  def test_outputs_energy_x155; assert_in_delta(0.0, (worksheet.outputs_energy_x155||0), 0.002); end
  def test_outputs_energy_y155; assert_in_delta(0.0, (worksheet.outputs_energy_y155||0), 0.002); end
  def test_outputs_energy_z155; assert_in_delta(-5.684341886080802e-14, worksheet.outputs_energy_z155, 0.002); end
  def test_outputs_energy_d156; assert_equal("Transport", worksheet.outputs_energy_d156); end
  def test_outputs_energy_r156; assert_in_delta(0.76, worksheet.outputs_energy_r156, 0.002); end
  def test_outputs_energy_s156; assert_in_delta(0.7425796855766272, worksheet.outputs_energy_s156, 0.002); end
  def test_outputs_energy_t156; assert_in_delta(0.8055853711358296, worksheet.outputs_energy_t156, 0.002); end
  def test_outputs_energy_u156; assert_in_delta(0.8827763079296206, worksheet.outputs_energy_u156, 0.002); end
  def test_outputs_energy_v156; assert_in_delta(0.9620251785968399, worksheet.outputs_energy_v156, 0.002); end
  def test_outputs_energy_w156; assert_in_epsilon(1.0433319831374877, worksheet.outputs_energy_w156, 0.002); end
  def test_outputs_energy_x156; assert_in_epsilon(1.1266967215515633, worksheet.outputs_energy_x156, 0.002); end
  def test_outputs_energy_y156; assert_in_epsilon(1.2121193938390675, worksheet.outputs_energy_y156, 0.002); end
  def test_outputs_energy_z156; assert_in_epsilon(1.299600000000057, worksheet.outputs_energy_z156, 0.002); end
  def test_outputs_energy_d157; assert_equal("Electricity (unabated thermal)", worksheet.outputs_energy_d157); end
  def test_outputs_energy_r157; assert_in_epsilon(6.469152446670243, worksheet.outputs_energy_r157, 0.002); end
  def test_outputs_energy_s157; assert_in_epsilon(6.588121306224616, worksheet.outputs_energy_s157, 0.002); end
  def test_outputs_energy_t157; assert_in_epsilon(6.758933887348258, worksheet.outputs_energy_t157, 0.002); end
  def test_outputs_energy_u157; assert_in_epsilon(6.948559318499816, worksheet.outputs_energy_u157, 0.002); end
  def test_outputs_energy_v157; assert_in_epsilon(7.118646832508139, worksheet.outputs_energy_v157, 0.002); end
  def test_outputs_energy_w157; assert_in_epsilon(7.264755617822014, worksheet.outputs_energy_w157, 0.002); end
  def test_outputs_energy_x157; assert_in_epsilon(7.425105079011128, worksheet.outputs_energy_x157, 0.002); end
  def test_outputs_energy_y157; assert_in_epsilon(7.636018804941755, worksheet.outputs_energy_y157, 0.002); end
  def test_outputs_energy_z157; assert_in_epsilon(7.862031966598505, worksheet.outputs_energy_z157, 0.002); end
  def test_outputs_energy_d158; assert_equal("Electricity (carbon capture and storage)", worksheet.outputs_energy_d158); end
  def test_outputs_energy_r158; assert_in_delta(0.0, (worksheet.outputs_energy_r158||0), 0.002); end
  def test_outputs_energy_s158; assert_in_delta(0.006991531163373517, worksheet.outputs_energy_s158, 0.002); end
  def test_outputs_energy_t158; assert_in_delta(0.026131119535244156, worksheet.outputs_energy_t158, 0.002); end
  def test_outputs_energy_u158; assert_in_delta(0.02935445811687784, worksheet.outputs_energy_u158, 0.002); end
  def test_outputs_energy_v158; assert_in_delta(0.04804673912171339, worksheet.outputs_energy_v158, 0.002); end
  def test_outputs_energy_w158; assert_in_delta(0.05621520227168955, worksheet.outputs_energy_w158, 0.002); end
  def test_outputs_energy_x158; assert_in_delta(0.06798577394151495, worksheet.outputs_energy_x158, 0.002); end
  def test_outputs_energy_y158; assert_in_delta(0.08578562471480099, worksheet.outputs_energy_y158, 0.002); end
  def test_outputs_energy_z158; assert_in_delta(0.12283877844404836, worksheet.outputs_energy_z158, 0.002); end
  def test_outputs_energy_d159; assert_equal("Buildings", worksheet.outputs_energy_d159); end
  def test_outputs_energy_r159; assert_in_epsilon(39.252324770468135, worksheet.outputs_energy_r159, 0.002); end
  def test_outputs_energy_s159; assert_in_epsilon(39.577786453965324, worksheet.outputs_energy_s159, 0.002); end
  def test_outputs_energy_t159; assert_in_epsilon(39.76663021950057, worksheet.outputs_energy_t159, 0.002); end
  def test_outputs_energy_u159; assert_in_epsilon(39.746676321727, worksheet.outputs_energy_u159, 0.002); end
  def test_outputs_energy_v159; assert_in_epsilon(39.50733348014603, worksheet.outputs_energy_v159, 0.002); end
  def test_outputs_energy_w159; assert_in_epsilon(39.3834421910344, worksheet.outputs_energy_w159, 0.002); end
  def test_outputs_energy_x159; assert_in_epsilon(39.19069079490036, worksheet.outputs_energy_x159, 0.002); end
  def test_outputs_energy_y159; assert_in_epsilon(39.520922814969374, worksheet.outputs_energy_y159, 0.002); end
  def test_outputs_energy_z159; assert_in_epsilon(39.86122948549132, worksheet.outputs_energy_z159, 0.002); end
  def test_outputs_energy_d160; assert_equal("Manufacturing", worksheet.outputs_energy_d160); end
  def test_outputs_energy_r160; assert_in_epsilon(7.677440429941061, worksheet.outputs_energy_r160, 0.002); end
  def test_outputs_energy_s160; assert_in_epsilon(7.820311084267764, worksheet.outputs_energy_s160, 0.002); end
  def test_outputs_energy_t160; assert_in_epsilon(8.03900940775561, worksheet.outputs_energy_t160, 0.002); end
  def test_outputs_energy_u160; assert_in_epsilon(8.261377453735008, worksheet.outputs_energy_u160, 0.002); end
  def test_outputs_energy_v160; assert_in_epsilon(8.47566993302359, worksheet.outputs_energy_v160, 0.002); end
  def test_outputs_energy_w160; assert_in_epsilon(8.647193987428718, worksheet.outputs_energy_w160, 0.002); end
  def test_outputs_energy_x160; assert_in_epsilon(8.84078142446986, worksheet.outputs_energy_x160, 0.002); end
  def test_outputs_energy_y160; assert_in_epsilon(9.106936779654246, worksheet.outputs_energy_y160, 0.002); end
  def test_outputs_energy_z160; assert_in_epsilon(9.417448789884611, worksheet.outputs_energy_z160, 0.002); end
  def test_outputs_energy_d137; assert_equal("Bioenergy", worksheet.outputs_energy_d137); end
  def test_outputs_energy_r137; assert_in_epsilon(2011.0, worksheet.outputs_energy_r137, 0.002); end
  def test_outputs_energy_s137; assert_equal("2015", worksheet.outputs_energy_s137); end
  def test_outputs_energy_t137; assert_equal("2020", worksheet.outputs_energy_t137); end
  def test_outputs_energy_u137; assert_equal("2025", worksheet.outputs_energy_u137); end
  def test_outputs_energy_v137; assert_equal("2030", worksheet.outputs_energy_v137); end
  def test_outputs_energy_w137; assert_equal("2035", worksheet.outputs_energy_w137); end
  def test_outputs_energy_x137; assert_equal("2040", worksheet.outputs_energy_x137); end
  def test_outputs_energy_y137; assert_equal("2045", worksheet.outputs_energy_y137); end
  def test_outputs_energy_z137; assert_equal("2050", worksheet.outputs_energy_z137); end
  def test_outputs_energy_d138; assert_equal("Waste", worksheet.outputs_energy_d138); end
  def test_outputs_energy_s138; assert_in_epsilon(4.770137210154907, worksheet.outputs_energy_s138, 0.002); end
  def test_outputs_energy_t138; assert_in_epsilon(5.047772353566085, worksheet.outputs_energy_t138, 0.002); end
  def test_outputs_energy_u138; assert_in_epsilon(5.32246443278401, worksheet.outputs_energy_u138, 0.002); end
  def test_outputs_energy_v138; assert_in_epsilon(5.624201104634216, worksheet.outputs_energy_v138, 0.002); end
  def test_outputs_energy_w138; assert_in_epsilon(5.977978982402824, worksheet.outputs_energy_w138, 0.002); end
  def test_outputs_energy_x138; assert_in_epsilon(6.325287769661438, worksheet.outputs_energy_x138, 0.002); end
  def test_outputs_energy_y138; assert_in_epsilon(6.596995595536725, worksheet.outputs_energy_y138, 0.002); end
  def test_outputs_energy_d140; assert_equal("Forest residues", worksheet.outputs_energy_d140); end
  def test_outputs_energy_s140; assert_in_epsilon(19.441261993292432, worksheet.outputs_energy_s140, 0.002); end
  def test_outputs_energy_t140; assert_in_epsilon(19.317365498063104, worksheet.outputs_energy_t140, 0.002); end
  def test_outputs_energy_u140; assert_in_epsilon(19.225884667709025, worksheet.outputs_energy_u140, 0.002); end
  def test_outputs_energy_v140; assert_in_epsilon(19.04198534327535, worksheet.outputs_energy_v140, 0.002); end
  def test_outputs_energy_w140; assert_in_epsilon(18.6652325006383, worksheet.outputs_energy_w140, 0.002); end
  def test_outputs_energy_x140; assert_in_epsilon(18.39006034051878, worksheet.outputs_energy_x140, 0.002); end
  def test_outputs_energy_y140; assert_in_epsilon(18.493625804515833, worksheet.outputs_energy_y140, 0.002); end
  def test_outputs_energy_d142; assert_equal("Bioenergy crops", worksheet.outputs_energy_d142); end
  def test_outputs_energy_s142; assert_in_epsilon(12.578481012658226, worksheet.outputs_energy_s142, 0.002); end
  def test_outputs_energy_t142; assert_in_epsilon(13.433177570093456, worksheet.outputs_energy_t142, 0.002); end
  def test_outputs_energy_u142; assert_in_epsilon(14.26165644171779, worksheet.outputs_energy_u142, 0.002); end
  def test_outputs_energy_v142; assert_in_epsilon(15.065105740181261, worksheet.outputs_energy_v142, 0.002); end
  def test_outputs_energy_w142; assert_in_epsilon(15.844642857142857, worksheet.outputs_energy_w142, 0.002); end
  def test_outputs_energy_x142; assert_in_epsilon(16.601319648093842, worksheet.outputs_energy_x142, 0.002); end
  def test_outputs_energy_y142; assert_in_epsilon(17.336127167630053, worksheet.outputs_energy_y142, 0.002); end
  def test_outputs_energy_d144; assert_equal("Traditional biomass", worksheet.outputs_energy_d144); end
  def test_outputs_energy_s144; assert_in_epsilon(21.048116567478733, worksheet.outputs_energy_s144, 0.002); end
  def test_outputs_energy_t144; assert_in_epsilon(20.73177954514278, worksheet.outputs_energy_t144, 0.002); end
  def test_outputs_energy_u144; assert_in_epsilon(20.19748237315084, worksheet.outputs_energy_u144, 0.002); end
  def test_outputs_energy_v144; assert_in_epsilon(19.469395033528432, worksheet.outputs_energy_v144, 0.002); end
  def test_outputs_energy_w144; assert_in_epsilon(18.96178724134996, worksheet.outputs_energy_w144, 0.002); end
  def test_outputs_energy_x144; assert_in_epsilon(18.331240302012638, worksheet.outputs_energy_x144, 0.002); end
  def test_outputs_energy_y144; assert_in_epsilon(18.040872973567566, worksheet.outputs_energy_y144, 0.002); end
  def test_outputs_energy_d145; assert_equal("Total", worksheet.outputs_energy_d145); end
  def test_outputs_energy_r145; assert_in_epsilon(57.21490311421111, worksheet.outputs_energy_r145, 0.002); end
  def test_outputs_energy_s145; assert_in_epsilon(57.8379967835843, worksheet.outputs_energy_s145, 0.002); end
  def test_outputs_energy_t145; assert_in_epsilon(58.53009496686543, worksheet.outputs_energy_t145, 0.002); end
  def test_outputs_energy_u145; assert_in_epsilon(59.007487915361665, worksheet.outputs_energy_u145, 0.002); end
  def test_outputs_energy_v145; assert_in_epsilon(59.20068722161926, worksheet.outputs_energy_v145, 0.002); end
  def test_outputs_energy_w145; assert_in_epsilon(59.44964158153394, worksheet.outputs_energy_w145, 0.002); end
  def test_outputs_energy_x145; assert_in_epsilon(59.647908060286696, worksheet.outputs_energy_x145, 0.002); end
  def test_outputs_energy_y145; assert_in_epsilon(60.467621541250175, worksheet.outputs_energy_y145, 0.002); end
  def test_outputs_energy_z145; assert_in_epsilon(61.34969196373503, worksheet.outputs_energy_z145, 0.002); end
  def test_outputs_energy_d146; assert_equal("Biocrops unused", worksheet.outputs_energy_d146); end
  def test_outputs_energy_r146; assert_in_delta(0.0, (worksheet.outputs_energy_r146||0), 0.002); end
  def test_outputs_energy_s146; assert_in_delta(0.0, (worksheet.outputs_energy_s146||0), 0.002); end
  def test_outputs_energy_t146; assert_in_delta(0.0, (worksheet.outputs_energy_t146||0), 0.002); end
  def test_outputs_energy_u146; assert_in_delta(0.0, (worksheet.outputs_energy_u146||0), 0.002); end
  def test_outputs_energy_v146; assert_in_delta(0.0, (worksheet.outputs_energy_v146||0), 0.002); end
  def test_outputs_energy_w146; assert_in_delta(0.0, (worksheet.outputs_energy_w146||0), 0.002); end
  def test_outputs_energy_x146; assert_in_delta(0.0, (worksheet.outputs_energy_x146||0), 0.002); end
  def test_outputs_energy_y146; assert_in_delta(0.0, (worksheet.outputs_energy_y146||0), 0.002); end
  def test_outputs_energy_z146; assert_in_delta(0.0, (worksheet.outputs_energy_z146||0), 0.002); end
  def test_outputs_energy_c442; assert_equal("Description", worksheet.outputs_energy_c442); end
  def test_outputs_energy_d442; assert_equal(".", worksheet.outputs_energy_d442); end
  def test_outputs_energy_e442; assert_equal("Notes", worksheet.outputs_energy_e442); end
  def test_outputs_energy_g442; assert_equal("..", worksheet.outputs_energy_g442); end
  def test_outputs_energy_h442; assert_equal("…", worksheet.outputs_energy_h442); end
  def test_outputs_energy_i442; assert_equal("….", worksheet.outputs_energy_i442); end
  def test_outputs_energy_j442; assert_equal("…..", worksheet.outputs_energy_j442); end
  def test_outputs_energy_k442; assert_equal("……", worksheet.outputs_energy_k442); end
  def test_outputs_energy_l442; assert_equal("…….", worksheet.outputs_energy_l442); end
  def test_outputs_energy_m442; assert_equal("……..", worksheet.outputs_energy_m442); end
  def test_outputs_energy_n442; assert_equal("……….", worksheet.outputs_energy_n442); end
  def test_outputs_energy_o442; assert_equal("………..", worksheet.outputs_energy_o442); end
  def test_outputs_energy_r442; assert_equal("2011", worksheet.outputs_energy_r442); end
  def test_outputs_energy_s442; assert_equal("2015", worksheet.outputs_energy_s442); end
  def test_outputs_energy_t442; assert_equal("2020", worksheet.outputs_energy_t442); end
  def test_outputs_energy_u442; assert_equal("2025", worksheet.outputs_energy_u442); end
  def test_outputs_energy_v442; assert_equal("2030", worksheet.outputs_energy_v442); end
  def test_outputs_energy_w442; assert_equal("2035", worksheet.outputs_energy_w442); end
  def test_outputs_energy_x442; assert_equal("2040", worksheet.outputs_energy_x442); end
  def test_outputs_energy_y442; assert_equal("2045", worksheet.outputs_energy_y442); end
  def test_outputs_energy_z442; assert_equal("2050", worksheet.outputs_energy_z442); end
  def test_outputs_energy_c443; assert_equal("Solid", worksheet.outputs_energy_c443); end
  def test_outputs_energy_r443; assert_in_epsilon(49.540000000000006, worksheet.outputs_energy_r443, 0.002); end
  def test_outputs_energy_s443; assert_in_epsilon(49.93859374698941, worksheet.outputs_energy_s443, 0.002); end
  def test_outputs_energy_t443; assert_in_epsilon(50.300098133608515, worksheet.outputs_energy_t443, 0.002); end
  def test_outputs_energy_u443; assert_in_epsilon(50.4618727842123, worksheet.outputs_energy_u443, 0.002); end
  def test_outputs_energy_v443; assert_in_epsilon(50.335380839232585, worksheet.outputs_energy_v443, 0.002); end
  def test_outputs_energy_w443; assert_in_epsilon(50.23445698962001, worksheet.outputs_energy_w443, 0.002); end
  def test_outputs_energy_x443; assert_in_epsilon(50.110116741492675, worksheet.outputs_energy_x443, 0.002); end
  def test_outputs_energy_y443; assert_in_epsilon(50.70263579450074, worksheet.outputs_energy_y443, 0.002); end
  def test_outputs_energy_z443; assert_in_epsilon(51.42882152403684, worksheet.outputs_energy_z443, 0.002); end
  def test_outputs_energy_c444; assert_equal("Liquid bioenergy", worksheet.outputs_energy_c444); end
  def test_outputs_energy_r444; assert_in_delta(0.76, worksheet.outputs_energy_r444, 0.002); end
  def test_outputs_energy_s444; assert_in_delta(0.7425796855766272, worksheet.outputs_energy_s444, 0.002); end
  def test_outputs_energy_t444; assert_in_delta(0.8055853711358296, worksheet.outputs_energy_t444, 0.002); end
  def test_outputs_energy_u444; assert_in_delta(0.8827763079296206, worksheet.outputs_energy_u444, 0.002); end
  def test_outputs_energy_v444; assert_in_delta(0.9620251785968399, worksheet.outputs_energy_v444, 0.002); end
  def test_outputs_energy_w444; assert_in_epsilon(1.0433319831374877, worksheet.outputs_energy_w444, 0.002); end
  def test_outputs_energy_x444; assert_in_epsilon(1.1266967215515633, worksheet.outputs_energy_x444, 0.002); end
  def test_outputs_energy_y444; assert_in_epsilon(1.2121193938390675, worksheet.outputs_energy_y444, 0.002); end
  def test_outputs_energy_z444; assert_in_epsilon(1.2996, worksheet.outputs_energy_z444, 0.002); end
  def test_outputs_energy_c445; assert_equal("Gas", worksheet.outputs_energy_c445); end
  def test_outputs_energy_r445; assert_in_epsilon(3.8589176470794397, worksheet.outputs_energy_r445, 0.002); end
  def test_outputs_energy_s445; assert_in_epsilon(4.0546166286316705, worksheet.outputs_energy_s445, 0.002); end
  def test_outputs_energy_t445; assert_in_epsilon(4.2906065005311715, worksheet.outputs_energy_t445, 0.002); end
  def test_outputs_energy_u445; assert_in_epsilon(4.524094767866408, worksheet.outputs_energy_u445, 0.002); end
  def test_outputs_energy_v445; assert_in_epsilon(4.814316145566888, worksheet.outputs_energy_v445, 0.002); end
  def test_outputs_energy_w445; assert_in_epsilon(5.117150008936817, worksheet.outputs_energy_w445, 0.002); end
  def test_outputs_energy_x445; assert_in_epsilon(5.41444633083019, worksheet.outputs_energy_x445, 0.002); end
  def test_outputs_energy_y445; assert_in_epsilon(5.647028229779436, worksheet.outputs_energy_y445, 0.002); end
  def test_outputs_energy_z445; assert_in_epsilon(5.83472749638165, worksheet.outputs_energy_z445, 0.002); end
  def test_outputs_energy_c446; assert_equal("Losses", worksheet.outputs_energy_c446); end
  def test_outputs_energy_r446; assert_in_epsilon(3.05598546713167, worksheet.outputs_energy_r446, 0.002); end
  def test_outputs_energy_s446; assert_in_epsilon(3.1022067223865903, worksheet.outputs_energy_s446, 0.002); end
  def test_outputs_energy_t446; assert_in_epsilon(3.1338049615899166, worksheet.outputs_energy_t446, 0.002); end
  def test_outputs_energy_u446; assert_in_epsilon(3.1387440553533423, worksheet.outputs_energy_u446, 0.002); end
  def test_outputs_energy_v446; assert_in_epsilon(3.0889650582229535, worksheet.outputs_energy_v446, 0.002); end
  def test_outputs_energy_w446; assert_in_epsilon(3.0547025998396293, worksheet.outputs_energy_w446, 0.002); end
  def test_outputs_energy_x446; assert_in_epsilon(2.996648266412272, worksheet.outputs_energy_x446, 0.002); end
  def test_outputs_energy_y446; assert_in_epsilon(2.905838123130927, worksheet.outputs_energy_y446, 0.002); end
  def test_outputs_energy_z446; assert_in_epsilon(2.7865429433165403, worksheet.outputs_energy_z446, 0.002); end
  def test_outputs_energy_c447; assert_equal("Solid oversupply", worksheet.outputs_energy_c447); end
  def test_outputs_energy_e447; assert_equal("solid global oversupply", worksheet.outputs_energy_e447); end
  def test_outputs_energy_r447; assert_in_delta(0.0, (worksheet.outputs_energy_r447||0), 0.002); end
  def test_outputs_energy_s447; assert_in_delta(0.0, (worksheet.outputs_energy_s447||0), 0.002); end
  def test_outputs_energy_t447; assert_in_delta(0.0, (worksheet.outputs_energy_t447||0), 0.002); end
  def test_outputs_energy_u447; assert_in_delta(0.0, (worksheet.outputs_energy_u447||0), 0.002); end
  def test_outputs_energy_v447; assert_in_delta(0.0, (worksheet.outputs_energy_v447||0), 0.002); end
  def test_outputs_energy_w447; assert_in_delta(0.0, (worksheet.outputs_energy_w447||0), 0.002); end
  def test_outputs_energy_x447; assert_in_delta(0.0, (worksheet.outputs_energy_x447||0), 0.002); end
  def test_outputs_energy_y447; assert_in_delta(0.0, (worksheet.outputs_energy_y447||0), 0.002); end
  def test_outputs_energy_z447; assert_in_delta(0.0, (worksheet.outputs_energy_z447||0), 0.002); end
  def test_outputs_energy_c448; assert_equal("Liquid oversupply", worksheet.outputs_energy_c448); end
  def test_outputs_energy_e448; assert_equal("liquid global oversupply", worksheet.outputs_energy_e448); end
  def test_outputs_energy_r448; assert_in_delta(0.0, (worksheet.outputs_energy_r448||0), 0.002); end
  def test_outputs_energy_s448; assert_in_delta(0.0, (worksheet.outputs_energy_s448||0), 0.002); end
  def test_outputs_energy_t448; assert_in_delta(0.0, (worksheet.outputs_energy_t448||0), 0.002); end
  def test_outputs_energy_u448; assert_in_delta(0.0, (worksheet.outputs_energy_u448||0), 0.002); end
  def test_outputs_energy_v448; assert_in_delta(0.0, (worksheet.outputs_energy_v448||0), 0.002); end
  def test_outputs_energy_w448; assert_in_delta(0.0, (worksheet.outputs_energy_w448||0), 0.002); end
  def test_outputs_energy_x448; assert_in_delta(0.0, (worksheet.outputs_energy_x448||0), 0.002); end
  def test_outputs_energy_y448; assert_in_delta(0.0, (worksheet.outputs_energy_y448||0), 0.002); end
  def test_outputs_energy_z448; assert_in_delta(0.0, (worksheet.outputs_energy_z448||0), 0.002); end
  def test_outputs_energy_d34; assert_equal("RESIDENTIAL", worksheet.outputs_energy_d34); end
  def test_outputs_energy_d35; assert_equal("Global Heating", worksheet.outputs_energy_d35); end
  def test_outputs_energy_p35; assert_in_epsilon(25.25, worksheet.outputs_energy_p35, 0.002); end
  def test_outputs_energy_r35; assert_in_epsilon(25.32381324102704, worksheet.outputs_energy_r35, 0.002); end
  def test_outputs_energy_s35; assert_in_epsilon(26.348081903402836, worksheet.outputs_energy_s35, 0.002); end
  def test_outputs_energy_t35; assert_in_epsilon(27.268400882519217, worksheet.outputs_energy_t35, 0.002); end
  def test_outputs_energy_u35; assert_in_epsilon(27.917108589429034, worksheet.outputs_energy_u35, 0.002); end
  def test_outputs_energy_v35; assert_in_epsilon(28.29378741633048, worksheet.outputs_energy_v35, 0.002); end
  def test_outputs_energy_w35; assert_in_epsilon(28.60914641172767, worksheet.outputs_energy_w35, 0.002); end
  def test_outputs_energy_x35; assert_in_epsilon(28.68272054644894, worksheet.outputs_energy_x35, 0.002); end
  def test_outputs_energy_y35; assert_in_epsilon(28.775516117372554, worksheet.outputs_energy_y35, 0.002); end
  def test_outputs_energy_z35; assert_in_epsilon(28.655087269608053, worksheet.outputs_energy_z35, 0.002); end
  def test_outputs_energy_d36; assert_equal("Global Cooling", worksheet.outputs_energy_d36); end
  def test_outputs_energy_p36; assert_in_epsilon(2.44, worksheet.outputs_energy_p36, 0.002); end
  def test_outputs_energy_r36; assert_in_epsilon(2.4027110475744, worksheet.outputs_energy_r36, 0.002); end
  def test_outputs_energy_s36; assert_in_epsilon(2.961290834625125, worksheet.outputs_energy_s36, 0.002); end
  def test_outputs_energy_t36; assert_in_epsilon(3.7137333755409854, worksheet.outputs_energy_t36, 0.002); end
  def test_outputs_energy_u36; assert_in_epsilon(4.529200530887648, worksheet.outputs_energy_u36, 0.002); end
  def test_outputs_energy_v36; assert_in_epsilon(5.395192447094637, worksheet.outputs_energy_v36, 0.002); end
  def test_outputs_energy_w36; assert_in_epsilon(6.2741287393126655, worksheet.outputs_energy_w36, 0.002); end
  def test_outputs_energy_x36; assert_in_epsilon(7.169744826899734, worksheet.outputs_energy_x36, 0.002); end
  def test_outputs_energy_y36; assert_in_epsilon(8.036490332904341, worksheet.outputs_energy_y36, 0.002); end
  def test_outputs_energy_z36; assert_in_epsilon(8.88252833895892, worksheet.outputs_energy_z36, 0.002); end
  def test_outputs_energy_d37; assert_equal("Global Hot water", worksheet.outputs_energy_d37); end
  def test_outputs_energy_p37; assert_in_epsilon(22.61, worksheet.outputs_energy_p37, 0.002); end
  def test_outputs_energy_r37; assert_in_epsilon(22.58893537795622, worksheet.outputs_energy_r37, 0.002); end
  def test_outputs_energy_s37; assert_in_epsilon(24.414447102647195, worksheet.outputs_energy_s37, 0.002); end
  def test_outputs_energy_t37; assert_in_epsilon(26.554995796015525, worksheet.outputs_energy_t37, 0.002); end
  def test_outputs_energy_u37; assert_in_epsilon(28.64539761553651, worksheet.outputs_energy_u37, 0.002); end
  def test_outputs_energy_v37; assert_in_epsilon(30.674903600538755, worksheet.outputs_energy_v37, 0.002); end
  def test_outputs_energy_w37; assert_in_epsilon(32.512517971401635, worksheet.outputs_energy_w37, 0.002); end
  def test_outputs_energy_x37; assert_in_epsilon(34.27280139176808, worksheet.outputs_energy_x37, 0.002); end
  def test_outputs_energy_y37; assert_in_epsilon(35.82453578860698, worksheet.outputs_energy_y37, 0.002); end
  def test_outputs_energy_z37; assert_in_epsilon(37.279175836314494, worksheet.outputs_energy_z37, 0.002); end
  def test_outputs_energy_d38; assert_equal("Global Appliances", worksheet.outputs_energy_d38); end
  def test_outputs_energy_p38; assert_in_epsilon(10.0, worksheet.outputs_energy_p38, 0.002); end
  def test_outputs_energy_r38; assert_in_epsilon(10.049303026446697, worksheet.outputs_energy_r38, 0.002); end
  def test_outputs_energy_s38; assert_in_epsilon(11.126432946806268, worksheet.outputs_energy_s38, 0.002); end
  def test_outputs_energy_t38; assert_in_epsilon(12.40061384008816, worksheet.outputs_energy_t38, 0.002); end
  def test_outputs_energy_u38; assert_in_epsilon(13.630881451749245, worksheet.outputs_energy_u38, 0.002); end
  def test_outputs_energy_v38; assert_in_epsilon(14.801301976572692, worksheet.outputs_energy_v38, 0.002); end
  def test_outputs_energy_w38; assert_in_epsilon(15.838266327687549, worksheet.outputs_energy_w38, 0.002); end
  def test_outputs_energy_x38; assert_in_epsilon(16.787319893563872, worksheet.outputs_energy_x38, 0.002); end
  def test_outputs_energy_y38; assert_in_epsilon(17.575154426601987, worksheet.outputs_energy_y38, 0.002); end
  def test_outputs_energy_z38; assert_in_epsilon(18.249189559730116, worksheet.outputs_energy_z38, 0.002); end
  def test_outputs_energy_d39; assert_equal("Global Cooking", worksheet.outputs_energy_d39); end
  def test_outputs_energy_p39; assert_in_epsilon(24.16, worksheet.outputs_energy_p39, 0.002); end
  def test_outputs_energy_r39; assert_in_epsilon(24.11115060974643, worksheet.outputs_energy_r39, 0.002); end
  def test_outputs_energy_s39; assert_in_epsilon(25.209691826197336, worksheet.outputs_energy_s39, 0.002); end
  def test_outputs_energy_t39; assert_in_epsilon(26.345192466131326, worksheet.outputs_energy_t39, 0.002); end
  def test_outputs_energy_u39; assert_in_epsilon(27.345231710974776, worksheet.outputs_energy_u39, 0.002); end
  def test_outputs_energy_v39; assert_in_epsilon(28.212329890113978, worksheet.outputs_energy_v39, 0.002); end
  def test_outputs_energy_w39; assert_in_epsilon(29.03060092909151, worksheet.outputs_energy_w39, 0.002); end
  def test_outputs_energy_x39; assert_in_epsilon(29.735981287626227, worksheet.outputs_energy_x39, 0.002); end
  def test_outputs_energy_y39; assert_in_epsilon(30.424368307988246, worksheet.outputs_energy_y39, 0.002); end
  def test_outputs_energy_z39; assert_in_epsilon(30.995916469774865, worksheet.outputs_energy_z39, 0.002); end
  def test_outputs_energy_d40; assert_equal("Global Lighting", worksheet.outputs_energy_d40); end
  def test_outputs_energy_p40; assert_in_epsilon(3.24, worksheet.outputs_energy_p40, 0.002); end
  def test_outputs_energy_r40; assert_in_epsilon(3.238074545473781, worksheet.outputs_energy_r40, 0.002); end
  def test_outputs_energy_s40; assert_in_epsilon(3.727386332660924, worksheet.outputs_energy_s40, 0.002); end
  def test_outputs_energy_t40; assert_in_epsilon(4.361383337666835, worksheet.outputs_energy_t40, 0.002); end
  def test_outputs_energy_u40; assert_in_epsilon(5.033855040572255, worksheet.outputs_energy_u40, 0.002); end
  def test_outputs_energy_v40; assert_in_epsilon(5.741289447423308, worksheet.outputs_energy_v40, 0.002); end
  def test_outputs_energy_w40; assert_in_epsilon(6.456501809361965, worksheet.outputs_energy_w40, 0.002); end
  def test_outputs_energy_x40; assert_in_epsilon(7.1982353403356125, worksheet.outputs_energy_x40, 0.002); end
  def test_outputs_energy_y40; assert_in_epsilon(7.936097521528911, worksheet.outputs_energy_y40, 0.002); end
  def test_outputs_energy_z40; assert_in_epsilon(8.695260562482405, worksheet.outputs_energy_z40, 0.002); end
  def test_outputs_energy_d42; assert_equal("NON-RESIDENTIAL", worksheet.outputs_energy_d42); end
  def test_outputs_energy_d43; assert_equal("Global Heating", worksheet.outputs_energy_d43); end
  def test_outputs_energy_f43; assert_equal("Non-residential", worksheet.outputs_energy_f43); end
  def test_outputs_energy_p43; assert_in_epsilon(8.27, worksheet.outputs_energy_p43, 0.002); end
  def test_outputs_energy_r43; assert_in_epsilon(8.29356950667974, worksheet.outputs_energy_r43, 0.002); end
  def test_outputs_energy_s43; assert_in_epsilon(8.830945144519932, worksheet.outputs_energy_s43, 0.002); end
  def test_outputs_energy_t43; assert_in_epsilon(9.396779740496155, worksheet.outputs_energy_t43, 0.002); end
  def test_outputs_energy_u43; assert_in_epsilon(9.881670858701371, worksheet.outputs_energy_u43, 0.002); end
  def test_outputs_energy_v43; assert_in_epsilon(10.279514297554146, worksheet.outputs_energy_v43, 0.002); end
  def test_outputs_energy_w43; assert_in_epsilon(10.58799078172629, worksheet.outputs_energy_w43, 0.002); end
  def test_outputs_energy_x43; assert_in_epsilon(10.803140352633797, worksheet.outputs_energy_x43, 0.002); end
  def test_outputs_energy_y43; assert_in_epsilon(10.919916391055752, worksheet.outputs_energy_y43, 0.002); end
  def test_outputs_energy_z43; assert_in_epsilon(10.935196791386206, worksheet.outputs_energy_z43, 0.002); end
  def test_outputs_energy_d44; assert_equal("Global Cooling", worksheet.outputs_energy_d44); end
  def test_outputs_energy_f44; assert_equal("Non-residential", worksheet.outputs_energy_f44); end
  def test_outputs_energy_p44; assert_in_epsilon(1.96, worksheet.outputs_energy_p44, 0.002); end
  def test_outputs_energy_r44; assert_in_epsilon(1.9562902146479995, worksheet.outputs_energy_r44, 0.002); end
  def test_outputs_energy_s44; assert_in_epsilon(2.134046740132623, worksheet.outputs_energy_s44, 0.002); end
  def test_outputs_energy_t44; assert_in_epsilon(2.340003049065964, worksheet.outputs_energy_t44, 0.002); end
  def test_outputs_energy_u44; assert_in_epsilon(2.5352050127936256, worksheet.outputs_energy_u44, 0.002); end
  def test_outputs_energy_v44; assert_in_epsilon(2.7165065570446187, worksheet.outputs_energy_v44, 0.002); end
  def test_outputs_energy_w44; assert_in_epsilon(2.8815260224418537, worksheet.outputs_energy_w44, 0.002); end
  def test_outputs_energy_x44; assert_in_epsilon(3.0272635479032934, worksheet.outputs_energy_x44, 0.002); end
  def test_outputs_energy_y44; assert_in_epsilon(3.150184422798415, worksheet.outputs_energy_y44, 0.002); end
  def test_outputs_energy_z44; assert_in_epsilon(3.2470548181618724, worksheet.outputs_energy_z44, 0.002); end
  def test_outputs_energy_d45; assert_equal("Global Appliances", worksheet.outputs_energy_d45); end
  def test_outputs_energy_f45; assert_equal("Non-residential", worksheet.outputs_energy_f45); end
  def test_outputs_energy_p45; assert_in_epsilon(12.36, worksheet.outputs_energy_p45, 0.002); end
  def test_outputs_energy_r45; assert_in_epsilon(12.3590983318613, worksheet.outputs_energy_r45, 0.002); end
  def test_outputs_energy_s45; assert_in_epsilon(13.29900614968782, worksheet.outputs_energy_s45, 0.002); end
  def test_outputs_energy_t45; assert_in_epsilon(14.346869748809846, worksheet.outputs_energy_t45, 0.002); end
  def test_outputs_energy_u45; assert_in_epsilon(15.307081846406208, worksheet.outputs_energy_u45, 0.002); end
  def test_outputs_energy_v45; assert_in_epsilon(16.16871718064883, worksheet.outputs_energy_v45, 0.002); end
  def test_outputs_energy_w45; assert_in_epsilon(16.926255222876122, worksheet.outputs_energy_w45, 0.002); end
  def test_outputs_energy_x45; assert_in_epsilon(17.571157054362377, worksheet.outputs_energy_x45, 0.002); end
  def test_outputs_energy_y45; assert_in_epsilon(18.09246231443024, worksheet.outputs_energy_y45, 0.002); end
  def test_outputs_energy_z45; assert_in_epsilon(18.481553027105956, worksheet.outputs_energy_z45, 0.002); end
  def test_outputs_energy_d46; assert_equal("Global Lighting", worksheet.outputs_energy_d46); end
  def test_outputs_energy_f46; assert_equal("Non-residential", worksheet.outputs_energy_f46); end
  def test_outputs_energy_p46; assert_in_epsilon(4.21, worksheet.outputs_energy_p46, 0.002); end
  def test_outputs_energy_r46; assert_in_epsilon(4.234995621034355, worksheet.outputs_energy_r46, 0.002); end
  def test_outputs_energy_s46; assert_in_epsilon(4.751492141050203, worksheet.outputs_energy_s46, 0.002); end
  def test_outputs_energy_t46; assert_in_epsilon(5.40609071244595, worksheet.outputs_energy_t46, 0.002); end
  def test_outputs_energy_u46; assert_in_epsilon(6.090511565716036, worksheet.outputs_energy_u46, 0.002); end
  def test_outputs_energy_v46; assert_in_epsilon(6.8019860758830655, worksheet.outputs_energy_v46, 0.002); end
  def test_outputs_energy_w46; assert_in_epsilon(7.539320229148419, worksheet.outputs_energy_w46, 0.002); end
  def test_outputs_energy_x46; assert_in_epsilon(8.299455607895375, worksheet.outputs_energy_x46, 0.002); end
  def test_outputs_energy_y46; assert_in_epsilon(9.077221304025858, worksheet.outputs_energy_y46, 0.002); end
  def test_outputs_energy_z46; assert_in_epsilon(9.867269836505725, worksheet.outputs_energy_z46, 0.002); end
  def test_outputs_energy_d47; assert_equal("Global Other", worksheet.outputs_energy_d47); end
  def test_outputs_energy_f47; assert_equal("Non-residential", worksheet.outputs_energy_f47); end
  def test_outputs_energy_p47; assert_in_epsilon(3.57, worksheet.outputs_energy_p47, 0.002); end
  def test_outputs_energy_r47; assert_in_epsilon(3.616434616787921, worksheet.outputs_energy_r47, 0.002); end
  def test_outputs_energy_s47; assert_in_epsilon(3.8896409698128167, worksheet.outputs_energy_s47, 0.002); end
  def test_outputs_energy_t47; assert_in_epsilon(4.191588479867679, worksheet.outputs_energy_t47, 0.002); end
  def test_outputs_energy_u47; assert_in_epsilon(4.464542350760973, worksheet.outputs_energy_u47, 0.002); end
  def test_outputs_energy_v47; assert_in_epsilon(4.704546973422807, worksheet.outputs_energy_v47, 0.002); end
  def test_outputs_energy_w47; assert_in_epsilon(4.909206967282865, worksheet.outputs_energy_w47, 0.002); end
  def test_outputs_energy_x47; assert_in_epsilon(5.075243504724687, worksheet.outputs_energy_x47, 0.002); end
  def test_outputs_energy_y47; assert_in_epsilon(5.198700262240945, worksheet.outputs_energy_y47, 0.002); end
  def test_outputs_energy_z47; assert_in_epsilon(5.276352015472267, worksheet.outputs_energy_z47, 0.002); end
  def test_outputs_energy_d206; assert_in_epsilon(946.0, worksheet.outputs_energy_d206, 0.002); end
  def test_outputs_energy_d207; assert_in_epsilon(861.0, worksheet.outputs_energy_d207, 0.002); end
  def test_outputs_energy_d236; assert_in_epsilon(14500.0, worksheet.outputs_energy_d236, 0.002); end
  def test_outputs_energy_d237; assert_in_epsilon(10800.0, worksheet.outputs_energy_d237, 0.002); end
  def test_outputs_energy_d238; assert_in_epsilon(12650.0, worksheet.outputs_energy_d238, 0.002); end
  def test_outputs_energy_h206; assert_in_epsilon(304.66585600170345, worksheet.outputs_energy_h206, 0.002); end
  def test_outputs_energy_h219; assert_in_epsilon(141.35116908379322, worksheet.outputs_energy_h219, 0.002); end
  def test_outputs_energy_h212; assert_in_epsilon(238131459417170.7, worksheet.outputs_energy_h212, 0.002); end
  def test_outputs_energy_h226; assert_in_delta(0.0027485534896007956, worksheet.outputs_energy_h226, 0.002); end
  def test_outputs_energy_g180; assert_equal("Notes", worksheet.outputs_energy_g180); end
  def test_outputs_energy_r180; assert_in_epsilon(2011.0, worksheet.outputs_energy_r180, 0.002); end
  def test_outputs_energy_s180; assert_equal("2015", worksheet.outputs_energy_s180); end
  def test_outputs_energy_t180; assert_equal("2020", worksheet.outputs_energy_t180); end
  def test_outputs_energy_u180; assert_equal("2025", worksheet.outputs_energy_u180); end
  def test_outputs_energy_v180; assert_equal("2030", worksheet.outputs_energy_v180); end
  def test_outputs_energy_w180; assert_equal("2035", worksheet.outputs_energy_w180); end
  def test_outputs_energy_x180; assert_equal("2040", worksheet.outputs_energy_x180); end
  def test_outputs_energy_y180; assert_equal("2045", worksheet.outputs_energy_y180); end
  def test_outputs_energy_z180; assert_equal("2050", worksheet.outputs_energy_z180); end
  def test_outputs_energy_c181; assert_equal("G.Q.01", worksheet.outputs_energy_c181); end
  def test_outputs_energy_d181; assert_equal("Global Coal reserves ", worksheet.outputs_energy_d181); end
  def test_outputs_energy_g181; assert_equal("Gt", worksheet.outputs_energy_g181); end
  def test_outputs_energy_r181; assert_in_epsilon(6.644887730536884, worksheet.outputs_energy_r181, 0.002); end
  def test_outputs_energy_s181; assert_in_epsilon(28.483615106281114, worksheet.outputs_energy_s181, 0.002); end
  def test_outputs_energy_t181; assert_in_epsilon(60.271021288084526, worksheet.outputs_energy_t181, 0.002); end
  def test_outputs_energy_u181; assert_in_epsilon(95.34019692598807, worksheet.outputs_energy_u181, 0.002); end
  def test_outputs_energy_v181; assert_in_epsilon(133.0910596888874, worksheet.outputs_energy_v181, 0.002); end
  def test_outputs_energy_w181; assert_in_epsilon(173.33737847469786, worksheet.outputs_energy_w181, 0.002); end
  def test_outputs_energy_x181; assert_in_epsilon(215.99260486721613, worksheet.outputs_energy_x181, 0.002); end
  def test_outputs_energy_y181; assert_in_epsilon(259.92265897338933, worksheet.outputs_energy_y181, 0.002); end
  def test_outputs_energy_z181; assert_in_epsilon(304.66585600170345, worksheet.outputs_energy_z181, 0.002); end
  def test_outputs_energy_c182; assert_equal("G.Q.02", worksheet.outputs_energy_c182); end
  def test_outputs_energy_d182; assert_equal("Global Oil reserves ", worksheet.outputs_energy_d182); end
  def test_outputs_energy_g182; assert_equal("l", worksheet.outputs_energy_g182); end
  def test_outputs_energy_r182; assert_in_epsilon(4709401567123.936, worksheet.outputs_energy_r182, 0.002); end
  def test_outputs_energy_s182; assert_in_epsilon(19839205231389.234, worksheet.outputs_energy_s182, 0.002); end
  def test_outputs_energy_t182; assert_in_epsilon(42677586341159.28, worksheet.outputs_energy_t182, 0.002); end
  def test_outputs_energy_u182; assert_in_epsilon(68375843857330.08, worksheet.outputs_energy_u182, 0.002); end
  def test_outputs_energy_v182; assert_in_epsilon(96745594536615.06, worksheet.outputs_energy_v182, 0.002); end
  def test_outputs_energy_w182; assert_in_epsilon(127596370567087.94, worksheet.outputs_energy_w182, 0.002); end
  def test_outputs_energy_x182; assert_in_epsilon(161236301764057.72, worksheet.outputs_energy_x182, 0.002); end
  def test_outputs_energy_y182; assert_in_epsilon(198141044688464.84, worksheet.outputs_energy_y182, 0.002); end
  def test_outputs_energy_z182; assert_in_epsilon(238131459417170.7, worksheet.outputs_energy_z182, 0.002); end
  def test_outputs_energy_c183; assert_equal("G.Q.03", worksheet.outputs_energy_c183); end
  def test_outputs_energy_d183; assert_equal("Global Gas reserves ", worksheet.outputs_energy_d183); end
  def test_outputs_energy_g183; assert_equal("T.m3", worksheet.outputs_energy_g183); end
  def test_outputs_energy_r183; assert_in_epsilon(3.039414737878357, worksheet.outputs_energy_r183, 0.002); end
  def test_outputs_energy_s183; assert_in_epsilon(12.807311506021556, worksheet.outputs_energy_s183, 0.002); end
  def test_outputs_energy_t183; assert_in_epsilon(27.03302212487354, worksheet.outputs_energy_t183, 0.002); end
  def test_outputs_energy_u183; assert_in_epsilon(42.442166272527075, worksheet.outputs_energy_u183, 0.002); end
  def test_outputs_energy_v183; assert_in_epsilon(59.15384345798097, worksheet.outputs_energy_v183, 0.002); end
  def test_outputs_energy_w183; assert_in_epsilon(77.12693067980629, worksheet.outputs_energy_w183, 0.002); end
  def test_outputs_energy_x183; assert_in_epsilon(96.47686541274074, worksheet.outputs_energy_x183, 0.002); end
  def test_outputs_energy_y183; assert_in_epsilon(117.75349539536197, worksheet.outputs_energy_y183, 0.002); end
  def test_outputs_energy_z183; assert_in_epsilon(141.35116908379322, worksheet.outputs_energy_z183, 0.002); end
  def test_outputs_energy_r60; assert_in_epsilon(232.39078394394286, worksheet.outputs_energy_r60, 0.002); end
  def test_outputs_energy_z60; assert_in_epsilon(485.9516004701103, worksheet.outputs_energy_z60, 0.002); end
  def test_outputs_energy_d313; assert_equal("Technology description", worksheet.outputs_energy_d313); end
  def test_outputs_energy_h313; assert_equal("1975", worksheet.outputs_energy_h313); end
  def test_outputs_energy_i313; assert_equal("1980", worksheet.outputs_energy_i313); end
  def test_outputs_energy_j313; assert_equal("1985", worksheet.outputs_energy_j313); end
  def test_outputs_energy_k313; assert_equal("1990", worksheet.outputs_energy_k313); end
  def test_outputs_energy_l313; assert_equal("1995", worksheet.outputs_energy_l313); end
  def test_outputs_energy_m313; assert_equal("2000", worksheet.outputs_energy_m313); end
  def test_outputs_energy_n313; assert_equal("2005", worksheet.outputs_energy_n313); end
  def test_outputs_energy_o313; assert_in_epsilon(2010.0, worksheet.outputs_energy_o313, 0.002); end
  def test_outputs_energy_p313; assert_in_epsilon(2011.0, worksheet.outputs_energy_p313, 0.002); end
  def test_outputs_energy_r313; assert_in_epsilon(2011.0, worksheet.outputs_energy_r313, 0.002); end
  def test_outputs_energy_s313; assert_equal("2015", worksheet.outputs_energy_s313); end
  def test_outputs_energy_t313; assert_equal("2020", worksheet.outputs_energy_t313); end
  def test_outputs_energy_u313; assert_equal("2025", worksheet.outputs_energy_u313); end
  def test_outputs_energy_v313; assert_equal("2030", worksheet.outputs_energy_v313); end
  def test_outputs_energy_w313; assert_equal("2035", worksheet.outputs_energy_w313); end
  def test_outputs_energy_x313; assert_equal("2040", worksheet.outputs_energy_x313); end
  def test_outputs_energy_y313; assert_equal("2045", worksheet.outputs_energy_y313); end
  def test_outputs_energy_z313; assert_equal("2050", worksheet.outputs_energy_z313); end
  def test_outputs_energy_d314; assert_equal("Unabated solid fuel power plants", worksheet.outputs_energy_d314); end
  def test_outputs_energy_h314; assert_in_epsilon(8.6961132, worksheet.outputs_energy_h314, 0.002); end
  def test_outputs_energy_i314; assert_in_epsilon(11.4665868, worksheet.outputs_energy_i314, 0.002); end
  def test_outputs_energy_j314; assert_in_epsilon(13.906404, worksheet.outputs_energy_j314, 0.002); end
  def test_outputs_energy_k314; assert_in_epsilon(16.4052396, worksheet.outputs_energy_k314, 0.002); end
  def test_outputs_energy_l314; assert_in_epsilon(18.456966, worksheet.outputs_energy_l314, 0.002); end
  def test_outputs_energy_m314; assert_in_epsilon(22.2185448, worksheet.outputs_energy_m314, 0.002); end
  def test_outputs_energy_n314; assert_in_epsilon(27.2447424, worksheet.outputs_energy_n314, 0.002); end
  def test_outputs_energy_o314; assert_in_epsilon(32.5517508, worksheet.outputs_energy_o314, 0.002); end
  def test_outputs_energy_p314; assert_in_epsilon(34.4380896, worksheet.outputs_energy_p314, 0.002); end
  def test_outputs_energy_r314; assert_in_epsilon(34.276819916182525, worksheet.outputs_energy_r314, 0.002); end
  def test_outputs_energy_s314; assert_in_epsilon(37.97244755671522, worksheet.outputs_energy_s314, 0.002); end
  def test_outputs_energy_t314; assert_in_epsilon(39.95727815894171, worksheet.outputs_energy_t314, 0.002); end
  def test_outputs_energy_u314; assert_in_epsilon(44.59716279006227, worksheet.outputs_energy_u314, 0.002); end
  def test_outputs_energy_v314; assert_in_epsilon(47.72137757546779, worksheet.outputs_energy_v314, 0.002); end
  def test_outputs_energy_w314; assert_in_epsilon(50.24846726188448, worksheet.outputs_energy_w314, 0.002); end
  def test_outputs_energy_x314; assert_in_epsilon(51.36734984056005, worksheet.outputs_energy_x314, 0.002); end
  def test_outputs_energy_y314; assert_in_epsilon(49.336630575088485, worksheet.outputs_energy_y314, 0.002); end
  def test_outputs_energy_z314; assert_in_epsilon(47.66889520266459, worksheet.outputs_energy_z314, 0.002); end
  def test_outputs_energy_d315; assert_equal("Unabated liquid fuel power plants", worksheet.outputs_energy_d315); end
  def test_outputs_energy_h315; assert_in_epsilon(5.200236, worksheet.outputs_energy_h315, 0.002); end
  def test_outputs_energy_i315; assert_in_epsilon(5.9519628, worksheet.outputs_energy_i315, 0.002); end
  def test_outputs_energy_j315; assert_in_epsilon(4.2661512, worksheet.outputs_energy_j315, 0.002); end
  def test_outputs_energy_k315; assert_in_epsilon(4.7950164, worksheet.outputs_energy_k315, 0.002); end
  def test_outputs_energy_l315; assert_in_epsilon(4.4350452, worksheet.outputs_energy_l315, 0.002); end
  def test_outputs_energy_m315; assert_in_epsilon(4.320846, worksheet.outputs_energy_m315, 0.002); end
  def test_outputs_energy_n315; assert_in_epsilon(4.1088132, worksheet.outputs_energy_n315, 0.002); end
  def test_outputs_energy_o315; assert_in_epsilon(3.4785432, worksheet.outputs_energy_o315, 0.002); end
  def test_outputs_energy_p315; assert_in_epsilon(3.808314, worksheet.outputs_energy_p315, 0.002); end
  def test_outputs_energy_r315; assert_in_epsilon(3.8004853260233133, worksheet.outputs_energy_r315, 0.002); end
  def test_outputs_energy_s315; assert_in_epsilon(4.354702041531629, worksheet.outputs_energy_s315, 0.002); end
  def test_outputs_energy_t315; assert_in_epsilon(8.833610583437009, worksheet.outputs_energy_t315, 0.002); end
  def test_outputs_energy_u315; assert_in_epsilon(10.079866814635103, worksheet.outputs_energy_u315, 0.002); end
  def test_outputs_energy_v315; assert_in_epsilon(12.696638365904645, worksheet.outputs_energy_v315, 0.002); end
  def test_outputs_energy_w315; assert_in_epsilon(14.897461125045172, worksheet.outputs_energy_w315, 0.002); end
  def test_outputs_energy_x315; assert_in_epsilon(17.389706902581096, worksheet.outputs_energy_x315, 0.002); end
  def test_outputs_energy_y315; assert_in_epsilon(20.496302193638257, worksheet.outputs_energy_y315, 0.002); end
  def test_outputs_energy_z315; assert_in_epsilon(22.647491333921725, worksheet.outputs_energy_z315, 0.002); end
  def test_outputs_energy_d316; assert_equal("Unabated gas fuel power plants", worksheet.outputs_energy_d316); end
  def test_outputs_energy_h316; assert_in_epsilon(2.9048472, worksheet.outputs_energy_h316, 0.002); end
  def test_outputs_energy_i316; assert_in_epsilon(3.597156, worksheet.outputs_energy_i316, 0.002); end
  def test_outputs_energy_j316; assert_in_epsilon(4.4971236, worksheet.outputs_energy_j316, 0.002); end
  def test_outputs_energy_k316; assert_in_epsilon(6.229368, worksheet.outputs_energy_k316, 0.002); end
  def test_outputs_energy_l316; assert_in_epsilon(7.2358848, worksheet.outputs_energy_l316, 0.002); end
  def test_outputs_energy_m316; assert_in_epsilon(9.8646876, worksheet.outputs_energy_m316, 0.002); end
  def test_outputs_energy_n316; assert_in_epsilon(13.20507, worksheet.outputs_energy_n316, 0.002); end
  def test_outputs_energy_o316; assert_in_epsilon(17.210952, worksheet.outputs_energy_o316, 0.002); end
  def test_outputs_energy_p316; assert_in_epsilon(17.4675924, worksheet.outputs_energy_p316, 0.002); end
  def test_outputs_energy_r316; assert_in_epsilon(17.934647440724294, worksheet.outputs_energy_r316, 0.002); end
  def test_outputs_energy_s316; assert_in_epsilon(19.88287956649072, worksheet.outputs_energy_s316, 0.002); end
  def test_outputs_energy_t316; assert_in_epsilon(21.261534599706994, worksheet.outputs_energy_t316, 0.002); end
  def test_outputs_energy_u316; assert_in_epsilon(23.50996089045548, worksheet.outputs_energy_u316, 0.002); end
  def test_outputs_energy_v316; assert_in_epsilon(25.66088823425225, worksheet.outputs_energy_v316, 0.002); end
  def test_outputs_energy_w316; assert_in_epsilon(28.184864277179912, worksheet.outputs_energy_w316, 0.002); end
  def test_outputs_energy_x316; assert_in_epsilon(31.103439998452373, worksheet.outputs_energy_x316, 0.002); end
  def test_outputs_energy_y316; assert_in_epsilon(34.16697688034094, worksheet.outputs_energy_y316, 0.002); end
  def test_outputs_energy_z316; assert_in_epsilon(37.43645071682374, worksheet.outputs_energy_z316, 0.002); end
  def test_outputs_energy_d317; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_d317); end
  def test_outputs_energy_h317; assert_in_delta(0.0, (worksheet.outputs_energy_h317||0), 0.002); end
  def test_outputs_energy_i317; assert_in_delta(0.0, (worksheet.outputs_energy_i317||0), 0.002); end
  def test_outputs_energy_j317; assert_in_delta(0.0, (worksheet.outputs_energy_j317||0), 0.002); end
  def test_outputs_energy_k317; assert_in_delta(0.0, (worksheet.outputs_energy_k317||0), 0.002); end
  def test_outputs_energy_l317; assert_in_delta(0.0, (worksheet.outputs_energy_l317||0), 0.002); end
  def test_outputs_energy_m317; assert_in_delta(0.0, (worksheet.outputs_energy_m317||0), 0.002); end
  def test_outputs_energy_n317; assert_in_delta(0.0, (worksheet.outputs_energy_n317||0), 0.002); end
  def test_outputs_energy_o317; assert_in_delta(0.0, (worksheet.outputs_energy_o317||0), 0.002); end
  def test_outputs_energy_p317; assert_in_delta(0.0, (worksheet.outputs_energy_p317||0), 0.002); end
  def test_outputs_energy_r317; assert_in_delta(0.0, (worksheet.outputs_energy_r317||0), 0.002); end
  def test_outputs_energy_s317; assert_in_delta(0.06716035862664611, worksheet.outputs_energy_s317, 0.002); end
  def test_outputs_energy_t317; assert_in_delta(0.2754610068859915, worksheet.outputs_energy_t317, 0.002); end
  def test_outputs_energy_u317; assert_in_delta(0.33594809317287994, worksheet.outputs_energy_u317, 0.002); end
  def test_outputs_energy_v317; assert_in_delta(0.5908587082779194, worksheet.outputs_energy_v317, 0.002); end
  def test_outputs_energy_w317; assert_in_delta(0.7343988077405214, worksheet.outputs_energy_w317, 0.002); end
  def test_outputs_energy_x317; assert_in_delta(0.9296268748799069, worksheet.outputs_energy_x317, 0.002); end
  def test_outputs_energy_y317; assert_in_epsilon(1.1875398817117222, worksheet.outputs_energy_y317, 0.002); end
  def test_outputs_energy_z317; assert_in_epsilon(1.7107313235113228, worksheet.outputs_energy_z317, 0.002); end
  def test_outputs_energy_d318; assert_equal("Nuclear", worksheet.outputs_energy_d318); end
  def test_outputs_energy_h318; assert_in_epsilon(1.3810068, worksheet.outputs_energy_h318, 0.002); end
  def test_outputs_energy_i318; assert_in_epsilon(2.56815, worksheet.outputs_energy_i318, 0.002); end
  def test_outputs_energy_j318; assert_in_epsilon(5.3715528, worksheet.outputs_energy_j318, 0.002); end
  def test_outputs_energy_k318; assert_in_epsilon(7.2464472, worksheet.outputs_energy_k318, 0.002); end
  def test_outputs_energy_l318; assert_in_epsilon(8.3950236, worksheet.outputs_energy_l318, 0.002); end
  def test_outputs_energy_m318; assert_in_epsilon(9.3262428, worksheet.outputs_energy_m318, 0.002); end
  def test_outputs_energy_n318; assert_in_epsilon(9.9646272, worksheet.outputs_energy_n318, 0.002); end
  def test_outputs_energy_o318; assert_in_epsilon(9.9226368, worksheet.outputs_energy_o318, 0.002); end
  def test_outputs_energy_p318; assert_in_epsilon(9.3012444, worksheet.outputs_energy_p318, 0.002); end
  def test_outputs_energy_r318; assert_in_epsilon(9.357347645030739, worksheet.outputs_energy_r318, 0.002); end
  def test_outputs_energy_s318; assert_in_epsilon(10.0514366187006, worksheet.outputs_energy_s318, 0.002); end
  def test_outputs_energy_t318; assert_in_epsilon(10.349637807388394, worksheet.outputs_energy_t318, 0.002); end
  def test_outputs_energy_u318; assert_in_epsilon(10.835500088957298, worksheet.outputs_energy_u318, 0.002); end
  def test_outputs_energy_v318; assert_in_epsilon(11.087428679400432, worksheet.outputs_energy_v318, 0.002); end
  def test_outputs_energy_w318; assert_in_epsilon(11.619563559213992, worksheet.outputs_energy_w318, 0.002); end
  def test_outputs_energy_x318; assert_in_epsilon(11.940901047024111, worksheet.outputs_energy_x318, 0.002); end
  def test_outputs_energy_y318; assert_in_epsilon(12.413909829080612, worksheet.outputs_energy_y318, 0.002); end
  def test_outputs_energy_z318; assert_in_epsilon(12.91005491025944, worksheet.outputs_energy_z318, 0.002); end
  def test_outputs_energy_d319; assert_equal("Wind, solar, marine", worksheet.outputs_energy_d319); end
  def test_outputs_energy_h319; assert_in_delta(0.0018612, worksheet.outputs_energy_h319, 0.002); end
  def test_outputs_energy_i319; assert_in_delta(0.0018216, worksheet.outputs_energy_i319, 0.002); end
  def test_outputs_energy_j319; assert_in_delta(0.0025236, worksheet.outputs_energy_j319, 0.002); end
  def test_outputs_energy_k319; assert_in_delta(0.0188136, worksheet.outputs_energy_k319, 0.002); end
  def test_outputs_energy_l319; assert_in_delta(0.0368568, worksheet.outputs_energy_l319, 0.002); end
  def test_outputs_energy_m319; assert_in_delta(0.1244772, worksheet.outputs_energy_m319, 0.002); end
  def test_outputs_energy_n319; assert_in_delta(0.4177584, worksheet.outputs_energy_n319, 0.002); end
  def test_outputs_energy_o319; assert_in_epsilon(1.370574, worksheet.outputs_energy_o319, 0.002); end
  def test_outputs_energy_p319; assert_in_epsilon(1.8177696, worksheet.outputs_energy_p319, 0.002); end
  def test_outputs_energy_r319; assert_in_epsilon(1.8174587528432633, worksheet.outputs_energy_r319, 0.002); end
  def test_outputs_energy_s319; assert_in_epsilon(3.413225833663315, worksheet.outputs_energy_s319, 0.002); end
  def test_outputs_energy_t319; assert_in_epsilon(4.259745351223904, worksheet.outputs_energy_t319, 0.002); end
  def test_outputs_energy_u319; assert_in_epsilon(4.533780084146695, worksheet.outputs_energy_u319, 0.002); end
  def test_outputs_energy_v319; assert_in_epsilon(5.127496625804393, worksheet.outputs_energy_v319, 0.002); end
  def test_outputs_energy_w319; assert_in_epsilon(5.717081511032447, worksheet.outputs_energy_w319, 0.002); end
  def test_outputs_energy_x319; assert_in_epsilon(7.167501976201894, worksheet.outputs_energy_x319, 0.002); end
  def test_outputs_energy_y319; assert_in_epsilon(10.34203564333751, worksheet.outputs_energy_y319, 0.002); end
  def test_outputs_energy_z319; assert_in_epsilon(13.091264386986479, worksheet.outputs_energy_z319, 0.002); end
  def test_outputs_energy_d320; assert_equal("Hydro", worksheet.outputs_energy_d320); end
  def test_outputs_energy_h320; assert_in_epsilon(5.1973488, worksheet.outputs_energy_h320, 0.002); end
  def test_outputs_energy_i320; assert_in_epsilon(6.180696, worksheet.outputs_energy_i320, 0.002); end
  def test_outputs_energy_j320; assert_in_epsilon(7.103448, worksheet.outputs_energy_j320, 0.002); end
  def test_outputs_energy_k320; assert_in_epsilon(7.7201532, worksheet.outputs_energy_k320, 0.002); end
  def test_outputs_energy_l320; assert_in_epsilon(8.9287596, worksheet.outputs_energy_l320, 0.002); end
  def test_outputs_energy_m320; assert_in_epsilon(9.433656, worksheet.outputs_energy_m320, 0.002); end
  def test_outputs_energy_n320; assert_in_epsilon(10.5463116, worksheet.outputs_energy_n320, 0.002); end
  def test_outputs_energy_o320; assert_in_epsilon(12.389958, worksheet.outputs_energy_o320, 0.002); end
  def test_outputs_energy_p320; assert_in_epsilon(12.5653572, worksheet.outputs_energy_p320, 0.002); end
  def test_outputs_energy_r320; assert_in_epsilon(13.179648636705306, worksheet.outputs_energy_r320, 0.002); end
  def test_outputs_energy_s320; assert_in_epsilon(13.676942595574804, worksheet.outputs_energy_s320, 0.002); end
  def test_outputs_energy_t320; assert_in_epsilon(14.712292313221141, worksheet.outputs_energy_t320, 0.002); end
  def test_outputs_energy_u320; assert_in_epsilon(15.829165630682146, worksheet.outputs_energy_u320, 0.002); end
  def test_outputs_energy_v320; assert_in_epsilon(17.03435618127571, worksheet.outputs_energy_v320, 0.002); end
  def test_outputs_energy_w320; assert_in_epsilon(18.319711605020377, worksheet.outputs_energy_w320, 0.002); end
  def test_outputs_energy_x320; assert_in_epsilon(19.689308081906866, worksheet.outputs_energy_x320, 0.002); end
  def test_outputs_energy_y320; assert_in_epsilon(21.071133098765557, worksheet.outputs_energy_y320, 0.002); end
  def test_outputs_energy_z320; assert_in_epsilon(22.550786435401854, worksheet.outputs_energy_z320, 0.002); end
  def test_outputs_energy_d321; assert_equal("Geothermal", worksheet.outputs_energy_d321); end
  def test_outputs_energy_h321; assert_in_delta(0.0288324, worksheet.outputs_energy_h321, 0.002); end
  def test_outputs_energy_i321; assert_in_delta(0.0491184, worksheet.outputs_energy_i321, 0.002); end
  def test_outputs_energy_j321; assert_in_delta(0.0825156, worksheet.outputs_energy_j321, 0.002); end
  def test_outputs_energy_k321; assert_in_delta(0.1309248, worksheet.outputs_energy_k321, 0.002); end
  def test_outputs_energy_l321; assert_in_delta(0.143226, worksheet.outputs_energy_l321, 0.002); end
  def test_outputs_energy_m321; assert_in_delta(0.1867716, worksheet.outputs_energy_m321, 0.002); end
  def test_outputs_energy_n321; assert_in_delta(0.2097468, worksheet.outputs_energy_n321, 0.002); end
  def test_outputs_energy_o321; assert_in_delta(0.2452896, worksheet.outputs_energy_o321, 0.002); end
  def test_outputs_energy_p321; assert_in_delta(0.2491632, worksheet.outputs_energy_p321, 0.002); end
  def test_outputs_energy_r321; assert_in_delta(0.26219832339716753, worksheet.outputs_energy_r321, 0.002); end
  def test_outputs_energy_s321; assert_in_delta(0.33032859640588036, worksheet.outputs_energy_s321, 0.002); end
  def test_outputs_energy_t321; assert_in_delta(0.4083228483350464, worksheet.outputs_energy_t321, 0.002); end
  def test_outputs_energy_u321; assert_in_delta(0.4633776144026932, worksheet.outputs_energy_u321, 0.002); end
  def test_outputs_energy_v321; assert_in_delta(0.49549289460882034, worksheet.outputs_energy_v321, 0.002); end
  def test_outputs_energy_w321; assert_in_delta(0.7661788277747499, worksheet.outputs_energy_w321, 0.002); end
  def test_outputs_energy_x321; assert_in_delta(0.9542826118392096, worksheet.outputs_energy_x321, 0.002); end
  def test_outputs_energy_y321; assert_in_epsilon(1.2570838252112664, worksheet.outputs_energy_y321, 0.002); end
  def test_outputs_energy_z321; assert_in_epsilon(1.578236627272539, worksheet.outputs_energy_z321, 0.002); end
  def test_outputs_energy_d322; assert_equal("Total", worksheet.outputs_energy_d322); end
  def test_outputs_energy_h322; assert_in_epsilon(23.4102456, worksheet.outputs_energy_h322, 0.002); end
  def test_outputs_energy_i322; assert_in_epsilon(29.815491599999998, worksheet.outputs_energy_i322, 0.002); end
  def test_outputs_energy_j322; assert_in_epsilon(35.2297188, worksheet.outputs_energy_j322, 0.002); end
  def test_outputs_energy_k322; assert_in_epsilon(42.545962800000005, worksheet.outputs_energy_k322, 0.002); end
  def test_outputs_energy_l322; assert_in_epsilon(47.631762, worksheet.outputs_energy_l322, 0.002); end
  def test_outputs_energy_m322; assert_in_epsilon(55.475226000000006, worksheet.outputs_energy_m322, 0.002); end
  def test_outputs_energy_n322; assert_in_epsilon(65.6970696, worksheet.outputs_energy_n322, 0.002); end
  def test_outputs_energy_o322; assert_in_epsilon(77.1697044, worksheet.outputs_energy_o322, 0.002); end
  def test_outputs_energy_p322; assert_in_epsilon(79.6475304, worksheet.outputs_energy_p322, 0.002); end
  def test_outputs_energy_r322; assert_in_epsilon(80.62860604090662, worksheet.outputs_energy_r322, 0.002); end
  def test_outputs_energy_s322; assert_in_epsilon(89.7491231677088, worksheet.outputs_energy_s322, 0.002); end
  def test_outputs_energy_t322; assert_in_epsilon(100.05788266914018, worksheet.outputs_energy_t322, 0.002); end
  def test_outputs_energy_u322; assert_in_epsilon(110.18476200651456, worksheet.outputs_energy_u322, 0.002); end
  def test_outputs_energy_v322; assert_in_epsilon(120.41453726499196, worksheet.outputs_energy_v322, 0.002); end
  def test_outputs_energy_w322; assert_in_epsilon(130.48772697489164, worksheet.outputs_energy_w322, 0.002); end
  def test_outputs_energy_x322; assert_in_epsilon(140.5421173334455, worksheet.outputs_energy_x322, 0.002); end
  def test_outputs_energy_y322; assert_in_epsilon(150.27161192717435, worksheet.outputs_energy_y322, 0.002); end
  def test_outputs_energy_z322; assert_in_epsilon(159.59391093684167, worksheet.outputs_energy_z322, 0.002); end
  def test_outputs_energy_d323; assert_equal("Demand for electricity to grid", worksheet.outputs_energy_d323); end
  def test_outputs_energy_f323; assert_equal("Net balance", worksheet.outputs_energy_f323); end
  def test_outputs_energy_g323; assert_equal("G.E.02", worksheet.outputs_energy_g323); end
  def test_outputs_energy_r323; assert_in_epsilon(80.6286060409066, worksheet.outputs_energy_r323, 0.002); end
  def test_outputs_energy_s323; assert_in_epsilon(89.74912316770882, worksheet.outputs_energy_s323, 0.002); end
  def test_outputs_energy_t323; assert_in_epsilon(100.0578826691402, worksheet.outputs_energy_t323, 0.002); end
  def test_outputs_energy_u323; assert_in_epsilon(110.18476200651455, worksheet.outputs_energy_u323, 0.002); end
  def test_outputs_energy_v323; assert_in_epsilon(120.41453726499196, worksheet.outputs_energy_v323, 0.002); end
  def test_outputs_energy_w323; assert_in_epsilon(130.48772697489164, worksheet.outputs_energy_w323, 0.002); end
  def test_outputs_energy_x323; assert_in_epsilon(140.54211733344553, worksheet.outputs_energy_x323, 0.002); end
  def test_outputs_energy_y323; assert_in_epsilon(150.27161192717438, worksheet.outputs_energy_y323, 0.002); end
  def test_outputs_energy_z323; assert_in_epsilon(159.59391093684167, worksheet.outputs_energy_z323, 0.002); end
  def test_outputs_energy_d219; assert_in_epsilon(193.88275276125742, worksheet.outputs_energy_d219, 0.002); end
  def test_outputs_energy_d220; assert_in_epsilon(187.29999999999998, worksheet.outputs_energy_d220, 0.002); end
  def test_outputs_energy_d221; assert_in_epsilon(191.07196261682242, worksheet.outputs_energy_d221, 0.002); end
  def test_outputs_energy_d250; assert_in_epsilon(511000.0, worksheet.outputs_energy_d250, 0.002); end
  def test_outputs_energy_d251; assert_in_epsilon(1300.0, worksheet.outputs_energy_d251, 0.002); end
  def test_outputs_energy_d252; assert_in_epsilon(400.0, worksheet.outputs_energy_d252, 0.002); end
  def test_outputs_energy_d253; assert_in_epsilon(346.99999999999994, worksheet.outputs_energy_d253, 0.002); end
  def test_outputs_energy_c332; assert_equal("Description", worksheet.outputs_energy_c332); end
  def test_outputs_energy_d332; assert_equal("Note for lookups", worksheet.outputs_energy_d332); end
  def test_outputs_energy_e332; assert_equal("Note for lookups 2", worksheet.outputs_energy_e332); end
  def test_outputs_energy_f332; assert_equal("Note for lookups 3", worksheet.outputs_energy_f332); end
  def test_outputs_energy_g332; assert_equal("Note for lookups 4", worksheet.outputs_energy_g332); end
  def test_outputs_energy_j332; assert_equal("1985", worksheet.outputs_energy_j332); end
  def test_outputs_energy_k332; assert_equal("1990", worksheet.outputs_energy_k332); end
  def test_outputs_energy_l332; assert_equal("1995", worksheet.outputs_energy_l332); end
  def test_outputs_energy_m332; assert_equal("2000", worksheet.outputs_energy_m332); end
  def test_outputs_energy_n332; assert_equal("2005", worksheet.outputs_energy_n332); end
  def test_outputs_energy_o332; assert_in_epsilon(2010.0, worksheet.outputs_energy_o332, 0.002); end
  def test_outputs_energy_p332; assert_in_epsilon(2011.0, worksheet.outputs_energy_p332, 0.002); end
  def test_outputs_energy_r332; assert_in_epsilon(2011.0, worksheet.outputs_energy_r332, 0.002); end
  def test_outputs_energy_s332; assert_equal("2015", worksheet.outputs_energy_s332); end
  def test_outputs_energy_t332; assert_equal("2020", worksheet.outputs_energy_t332); end
  def test_outputs_energy_u332; assert_equal("2025", worksheet.outputs_energy_u332); end
  def test_outputs_energy_v332; assert_equal("2030", worksheet.outputs_energy_v332); end
  def test_outputs_energy_w332; assert_equal("2035", worksheet.outputs_energy_w332); end
  def test_outputs_energy_x332; assert_equal("2040", worksheet.outputs_energy_x332); end
  def test_outputs_energy_y332; assert_equal("2045", worksheet.outputs_energy_y332); end
  def test_outputs_energy_z332; assert_equal("2050", worksheet.outputs_energy_z332); end
  def test_outputs_energy_c333; assert_equal("Iron and steel", worksheet.outputs_energy_c333); end
  def test_outputs_energy_d333; assert_equal("Steel.Oxygen", worksheet.outputs_energy_d333); end
  def test_outputs_energy_e333; assert_equal("Steel.OxygenHisarna", worksheet.outputs_energy_e333); end
  def test_outputs_energy_f333; assert_equal("Steel.Electric", worksheet.outputs_energy_f333); end
  def test_outputs_energy_g333; assert_equal("Steel.ElectricDRI", worksheet.outputs_energy_g333); end
  def test_outputs_energy_h333; assert_equal("Steel.others", worksheet.outputs_energy_h333); end
  def test_outputs_energy_i333; assert_equal("G.M.02", worksheet.outputs_energy_i333); end
  def test_outputs_energy_r333; assert_in_epsilon(29.320877080326486, worksheet.outputs_energy_r333, 0.002); end
  def test_outputs_energy_s333; assert_in_epsilon(33.75930453182792, worksheet.outputs_energy_s333, 0.002); end
  def test_outputs_energy_t333; assert_in_epsilon(35.78512244677117, worksheet.outputs_energy_t333, 0.002); end
  def test_outputs_energy_u333; assert_in_epsilon(37.78521725153934, worksheet.outputs_energy_u333, 0.002); end
  def test_outputs_energy_v333; assert_in_epsilon(40.241889882039914, worksheet.outputs_energy_v333, 0.002); end
  def test_outputs_energy_w333; assert_in_epsilon(42.54479535418028, worksheet.outputs_energy_w333, 0.002); end
  def test_outputs_energy_x333; assert_in_epsilon(45.34966482675193, worksheet.outputs_energy_x333, 0.002); end
  def test_outputs_energy_y333; assert_in_epsilon(49.13348457526521, worksheet.outputs_energy_y333, 0.002); end
  def test_outputs_energy_z333; assert_in_epsilon(50.77749417556103, worksheet.outputs_energy_z333, 0.002); end
  def test_outputs_energy_c334; assert_equal("Aluminium", worksheet.outputs_energy_c334); end
  def test_outputs_energy_d334; assert_equal("Aluminium.Alumina", worksheet.outputs_energy_d334); end
  def test_outputs_energy_e334; assert_equal("Aluminium.Primary", worksheet.outputs_energy_e334); end
  def test_outputs_energy_f334; assert_equal("Aluminium.Secondary", worksheet.outputs_energy_f334); end
  def test_outputs_energy_i334; assert_equal("G.M.02", worksheet.outputs_energy_i334); end
  def test_outputs_energy_r334; assert_in_epsilon(4.391030188713757, worksheet.outputs_energy_r334, 0.002); end
  def test_outputs_energy_s334; assert_in_epsilon(5.535088307690573, worksheet.outputs_energy_s334, 0.002); end
  def test_outputs_energy_t334; assert_in_epsilon(6.39920042710734, worksheet.outputs_energy_t334, 0.002); end
  def test_outputs_energy_u334; assert_in_epsilon(7.511963309944406, worksheet.outputs_energy_u334, 0.002); end
  def test_outputs_energy_v334; assert_in_epsilon(8.73222406985882, worksheet.outputs_energy_v334, 0.002); end
  def test_outputs_energy_w334; assert_in_epsilon(10.089186200418142, worksheet.outputs_energy_w334, 0.002); end
  def test_outputs_energy_x334; assert_in_epsilon(11.59540326023856, worksheet.outputs_energy_x334, 0.002); end
  def test_outputs_energy_y334; assert_in_epsilon(13.327912631505646, worksheet.outputs_energy_y334, 0.002); end
  def test_outputs_energy_z334; assert_in_epsilon(15.237704805285054, worksheet.outputs_energy_z334, 0.002); end
  def test_outputs_energy_c335; assert_equal("Chemicals", worksheet.outputs_energy_c335); end
  def test_outputs_energy_d335; assert_equal("Chemicals & petrochemicals.HVC", worksheet.outputs_energy_d335); end
  def test_outputs_energy_e335; assert_equal("Chemicals & petrochemicals.Ammonia", worksheet.outputs_energy_e335); end
  def test_outputs_energy_f335; assert_equal("Chemicals & petrochemicals.Methanol", worksheet.outputs_energy_f335); end
  def test_outputs_energy_g335; assert_equal("Chemicals & petrochemicals.Others", worksheet.outputs_energy_g335); end
  def test_outputs_energy_i335; assert_equal("G.M.02", worksheet.outputs_energy_i335); end
  def test_outputs_energy_r335; assert_in_epsilon(39.734796191719106, worksheet.outputs_energy_r335, 0.002); end
  def test_outputs_energy_s335; assert_in_epsilon(46.92786887622069, worksheet.outputs_energy_s335, 0.002); end
  def test_outputs_energy_t335; assert_in_epsilon(50.50415322348118, worksheet.outputs_energy_t335, 0.002); end
  def test_outputs_energy_u335; assert_in_epsilon(53.90957798779418, worksheet.outputs_energy_u335, 0.002); end
  def test_outputs_energy_v335; assert_in_epsilon(57.52950832072641, worksheet.outputs_energy_v335, 0.002); end
  def test_outputs_energy_w335; assert_in_epsilon(61.050611032735475, worksheet.outputs_energy_w335, 0.002); end
  def test_outputs_energy_x335; assert_in_epsilon(64.90558474464474, worksheet.outputs_energy_x335, 0.002); end
  def test_outputs_energy_y335; assert_in_epsilon(68.91130872166775, worksheet.outputs_energy_y335, 0.002); end
  def test_outputs_energy_z335; assert_in_epsilon(72.36268412757937, worksheet.outputs_energy_z335, 0.002); end
  def test_outputs_energy_c336; assert_equal("Pulp and paper", worksheet.outputs_energy_c336); end
  def test_outputs_energy_d336; assert_equal("Pulp & paper.Pulp", worksheet.outputs_energy_d336); end
  def test_outputs_energy_e336; assert_equal("Pulp & paper.Virgin", worksheet.outputs_energy_e336); end
  def test_outputs_energy_f336; assert_equal("Pulp & paper.Recycled", worksheet.outputs_energy_f336); end
  def test_outputs_energy_i336; assert_equal("G.M.02", worksheet.outputs_energy_i336); end
  def test_outputs_energy_r336; assert_in_epsilon(6.611365904969887, worksheet.outputs_energy_r336, 0.002); end
  def test_outputs_energy_s336; assert_in_epsilon(6.691336947374924, worksheet.outputs_energy_s336, 0.002); end
  def test_outputs_energy_t336; assert_in_epsilon(7.023448785112732, worksheet.outputs_energy_t336, 0.002); end
  def test_outputs_energy_u336; assert_in_epsilon(7.181495507698736, worksheet.outputs_energy_u336, 0.002); end
  def test_outputs_energy_v336; assert_in_epsilon(7.3010674842803525, worksheet.outputs_energy_v336, 0.002); end
  def test_outputs_energy_w336; assert_in_epsilon(7.3855712817719095, worksheet.outputs_energy_w336, 0.002); end
  def test_outputs_energy_x336; assert_in_epsilon(7.436287383652991, worksheet.outputs_energy_x336, 0.002); end
  def test_outputs_energy_y336; assert_in_epsilon(7.452965143477294, worksheet.outputs_energy_y336, 0.002); end
  def test_outputs_energy_z336; assert_in_epsilon(7.43592803119841, worksheet.outputs_energy_z336, 0.002); end
  def test_outputs_energy_c337; assert_equal("Cement", worksheet.outputs_energy_c337); end
  def test_outputs_energy_d337; assert_equal("Cement", worksheet.outputs_energy_d337); end
  def test_outputs_energy_i337; assert_equal("G.M.02", worksheet.outputs_energy_i337); end
  def test_outputs_energy_r337; assert_in_epsilon(10.600379598268718, worksheet.outputs_energy_r337, 0.002); end
  def test_outputs_energy_s337; assert_in_epsilon(12.053621060234942, worksheet.outputs_energy_s337, 0.002); end
  def test_outputs_energy_t337; assert_in_epsilon(12.68885891429089, worksheet.outputs_energy_t337, 0.002); end
  def test_outputs_energy_u337; assert_in_epsilon(13.363052331143288, worksheet.outputs_energy_u337, 0.002); end
  def test_outputs_energy_v337; assert_in_epsilon(14.031508454862376, worksheet.outputs_energy_v337, 0.002); end
  def test_outputs_energy_w337; assert_in_epsilon(14.714905337213283, worksheet.outputs_energy_w337, 0.002); end
  def test_outputs_energy_x337; assert_in_epsilon(15.407559133428913, worksheet.outputs_energy_x337, 0.002); end
  def test_outputs_energy_y337; assert_in_epsilon(16.122427955295258, worksheet.outputs_energy_y337, 0.002); end
  def test_outputs_energy_z337; assert_in_epsilon(16.82503592955349, worksheet.outputs_energy_z337, 0.002); end
  def test_outputs_energy_c338; assert_equal("Other", worksheet.outputs_energy_c338); end
  def test_outputs_energy_d338; assert_equal("Other industries", worksheet.outputs_energy_d338); end
  def test_outputs_energy_i338; assert_equal("G.M.02", worksheet.outputs_energy_i338); end
  def test_outputs_energy_r338; assert_in_epsilon(44.35126743259007, worksheet.outputs_energy_r338, 0.002); end
  def test_outputs_energy_s338; assert_in_epsilon(47.52653874409059, worksheet.outputs_energy_s338, 0.002); end
  def test_outputs_energy_t338; assert_in_epsilon(54.02690341111911, worksheet.outputs_energy_t338, 0.002); end
  def test_outputs_energy_u338; assert_in_epsilon(59.15841482491746, worksheet.outputs_energy_u338, 0.002); end
  def test_outputs_energy_v338; assert_in_epsilon(64.11831263449714, worksheet.outputs_energy_v338, 0.002); end
  def test_outputs_energy_w338; assert_in_epsilon(68.8763145417507, worksheet.outputs_energy_w338, 0.002); end
  def test_outputs_energy_x338; assert_in_epsilon(73.38876457387352, worksheet.outputs_energy_x338, 0.002); end
  def test_outputs_energy_y338; assert_in_epsilon(77.59898830226925, worksheet.outputs_energy_y338, 0.002); end
  def test_outputs_energy_z338; assert_in_epsilon(81.45614761489186, worksheet.outputs_energy_z338, 0.002); end
  def test_outputs_energy_c339; assert_equal("Timber", worksheet.outputs_energy_c339); end
  def test_outputs_energy_d339; assert_equal("Timber", worksheet.outputs_energy_d339); end
  def test_outputs_energy_i339; assert_equal("G.M.02", worksheet.outputs_energy_i339); end
  def test_outputs_energy_r339; assert_in_epsilon(6.142647935033601, worksheet.outputs_energy_r339, 0.002); end
  def test_outputs_energy_s339; assert_in_epsilon(7.240274983700709, worksheet.outputs_energy_s339, 0.002); end
  def test_outputs_energy_t339; assert_in_epsilon(7.190547324977748, worksheet.outputs_energy_t339, 0.002); end
  def test_outputs_energy_u339; assert_in_epsilon(7.4184369842377, worksheet.outputs_energy_u339, 0.002); end
  def test_outputs_energy_v339; assert_in_epsilon(7.621241573862159, worksheet.outputs_energy_v339, 0.002); end
  def test_outputs_energy_w339; assert_in_epsilon(7.812088918080205, worksheet.outputs_energy_w339, 0.002); end
  def test_outputs_energy_x339; assert_in_epsilon(7.986384436766962, worksheet.outputs_energy_x339, 0.002); end
  def test_outputs_energy_y339; assert_in_epsilon(8.157230993994077, worksheet.outputs_energy_y339, 0.002); end
  def test_outputs_energy_z339; assert_in_epsilon(8.284902253798268, worksheet.outputs_energy_z339, 0.002); end
  def test_outputs_energy_c340; assert_equal("Total", worksheet.outputs_energy_c340); end
  def test_outputs_energy_j340; assert_in_epsilon(89.51563572, worksheet.outputs_energy_j340, 0.002); end
  def test_outputs_energy_k340; assert_in_epsilon(96.13700115, worksheet.outputs_energy_k340, 0.002); end
  def test_outputs_energy_l340; assert_in_epsilon(97.93670919, worksheet.outputs_energy_l340, 0.002); end
  def test_outputs_energy_m340; assert_in_epsilon(105.12064196, worksheet.outputs_energy_m340, 0.002); end
  def test_outputs_energy_n340; assert_in_epsilon(120.32151098, worksheet.outputs_energy_n340, 0.002); end
  def test_outputs_energy_o340; assert_in_epsilon(137.98756298, worksheet.outputs_energy_o340, 0.002); end
  def test_outputs_energy_p340; assert_in_epsilon(143.27425753, worksheet.outputs_energy_p340, 0.002); end
  def test_outputs_energy_r340; assert_in_epsilon(141.15236433162164, worksheet.outputs_energy_r340, 0.002); end
  def test_outputs_energy_s340; assert_in_epsilon(159.73403345114036, worksheet.outputs_energy_s340, 0.002); end
  def test_outputs_energy_t340; assert_in_epsilon(173.61823453286016, worksheet.outputs_energy_t340, 0.002); end
  def test_outputs_energy_u340; assert_in_epsilon(186.32815819727512, worksheet.outputs_energy_u340, 0.002); end
  def test_outputs_energy_v340; assert_in_epsilon(199.57575242012717, worksheet.outputs_energy_v340, 0.002); end
  def test_outputs_energy_w340; assert_in_epsilon(212.47347266615, worksheet.outputs_energy_w340, 0.002); end
  def test_outputs_energy_x340; assert_in_epsilon(226.06964835935764, worksheet.outputs_energy_x340, 0.002); end
  def test_outputs_energy_y340; assert_in_epsilon(240.70431832347447, worksheet.outputs_energy_y340, 0.002); end
  def test_outputs_energy_z340; assert_in_epsilon(252.37989693786747, worksheet.outputs_energy_z340, 0.002); end
  def test_outputs_energy_d212; assert_in_epsilon(242607775716314.97, worksheet.outputs_energy_d212, 0.002); end
  def test_outputs_energy_d213; assert_in_epsilon(265349795354999.97, worksheet.outputs_energy_d213, 0.002); end
  def test_outputs_energy_d214; assert_in_epsilon(234824234714999.97, worksheet.outputs_energy_d214, 0.002); end
  def test_outputs_energy_d243; assert_in_epsilon(636000000000000.0, worksheet.outputs_energy_d243, 0.002); end
  def test_outputs_energy_d244; assert_in_epsilon(477000000000000.0, worksheet.outputs_energy_d244, 0.002); end
  def test_outputs_energy_d245; assert_in_epsilon(365700000000000.0, worksheet.outputs_energy_d245, 0.002); end
  def test_outputs_energy_n206; assert_in_epsilon(641.3341439982966, worksheet.outputs_energy_n206, 0.002); end
  def test_outputs_energy_n207; assert_in_epsilon(556.3341439982966, worksheet.outputs_energy_n207, 0.002); end
  def test_outputs_energy_n219; assert_in_epsilon(52.5315836774642, worksheet.outputs_energy_n219, 0.002); end
  def test_outputs_energy_n220; assert_in_epsilon(45.94883091620676, worksheet.outputs_energy_n220, 0.002); end
  def test_outputs_energy_n221; assert_in_epsilon(49.720793533029195, worksheet.outputs_energy_n221, 0.002); end
  def test_outputs_energy_n212; assert_in_epsilon(4476316299144.281, worksheet.outputs_energy_n212, 0.002); end
  def test_outputs_energy_n213; assert_in_epsilon(27218335937829.28, worksheet.outputs_energy_n213, 0.002); end
  def test_outputs_energy_n214; assert_in_epsilon(-3307224702170.7188, worksheet.outputs_energy_n214, 0.002); end
  def test_outputs_energy_c348; assert_equal("Description", worksheet.outputs_energy_c348); end
  def test_outputs_energy_r348; assert_in_epsilon(2011.0, worksheet.outputs_energy_r348, 0.002); end
  def test_outputs_energy_s348; assert_equal("2015", worksheet.outputs_energy_s348); end
  def test_outputs_energy_t348; assert_equal("2020", worksheet.outputs_energy_t348); end
  def test_outputs_energy_u348; assert_equal("2025", worksheet.outputs_energy_u348); end
  def test_outputs_energy_v348; assert_equal("2030", worksheet.outputs_energy_v348); end
  def test_outputs_energy_w348; assert_equal("2035", worksheet.outputs_energy_w348); end
  def test_outputs_energy_x348; assert_equal("2040", worksheet.outputs_energy_x348); end
  def test_outputs_energy_y348; assert_equal("2045", worksheet.outputs_energy_y348); end
  def test_outputs_energy_z348; assert_equal("2050", worksheet.outputs_energy_z348); end
  def test_outputs_energy_c349; assert_equal("G.T.01", worksheet.outputs_energy_c349); end
  def test_outputs_energy_d349; assert_equal("Global Road transport", worksheet.outputs_energy_d349); end
  def test_outputs_energy_r349; assert_in_epsilon(75.68870072553707, worksheet.outputs_energy_r349, 0.002); end
  def test_outputs_energy_s349; assert_in_epsilon(82.44451723140169, worksheet.outputs_energy_s349, 0.002); end
  def test_outputs_energy_t349; assert_in_epsilon(90.1317156990527, worksheet.outputs_energy_t349, 0.002); end
  def test_outputs_energy_u349; assert_in_epsilon(97.92702888955812, worksheet.outputs_energy_u349, 0.002); end
  def test_outputs_energy_v349; assert_in_epsilon(105.83556128072522, worksheet.outputs_energy_v349, 0.002); end
  def test_outputs_energy_w349; assert_in_epsilon(113.87623733233367, worksheet.outputs_energy_w349, 0.002); end
  def test_outputs_energy_x349; assert_in_epsilon(122.05778907545604, worksheet.outputs_energy_x349, 0.002); end
  def test_outputs_energy_y349; assert_in_epsilon(130.38791499507016, worksheet.outputs_energy_y349, 0.002); end
  def test_outputs_energy_z349; assert_in_epsilon(138.85453683120545, worksheet.outputs_energy_z349, 0.002); end
  def test_outputs_energy_c350; assert_equal("G.T.02", worksheet.outputs_energy_c350); end
  def test_outputs_energy_d350; assert_equal("Global Rail transport", worksheet.outputs_energy_d350); end
  def test_outputs_energy_r350; assert_in_epsilon(2.4091156476984814, worksheet.outputs_energy_r350, 0.002); end
  def test_outputs_energy_s350; assert_in_epsilon(2.545568654539298, worksheet.outputs_energy_s350, 0.002); end
  def test_outputs_energy_t350; assert_in_epsilon(2.6941114304323865, worksheet.outputs_energy_t350, 0.002); end
  def test_outputs_energy_u350; assert_in_epsilon(2.849005486897882, worksheet.outputs_energy_u350, 0.002); end
  def test_outputs_energy_v350; assert_in_epsilon(3.0114884998714784, worksheet.outputs_energy_v350, 0.002); end
  def test_outputs_energy_w350; assert_in_epsilon(3.183130755869466, worksheet.outputs_energy_w350, 0.002); end
  def test_outputs_energy_x350; assert_in_epsilon(3.3651837600966163, worksheet.outputs_energy_x350, 0.002); end
  def test_outputs_energy_y350; assert_in_epsilon(3.55832273486456, worksheet.outputs_energy_y350, 0.002); end
  def test_outputs_energy_z350; assert_in_epsilon(3.7646218677057255, worksheet.outputs_energy_z350, 0.002); end
  def test_outputs_energy_c351; assert_equal("G.T.03", worksheet.outputs_energy_c351); end
  def test_outputs_energy_d351; assert_equal("Global Aviation transport", worksheet.outputs_energy_d351); end
  def test_outputs_energy_r351; assert_in_epsilon(12.016139275082482, worksheet.outputs_energy_r351, 0.002); end
  def test_outputs_energy_s351; assert_in_epsilon(13.015141256220947, worksheet.outputs_energy_s351, 0.002); end
  def test_outputs_energy_t351; assert_in_epsilon(13.969402606750762, worksheet.outputs_energy_t351, 0.002); end
  def test_outputs_energy_u351; assert_in_epsilon(14.984499960731224, worksheet.outputs_energy_u351, 0.002); end
  def test_outputs_energy_v351; assert_in_epsilon(16.078669367410797, worksheet.outputs_energy_v351, 0.002); end
  def test_outputs_energy_w351; assert_in_epsilon(17.27535957023205, worksheet.outputs_energy_w351, 0.002); end
  def test_outputs_energy_x351; assert_in_epsilon(18.595789381051723, worksheet.outputs_energy_x351, 0.002); end
  def test_outputs_energy_y351; assert_in_epsilon(20.059135608789205, worksheet.outputs_energy_y351, 0.002); end
  def test_outputs_energy_z351; assert_in_epsilon(21.686688581705862, worksheet.outputs_energy_z351, 0.002); end
  def test_outputs_energy_c352; assert_equal("G.T.04", worksheet.outputs_energy_c352); end
  def test_outputs_energy_d352; assert_equal("Global Water transport", worksheet.outputs_energy_d352); end
  def test_outputs_energy_r352; assert_in_epsilon(9.213483104740165, worksheet.outputs_energy_r352, 0.002); end
  def test_outputs_energy_s352; assert_in_epsilon(9.529703203821551, worksheet.outputs_energy_s352, 0.002); end
  def test_outputs_energy_t352; assert_in_epsilon(9.823164957543458, worksheet.outputs_energy_t352, 0.002); end
  def test_outputs_energy_u352; assert_in_epsilon(10.122865248892202, worksheet.outputs_energy_u352, 0.002); end
  def test_outputs_energy_v352; assert_in_epsilon(10.42872974964944, worksheet.outputs_energy_v352, 0.002); end
  def test_outputs_energy_w352; assert_in_epsilon(10.740662823440497, worksheet.outputs_energy_w352, 0.002); end
  def test_outputs_energy_x352; assert_in_epsilon(11.05854566307615, worksheet.outputs_energy_x352, 0.002); end
  def test_outputs_energy_y352; assert_in_epsilon(11.382234298798666, worksheet.outputs_energy_y352, 0.002); end
  def test_outputs_energy_z352; assert_in_epsilon(11.711557469362482, worksheet.outputs_energy_z352, 0.002); end
  def test_outputs_energy_d226; assert_in_delta(0.0063, worksheet.outputs_energy_d226, 0.002); end
  def test_outputs_energy_d227; assert_in_delta(0.016, worksheet.outputs_energy_d227, 0.002); end
  def test_outputs_energy_d228; assert_in_delta(0.038, worksheet.outputs_energy_d228, 0.002); end
  def test_outputs_energy_d258; assert_in_epsilon(4.0, worksheet.outputs_energy_d258, 0.002); end
  def test_outputs_climate_impacts_c532; assert_equal("In order to avoid the most dangerous impacts of global climate change the international community agreed limiting global average temperature increase to no more than 2°C above pre-industrial levels (UNFCCC Cancun 2010).", worksheet.outputs_climate_impacts_c532); end
  def test_outputs_climate_impacts_h54; assert_in_epsilon(3300000.0, worksheet.outputs_climate_impacts_h54, 0.002); end
  def test_outputs_climate_impacts_i54; assert_in_epsilon(8100000.0, worksheet.outputs_climate_impacts_i54, 0.002); end
  def test_outputs_climate_impacts_i59; assert_in_epsilon(640000.0, worksheet.outputs_climate_impacts_i59, 0.002); end
  def test_outputs_climate_impacts_i64; assert_in_epsilon(1.8, worksheet.outputs_climate_impacts_i64, 0.002); end
  def test_outputs_climate_impacts_i69; assert_in_delta(0.39, worksheet.outputs_climate_impacts_i69, 0.002); end
  def test_outputs_climate_impacts_d11; assert_in_epsilon(3.773810978341085, worksheet.outputs_climate_impacts_d11, 0.002); end
  def test_outputs_climate_impacts_d12; assert_in_delta(0.8452542534863179, worksheet.outputs_climate_impacts_d12, 0.002); end
  def test_outputs_climate_impacts_e11; assert_in_epsilon(6.419914126321352, worksheet.outputs_climate_impacts_e11, 0.002); end
  def test_outputs_climate_impacts_e12; assert_in_epsilon(2.1886526950453007, worksheet.outputs_climate_impacts_e12, 0.002); end
  def test_outputs_climate_impacts_d26; assert_in_epsilon(1870.0, worksheet.outputs_climate_impacts_d26, 0.002); end
  def test_outputs_climate_impacts_e26; assert_in_epsilon(1880.0, worksheet.outputs_climate_impacts_e26, 0.002); end
  def test_outputs_climate_impacts_f26; assert_in_epsilon(1890.0, worksheet.outputs_climate_impacts_f26, 0.002); end
  def test_outputs_climate_impacts_g26; assert_in_epsilon(1900.0, worksheet.outputs_climate_impacts_g26, 0.002); end
  def test_outputs_climate_impacts_h26; assert_in_epsilon(1910.0, worksheet.outputs_climate_impacts_h26, 0.002); end
  def test_outputs_climate_impacts_i26; assert_in_epsilon(1920.0, worksheet.outputs_climate_impacts_i26, 0.002); end
  def test_outputs_climate_impacts_j26; assert_in_epsilon(1930.0, worksheet.outputs_climate_impacts_j26, 0.002); end
  def test_outputs_climate_impacts_k26; assert_in_epsilon(1940.0, worksheet.outputs_climate_impacts_k26, 0.002); end
  def test_outputs_climate_impacts_l26; assert_in_epsilon(1950.0, worksheet.outputs_climate_impacts_l26, 0.002); end
  def test_outputs_climate_impacts_m26; assert_in_epsilon(1960.0, worksheet.outputs_climate_impacts_m26, 0.002); end
  def test_outputs_climate_impacts_n26; assert_in_epsilon(1970.0, worksheet.outputs_climate_impacts_n26, 0.002); end
  def test_outputs_climate_impacts_o26; assert_in_epsilon(1980.0, worksheet.outputs_climate_impacts_o26, 0.002); end
  def test_outputs_climate_impacts_p26; assert_in_epsilon(1990.0, worksheet.outputs_climate_impacts_p26, 0.002); end
  def test_outputs_climate_impacts_q26; assert_in_epsilon(2000.0, worksheet.outputs_climate_impacts_q26, 0.002); end
  def test_outputs_climate_impacts_r26; assert_in_epsilon(2005.0, worksheet.outputs_climate_impacts_r26, 0.002); end
  def test_outputs_climate_impacts_s26; assert_in_epsilon(2010.0, worksheet.outputs_climate_impacts_s26, 0.002); end
  def test_outputs_climate_impacts_t26; assert_in_epsilon(2011.0, worksheet.outputs_climate_impacts_t26, 0.002); end
  def test_outputs_climate_impacts_u26; assert_in_epsilon(2013.0, worksheet.outputs_climate_impacts_u26, 0.002); end
  def test_outputs_climate_impacts_v26; assert_in_epsilon(2015.0, worksheet.outputs_climate_impacts_v26, 0.002); end
  def test_outputs_climate_impacts_w26; assert_in_epsilon(2020.0, worksheet.outputs_climate_impacts_w26, 0.002); end
  def test_outputs_climate_impacts_x26; assert_in_epsilon(2025.0, worksheet.outputs_climate_impacts_x26, 0.002); end
  def test_outputs_climate_impacts_y26; assert_in_epsilon(2030.0, worksheet.outputs_climate_impacts_y26, 0.002); end
  def test_outputs_climate_impacts_z26; assert_in_epsilon(2035.0, worksheet.outputs_climate_impacts_z26, 0.002); end
  def test_outputs_climate_impacts_aa26; assert_in_epsilon(2040.0, worksheet.outputs_climate_impacts_aa26, 0.002); end
  def test_outputs_climate_impacts_ab26; assert_in_epsilon(2045.0, worksheet.outputs_climate_impacts_ab26, 0.002); end
  def test_outputs_climate_impacts_ac26; assert_in_epsilon(2050.0, worksheet.outputs_climate_impacts_ac26, 0.002); end
  def test_outputs_climate_impacts_ad26; assert_in_epsilon(2055.0, worksheet.outputs_climate_impacts_ad26, 0.002); end
  def test_outputs_climate_impacts_ae26; assert_in_epsilon(2060.0, worksheet.outputs_climate_impacts_ae26, 0.002); end
  def test_outputs_climate_impacts_af26; assert_in_epsilon(2065.0, worksheet.outputs_climate_impacts_af26, 0.002); end
  def test_outputs_climate_impacts_ag26; assert_in_epsilon(2070.0, worksheet.outputs_climate_impacts_ag26, 0.002); end
  def test_outputs_climate_impacts_ah26; assert_in_epsilon(2075.0, worksheet.outputs_climate_impacts_ah26, 0.002); end
  def test_outputs_climate_impacts_ai26; assert_in_epsilon(2080.0, worksheet.outputs_climate_impacts_ai26, 0.002); end
  def test_outputs_climate_impacts_aj26; assert_in_epsilon(2085.0, worksheet.outputs_climate_impacts_aj26, 0.002); end
  def test_outputs_climate_impacts_ak26; assert_in_epsilon(2090.0, worksheet.outputs_climate_impacts_ak26, 0.002); end
  def test_outputs_climate_impacts_al26; assert_in_epsilon(2095.0, worksheet.outputs_climate_impacts_al26, 0.002); end
  def test_outputs_climate_impacts_am26; assert_in_epsilon(2100.0, worksheet.outputs_climate_impacts_am26, 0.002); end
  def test_outputs_climate_impacts_c27; assert_equal("High estimate", worksheet.outputs_climate_impacts_c27); end
  def test_outputs_climate_impacts_w27; assert_in_epsilon(2.244782481932758, worksheet.outputs_climate_impacts_w27, 0.002); end
  def test_outputs_climate_impacts_x27; assert_in_epsilon(2.453062447784629, worksheet.outputs_climate_impacts_x27, 0.002); end
  def test_outputs_climate_impacts_y27; assert_in_epsilon(2.678935093261683, worksheet.outputs_climate_impacts_y27, 0.002); end
  def test_outputs_climate_impacts_z27; assert_in_epsilon(2.9318608476332133, worksheet.outputs_climate_impacts_z27, 0.002); end
  def test_outputs_climate_impacts_aa27; assert_in_epsilon(3.2057174065797014, worksheet.outputs_climate_impacts_aa27, 0.002); end
  def test_outputs_climate_impacts_ab27; assert_in_epsilon(3.485298530594398, worksheet.outputs_climate_impacts_ab27, 0.002); end
  def test_outputs_climate_impacts_ac27; assert_in_epsilon(3.773810978341085, worksheet.outputs_climate_impacts_ac27, 0.002); end
  def test_outputs_climate_impacts_ad27; assert_in_epsilon(4.02694348615308, worksheet.outputs_climate_impacts_ad27, 0.002); end
  def test_outputs_climate_impacts_ae27; assert_in_epsilon(4.257136353398504, worksheet.outputs_climate_impacts_ae27, 0.002); end
  def test_outputs_climate_impacts_af27; assert_in_epsilon(4.495598239555804, worksheet.outputs_climate_impacts_af27, 0.002); end
  def test_outputs_climate_impacts_ag27; assert_in_epsilon(4.742916573268964, worksheet.outputs_climate_impacts_ag27, 0.002); end
  def test_outputs_climate_impacts_ah27; assert_in_epsilon(4.998830822739299, worksheet.outputs_climate_impacts_ah27, 0.002); end
  def test_outputs_climate_impacts_ai27; assert_in_epsilon(5.263828314779133, worksheet.outputs_climate_impacts_ai27, 0.002); end
  def test_outputs_climate_impacts_aj27; assert_in_epsilon(5.53819658412992, worksheet.outputs_climate_impacts_aj27, 0.002); end
  def test_outputs_climate_impacts_ak27; assert_in_epsilon(5.8221172610744105, worksheet.outputs_climate_impacts_ak27, 0.002); end
  def test_outputs_climate_impacts_al27; assert_in_epsilon(6.115928120903645, worksheet.outputs_climate_impacts_al27, 0.002); end
  def test_outputs_climate_impacts_am27; assert_in_epsilon(6.419914126321352, worksheet.outputs_climate_impacts_am27, 0.002); end
  def test_outputs_climate_impacts_c28; assert_equal("Actual (NASA)", worksheet.outputs_climate_impacts_c28); end
  def test_outputs_climate_impacts_f28; assert_in_delta(-0.031, worksheet.outputs_climate_impacts_f28, 0.002); end
  def test_outputs_climate_impacts_g28; assert_in_delta(-0.031, worksheet.outputs_climate_impacts_g28, 0.002); end
  def test_outputs_climate_impacts_h28; assert_in_delta(-0.231, worksheet.outputs_climate_impacts_h28, 0.002); end
  def test_outputs_climate_impacts_i28; assert_in_delta(-0.061000000000000026, worksheet.outputs_climate_impacts_i28, 0.002); end
  def test_outputs_climate_impacts_j28; assert_in_delta(0.059, worksheet.outputs_climate_impacts_j28, 0.002); end
  def test_outputs_climate_impacts_k28; assert_in_delta(0.259, worksheet.outputs_climate_impacts_k28, 0.002); end
  def test_outputs_climate_impacts_l28; assert_in_delta(0.119, worksheet.outputs_climate_impacts_l28, 0.002); end
  def test_outputs_climate_impacts_m28; assert_in_delta(0.22899999999999998, worksheet.outputs_climate_impacts_m28, 0.002); end
  def test_outputs_climate_impacts_n28; assert_in_delta(0.209, worksheet.outputs_climate_impacts_n28, 0.002); end
  def test_outputs_climate_impacts_o28; assert_in_delta(0.359, worksheet.outputs_climate_impacts_o28, 0.002); end
  def test_outputs_climate_impacts_p28; assert_in_delta(0.519, worksheet.outputs_climate_impacts_p28, 0.002); end
  def test_outputs_climate_impacts_q28; assert_in_delta(0.719, worksheet.outputs_climate_impacts_q28, 0.002); end
  def test_outputs_climate_impacts_r28; assert_in_delta(0.7989999999999999, worksheet.outputs_climate_impacts_r28, 0.002); end
  def test_outputs_climate_impacts_s28; assert_in_delta(0.7789999999999999, worksheet.outputs_climate_impacts_s28, 0.002); end
  def test_outputs_climate_impacts_t28; assert_in_delta(0.7989999999999999, worksheet.outputs_climate_impacts_t28, 0.002); end
  def test_outputs_climate_impacts_u28; assert_in_delta(0.7989999999999999, worksheet.outputs_climate_impacts_u28, 0.002); end
  def test_outputs_climate_impacts_c29; assert_equal("Actual (HadCRUT3)", worksheet.outputs_climate_impacts_c29); end
  def test_outputs_climate_impacts_d29; assert_in_delta(-0.0020333333333333314, worksheet.outputs_climate_impacts_d29, 0.002); end
  def test_outputs_climate_impacts_e29; assert_in_delta(0.08556666666666674, worksheet.outputs_climate_impacts_e29, 0.002); end
  def test_outputs_climate_impacts_f29; assert_in_delta(-0.08383333333333326, worksheet.outputs_climate_impacts_f29, 0.002); end
  def test_outputs_climate_impacts_g29; assert_in_delta(-0.06043333333333328, worksheet.outputs_climate_impacts_g29, 0.002); end
  def test_outputs_climate_impacts_h29; assert_in_delta(-0.2668333333333333, worksheet.outputs_climate_impacts_h29, 0.002); end
  def test_outputs_climate_impacts_i29; assert_in_delta(-0.052633333333333254, worksheet.outputs_climate_impacts_i29, 0.002); end
  def test_outputs_climate_impacts_j29; assert_in_delta(0.06776666666666673, worksheet.outputs_climate_impacts_j29, 0.002); end
  def test_outputs_climate_impacts_k29; assert_in_delta(0.29756666666666676, worksheet.outputs_climate_impacts_k29, 0.002); end
  def test_outputs_climate_impacts_l29; assert_in_delta(0.08816666666666673, worksheet.outputs_climate_impacts_l29, 0.002); end
  def test_outputs_climate_impacts_m29; assert_in_delta(0.23116666666666674, worksheet.outputs_climate_impacts_m29, 0.002); end
  def test_outputs_climate_impacts_n29; assert_in_delta(0.18496666666666672, worksheet.outputs_climate_impacts_n29, 0.002); end
  def test_outputs_climate_impacts_o29; assert_in_delta(0.3201666666666667, worksheet.outputs_climate_impacts_o29, 0.002); end
  def test_outputs_climate_impacts_p29; assert_in_delta(0.44456666666666667, worksheet.outputs_climate_impacts_p29, 0.002); end
  def test_outputs_climate_impacts_q29; assert_in_delta(0.6799666666666668, worksheet.outputs_climate_impacts_q29, 0.002); end
  def test_outputs_climate_impacts_r29; assert_in_delta(0.7283666666666667, worksheet.outputs_climate_impacts_r29, 0.002); end
  def test_outputs_climate_impacts_s29; assert_in_delta(0.6799666666666668, worksheet.outputs_climate_impacts_s29, 0.002); end
  def test_outputs_climate_impacts_t29; assert_in_delta(0.7063666666666668, worksheet.outputs_climate_impacts_t29, 0.002); end
  def test_outputs_climate_impacts_u29; assert_in_delta(0.7391666666666667, worksheet.outputs_climate_impacts_u29, 0.002); end
  def test_outputs_climate_impacts_c30; assert_equal("Actual (HadCRUT4)", worksheet.outputs_climate_impacts_c30); end
  def test_outputs_climate_impacts_d30; assert_in_delta(0.024, worksheet.outputs_climate_impacts_d30, 0.002); end
  def test_outputs_climate_impacts_e30; assert_in_delta(0.117, worksheet.outputs_climate_impacts_e30, 0.002); end
  def test_outputs_climate_impacts_f30; assert_in_delta(-0.052, worksheet.outputs_climate_impacts_f30, 0.002); end
  def test_outputs_climate_impacts_g30; assert_in_delta(-0.027, worksheet.outputs_climate_impacts_g30, 0.002); end
  def test_outputs_climate_impacts_h30; assert_in_delta(-0.224, worksheet.outputs_climate_impacts_h30, 0.002); end
  def test_outputs_climate_impacts_i30; assert_in_delta(0.012, worksheet.outputs_climate_impacts_i30, 0.002); end
  def test_outputs_climate_impacts_j30; assert_in_delta(0.103, worksheet.outputs_climate_impacts_j30, 0.002); end
  def test_outputs_climate_impacts_k30; assert_in_delta(0.278, worksheet.outputs_climate_impacts_k30, 0.002); end
  def test_outputs_climate_impacts_l30; assert_in_delta(0.227, worksheet.outputs_climate_impacts_l30, 0.002); end
  def test_outputs_climate_impacts_m30; assert_in_delta(0.302, worksheet.outputs_climate_impacts_m30, 0.002); end
  def test_outputs_climate_impacts_n30; assert_in_delta(0.214, worksheet.outputs_climate_impacts_n30, 0.002); end
  def test_outputs_climate_impacts_o30; assert_in_delta(0.336, worksheet.outputs_climate_impacts_o30, 0.002); end
  def test_outputs_climate_impacts_p30; assert_in_delta(0.481, worksheet.outputs_climate_impacts_p30, 0.002); end
  def test_outputs_climate_impacts_q30; assert_in_delta(0.698, worksheet.outputs_climate_impacts_q30, 0.002); end
  def test_outputs_climate_impacts_r30; assert_in_delta(0.78, worksheet.outputs_climate_impacts_r30, 0.002); end
  def test_outputs_climate_impacts_s30; assert_in_delta(0.744, worksheet.outputs_climate_impacts_s30, 0.002); end
  def test_outputs_climate_impacts_t30; assert_in_delta(0.764, worksheet.outputs_climate_impacts_t30, 0.002); end
  def test_outputs_climate_impacts_u30; assert_in_delta(0.774, worksheet.outputs_climate_impacts_u30, 0.002); end
  def test_outputs_climate_impacts_c31; assert_equal("Low estimate", worksheet.outputs_climate_impacts_c31); end
  def test_outputs_climate_impacts_w31; assert_in_delta(0.3584244817228228, worksheet.outputs_climate_impacts_w31, 0.002); end
  def test_outputs_climate_impacts_x31; assert_in_delta(0.424739065444941, worksheet.outputs_climate_impacts_x31, 0.002); end
  def test_outputs_climate_impacts_y31; assert_in_delta(0.49665500991785927, worksheet.outputs_climate_impacts_y31, 0.002); end
  def test_outputs_climate_impacts_z31; assert_in_delta(0.5771844359965999, worksheet.outputs_climate_impacts_z31, 0.002); end
  def test_outputs_climate_impacts_aa31; assert_in_delta(0.6643780536440316, worksheet.outputs_climate_impacts_aa31, 0.002); end
  def test_outputs_climate_impacts_ab31; assert_in_delta(0.7533943245069838, worksheet.outputs_climate_impacts_ab31, 0.002); end
  def test_outputs_climate_impacts_ac31; assert_in_delta(0.8452542534863179, worksheet.outputs_climate_impacts_ac31, 0.002); end
  def test_outputs_climate_impacts_ad31; assert_in_delta(0.953035408599916, worksheet.outputs_climate_impacts_ad31, 0.002); end
  def test_outputs_climate_impacts_ae31; assert_in_epsilon(1.071896159003804, worksheet.outputs_climate_impacts_ae31, 0.002); end
  def test_outputs_climate_impacts_af31; assert_in_epsilon(1.1950266411536445, worksheet.outputs_climate_impacts_af31, 0.002); end
  def test_outputs_climate_impacts_ag31; assert_in_epsilon(1.3227301755226915, worksheet.outputs_climate_impacts_ag31, 0.002); end
  def test_outputs_climate_impacts_ah31; assert_in_epsilon(1.4548722357658572, worksheet.outputs_climate_impacts_ah31, 0.002); end
  def test_outputs_climate_impacts_ai31; assert_in_epsilon(1.5917044544871302, worksheet.outputs_climate_impacts_ai31, 0.002); end
  def test_outputs_climate_impacts_aj31; assert_in_epsilon(1.7333753010789197, worksheet.outputs_climate_impacts_aj31, 0.002); end
  def test_outputs_climate_impacts_ak31; assert_in_epsilon(1.8799785608611705, worksheet.outputs_climate_impacts_ak31, 0.002); end
  def test_outputs_climate_impacts_al31; assert_in_epsilon(2.031688645078859, worksheet.outputs_climate_impacts_al31, 0.002); end
  def test_outputs_climate_impacts_am31; assert_in_epsilon(2.1886526950453007, worksheet.outputs_climate_impacts_am31, 0.002); end
  def test_outputs_climate_impacts_i9; assert_equal("no warning", worksheet.outputs_climate_impacts_i9); end
  def test_conversions_b66; assert_equal("Unit", worksheet.conversions_b66); end
  def test_conversions_c66; assert_equal("Name", worksheet.conversions_c66); end
  def test_conversions_d66; assert_equal("Name in formulae", worksheet.conversions_d66); end
  def test_conversions_e66; assert_equal("m^2", worksheet.conversions_e66); end
  def test_conversions_f66; assert_equal("M ha", worksheet.conversions_f66); end
  def test_conversions_b67; assert_equal("ha", worksheet.conversions_b67); end
  def test_conversions_c67; assert_equal("Hectares", worksheet.conversions_c67); end
  def test_conversions_d67; assert_equal("Unit.ha", worksheet.conversions_d67); end
  def test_conversions_e67; assert_in_epsilon(10000.0, worksheet.conversions_e67, 0.002); end
  def test_conversions_f67; assert_in_delta(1.0e-06, worksheet.conversions_f67, 0.002); end
  def test_conversions_b68; assert_equal("M ha", worksheet.conversions_b68); end
  def test_conversions_c68; assert_equal("Million hectares", worksheet.conversions_c68); end
  def test_conversions_d68; assert_equal("Unit.Mha", worksheet.conversions_d68); end
  def test_conversions_e68; assert_in_epsilon(10000000000.0, worksheet.conversions_e68, 0.002); end
  def test_conversions_f68; assert_in_delta(1.0, worksheet.conversions_f68, 0.002); end
  def test_conversions_b69; assert_equal("acres", worksheet.conversions_b69); end
  def test_conversions_c69; assert_equal("Acres", worksheet.conversions_c69); end
  def test_conversions_d69; assert_equal("Unit.acre", worksheet.conversions_d69); end
  def test_conversions_e69; assert_in_epsilon(4046.8564224, worksheet.conversions_e69, 0.002); end
  def test_conversions_f69; assert_in_delta(4.0468564224000004e-07, worksheet.conversions_f69, 0.002); end
  def test_conversions_b70; assert_equal("km^2", worksheet.conversions_b70); end
  def test_conversions_c70; assert_equal("Square kilometres", worksheet.conversions_c70); end
  def test_conversions_d70; assert_equal("Unit.km2", worksheet.conversions_d70); end
  def test_conversions_e70; assert_in_epsilon(1000000.0, worksheet.conversions_e70, 0.002); end
  def test_conversions_f70; assert_in_delta(0.0001, worksheet.conversions_f70, 0.002); end
  def test_conversions_b71; assert_equal("m^2", worksheet.conversions_b71); end
  def test_conversions_c71; assert_equal("Square metres", worksheet.conversions_c71); end
  def test_conversions_d71; assert_equal("Unit.m2", worksheet.conversions_d71); end
  def test_conversions_e71; assert_in_delta(1.0, worksheet.conversions_e71, 0.002); end
  def test_conversions_f71; assert_in_delta(1.0e-10, worksheet.conversions_f71, 0.002); end
  def test_conversions_b72; assert_equal("Australia", worksheet.conversions_b72); end
  def test_conversions_c72; assert_equal("Australia", worksheet.conversions_c72); end
  def test_conversions_d72; assert_equal("Unit.Australia", worksheet.conversions_d72); end
  def test_conversions_e72; assert_in_epsilon(7686850000000.0, worksheet.conversions_e72, 0.002); end
  def test_conversions_f72; assert_in_epsilon(768.685, worksheet.conversions_f72, 0.002); end
  def test_conversions_b73; assert_equal("India", worksheet.conversions_b73); end
  def test_conversions_c73; assert_equal("India", worksheet.conversions_c73); end
  def test_conversions_d73; assert_equal("Unit.India", worksheet.conversions_d73); end
  def test_conversions_e73; assert_in_epsilon(3287263000000.0, worksheet.conversions_e73, 0.002); end
  def test_conversions_f73; assert_in_epsilon(328.7263, worksheet.conversions_f73, 0.002); end
  def test_conversions_b74; assert_equal("Brazil", worksheet.conversions_b74); end
  def test_conversions_c74; assert_equal("Brazil", worksheet.conversions_c74); end
  def test_conversions_d74; assert_equal("Unit.Brazil", worksheet.conversions_d74); end
  def test_conversions_e74; assert_in_epsilon(8515767000000.0, worksheet.conversions_e74, 0.002); end
  def test_conversions_f74; assert_in_epsilon(851.5767, worksheet.conversions_f74, 0.002); end
  def test_conversions_b75; assert_equal("China", worksheet.conversions_b75); end
  def test_conversions_c75; assert_equal("China", worksheet.conversions_c75); end
  def test_conversions_d75; assert_equal("Unit.China", worksheet.conversions_d75); end
  def test_conversions_e75; assert_in_epsilon(9706961000000.0, worksheet.conversions_e75, 0.002); end
  def test_conversions_f75; assert_in_epsilon(970.6961, worksheet.conversions_f75, 0.002); end
  def test_conversions_b76; assert_equal("South Africa", worksheet.conversions_b76); end
  def test_conversions_c76; assert_equal("South Africa", worksheet.conversions_c76); end
  def test_conversions_d76; assert_equal("Unit.SouthAfrica", worksheet.conversions_d76); end
  def test_conversions_e76; assert_in_epsilon(1221037000000.0, worksheet.conversions_e76, 0.002); end
  def test_conversions_f76; assert_in_epsilon(122.1037, worksheet.conversions_f76, 0.002); end
  def test_conversions_b6; assert_equal("Unit", worksheet.conversions_b6); end
  def test_conversions_c6; assert_equal("Name", worksheet.conversions_c6); end
  def test_conversions_d6; assert_equal("Name in formulae", worksheet.conversions_d6); end
  def test_conversions_e6; assert_equal("Joules", worksheet.conversions_e6); end
  def test_conversions_f6; assert_equal("EJ", worksheet.conversions_f6); end
  def test_conversions_b7; assert_equal("EJ", worksheet.conversions_b7); end
  def test_conversions_c7; assert_equal("Exajoules", worksheet.conversions_c7); end
  def test_conversions_d7; assert_equal("Unit.EJ", worksheet.conversions_d7); end
  def test_conversions_e7; assert_in_epsilon(1.0e+18, worksheet.conversions_e7, 0.002); end
  def test_conversions_f7; assert_in_delta(1.0, worksheet.conversions_f7, 0.002); end
  def test_conversions_b8; assert_equal("PJ", worksheet.conversions_b8); end
  def test_conversions_c8; assert_equal("Petajoules", worksheet.conversions_c8); end
  def test_conversions_d8; assert_equal("Unit.PJ", worksheet.conversions_d8); end
  def test_conversions_e8; assert_in_epsilon(1.0e+15, worksheet.conversions_e8, 0.002); end
  def test_conversions_f8; assert_in_delta(0.001, worksheet.conversions_f8, 0.002); end
  def test_conversions_b9; assert_equal("TJ", worksheet.conversions_b9); end
  def test_conversions_c9; assert_equal("Terajoules", worksheet.conversions_c9); end
  def test_conversions_d9; assert_equal("Unit.TJ", worksheet.conversions_d9); end
  def test_conversions_e9; assert_in_epsilon(1000000000000.0, worksheet.conversions_e9, 0.002); end
  def test_conversions_f9; assert_in_delta(1.0e-06, worksheet.conversions_f9, 0.002); end
  def test_conversions_b10; assert_equal("GJ", worksheet.conversions_b10); end
  def test_conversions_c10; assert_equal("Gigajoules", worksheet.conversions_c10); end
  def test_conversions_d10; assert_equal("Unit.GJ", worksheet.conversions_d10); end
  def test_conversions_e10; assert_in_epsilon(1000000000.0, worksheet.conversions_e10, 0.002); end
  def test_conversions_f10; assert_in_delta(1.0e-09, worksheet.conversions_f10, 0.002); end
  def test_conversions_b11; assert_equal("MJ", worksheet.conversions_b11); end
  def test_conversions_c11; assert_equal("Megajoules", worksheet.conversions_c11); end
  def test_conversions_d11; assert_equal("Unit.MJ", worksheet.conversions_d11); end
  def test_conversions_e11; assert_in_epsilon(1000000.0, worksheet.conversions_e11, 0.002); end
  def test_conversions_f11; assert_in_delta(1.0e-12, worksheet.conversions_f11, 0.002); end
  def test_conversions_b12; assert_equal("J", worksheet.conversions_b12); end
  def test_conversions_c12; assert_equal("Joules", worksheet.conversions_c12); end
  def test_conversions_d12; assert_equal("Unit.J", worksheet.conversions_d12); end
  def test_conversions_e12; assert_in_delta(1.0, worksheet.conversions_e12, 0.002); end
  def test_conversions_f12; assert_in_delta(1.0e-18, worksheet.conversions_f12, 0.002); end
  def test_conversions_b13; assert_equal("TWh", worksheet.conversions_b13); end
  def test_conversions_c13; assert_equal("Terawatt-hours", worksheet.conversions_c13); end
  def test_conversions_d13; assert_equal("Unit.TWh", worksheet.conversions_d13); end
  def test_conversions_e13; assert_in_epsilon(3.6e+15, worksheet.conversions_e13, 0.002); end
  def test_conversions_f13; assert_in_delta(0.0036, worksheet.conversions_f13, 0.002); end
  def test_conversions_b14; assert_equal("GWh", worksheet.conversions_b14); end
  def test_conversions_c14; assert_equal("Gigawatt-hours", worksheet.conversions_c14); end
  def test_conversions_d14; assert_equal("Unit.GWh", worksheet.conversions_d14); end
  def test_conversions_e14; assert_in_epsilon(3600000000000.0, worksheet.conversions_e14, 0.002); end
  def test_conversions_f14; assert_in_delta(3.6e-06, worksheet.conversions_f14, 0.002); end
  def test_conversions_b15; assert_equal("MWh", worksheet.conversions_b15); end
  def test_conversions_c15; assert_equal("Megawatt-hours", worksheet.conversions_c15); end
  def test_conversions_d15; assert_equal("Unit.MWh", worksheet.conversions_d15); end
  def test_conversions_e15; assert_in_epsilon(3600000000.0, worksheet.conversions_e15, 0.002); end
  def test_conversions_f15; assert_in_delta(3.6e-09, worksheet.conversions_f15, 0.002); end
  def test_conversions_b16; assert_equal("kWh", worksheet.conversions_b16); end
  def test_conversions_c16; assert_equal("Kilowatt-hours", worksheet.conversions_c16); end
  def test_conversions_d16; assert_equal("Unit.kWh", worksheet.conversions_d16); end
  def test_conversions_e16; assert_in_epsilon(3600000.0, worksheet.conversions_e16, 0.002); end
  def test_conversions_f16; assert_in_delta(3.6e-12, worksheet.conversions_f16, 0.002); end
  def test_conversions_b17; assert_equal("boe", worksheet.conversions_b17); end
  def test_conversions_c17; assert_equal("Barrel of oil equivalent", worksheet.conversions_c17); end
  def test_conversions_d17; assert_equal("Unit.boe", worksheet.conversions_d17); end
  def test_conversions_e17; assert_in_epsilon(5861520000.0, worksheet.conversions_e17, 0.002); end
  def test_conversions_f17; assert_in_delta(5.86152e-09, worksheet.conversions_f17, 0.002); end
  def test_conversions_b18; assert_equal("Mboe", worksheet.conversions_b18); end
  def test_conversions_c18; assert_equal("Million barrels of oil equivalent", worksheet.conversions_c18); end
  def test_conversions_d18; assert_equal("Unit.Mboe", worksheet.conversions_d18); end
  def test_conversions_e18; assert_in_epsilon(5.86152e+15, worksheet.conversions_e18, 0.002); end
  def test_conversions_f18; assert_in_delta(0.00586152, worksheet.conversions_f18, 0.002); end
  def test_conversions_b19; assert_equal("toe", worksheet.conversions_b19); end
  def test_conversions_c19; assert_equal("Tonnes of oil equivalent", worksheet.conversions_c19); end
  def test_conversions_d19; assert_equal("Unit.toe", worksheet.conversions_d19); end
  def test_conversions_e19; assert_in_epsilon(41868000000.0, worksheet.conversions_e19, 0.002); end
  def test_conversions_f19; assert_in_delta(4.1868e-08, worksheet.conversions_f19, 0.002); end
  def test_conversions_b20; assert_equal("ktoe", worksheet.conversions_b20); end
  def test_conversions_c20; assert_equal("Kilotonnes of oil equivalent", worksheet.conversions_c20); end
  def test_conversions_d20; assert_equal("Unit.ktoe", worksheet.conversions_d20); end
  def test_conversions_e20; assert_in_epsilon(41868000000000.0, worksheet.conversions_e20, 0.002); end
  def test_conversions_f20; assert_in_delta(4.1868e-05, worksheet.conversions_f20, 0.002); end
  def test_conversions_b21; assert_equal("Mtoe", worksheet.conversions_b21); end
  def test_conversions_c21; assert_equal("Megatonnes of oil equivalent", worksheet.conversions_c21); end
  def test_conversions_d21; assert_equal("Unit.Mtoe", worksheet.conversions_d21); end
  def test_conversions_e21; assert_in_epsilon(4.1868e+16, worksheet.conversions_e21, 0.002); end
  def test_conversions_f21; assert_in_delta(0.041868, worksheet.conversions_f21, 0.002); end
  def test_conversions_b22; assert_equal("tce", worksheet.conversions_b22); end
  def test_conversions_c22; assert_equal("Tonnes of coal equivalent", worksheet.conversions_c22); end
  def test_conversions_d22; assert_equal("unit.tce", worksheet.conversions_d22); end
  def test_conversions_e22; assert_in_epsilon(29307600000.0, worksheet.conversions_e22, 0.002); end
  def test_conversions_f22; assert_in_delta(0.0293076, worksheet.conversions_f22, 0.002); end
  def test_conversions_b23; assert_equal("Mtce", worksheet.conversions_b23); end
  def test_conversions_c23; assert_equal("Million tonnes of coal equivalent", worksheet.conversions_c23); end
  def test_conversions_d23; assert_equal("unit.Mtce", worksheet.conversions_d23); end
  def test_conversions_e23; assert_in_epsilon(2.93076e+16, worksheet.conversions_e23, 0.002); end
  def test_conversions_f23; assert_in_delta(0.0293076, worksheet.conversions_f23, 0.002); end
  def test_conversions_b24; assert_equal("therm", worksheet.conversions_b24); end
  def test_conversions_c24; assert_equal("Therms", worksheet.conversions_c24); end
  def test_conversions_d24; assert_equal("Unit.therm", worksheet.conversions_d24); end
  def test_conversions_e24; assert_in_epsilon(105506136.12882091, worksheet.conversions_e24, 0.002); end
  def test_conversions_f24; assert_in_delta(1.055061361288209e-10, worksheet.conversions_f24, 0.002); end
  def test_conversions_b25; assert_equal("Btu", worksheet.conversions_b25); end
  def test_conversions_c25; assert_equal("British Thermal Unit", worksheet.conversions_c25); end
  def test_conversions_d25; assert_equal("Unit.Btu", worksheet.conversions_d25); end
  def test_conversions_e25; assert_in_epsilon(1055.0613612882091, worksheet.conversions_e25, 0.002); end
  def test_conversions_f25; assert_in_delta(1.055061361288209e-15, worksheet.conversions_f25, 0.002); end
  def test_conversions_b26; assert_equal("Mbtu", worksheet.conversions_b26); end
  def test_conversions_c26; assert_equal("Million British Thermal Units", worksheet.conversions_c26); end
  def test_conversions_d26; assert_equal("Unit.Mbtu", worksheet.conversions_d26); end
  def test_conversions_e26; assert_in_epsilon(1055061361.2882091, worksheet.conversions_e26, 0.002); end
  def test_conversions_f26; assert_in_delta(1.055061361288209e-09, worksheet.conversions_f26, 0.002); end
  def test_conversions_b27; assert_equal("calorie", worksheet.conversions_b27); end
  def test_conversions_c27; assert_equal("Calorie (NOT food calorie)", worksheet.conversions_c27); end
  def test_conversions_d27; assert_equal("Unit.calorie.not.food", worksheet.conversions_d27); end
  def test_conversions_e27; assert_in_epsilon(4.184, worksheet.conversions_e27, 0.002); end
  def test_conversions_f27; assert_in_delta(4.184e-18, worksheet.conversions_f27, 0.002); end
  def test_conversions_b28; assert_equal("kcal", worksheet.conversions_b28); end
  def test_conversions_c28; assert_equal("Food calories", worksheet.conversions_c28); end
  def test_conversions_d28; assert_equal("unit.kcal.food", worksheet.conversions_d28); end
  def test_conversions_e28; assert_in_epsilon(4184.0, worksheet.conversions_e28, 0.002); end
  def test_conversions_f28; assert_in_delta(4.184e-15, worksheet.conversions_f28, 0.002); end
  def test_conversions_b29; assert_equal("GW y", worksheet.conversions_b29); end
  def test_conversions_c29; assert_equal("Gigawatt-years", worksheet.conversions_c29); end
  def test_conversions_d29; assert_equal("Unit.GWyear", worksheet.conversions_d29); end
  def test_conversions_e29; assert_in_epsilon(3.15576e+16, worksheet.conversions_e29, 0.002); end
  def test_conversions_f29; assert_in_delta(0.0315576, worksheet.conversions_f29, 0.002); end
  def test_conversions_b33; assert_equal("Unit", worksheet.conversions_b33); end
  def test_conversions_c33; assert_equal("Name", worksheet.conversions_c33); end
  def test_conversions_d33; assert_equal("Name in formulae", worksheet.conversions_d33); end
  def test_conversions_e33; assert_equal("Watts", worksheet.conversions_e33); end
  def test_conversions_f33; assert_equal("GW", worksheet.conversions_f33); end
  def test_conversions_b34; assert_equal("GW", worksheet.conversions_b34); end
  def test_conversions_c34; assert_equal("Gigawatts", worksheet.conversions_c34); end
  def test_conversions_d34; assert_equal("Unit.GW", worksheet.conversions_d34); end
  def test_conversions_e34; assert_in_epsilon(1000000000.0, worksheet.conversions_e34, 0.002); end
  def test_conversions_f34; assert_in_delta(1.0, worksheet.conversions_f34, 0.002); end
  def test_conversions_b35; assert_equal("MW", worksheet.conversions_b35); end
  def test_conversions_c35; assert_equal("Megawatts", worksheet.conversions_c35); end
  def test_conversions_d35; assert_equal("Unit.MW", worksheet.conversions_d35); end
  def test_conversions_e35; assert_in_epsilon(1000000.0, worksheet.conversions_e35, 0.002); end
  def test_conversions_f35; assert_in_delta(0.001, worksheet.conversions_f35, 0.002); end
  def test_conversions_b36; assert_equal("kW", worksheet.conversions_b36); end
  def test_conversions_c36; assert_equal("Kilowatts", worksheet.conversions_c36); end
  def test_conversions_d36; assert_equal("Unit.kW", worksheet.conversions_d36); end
  def test_conversions_e36; assert_in_epsilon(1000.0, worksheet.conversions_e36, 0.002); end
  def test_conversions_f36; assert_in_delta(1.0e-06, worksheet.conversions_f36, 0.002); end
  def test_conversions_b37; assert_equal("W", worksheet.conversions_b37); end
  def test_conversions_c37; assert_equal("Watts", worksheet.conversions_c37); end
  def test_conversions_d37; assert_equal("Unit.W", worksheet.conversions_d37); end
  def test_conversions_e37; assert_in_delta(1.0, worksheet.conversions_e37, 0.002); end
  def test_conversions_f37; assert_in_delta(1.0e-09, worksheet.conversions_f37, 0.002); end
  def test_conversions_b38; assert_equal("mcm/d", worksheet.conversions_b38); end
  def test_conversions_c38; assert_equal("mcm/d natural gas", worksheet.conversions_c38); end
  def test_conversions_d38; assert_equal("Unit.mcm.d", worksheet.conversions_d38); end
  def test_conversions_e38; assert_in_epsilon(335648148.1481481, worksheet.conversions_e38, 0.002); end
  def test_conversions_f38; assert_in_delta(0.33564814814814814, worksheet.conversions_f38, 0.002); end
  def test_conversions_b39; assert_equal("Mtoe/y", worksheet.conversions_b39); end
  def test_conversions_c39; assert_equal("Mtoe per year", worksheet.conversions_c39); end
  def test_conversions_d39; assert_equal("Unit.Mtoe.y", worksheet.conversions_d39); end
  def test_conversions_e39; assert_in_epsilon(1326716860.597764, worksheet.conversions_e39, 0.002); end
  def test_conversions_f39; assert_in_epsilon(1.326716860597764, worksheet.conversions_f39, 0.002); end
  def test_outputs_physical_implications_q111; assert_in_epsilon(1815.4809158091916, worksheet.outputs_physical_implications_q111, 0.002); end
  def test_outputs_physical_implications_q112; assert_in_epsilon(454.0619853075255, worksheet.outputs_physical_implications_q112, 0.002); end
  def test_outputs_physical_implications_q113; assert_in_epsilon(1493.0064508009432, worksheet.outputs_physical_implications_q113, 0.002); end
  def test_outputs_physical_implications_q114; assert_in_delta(0.0, (worksheet.outputs_physical_implications_q114||0), 0.002); end
  def test_outputs_physical_implications_q115; assert_in_epsilon(364.0, worksheet.outputs_physical_implications_q115, 0.002); end
  def test_outputs_physical_implications_q116; assert_in_epsilon(237.67, worksheet.outputs_physical_implications_q116, 0.002); end
  def test_outputs_physical_implications_q117; assert_in_epsilon(970.0, worksheet.outputs_physical_implications_q117, 0.002); end
  def test_outputs_physical_implications_q118; assert_in_delta(0.527, worksheet.outputs_physical_implications_q118, 0.002); end
  def test_outputs_physical_implications_q119; assert_in_epsilon(71.28999999999999, worksheet.outputs_physical_implications_q119, 0.002); end
  def test_outputs_physical_implications_q120; assert_in_epsilon(11.43, worksheet.outputs_physical_implications_q120, 0.002); end
  def test_outputs_physical_implications_q121; assert_in_epsilon(120.0, worksheet.outputs_physical_implications_q121, 0.002); end
  def test_outputs_physical_implications_y111; assert_in_epsilon(2522.2414712306336, worksheet.outputs_physical_implications_y111, 0.002); end
  def test_outputs_physical_implications_y112; assert_in_epsilon(2705.803073860466, worksheet.outputs_physical_implications_y112, 0.002); end
  def test_outputs_physical_implications_y113; assert_in_epsilon(3152.504918627236, worksheet.outputs_physical_implications_y113, 0.002); end
  def test_outputs_physical_implications_y114; assert_in_epsilon(110.79999999999997, worksheet.outputs_physical_implications_y114, 0.002); end
  def test_outputs_physical_implications_y115; assert_in_epsilon(502.19999999999993, worksheet.outputs_physical_implications_y115, 0.002); end
  def test_outputs_physical_implications_y116; assert_in_epsilon(1390.2000000000003, worksheet.outputs_physical_implications_y116, 0.002); end
  def test_outputs_physical_implications_y117; assert_in_epsilon(1659.7, worksheet.outputs_physical_implications_y117, 0.002); end
  def test_outputs_physical_implications_y118; assert_in_epsilon(43.599999999999994, worksheet.outputs_physical_implications_y118, 0.002); end
  def test_outputs_physical_implications_y119; assert_in_epsilon(881.7239999999997, worksheet.outputs_physical_implications_y119, 0.002); end
  def test_outputs_physical_implications_y120; assert_in_epsilon(68.79999999999998, worksheet.outputs_physical_implications_y120, 0.002); end
  def test_outputs_physical_implications_y121; assert_in_epsilon(277.5, worksheet.outputs_physical_implications_y121, 0.002); end
  def test_outputs_physical_implications_q89; assert_in_epsilon(33.043, worksheet.outputs_physical_implications_q89, 0.002); end
  def test_outputs_physical_implications_q90; assert_in_epsilon(44.69400000000001, worksheet.outputs_physical_implications_q90, 0.002); end
  def test_outputs_physical_implications_q91; assert_in_epsilon(101.61200000000001, worksheet.outputs_physical_implications_q91, 0.002); end
  def test_outputs_physical_implications_q92; assert_in_epsilon(9.168000000000003, worksheet.outputs_physical_implications_q92, 0.002); end
  def test_outputs_physical_implications_q93; assert_in_epsilon(2.482999999999989, worksheet.outputs_physical_implications_q93, 0.002); end
  def test_outputs_physical_implications_q94; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_q94, 0.002); end
  def test_outputs_physical_implications_q95; assert_in_epsilon(7.0, worksheet.outputs_physical_implications_q95, 0.002); end
  def test_outputs_physical_implications_q96; assert_in_epsilon(26.768, worksheet.outputs_physical_implications_q96, 0.002); end
  def test_outputs_physical_implications_q97; assert_in_epsilon(26.768, worksheet.outputs_physical_implications_q97, 0.002); end
  def test_outputs_physical_implications_q98; assert_in_epsilon(99.424, worksheet.outputs_physical_implications_q98, 0.002); end
  def test_outputs_physical_implications_q99; assert_in_epsilon(1759.04, worksheet.outputs_physical_implications_q99, 0.002); end
  def test_outputs_physical_implications_y89; assert_in_epsilon(29.726389743589742, worksheet.outputs_physical_implications_y89, 0.002); end
  def test_outputs_physical_implications_y90; assert_in_epsilon(76.6377641025641, worksheet.outputs_physical_implications_y90, 0.002); end
  def test_outputs_physical_implications_y91; assert_in_epsilon(91.20438974358974, worksheet.outputs_physical_implications_y91, 0.002); end
  def test_outputs_physical_implications_y92; assert_in_epsilon(8.122256410256412, worksheet.outputs_physical_implications_y92, 0.002); end
  def test_outputs_physical_implications_y93; assert_in_epsilon(2.7091999999999965, worksheet.outputs_physical_implications_y93, 0.002); end
  def test_outputs_physical_implications_y94; assert_in_epsilon(65.46596858638743, worksheet.outputs_physical_implications_y94, 0.002); end
  def test_outputs_physical_implications_y95; assert_in_epsilon(7.637696335078534, worksheet.outputs_physical_implications_y95, 0.002); end
  def test_outputs_physical_implications_y96; assert_in_epsilon(43.22842303664921, worksheet.outputs_physical_implications_y96, 0.002); end
  def test_outputs_physical_implications_y97; assert_in_epsilon(39.11143036649214, worksheet.outputs_physical_implications_y97, 0.002); end
  def test_outputs_physical_implications_y98; assert_in_epsilon(135.86075811518324, worksheet.outputs_physical_implications_y98, 0.002); end
  def test_outputs_physical_implications_y99; assert_in_epsilon(1840.2957235602094, worksheet.outputs_physical_implications_y99, 0.002); end
  def test_outputs_physical_implications_c154; assert_equal("Technology category", worksheet.outputs_physical_implications_c154); end
  def test_outputs_physical_implications_q154; assert_in_epsilon(2011.0, worksheet.outputs_physical_implications_q154, 0.002); end
  def test_outputs_physical_implications_r154; assert_equal("2015", worksheet.outputs_physical_implications_r154); end
  def test_outputs_physical_implications_s154; assert_equal("2020", worksheet.outputs_physical_implications_s154); end
  def test_outputs_physical_implications_t154; assert_equal("2025", worksheet.outputs_physical_implications_t154); end
  def test_outputs_physical_implications_u154; assert_equal("2030", worksheet.outputs_physical_implications_u154); end
  def test_outputs_physical_implications_v154; assert_equal("2035", worksheet.outputs_physical_implications_v154); end
  def test_outputs_physical_implications_w154; assert_equal("2040", worksheet.outputs_physical_implications_w154); end
  def test_outputs_physical_implications_x154; assert_equal("2045", worksheet.outputs_physical_implications_x154); end
  def test_outputs_physical_implications_y154; assert_equal("2050", worksheet.outputs_physical_implications_y154); end
  def test_outputs_physical_implications_c155; assert_equal("Light road", worksheet.outputs_physical_implications_c155); end
  def test_outputs_physical_implications_q155; assert_in_epsilon(104546.60385734572, worksheet.outputs_physical_implications_q155, 0.002); end
  def test_outputs_physical_implications_r155; assert_in_epsilon(121805.02041048018, worksheet.outputs_physical_implications_r155, 0.002); end
  def test_outputs_physical_implications_s155; assert_in_epsilon(143280.0427677797, worksheet.outputs_physical_implications_s155, 0.002); end
  def test_outputs_physical_implications_t155; assert_in_epsilon(167262.69770358692, worksheet.outputs_physical_implications_t155, 0.002); end
  def test_outputs_physical_implications_u155; assert_in_epsilon(194011.2322172808, worksheet.outputs_physical_implications_u155, 0.002); end
  def test_outputs_physical_implications_v155; assert_in_epsilon(223808.9372500587, worksheet.outputs_physical_implications_v155, 0.002); end
  def test_outputs_physical_implications_w155; assert_in_epsilon(256966.49477846324, worksheet.outputs_physical_implications_w155, 0.002); end
  def test_outputs_physical_implications_x155; assert_in_epsilon(293824.54014770663, worksheet.outputs_physical_implications_x155, 0.002); end
  def test_outputs_physical_implications_y155; assert_in_epsilon(334756.45909447025, worksheet.outputs_physical_implications_y155, 0.002); end
  def test_outputs_physical_implications_c156; assert_equal("Heavy road", worksheet.outputs_physical_implications_c156); end
  def test_outputs_physical_implications_q156; assert_in_epsilon(54359.338206392466, worksheet.outputs_physical_implications_q156, 0.002); end
  def test_outputs_physical_implications_r156; assert_in_epsilon(64808.52340859313, worksheet.outputs_physical_implications_r156, 0.002); end
  def test_outputs_physical_implications_s156; assert_in_epsilon(78080.57644931153, worksheet.outputs_physical_implications_s156, 0.002); end
  def test_outputs_physical_implications_t156; assert_in_epsilon(93116.46629089421, worksheet.outputs_physical_implications_t156, 0.002); end
  def test_outputs_physical_implications_u156; assert_in_epsilon(110121.48258214293, worksheet.outputs_physical_implications_u156, 0.002); end
  def test_outputs_physical_implications_v156; assert_in_epsilon(129323.34481352555, worksheet.outputs_physical_implications_v156, 0.002); end
  def test_outputs_physical_implications_w156; assert_in_epsilon(150974.56633663806, worksheet.outputs_physical_implications_w156, 0.002); end
  def test_outputs_physical_implications_x156; assert_in_epsilon(175355.06191863996, worksheet.outputs_physical_implications_x156, 0.002); end
  def test_outputs_physical_implications_y156; assert_in_epsilon(202775.02353415804, worksheet.outputs_physical_implications_y156, 0.002); end
  def test_outputs_physical_implications_c157; assert_equal("Rail", worksheet.outputs_physical_implications_c157); end
  def test_outputs_physical_implications_q157; assert_in_epsilon(2.1576150282875965, worksheet.outputs_physical_implications_q157, 0.002); end
  def test_outputs_physical_implications_r157; assert_in_epsilon(2.3821788755442874, worksheet.outputs_physical_implications_r157, 0.002); end
  def test_outputs_physical_implications_s157; assert_in_epsilon(2.637457486624283, worksheet.outputs_physical_implications_s157, 0.002); end
  def test_outputs_physical_implications_t157; assert_in_epsilon(2.9202067336804767, worksheet.outputs_physical_implications_t157, 0.002); end
  def test_outputs_physical_implications_u157; assert_in_epsilon(3.233354468474271, worksheet.outputs_physical_implications_u157, 0.002); end
  def test_outputs_physical_implications_v157; assert_in_epsilon(3.5801367657717753, worksheet.outputs_physical_implications_v157, 0.002); end
  def test_outputs_physical_implications_w157; assert_in_epsilon(3.964129982338377, worksheet.outputs_physical_implications_w157, 0.002); end
  def test_outputs_physical_implications_x157; assert_in_epsilon(4.389286114737757, worksheet.outputs_physical_implications_x157, 0.002); end
  def test_outputs_physical_implications_y157; assert_in_epsilon(4.859971792214983, worksheet.outputs_physical_implications_y157, 0.002); end
  def test_outputs_physical_implications_c158; assert_equal("Ship", worksheet.outputs_physical_implications_c158); end
  def test_outputs_physical_implications_q158; assert_in_epsilon(32.433207787562935, worksheet.outputs_physical_implications_q158, 0.002); end
  def test_outputs_physical_implications_r158; assert_in_epsilon(35.17240772545592, worksheet.outputs_physical_implications_r158, 0.002); end
  def test_outputs_physical_implications_s158; assert_in_epsilon(38.0400352030463, worksheet.outputs_physical_implications_s158, 0.002); end
  def test_outputs_physical_implications_t158; assert_in_epsilon(41.12953090872666, worksheet.outputs_physical_implications_t158, 0.002); end
  def test_outputs_physical_implications_u158; assert_in_epsilon(44.457112181889265, worksheet.outputs_physical_implications_u158, 0.002); end
  def test_outputs_physical_implications_v158; assert_in_epsilon(48.04008659660956, worksheet.outputs_physical_implications_v158, 0.002); end
  def test_outputs_physical_implications_w158; assert_in_epsilon(51.89691455002782, worksheet.outputs_physical_implications_w158, 0.002); end
  def test_outputs_physical_implications_x158; assert_in_epsilon(56.04727410218455, worksheet.outputs_physical_implications_x158, 0.002); end
  def test_outputs_physical_implications_y158; assert_in_epsilon(60.512127949902364, worksheet.outputs_physical_implications_y158, 0.002); end
  def test_outputs_physical_implications_c159; assert_equal("Plane", worksheet.outputs_physical_implications_c159); end
  def test_outputs_physical_implications_q159; assert_in_epsilon(2.138453260718435, worksheet.outputs_physical_implications_q159, 0.002); end
  def test_outputs_physical_implications_r159; assert_in_epsilon(2.3975719924112404, worksheet.outputs_physical_implications_r159, 0.002); end
  def test_outputs_physical_implications_s159; assert_in_epsilon(2.7009636026807375, worksheet.outputs_physical_implications_s159, 0.002); end
  def test_outputs_physical_implications_t159; assert_in_epsilon(3.039501598446725, worksheet.outputs_physical_implications_t159, 0.002); end
  def test_outputs_physical_implications_u159; assert_in_epsilon(3.4170599914100337, worksheet.outputs_physical_implications_u159, 0.002); end
  def test_outputs_physical_implications_v159; assert_in_epsilon(3.8379265453177034, worksheet.outputs_physical_implications_v159, 0.002); end
  def test_outputs_physical_implications_w159; assert_in_epsilon(4.3068460217495455, worksheet.outputs_physical_implications_w159, 0.002); end
  def test_outputs_physical_implications_x159; assert_in_epsilon(4.829067876153841, worksheet.outputs_physical_implications_x159, 0.002); end
  def test_outputs_physical_implications_y159; assert_in_epsilon(5.4103988567712955, worksheet.outputs_physical_implications_y159, 0.002); end
  def test_outputs_physical_implications_c160; assert_equal("Total", worksheet.outputs_physical_implications_c160); end
  def test_outputs_physical_implications_q160; assert_in_epsilon(158942.67133981475, worksheet.outputs_physical_implications_q160, 0.002); end
  def test_outputs_physical_implications_r160; assert_in_epsilon(186653.4959776667, worksheet.outputs_physical_implications_r160, 0.002); end
  def test_outputs_physical_implications_s160; assert_in_epsilon(221403.9976733836, worksheet.outputs_physical_implications_s160, 0.002); end
  def test_outputs_physical_implications_t160; assert_in_epsilon(260426.253233722, worksheet.outputs_physical_implications_t160, 0.002); end
  def test_outputs_physical_implications_u160; assert_in_epsilon(304183.82232606545, worksheet.outputs_physical_implications_u160, 0.002); end
  def test_outputs_physical_implications_v160; assert_in_epsilon(353187.74021349195, worksheet.outputs_physical_implications_v160, 0.002); end
  def test_outputs_physical_implications_w160; assert_in_epsilon(408001.22900565545, worksheet.outputs_physical_implications_w160, 0.002); end
  def test_outputs_physical_implications_x160; assert_in_epsilon(469244.8676944396, worksheet.outputs_physical_implications_x160, 0.002); end
  def test_outputs_physical_implications_y160; assert_in_epsilon(537602.2651272271, worksheet.outputs_physical_implications_y160, 0.002); end
  def test_outputs_physical_implications_c56; assert_equal("Type of land", worksheet.outputs_physical_implications_c56); end
  def test_outputs_physical_implications_l56; assert_in_epsilon(1990.0, worksheet.outputs_physical_implications_l56, 0.002); end
  def test_outputs_physical_implications_m56; assert_in_epsilon(1995.0, worksheet.outputs_physical_implications_m56, 0.002); end
  def test_outputs_physical_implications_n56; assert_in_epsilon(2000.0, worksheet.outputs_physical_implications_n56, 0.002); end
  def test_outputs_physical_implications_o56; assert_in_epsilon(2005.0, worksheet.outputs_physical_implications_o56, 0.002); end
  def test_outputs_physical_implications_p56; assert_in_epsilon(2010.0, worksheet.outputs_physical_implications_p56, 0.002); end
  def test_outputs_physical_implications_q56; assert_in_epsilon(2011.0, worksheet.outputs_physical_implications_q56, 0.002); end
  def test_outputs_physical_implications_r56; assert_equal("2015", worksheet.outputs_physical_implications_r56); end
  def test_outputs_physical_implications_s56; assert_equal("2020", worksheet.outputs_physical_implications_s56); end
  def test_outputs_physical_implications_t56; assert_equal("2025", worksheet.outputs_physical_implications_t56); end
  def test_outputs_physical_implications_u56; assert_equal("2030", worksheet.outputs_physical_implications_u56); end
  def test_outputs_physical_implications_v56; assert_equal("2035", worksheet.outputs_physical_implications_v56); end
  def test_outputs_physical_implications_w56; assert_equal("2040", worksheet.outputs_physical_implications_w56); end
  def test_outputs_physical_implications_x56; assert_equal("2045", worksheet.outputs_physical_implications_x56); end
  def test_outputs_physical_implications_y56; assert_equal("2050", worksheet.outputs_physical_implications_y56); end
  def test_outputs_physical_implications_c57; assert_equal("Land for animals", worksheet.outputs_physical_implications_c57); end
  def test_outputs_physical_implications_l57; assert_in_epsilon(3305.27405, worksheet.outputs_physical_implications_l57, 0.002); end
  def test_outputs_physical_implications_m57; assert_in_epsilon(3394.7165, worksheet.outputs_physical_implications_m57, 0.002); end
  def test_outputs_physical_implications_n57; assert_in_epsilon(3417.6424, worksheet.outputs_physical_implications_n57, 0.002); end
  def test_outputs_physical_implications_o57; assert_in_epsilon(3388.2637000000004, worksheet.outputs_physical_implications_o57, 0.002); end
  def test_outputs_physical_implications_p57; assert_in_epsilon(3358.24029, worksheet.outputs_physical_implications_p57, 0.002); end
  def test_outputs_physical_implications_q57; assert_in_epsilon(3362.6790000000005, worksheet.outputs_physical_implications_q57, 0.002); end
  def test_outputs_physical_implications_r57; assert_in_epsilon(3365.2714311143095, worksheet.outputs_physical_implications_r57, 0.002); end
  def test_outputs_physical_implications_s57; assert_in_epsilon(3325.667534733429, worksheet.outputs_physical_implications_s57, 0.002); end
  def test_outputs_physical_implications_t57; assert_in_epsilon(3278.650217032828, worksheet.outputs_physical_implications_t57, 0.002); end
  def test_outputs_physical_implications_u57; assert_in_epsilon(3245.174297895591, worksheet.outputs_physical_implications_u57, 0.002); end
  def test_outputs_physical_implications_v57; assert_in_epsilon(3237.693129452217, worksheet.outputs_physical_implications_v57, 0.002); end
  def test_outputs_physical_implications_w57; assert_in_epsilon(3216.565241535722, worksheet.outputs_physical_implications_w57, 0.002); end
  def test_outputs_physical_implications_x57; assert_in_epsilon(3145.882670488475, worksheet.outputs_physical_implications_x57, 0.002); end
  def test_outputs_physical_implications_y57; assert_in_epsilon(3046.229840209899, worksheet.outputs_physical_implications_y57, 0.002); end
  def test_outputs_physical_implications_c58; assert_equal("Land for food crops", worksheet.outputs_physical_implications_c58); end
  def test_outputs_physical_implications_l58; assert_in_epsilon(1435.159, worksheet.outputs_physical_implications_l58, 0.002); end
  def test_outputs_physical_implications_m58; assert_in_epsilon(1435.5399510204102, worksheet.outputs_physical_implications_m58, 0.002); end
  def test_outputs_physical_implications_n58; assert_in_epsilon(1428.67608979592, worksheet.outputs_physical_implications_n58, 0.002); end
  def test_outputs_physical_implications_o58; assert_in_epsilon(1446.4106385714301, worksheet.outputs_physical_implications_o58, 0.002); end
  def test_outputs_physical_implications_p58; assert_in_epsilon(1438.53226734694, worksheet.outputs_physical_implications_p58, 0.002); end
  def test_outputs_physical_implications_q58; assert_in_epsilon(1443.0301900000002, worksheet.outputs_physical_implications_q58, 0.002); end
  def test_outputs_physical_implications_r58; assert_in_epsilon(1447.8305512433053, worksheet.outputs_physical_implications_r58, 0.002); end
  def test_outputs_physical_implications_s58; assert_in_epsilon(1480.5924571939163, worksheet.outputs_physical_implications_s58, 0.002); end
  def test_outputs_physical_implications_t58; assert_in_epsilon(1510.5330980517226, worksheet.outputs_physical_implications_t58, 0.002); end
  def test_outputs_physical_implications_u58; assert_in_epsilon(1546.1701106809796, worksheet.outputs_physical_implications_u58, 0.002); end
  def test_outputs_physical_implications_v58; assert_in_epsilon(1593.657189640336, worksheet.outputs_physical_implications_v58, 0.002); end
  def test_outputs_physical_implications_w58; assert_in_epsilon(1636.820039661298, worksheet.outputs_physical_implications_w58, 0.002); end
  def test_outputs_physical_implications_x58; assert_in_epsilon(1658.656800667833, worksheet.outputs_physical_implications_x58, 0.002); end
  def test_outputs_physical_implications_y58; assert_in_epsilon(1666.6035138841314, worksheet.outputs_physical_implications_y58, 0.002); end
  def test_outputs_physical_implications_c59; assert_equal("Land for non-food crops ", worksheet.outputs_physical_implications_c59); end
  def test_outputs_physical_implications_l59; assert_in_epsilon(48.0, worksheet.outputs_physical_implications_l59, 0.002); end
  def test_outputs_physical_implications_m59; assert_in_epsilon(50.8571428571429, worksheet.outputs_physical_implications_m59, 0.002); end
  def test_outputs_physical_implications_n59; assert_in_epsilon(53.7142857142857, worksheet.outputs_physical_implications_n59, 0.002); end
  def test_outputs_physical_implications_o59; assert_in_epsilon(56.571428571428605, worksheet.outputs_physical_implications_o59, 0.002); end
  def test_outputs_physical_implications_p59; assert_in_epsilon(59.4285714285714, worksheet.outputs_physical_implications_p59, 0.002); end
  def test_outputs_physical_implications_q59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_q59, 0.002); end
  def test_outputs_physical_implications_r59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_r59, 0.002); end
  def test_outputs_physical_implications_s59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_s59, 0.002); end
  def test_outputs_physical_implications_t59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_t59, 0.002); end
  def test_outputs_physical_implications_u59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_u59, 0.002); end
  def test_outputs_physical_implications_v59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_v59, 0.002); end
  def test_outputs_physical_implications_w59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_w59, 0.002); end
  def test_outputs_physical_implications_x59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_x59, 0.002); end
  def test_outputs_physical_implications_y59; assert_in_epsilon(60.0, worksheet.outputs_physical_implications_y59, 0.002); end
  def test_outputs_physical_implications_c60; assert_equal("Native forest", worksheet.outputs_physical_implications_c60); end
  def test_outputs_physical_implications_l60; assert_in_epsilon(3949.19954, worksheet.outputs_physical_implications_l60, 0.002); end
  def test_outputs_physical_implications_m60; assert_in_epsilon(3894.5365409523797, worksheet.outputs_physical_implications_m60, 0.002); end
  def test_outputs_physical_implications_n60; assert_in_epsilon(3839.87336190476, worksheet.outputs_physical_implications_n60, 0.002); end
  def test_outputs_physical_implications_o60; assert_in_epsilon(3802.6219428571403, worksheet.outputs_physical_implications_o60, 0.002); end
  def test_outputs_physical_implications_p60; assert_in_epsilon(3761.66904380952, worksheet.outputs_physical_implications_p60, 0.002); end
  def test_outputs_physical_implications_q60; assert_in_epsilon(3753.47833, worksheet.outputs_physical_implications_q60, 0.002); end
  def test_outputs_physical_implications_r60; assert_in_epsilon(3694.47938674792, worksheet.outputs_physical_implications_r60, 0.002); end
  def test_outputs_physical_implications_s60; assert_in_epsilon(3670.9349765201787, worksheet.outputs_physical_implications_s60, 0.002); end
  def test_outputs_physical_implications_t60; assert_in_epsilon(3653.5506090782746, worksheet.outputs_physical_implications_t60, 0.002); end
  def test_outputs_physical_implications_u60; assert_in_epsilon(3618.603687237939, worksheet.outputs_physical_implications_u60, 0.002); end
  def test_outputs_physical_implications_v60; assert_in_epsilon(3547.0082521524237, worksheet.outputs_physical_implications_v60, 0.002); end
  def test_outputs_physical_implications_w60; assert_in_epsilon(3494.716488700071, worksheet.outputs_physical_implications_w60, 0.002); end
  def test_outputs_physical_implications_x60; assert_in_epsilon(3514.397334112684, worksheet.outputs_physical_implications_x60, 0.002); end
  def test_outputs_physical_implications_y60; assert_in_epsilon(3579.2970309035863, worksheet.outputs_physical_implications_y60, 0.002); end
  def test_outputs_physical_implications_c61; assert_equal("Commercial forest", worksheet.outputs_physical_implications_c61); end
  def test_outputs_physical_implications_l61; assert_in_epsilon(219.20000000000002, worksheet.outputs_physical_implications_l61, 0.002); end
  def test_outputs_physical_implications_m61; assert_in_epsilon(232.247619047619, worksheet.outputs_physical_implications_m61, 0.002); end
  def test_outputs_physical_implications_n61; assert_in_epsilon(245.295238095238, worksheet.outputs_physical_implications_n61, 0.002); end
  def test_outputs_physical_implications_o61; assert_in_epsilon(258.34285714285704, worksheet.outputs_physical_implications_o61, 0.002); end
  def test_outputs_physical_implications_p61; assert_in_epsilon(271.39047619047597, worksheet.outputs_physical_implications_p61, 0.002); end
  def test_outputs_physical_implications_q61; assert_in_epsilon(274.0, worksheet.outputs_physical_implications_q61, 0.002); end
  def test_outputs_physical_implications_r61; assert_in_epsilon(308.6214960424073, worksheet.outputs_physical_implications_r61, 0.002); end
  def test_outputs_physical_implications_s61; assert_in_epsilon(320.4295027141703, worksheet.outputs_physical_implications_s61, 0.002); end
  def test_outputs_physical_implications_t61; assert_in_epsilon(337.5114608702617, worksheet.outputs_physical_implications_t61, 0.002); end
  def test_outputs_physical_implications_u61; assert_in_epsilon(354.10978509767375, worksheet.outputs_physical_implications_u61, 0.002); end
  def test_outputs_physical_implications_v61; assert_in_epsilon(370.60261971994163, worksheet.outputs_physical_implications_v61, 0.002); end
  def test_outputs_physical_implications_w61; assert_in_epsilon(386.86567914440155, worksheet.outputs_physical_implications_w61, 0.002); end
  def test_outputs_physical_implications_x61; assert_in_epsilon(403.24502570724684, worksheet.outputs_physical_implications_x61, 0.002); end
  def test_outputs_physical_implications_y61; assert_in_epsilon(418.55713500238613, worksheet.outputs_physical_implications_y61, 0.002); end
  def test_outputs_physical_implications_c62; assert_equal("Land for bioenergy", worksheet.outputs_physical_implications_c62); end
  def test_outputs_physical_implications_l62; assert_in_epsilon(36.0, worksheet.outputs_physical_implications_l62, 0.002); end
  def test_outputs_physical_implications_m62; assert_in_epsilon(36.429306122449, worksheet.outputs_physical_implications_m62, 0.002); end
  def test_outputs_physical_implications_n62; assert_in_epsilon(36.430224489795904, worksheet.outputs_physical_implications_n62, 0.002); end
  def test_outputs_physical_implications_o62; assert_in_epsilon(36.431142857142795, worksheet.outputs_physical_implications_o62, 0.002); end
  def test_outputs_physical_implications_p62; assert_in_epsilon(36.4320612244898, worksheet.outputs_physical_implications_p62, 0.002); end
  def test_outputs_physical_implications_q62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_q62, 0.002); end
  def test_outputs_physical_implications_r62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_r62, 0.002); end
  def test_outputs_physical_implications_s62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_s62, 0.002); end
  def test_outputs_physical_implications_t62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_t62, 0.002); end
  def test_outputs_physical_implications_u62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_u62, 0.002); end
  def test_outputs_physical_implications_v62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_v62, 0.002); end
  def test_outputs_physical_implications_w62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_w62, 0.002); end
  def test_outputs_physical_implications_x62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_x62, 0.002); end
  def test_outputs_physical_implications_y62; assert_in_epsilon(44.99999999999999, worksheet.outputs_physical_implications_y62, 0.002); end
  def test_outputs_physical_implications_c63; assert_equal("Natural grassland", worksheet.outputs_physical_implications_c63); end
  def test_outputs_physical_implications_l63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_l63||0), 0.002); end
  def test_outputs_physical_implications_m63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_m63||0), 0.002); end
  def test_outputs_physical_implications_n63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_n63||0), 0.002); end
  def test_outputs_physical_implications_o63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_o63||0), 0.002); end
  def test_outputs_physical_implications_p63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_p63||0), 0.002); end
  def test_outputs_physical_implications_q63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_q63||0), 0.002); end
  def test_outputs_physical_implications_r63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_r63||0), 0.002); end
  def test_outputs_physical_implications_s63; assert_in_delta(7.105427357601002e-15, worksheet.outputs_physical_implications_s63, 0.002); end
  def test_outputs_physical_implications_t63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_t63||0), 0.002); end
  def test_outputs_physical_implications_u63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_u63||0), 0.002); end
  def test_outputs_physical_implications_v63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_v63||0), 0.002); end
  def test_outputs_physical_implications_w63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_w63||0), 0.002); end
  def test_outputs_physical_implications_x63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_x63||0), 0.002); end
  def test_outputs_physical_implications_y63; assert_in_delta(0.0, (worksheet.outputs_physical_implications_y63||0), 0.002); end
  def test_outputs_physical_implications_c64; assert_equal("Settlements and infrastructure", worksheet.outputs_physical_implications_c64); end
  def test_outputs_physical_implications_l64; assert_in_epsilon(196.0, worksheet.outputs_physical_implications_l64, 0.002); end
  def test_outputs_physical_implications_m64; assert_in_epsilon(207.666666666667, worksheet.outputs_physical_implications_m64, 0.002); end
  def test_outputs_physical_implications_n64; assert_in_epsilon(219.333333333333, worksheet.outputs_physical_implications_n64, 0.002); end
  def test_outputs_physical_implications_o64; assert_in_epsilon(231.0, worksheet.outputs_physical_implications_o64, 0.002); end
  def test_outputs_physical_implications_p64; assert_in_epsilon(242.666666666667, worksheet.outputs_physical_implications_p64, 0.002); end
  def test_outputs_physical_implications_q64; assert_in_epsilon(245.0, worksheet.outputs_physical_implications_q64, 0.002); end
  def test_outputs_physical_implications_r64; assert_in_epsilon(261.98465485205844, worksheet.outputs_physical_implications_r64, 0.002); end
  def test_outputs_physical_implications_s64; assert_in_epsilon(280.56304883830444, worksheet.outputs_physical_implications_s64, 0.002); end
  def test_outputs_physical_implications_t64; assert_in_epsilon(297.94213496691447, worksheet.outputs_physical_implications_t64, 0.002); end
  def test_outputs_physical_implications_u64; assert_in_epsilon(314.1296390878191, worksheet.outputs_physical_implications_u64, 0.002); end
  def test_outputs_physical_implications_v64; assert_in_epsilon(329.22632903508304, worksheet.outputs_physical_implications_v64, 0.002); end
  def test_outputs_physical_implications_w64; assert_in_epsilon(343.22007095850836, worksheet.outputs_physical_implications_w64, 0.002); end
  def test_outputs_physical_implications_x64; assert_in_epsilon(356.0056890237634, worksheet.outputs_physical_implications_x64, 0.002); end
  def test_outputs_physical_implications_y64; assert_in_epsilon(367.5, worksheet.outputs_physical_implications_y64, 0.002); end
  def test_outputs_physical_implications_c65; assert_equal("Desert, ice etc", worksheet.outputs_physical_implications_c65); end
  def test_outputs_physical_implications_l65; assert_in_epsilon(3878.6295800000003, worksheet.outputs_physical_implications_l65, 0.002); end
  def test_outputs_physical_implications_m65; assert_in_epsilon(3768.11670333333, worksheet.outputs_physical_implications_m65, 0.002); end
  def test_outputs_physical_implications_n65; assert_in_epsilon(3781.4923166666704, worksheet.outputs_physical_implications_n65, 0.002); end
  def test_outputs_physical_implications_o65; assert_in_epsilon(3802.21538, worksheet.outputs_physical_implications_o65, 0.002); end
  def test_outputs_physical_implications_p65; assert_in_epsilon(3850.9266033333297, worksheet.outputs_physical_implications_p65, 0.002); end
  def test_outputs_physical_implications_q65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_q65, 0.002); end
  def test_outputs_physical_implications_r65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_r65, 0.002); end
  def test_outputs_physical_implications_s65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_s65, 0.002); end
  def test_outputs_physical_implications_t65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_t65, 0.002); end
  def test_outputs_physical_implications_u65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_u65, 0.002); end
  def test_outputs_physical_implications_v65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_v65, 0.002); end
  def test_outputs_physical_implications_w65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_w65, 0.002); end
  def test_outputs_physical_implications_x65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_x65, 0.002); end
  def test_outputs_physical_implications_y65; assert_in_epsilon(3835.91162, worksheet.outputs_physical_implications_y65, 0.002); end
  def test_outputs_physical_implications_c131; assert_equal("Description", worksheet.outputs_physical_implications_c131); end
  def test_outputs_physical_implications_q131; assert_in_epsilon(2011.0, worksheet.outputs_physical_implications_q131, 0.002); end
  def test_outputs_physical_implications_r131; assert_equal("2015", worksheet.outputs_physical_implications_r131); end
  def test_outputs_physical_implications_s131; assert_equal("2020", worksheet.outputs_physical_implications_s131); end
  def test_outputs_physical_implications_t131; assert_equal("2025", worksheet.outputs_physical_implications_t131); end
  def test_outputs_physical_implications_u131; assert_equal("2030", worksheet.outputs_physical_implications_u131); end
  def test_outputs_physical_implications_v131; assert_equal("2035", worksheet.outputs_physical_implications_v131); end
  def test_outputs_physical_implications_w131; assert_equal("2040", worksheet.outputs_physical_implications_w131); end
  def test_outputs_physical_implications_x131; assert_equal("2045", worksheet.outputs_physical_implications_x131); end
  def test_outputs_physical_implications_y131; assert_equal("2050", worksheet.outputs_physical_implications_y131); end
  def test_outputs_physical_implications_c132; assert_equal("Iron and steel", worksheet.outputs_physical_implications_c132); end
  def test_outputs_physical_implications_e132; assert_equal("Steel.Oxygen", worksheet.outputs_physical_implications_e132); end
  def test_outputs_physical_implications_f132; assert_equal("Steel.OxygenHisarna", worksheet.outputs_physical_implications_f132); end
  def test_outputs_physical_implications_g132; assert_equal("Steel.Electric", worksheet.outputs_physical_implications_g132); end
  def test_outputs_physical_implications_h132; assert_equal("Steel.ElectricDRI", worksheet.outputs_physical_implications_h132); end
  def test_outputs_physical_implications_i132; assert_equal("Steel.others", worksheet.outputs_physical_implications_i132); end
  def test_outputs_physical_implications_q132; assert_in_epsilon(1.5183, worksheet.outputs_physical_implications_q132, 0.002); end
  def test_outputs_physical_implications_r132; assert_in_epsilon(1.7794838431727142, worksheet.outputs_physical_implications_r132, 0.002); end
  def test_outputs_physical_implications_s132; assert_in_epsilon(1.8733854323187609, worksheet.outputs_physical_implications_s132, 0.002); end
  def test_outputs_physical_implications_t132; assert_in_epsilon(1.9904323095312209, worksheet.outputs_physical_implications_t132, 0.002); end
  def test_outputs_physical_implications_u132; assert_in_epsilon(2.1333004091618744, worksheet.outputs_physical_implications_u132, 0.002); end
  def test_outputs_physical_implications_v132; assert_in_epsilon(2.2699489365157812, worksheet.outputs_physical_implications_v132, 0.002); end
  def test_outputs_physical_implications_w132; assert_in_epsilon(2.435499983608206, worksheet.outputs_physical_implications_w132, 0.002); end
  def test_outputs_physical_implications_x132; assert_in_epsilon(2.656348155449335, worksheet.outputs_physical_implications_x132, 0.002); end
  def test_outputs_physical_implications_y132; assert_in_epsilon(2.763895729699574, worksheet.outputs_physical_implications_y132, 0.002); end
  def test_outputs_physical_implications_c133; assert_equal("Aluminium", worksheet.outputs_physical_implications_c133); end
  def test_outputs_physical_implications_e133; assert_equal("Aluminium.Alumina", worksheet.outputs_physical_implications_e133); end
  def test_outputs_physical_implications_f133; assert_equal("Aluminium.Primary", worksheet.outputs_physical_implications_f133); end
  def test_outputs_physical_implications_g133; assert_equal("Aluminium.Secondary", worksheet.outputs_physical_implications_g133); end
  def test_outputs_physical_implications_q133; assert_in_delta(0.16753358521407624, worksheet.outputs_physical_implications_q133, 0.002); end
  def test_outputs_physical_implications_r133; assert_in_delta(0.2067371206440361, worksheet.outputs_physical_implications_r133, 0.002); end
  def test_outputs_physical_implications_s133; assert_in_delta(0.23059552978640646, worksheet.outputs_physical_implications_s133, 0.002); end
  def test_outputs_physical_implications_t133; assert_in_delta(0.26389724513821045, worksheet.outputs_physical_implications_t133, 0.002); end
  def test_outputs_physical_implications_u133; assert_in_delta(0.30010280905166253, worksheet.outputs_physical_implications_u133, 0.002); end
  def test_outputs_physical_implications_v133; assert_in_delta(0.34018582844378814, worksheet.outputs_physical_implications_v133, 0.002); end
  def test_outputs_physical_implications_w133; assert_in_delta(0.3845131572407899, worksheet.outputs_physical_implications_w133, 0.002); end
  def test_outputs_physical_implications_x133; assert_in_delta(0.43555565229989346, worksheet.outputs_physical_implications_x133, 0.002); end
  def test_outputs_physical_implications_y133; assert_in_delta(0.49160892125076605, worksheet.outputs_physical_implications_y133, 0.002); end
  def test_outputs_physical_implications_c134; assert_equal("Chemicals", worksheet.outputs_physical_implications_c134); end
  def test_outputs_physical_implications_e134; assert_equal("Chemicals & petrochemicals.HVC", worksheet.outputs_physical_implications_e134); end
  def test_outputs_physical_implications_f134; assert_equal("Chemicals & petrochemicals.Ammonia", worksheet.outputs_physical_implications_f134); end
  def test_outputs_physical_implications_g134; assert_equal("Chemicals & petrochemicals.Methanol", worksheet.outputs_physical_implications_g134); end
  def test_outputs_physical_implications_h134; assert_equal("Chemicals & petrochemicals.Others", worksheet.outputs_physical_implications_h134); end
  def test_outputs_physical_implications_q134; assert_in_delta(0.7491919504454156, worksheet.outputs_physical_implications_q134, 0.002); end
  def test_outputs_physical_implications_r134; assert_in_delta(0.8787724155401702, worksheet.outputs_physical_implications_r134, 0.002); end
  def test_outputs_physical_implications_s134; assert_in_delta(0.9424900305009437, worksheet.outputs_physical_implications_s134, 0.002); end
  def test_outputs_physical_implications_t134; assert_in_epsilon(1.0050994478039832, worksheet.outputs_physical_implications_t134, 0.002); end
  def test_outputs_physical_implications_u134; assert_in_epsilon(1.0716335558042487, worksheet.outputs_physical_implications_u134, 0.002); end
  def test_outputs_physical_implications_v134; assert_in_epsilon(1.1371108278070083, worksheet.outputs_physical_implications_v134, 0.002); end
  def test_outputs_physical_implications_w134; assert_in_epsilon(1.208145486363271, worksheet.outputs_physical_implications_w134, 0.002); end
  def test_outputs_physical_implications_x134; assert_in_epsilon(1.2803590844137098, worksheet.outputs_physical_implications_x134, 0.002); end
  def test_outputs_physical_implications_y134; assert_in_epsilon(1.3428193479542834, worksheet.outputs_physical_implications_y134, 0.002); end
  def test_outputs_physical_implications_c135; assert_equal("Pulp and paper", worksheet.outputs_physical_implications_c135); end
  def test_outputs_physical_implications_e135; assert_equal("Pulp & paper.Pulp", worksheet.outputs_physical_implications_e135); end
  def test_outputs_physical_implications_f135; assert_equal("Pulp & paper.Virgin", worksheet.outputs_physical_implications_f135); end
  def test_outputs_physical_implications_g135; assert_equal("Pulp & paper.Recycled", worksheet.outputs_physical_implications_g135); end
  def test_outputs_physical_implications_q135; assert_in_delta(0.797948765, worksheet.outputs_physical_implications_q135, 0.002); end
  def test_outputs_physical_implications_r135; assert_in_delta(0.8328695152107624, worksheet.outputs_physical_implications_r135, 0.002); end
  def test_outputs_physical_implications_s135; assert_in_delta(0.8946554626816922, worksheet.outputs_physical_implications_s135, 0.002); end
  def test_outputs_physical_implications_t135; assert_in_delta(0.9434122357082744, worksheet.outputs_physical_implications_t135, 0.002); end
  def test_outputs_physical_implications_u135; assert_in_delta(0.9897690120492018, worksheet.outputs_physical_implications_u135, 0.002); end
  def test_outputs_physical_implications_v135; assert_in_epsilon(1.033917427413652, worksheet.outputs_physical_implications_v135, 0.002); end
  def test_outputs_physical_implications_w135; assert_in_epsilon(1.0757723845945963, worksheet.outputs_physical_implications_w135, 0.002); end
  def test_outputs_physical_implications_x135; assert_in_epsilon(1.1150130804659737, worksheet.outputs_physical_implications_x135, 0.002); end
  def test_outputs_physical_implications_y135; assert_in_epsilon(1.1513680768015453, worksheet.outputs_physical_implications_y135, 0.002); end
  def test_outputs_physical_implications_c136; assert_equal("Cement", worksheet.outputs_physical_implications_c136); end
  def test_outputs_physical_implications_e136; assert_equal("Cement", worksheet.outputs_physical_implications_e136); end
  def test_outputs_physical_implications_q136; assert_in_epsilon(3.6351730407050002, worksheet.outputs_physical_implications_q136, 0.002); end
  def test_outputs_physical_implications_r136; assert_in_epsilon(4.18908867966239, worksheet.outputs_physical_implications_r136, 0.002); end
  def test_outputs_physical_implications_s136; assert_in_epsilon(4.451427038070114, worksheet.outputs_physical_implications_s136, 0.002); end
  def test_outputs_physical_implications_t136; assert_in_epsilon(4.748211451718154, worksheet.outputs_physical_implications_t136, 0.002); end
  def test_outputs_physical_implications_u136; assert_in_epsilon(5.050358901052116, worksheet.outputs_physical_implications_u136, 0.002); end
  def test_outputs_physical_implications_v136; assert_in_epsilon(5.365565521609327, worksheet.outputs_physical_implications_v136, 0.002); end
  def test_outputs_physical_implications_w136; assert_in_epsilon(5.6921920731050815, worksheet.outputs_physical_implications_w136, 0.002); end
  def test_outputs_physical_implications_x136; assert_in_epsilon(6.035485898781927, worksheet.outputs_physical_implications_x136, 0.002); end
  def test_outputs_physical_implications_y136; assert_in_epsilon(6.382976247299335, worksheet.outputs_physical_implications_y136, 0.002); end
  def test_outputs_physical_implications_c137; assert_equal("Timber", worksheet.outputs_physical_implications_c137); end
  def test_outputs_physical_implications_e137; assert_equal("Timber", worksheet.outputs_physical_implications_e137); end
  def test_outputs_physical_implications_q137; assert_in_delta(0.8091999999999999, worksheet.outputs_physical_implications_q137, 0.002); end
  def test_outputs_physical_implications_r137; assert_in_delta(0.9737451011324226, worksheet.outputs_physical_implications_r137, 0.002); end
  def test_outputs_physical_implications_s137; assert_in_delta(0.9882451450221285, worksheet.outputs_physical_implications_s137, 0.002); end
  def test_outputs_physical_implications_t137; assert_in_epsilon(1.0446888104743397, worksheet.outputs_physical_implications_t137, 0.002); end
  def test_outputs_physical_implications_u137; assert_in_epsilon(1.1003642410658196, worksheet.outputs_physical_implications_u137, 0.002); end
  def test_outputs_physical_implications_v137; assert_in_epsilon(1.1571564952023579, worksheet.outputs_physical_implications_v137, 0.002); end
  def test_outputs_physical_implications_w137; assert_in_epsilon(1.2144563200672056, worksheet.outputs_physical_implications_w137, 0.002); end
  def test_outputs_physical_implications_x137; assert_in_epsilon(1.2743525998715564, worksheet.outputs_physical_implications_x137, 0.002); end
  def test_outputs_physical_implications_y137; assert_in_epsilon(1.330683929824457, worksheet.outputs_physical_implications_y137, 0.002); end
  def test_outputs_physical_implications_c145; assert_equal("Technology category", worksheet.outputs_physical_implications_c145); end
  def test_outputs_physical_implications_q145; assert_in_epsilon(2011.0, worksheet.outputs_physical_implications_q145, 0.002); end
  def test_outputs_physical_implications_r145; assert_equal("2015", worksheet.outputs_physical_implications_r145); end
  def test_outputs_physical_implications_s145; assert_equal("2020", worksheet.outputs_physical_implications_s145); end
  def test_outputs_physical_implications_t145; assert_equal("2025", worksheet.outputs_physical_implications_t145); end
  def test_outputs_physical_implications_u145; assert_equal("2030", worksheet.outputs_physical_implications_u145); end
  def test_outputs_physical_implications_v145; assert_equal("2035", worksheet.outputs_physical_implications_v145); end
  def test_outputs_physical_implications_w145; assert_equal("2040", worksheet.outputs_physical_implications_w145); end
  def test_outputs_physical_implications_x145; assert_equal("2045", worksheet.outputs_physical_implications_x145); end
  def test_outputs_physical_implications_y145; assert_equal("2050", worksheet.outputs_physical_implications_y145); end
  def test_outputs_physical_implications_c146; assert_equal("Light road", worksheet.outputs_physical_implications_c146); end
  def test_outputs_physical_implications_q146; assert_in_epsilon(1419297.058881807, worksheet.outputs_physical_implications_q146, 0.002); end
  def test_outputs_physical_implications_r146; assert_in_epsilon(1617518.2987623257, worksheet.outputs_physical_implications_r146, 0.002); end
  def test_outputs_physical_implications_s146; assert_in_epsilon(1844145.774109272, worksheet.outputs_physical_implications_s146, 0.002); end
  def test_outputs_physical_implications_t146; assert_in_epsilon(2091350.756973599, worksheet.outputs_physical_implications_t146, 0.002); end
  def test_outputs_physical_implications_u146; assert_in_epsilon(2360380.4463830316, worksheet.outputs_physical_implications_u146, 0.002); end
  def test_outputs_physical_implications_v146; assert_in_epsilon(2653049.54585571, worksheet.outputs_physical_implications_v146, 0.002); end
  def test_outputs_physical_implications_w146; assert_in_epsilon(2970767.831865849, worksheet.outputs_physical_implications_w146, 0.002); end
  def test_outputs_physical_implications_x146; assert_in_epsilon(3314844.6424347074, worksheet.outputs_physical_implications_x146, 0.002); end
  def test_outputs_physical_implications_y146; assert_in_epsilon(3685839.007089611, worksheet.outputs_physical_implications_y146, 0.002); end
  def test_outputs_physical_implications_c147; assert_equal("Heavy road", worksheet.outputs_physical_implications_c147); end
  def test_outputs_physical_implications_q147; assert_in_epsilon(15217.209383533369, worksheet.outputs_physical_implications_q147, 0.002); end
  def test_outputs_physical_implications_r147; assert_in_epsilon(16907.492168165936, worksheet.outputs_physical_implications_r147, 0.002); end
  def test_outputs_physical_implications_s147; assert_in_epsilon(18560.949526008044, worksheet.outputs_physical_implications_s147, 0.002); end
  def test_outputs_physical_implications_t147; assert_in_epsilon(20131.501312816545, worksheet.outputs_physical_implications_t147, 0.002); end
  def test_outputs_physical_implications_u147; assert_in_epsilon(21592.08800924807, worksheet.outputs_physical_implications_u147, 0.002); end
  def test_outputs_physical_implications_v147; assert_in_epsilon(22920.370389404037, worksheet.outputs_physical_implications_v147, 0.002); end
  def test_outputs_physical_implications_w147; assert_in_epsilon(24098.00271696022, worksheet.outputs_physical_implications_w147, 0.002); end
  def test_outputs_physical_implications_x147; assert_in_epsilon(25125.842774523695, worksheet.outputs_physical_implications_x147, 0.002); end
  def test_outputs_physical_implications_y147; assert_in_epsilon(25968.69032227696, worksheet.outputs_physical_implications_y147, 0.002); end
  def test_outputs_physical_implications_c148; assert_equal("Rail", worksheet.outputs_physical_implications_c148); end
  def test_outputs_physical_implications_q148; assert_in_epsilon(52.22869219380304, worksheet.outputs_physical_implications_q148, 0.002); end
  def test_outputs_physical_implications_r148; assert_in_epsilon(57.7504291096186, worksheet.outputs_physical_implications_r148, 0.002); end
  def test_outputs_physical_implications_s148; assert_in_epsilon(63.38717488942572, worksheet.outputs_physical_implications_s148, 0.002); end
  def test_outputs_physical_implications_t148; assert_in_epsilon(69.32947693868212, worksheet.outputs_physical_implications_t148, 0.002); end
  def test_outputs_physical_implications_u148; assert_in_epsilon(75.66906722078639, worksheet.outputs_physical_implications_u148, 0.002); end
  def test_outputs_physical_implications_v148; assert_in_epsilon(82.55015610653885, worksheet.outputs_physical_implications_v148, 0.002); end
  def test_outputs_physical_implications_w148; assert_in_epsilon(90.10692055674217, worksheet.outputs_physical_implications_w148, 0.002); end
  def test_outputs_physical_implications_x148; assert_in_epsilon(98.42242031795784, worksheet.outputs_physical_implications_x148, 0.002); end
  def test_outputs_physical_implications_y148; assert_in_epsilon(107.76787605787362, worksheet.outputs_physical_implications_y148, 0.002); end
  def test_outputs_physical_implications_c149; assert_equal("Plane", worksheet.outputs_physical_implications_c149); end
  def test_outputs_physical_implications_q149; assert_in_epsilon(24.99654391376603, worksheet.outputs_physical_implications_q149, 0.002); end
  def test_outputs_physical_implications_r149; assert_in_epsilon(28.53982211668685, worksheet.outputs_physical_implications_r149, 0.002); end
  def test_outputs_physical_implications_s149; assert_in_epsilon(32.27358835635439, worksheet.outputs_physical_implications_s149, 0.002); end
  def test_outputs_physical_implications_t149; assert_in_epsilon(36.47774869975465, worksheet.outputs_physical_implications_t149, 0.002); end
  def test_outputs_physical_implications_u149; assert_in_epsilon(41.25076172989882, worksheet.outputs_physical_implications_u149, 0.002); end
  def test_outputs_physical_implications_v149; assert_in_epsilon(46.72160110968994, worksheet.outputs_physical_implications_v149, 0.002); end
  def test_outputs_physical_implications_w149; assert_in_epsilon(53.03301903299659, worksheet.outputs_physical_implications_w149, 0.002); end
  def test_outputs_physical_implications_x149; assert_in_epsilon(60.342913480328775, worksheet.outputs_physical_implications_x149, 0.002); end
  def test_outputs_physical_implications_y149; assert_in_epsilon(68.83941773053482, worksheet.outputs_physical_implications_y149, 0.002); end
  def test_outputs_physical_implications_c150; assert_equal("Total", worksheet.outputs_physical_implications_c150); end
  def test_outputs_physical_implications_q150; assert_in_epsilon(1434591.4935014478, worksheet.outputs_physical_implications_q150, 0.002); end
  def test_outputs_physical_implications_r150; assert_in_epsilon(1634512.081181718, worksheet.outputs_physical_implications_r150, 0.002); end
  def test_outputs_physical_implications_s150; assert_in_epsilon(1862802.3843985258, worksheet.outputs_physical_implications_s150, 0.002); end
  def test_outputs_physical_implications_t150; assert_in_epsilon(2111588.065512054, worksheet.outputs_physical_implications_t150, 0.002); end
  def test_outputs_physical_implications_u150; assert_in_epsilon(2382089.4542212305, worksheet.outputs_physical_implications_u150, 0.002); end
  def test_outputs_physical_implications_v150; assert_in_epsilon(2676099.1880023303, worksheet.outputs_physical_implications_v150, 0.002); end
  def test_outputs_physical_implications_w150; assert_in_epsilon(2995008.974522399, worksheet.outputs_physical_implications_w150, 0.002); end
  def test_outputs_physical_implications_x150; assert_in_epsilon(3340129.2505430295, worksheet.outputs_physical_implications_x150, 0.002); end
  def test_outputs_physical_implications_y150; assert_in_epsilon(3711984.3047056766, worksheet.outputs_physical_implications_y150, 0.002); end
  def test_outputs_physical_implications_q48; assert_in_delta(0.8432926393963501, worksheet.outputs_physical_implications_q48, 0.002); end
  def test_outputs_physical_implications_y48; assert_in_delta(0.9389292544041041, worksheet.outputs_physical_implications_y48, 0.002); end
  def test_outputs_physical_implications_q9; assert_in_epsilon(6966439712.0, worksheet.outputs_physical_implications_q9, 0.002); end
  def test_outputs_physical_implications_y9; assert_in_epsilon(9550945000.0, worksheet.outputs_physical_implications_y9, 0.002); end
  def test_outputs_physical_implications_q35; assert_in_epsilon(833660013.8618993, worksheet.outputs_physical_implications_q35, 0.002); end
  def test_outputs_physical_implications_y35; assert_in_epsilon(917809553.0459162, worksheet.outputs_physical_implications_y35, 0.002); end
  def test_outputs_physical_implications_q30; assert_in_epsilon(1452719862.6209612, worksheet.outputs_physical_implications_q30, 0.002); end
  def test_outputs_physical_implications_y30; assert_in_epsilon(2881187074.6996784, worksheet.outputs_physical_implications_y30, 0.002); end
  def test_outputs_physical_implications_q21; assert_in_delta(0.5213279389034929, worksheet.outputs_physical_implications_q21, 0.002); end
  def test_outputs_physical_implications_y21; assert_in_delta(0.663663288223238, worksheet.outputs_physical_implications_y21, 0.002); end
  def test_outputs_costs_c7; assert_equal("Sector", worksheet.outputs_costs_c7); end
  def test_outputs_costs_d7; assert_equal("Sector number", worksheet.outputs_costs_d7); end
  def test_outputs_costs_f7; assert_equal("Low", worksheet.outputs_costs_f7); end
  def test_outputs_costs_g7; assert_equal("Point", worksheet.outputs_costs_g7); end
  def test_outputs_costs_h7; assert_equal("High", worksheet.outputs_costs_h7); end
  def test_outputs_costs_c8; assert_equal("Transport", worksheet.outputs_costs_c8); end
  def test_outputs_costs_d8; assert_in_epsilon(10.0, worksheet.outputs_costs_d8, 0.002); end
  def test_outputs_costs_f8; assert_in_epsilon(9019.585821325829, worksheet.outputs_costs_f8, 0.002); end
  def test_outputs_costs_g8; assert_in_epsilon(11674.669696106057, worksheet.outputs_costs_g8, 0.002); end
  def test_outputs_costs_h8; assert_in_epsilon(14289.05423061388, worksheet.outputs_costs_h8, 0.002); end
  def test_outputs_costs_c9; assert_equal("Buildings", worksheet.outputs_costs_c9); end
  def test_outputs_costs_d9; assert_in_epsilon(20.0, worksheet.outputs_costs_d9, 0.002); end
  def test_outputs_costs_f9; assert_in_epsilon(4660.604168036896, worksheet.outputs_costs_f9, 0.002); end
  def test_outputs_costs_g9; assert_in_epsilon(5799.618638819798, worksheet.outputs_costs_g9, 0.002); end
  def test_outputs_costs_h9; assert_in_epsilon(6938.633109602701, worksheet.outputs_costs_h9, 0.002); end
  def test_outputs_costs_c10; assert_equal("Manufacturing", worksheet.outputs_costs_c10); end
  def test_outputs_costs_d10; assert_in_epsilon(30.0, worksheet.outputs_costs_d10, 0.002); end
  def test_outputs_costs_c11; assert_equal("Power", worksheet.outputs_costs_c11); end
  def test_outputs_costs_d11; assert_in_epsilon(40.0, worksheet.outputs_costs_d11, 0.002); end
  def test_outputs_costs_f11; assert_in_epsilon(1451.0664212899198, worksheet.outputs_costs_f11, 0.002); end
  def test_outputs_costs_g11; assert_in_epsilon(1794.429595221249, worksheet.outputs_costs_g11, 0.002); end
  def test_outputs_costs_h11; assert_in_epsilon(2137.792769152578, worksheet.outputs_costs_h11, 0.002); end
  def test_outputs_costs_c12; assert_equal("Total capital and operating costs", worksheet.outputs_costs_c12); end
  def test_outputs_costs_f12; assert_in_epsilon(15131.256410652644, worksheet.outputs_costs_f12, 0.002); end
  def test_outputs_costs_g12; assert_in_epsilon(19268.7179301471, worksheet.outputs_costs_g12, 0.002); end
  def test_outputs_costs_h12; assert_in_epsilon(23365.480109369153, worksheet.outputs_costs_h12, 0.002); end
  def test_outputs_costs_j707; assert_equal("2011", worksheet.outputs_costs_j707); end
  def test_outputs_costs_k707; assert_equal("2015", worksheet.outputs_costs_k707); end
  def test_outputs_costs_l707; assert_equal("2020", worksheet.outputs_costs_l707); end
  def test_outputs_costs_m707; assert_equal("2025", worksheet.outputs_costs_m707); end
  def test_outputs_costs_n707; assert_equal("2030", worksheet.outputs_costs_n707); end
  def test_outputs_costs_o707; assert_equal("2035", worksheet.outputs_costs_o707); end
  def test_outputs_costs_p707; assert_equal("2040", worksheet.outputs_costs_p707); end
  def test_outputs_costs_q707; assert_equal("2045", worksheet.outputs_costs_q707); end
  def test_outputs_costs_r707; assert_equal("2050", worksheet.outputs_costs_r707); end
  def test_outputs_costs_c708; assert_equal("Capital costs (including finance)", worksheet.outputs_costs_c708); end
  def test_outputs_costs_j708; assert_in_epsilon(6700.330303169863, worksheet.outputs_costs_j708, 0.002); end
  def test_outputs_costs_k708; assert_in_epsilon(8766.559745977891, worksheet.outputs_costs_k708, 0.002); end
  def test_outputs_costs_l708; assert_in_epsilon(9607.678151821588, worksheet.outputs_costs_l708, 0.002); end
  def test_outputs_costs_m708; assert_in_epsilon(10656.199585885173, worksheet.outputs_costs_m708, 0.002); end
  def test_outputs_costs_n708; assert_in_epsilon(11725.468959565138, worksheet.outputs_costs_n708, 0.002); end
  def test_outputs_costs_o708; assert_in_epsilon(12758.113118295772, worksheet.outputs_costs_o708, 0.002); end
  def test_outputs_costs_p708; assert_in_epsilon(13933.84881548434, worksheet.outputs_costs_p708, 0.002); end
  def test_outputs_costs_q708; assert_in_epsilon(15129.003150911474, worksheet.outputs_costs_q708, 0.002); end
  def test_outputs_costs_r708; assert_in_epsilon(16345.339638944646, worksheet.outputs_costs_r708, 0.002); end
  def test_outputs_costs_c709; assert_equal("Operating costs", worksheet.outputs_costs_c709); end
  def test_outputs_costs_j709; assert_in_epsilon(1310.7060234492592, worksheet.outputs_costs_j709, 0.002); end
  def test_outputs_costs_k709; assert_in_epsilon(1472.0717334395601, worksheet.outputs_costs_k709, 0.002); end
  def test_outputs_costs_l709; assert_in_epsilon(1649.1195724276995, worksheet.outputs_costs_l709, 0.002); end
  def test_outputs_costs_m709; assert_in_epsilon(1838.4781238659016, worksheet.outputs_costs_m709, 0.002); end
  def test_outputs_costs_n709; assert_in_epsilon(2035.7034067048544, worksheet.outputs_costs_n709, 0.002); end
  def test_outputs_costs_o709; assert_in_epsilon(2242.929152509356, worksheet.outputs_costs_o709, 0.002); end
  def test_outputs_costs_p709; assert_in_epsilon(2458.2124429770656, worksheet.outputs_costs_p709, 0.002); end
  def test_outputs_costs_q709; assert_in_epsilon(2687.8705333012404, worksheet.outputs_costs_q709, 0.002); end
  def test_outputs_costs_r709; assert_in_epsilon(2923.3782912024576, worksheet.outputs_costs_r709, 0.002); end
  def test_outputs_costs_c710; assert_equal("Fuel costs", worksheet.outputs_costs_c710); end
  def test_outputs_costs_j710; assert_in_epsilon(1983.9400452448187, worksheet.outputs_costs_j710, 0.002); end
  def test_outputs_costs_k710; assert_in_epsilon(2185.968626630767, worksheet.outputs_costs_k710, 0.002); end
  def test_outputs_costs_l710; assert_in_epsilon(2441.544561523811, worksheet.outputs_costs_l710, 0.002); end
  def test_outputs_costs_m710; assert_in_epsilon(2663.202827836771, worksheet.outputs_costs_m710, 0.002); end
  def test_outputs_costs_n710; assert_in_epsilon(2908.689860878146, worksheet.outputs_costs_n710, 0.002); end
  def test_outputs_costs_o710; assert_in_epsilon(3147.926481387084, worksheet.outputs_costs_o710, 0.002); end
  def test_outputs_costs_p710; assert_in_epsilon(3395.441450904589, worksheet.outputs_costs_p710, 0.002); end
  def test_outputs_costs_q710; assert_in_epsilon(3657.764373419367, worksheet.outputs_costs_q710, 0.002); end
  def test_outputs_costs_r710; assert_in_epsilon(3907.344567624033, worksheet.outputs_costs_r710, 0.002); end
  def test_outputs_costs_c711; assert_equal("Total", worksheet.outputs_costs_c711); end
  def test_outputs_costs_j711; assert_in_epsilon(9994.97637186394, worksheet.outputs_costs_j711, 0.002); end
  def test_outputs_costs_k711; assert_in_epsilon(12424.600106048218, worksheet.outputs_costs_k711, 0.002); end
  def test_outputs_costs_l711; assert_in_epsilon(13698.3422857731, worksheet.outputs_costs_l711, 0.002); end
  def test_outputs_costs_m711; assert_in_epsilon(15157.880537587846, worksheet.outputs_costs_m711, 0.002); end
  def test_outputs_costs_n711; assert_in_epsilon(16669.862227148136, worksheet.outputs_costs_n711, 0.002); end
  def test_outputs_costs_o711; assert_in_epsilon(18148.968752192213, worksheet.outputs_costs_o711, 0.002); end
  def test_outputs_costs_p711; assert_in_epsilon(19787.502709365996, worksheet.outputs_costs_p711, 0.002); end
  def test_outputs_costs_q711; assert_in_epsilon(21474.63805763208, worksheet.outputs_costs_q711, 0.002); end
  def test_outputs_costs_r711; assert_in_epsilon(23176.062497771138, worksheet.outputs_costs_r711, 0.002); end
  def test_outputs_costs_c729; assert_equal("Year", worksheet.outputs_costs_c729); end
  def test_outputs_costs_j729; assert_equal("2011", worksheet.outputs_costs_j729); end
  def test_outputs_costs_k729; assert_equal("2015", worksheet.outputs_costs_k729); end
  def test_outputs_costs_l729; assert_equal("2020", worksheet.outputs_costs_l729); end
  def test_outputs_costs_m729; assert_equal("2025", worksheet.outputs_costs_m729); end
  def test_outputs_costs_n729; assert_equal("2030", worksheet.outputs_costs_n729); end
  def test_outputs_costs_o729; assert_equal("2035", worksheet.outputs_costs_o729); end
  def test_outputs_costs_p729; assert_equal("2040", worksheet.outputs_costs_p729); end
  def test_outputs_costs_q729; assert_equal("2045", worksheet.outputs_costs_q729); end
  def test_outputs_costs_r729; assert_equal("2050", worksheet.outputs_costs_r729); end
  def test_outputs_costs_c730; assert_equal("High", worksheet.outputs_costs_c730); end
  def test_outputs_costs_j730; assert_in_epsilon(9994.97637186394, worksheet.outputs_costs_j730, 0.002); end
  def test_outputs_costs_k730; assert_in_epsilon(12800.09822664924, worksheet.outputs_costs_k730, 0.002); end
  def test_outputs_costs_l730; assert_in_epsilon(14633.407361791042, worksheet.outputs_costs_l730, 0.002); end
  def test_outputs_costs_m730; assert_in_epsilon(16758.33498764843, worksheet.outputs_costs_m730, 0.002); end
  def test_outputs_costs_n730; assert_in_epsilon(19056.511368590156, worksheet.outputs_costs_n730, 0.002); end
  def test_outputs_costs_o730; assert_in_epsilon(21432.196808349432, worksheet.outputs_costs_o730, 0.002); end
  def test_outputs_costs_p730; assert_in_epsilon(24108.116222320634, worksheet.outputs_costs_p730, 0.002); end
  def test_outputs_costs_q730; assert_in_epsilon(26983.954767670537, worksheet.outputs_costs_q730, 0.002); end
  def test_outputs_costs_r730; assert_in_epsilon(29994.820226217766, worksheet.outputs_costs_r730, 0.002); end
  def test_outputs_costs_c731; assert_equal("Point", worksheet.outputs_costs_c731); end
  def test_outputs_costs_j731; assert_in_epsilon(9994.97637186394, worksheet.outputs_costs_j731, 0.002); end
  def test_outputs_costs_k731; assert_in_epsilon(12424.600106048218, worksheet.outputs_costs_k731, 0.002); end
  def test_outputs_costs_l731; assert_in_epsilon(13698.3422857731, worksheet.outputs_costs_l731, 0.002); end
  def test_outputs_costs_m731; assert_in_epsilon(15157.880537587846, worksheet.outputs_costs_m731, 0.002); end
  def test_outputs_costs_n731; assert_in_epsilon(16669.862227148136, worksheet.outputs_costs_n731, 0.002); end
  def test_outputs_costs_o731; assert_in_epsilon(18148.968752192213, worksheet.outputs_costs_o731, 0.002); end
  def test_outputs_costs_p731; assert_in_epsilon(19787.502709365996, worksheet.outputs_costs_p731, 0.002); end
  def test_outputs_costs_q731; assert_in_epsilon(21474.63805763208, worksheet.outputs_costs_q731, 0.002); end
  def test_outputs_costs_r731; assert_in_epsilon(23176.062497771138, worksheet.outputs_costs_r731, 0.002); end
  def test_outputs_costs_c732; assert_equal("Low", worksheet.outputs_costs_c732); end
  def test_outputs_costs_j732; assert_in_epsilon(9994.97637186394, worksheet.outputs_costs_j732, 0.002); end
  def test_outputs_costs_k732; assert_in_epsilon(12088.940350123637, worksheet.outputs_costs_k732, 0.002); end
  def test_outputs_costs_l732; assert_in_epsilon(12867.263216935582, worksheet.outputs_costs_l732, 0.002); end
  def test_outputs_costs_m732; assert_in_epsilon(13730.414668117515, worksheet.outputs_costs_m732, 0.002); end
  def test_outputs_costs_n732; assert_in_epsilon(14539.255249717731, worksheet.outputs_costs_n732, 0.002); end
  def test_outputs_costs_o732; assert_in_epsilon(15214.419655304246, worksheet.outputs_costs_o732, 0.002); end
  def test_outputs_costs_p732; assert_in_epsilon(15922.479393984044, worksheet.outputs_costs_p732, 0.002); end
  def test_outputs_costs_q732; assert_in_epsilon(16548.410111728605, worksheet.outputs_costs_q732, 0.002); end
  def test_outputs_costs_r732; assert_in_epsilon(17075.04546385372, worksheet.outputs_costs_r732, 0.002); end
  def test_outputs_costs_br645; assert_in_epsilon(485.77338432390064, worksheet.outputs_costs_br645, 0.002); end
  def test_outputs_costs_br646; assert_in_epsilon(1579.6076471991882, worksheet.outputs_costs_br646, 0.002); end
  def test_outputs_costs_br647; assert_in_epsilon(456.67378172664263, worksheet.outputs_costs_br647, 0.002); end
  def test_outputs_costs_br648; assert_in_epsilon(363.4483634130738, worksheet.outputs_costs_br648, 0.002); end
  def test_outputs_costs_br649; assert_in_epsilon(11.61274157912267, worksheet.outputs_costs_br649, 0.002); end
  def test_outputs_costs_br650; assert_in_epsilon(24.197724308668707, worksheet.outputs_costs_br650, 0.002); end
  def test_outputs_costs_br651; assert_in_delta(1.3882243087368047e-06, worksheet.outputs_costs_br651, 0.002); end
  def test_outputs_costs_br658; assert_in_epsilon(592.7192415654796, worksheet.outputs_costs_br658, 0.002); end
  def test_outputs_costs_br659; assert_in_epsilon(2522.4748074658946, worksheet.outputs_costs_br659, 0.002); end
  def test_outputs_costs_br660; assert_in_epsilon(513.7350864029756, worksheet.outputs_costs_br660, 0.002); end
  def test_outputs_costs_br661; assert_in_epsilon(417.1585464547459, worksheet.outputs_costs_br661, 0.002); end
  def test_outputs_costs_br662; assert_in_epsilon(13.538590410066154, worksheet.outputs_costs_br662, 0.002); end
  def test_outputs_costs_br663; assert_in_epsilon(28.08245565275055, worksheet.outputs_costs_br663, 0.002); end
  def test_outputs_costs_br664; assert_in_delta(1.6396208712672227e-06, worksheet.outputs_costs_br664, 0.002); end
  def test_outputs_costs_br684; assert_in_epsilon(348.88268705467976, worksheet.outputs_costs_br684, 0.002); end
  def test_outputs_costs_br685; assert_in_epsilon(985.9505462905212, worksheet.outputs_costs_br685, 0.002); end
  def test_outputs_costs_br686; assert_in_epsilon(362.0038898772719, worksheet.outputs_costs_br686, 0.002); end
  def test_outputs_costs_br687; assert_in_epsilon(345.5449690658497, worksheet.outputs_costs_br687, 0.002); end
  def test_outputs_costs_br688; assert_in_epsilon(10.970791968808177, worksheet.outputs_costs_br688, 0.002); end
  def test_outputs_costs_br689; assert_in_epsilon(22.902813860641423, worksheet.outputs_costs_br689, 0.002); end
  def test_outputs_costs_br690; assert_in_delta(1.3044254545599989e-06, worksheet.outputs_costs_br690, 0.002); end
  def test_outputs_costs_br671; assert_in_epsilon(485.77338432390064, worksheet.outputs_costs_br671, 0.002); end
  def test_outputs_costs_br672; assert_in_epsilon(1579.6076471991882, worksheet.outputs_costs_br672, 0.002); end
  def test_outputs_costs_br673; assert_in_epsilon(456.67378172664263, worksheet.outputs_costs_br673, 0.002); end
  def test_outputs_costs_br674; assert_in_epsilon(363.4483634130738, worksheet.outputs_costs_br674, 0.002); end
  def test_outputs_costs_br675; assert_in_epsilon(11.61274157912267, worksheet.outputs_costs_br675, 0.002); end
  def test_outputs_costs_br676; assert_in_epsilon(24.197724308668707, worksheet.outputs_costs_br676, 0.002); end
  def test_outputs_costs_br677; assert_in_delta(1.3882243087368047e-06, worksheet.outputs_costs_br677, 0.002); end
  def test_outputs_costs_c18; assert_equal("Cost", worksheet.outputs_costs_c18); end
  def test_outputs_costs_e18; assert_equal("Chosen cost", worksheet.outputs_costs_e18); end
  def test_outputs_costs_f18; assert_equal("Low", worksheet.outputs_costs_f18); end
  def test_outputs_costs_g18; assert_equal("Point", worksheet.outputs_costs_g18); end
  def test_outputs_costs_h18; assert_equal("High", worksheet.outputs_costs_h18); end
  def test_outputs_costs_c19; assert_equal("Fuel", worksheet.outputs_costs_c19); end
  def test_outputs_costs_e19; assert_in_epsilon(2921.313643938821, worksheet.outputs_costs_e19, 0.002); end
  def test_outputs_costs_f19; assert_in_epsilon(2076.2556994221973, worksheet.outputs_costs_f19, 0.002); end
  def test_outputs_costs_g19; assert_in_epsilon(2921.313643938821, worksheet.outputs_costs_g19, 0.002); end
  def test_outputs_costs_h19; assert_in_epsilon(4087.708729591533, worksheet.outputs_costs_h19, 0.002); end
  def test_outputs_costs_e26; assert_in_epsilon(202200.0, worksheet.outputs_costs_e26, 0.002); end
  def test_outputs_costs_d27; assert_in_epsilon(409.0, worksheet.outputs_costs_d27, 0.002); end
  def test_outputs_costs_nb38; assert_in_epsilon(107.50811839270861, worksheet.outputs_costs_nb38, 0.002); end
  def test_outputs_costs_nb39; assert_in_epsilon(451.36154724446766, worksheet.outputs_costs_nb39, 0.002); end
  def test_outputs_costs_nb40; assert_in_epsilon(385.6381983312103, worksheet.outputs_costs_nb40, 0.002); end
  def test_outputs_costs_nb41; assert_in_epsilon(4351.554608275473, worksheet.outputs_costs_nb41, 0.002); end
  def test_outputs_costs_nb42; assert_in_epsilon(102.80225052055526, worksheet.outputs_costs_nb42, 0.002); end
  def test_outputs_costs_nb43; assert_in_epsilon(452.80178342925115, worksheet.outputs_costs_nb43, 0.002); end
  def test_outputs_costs_nb44; assert_in_epsilon(238.9859954143142, worksheet.outputs_costs_nb44, 0.002); end
  def test_outputs_costs_nb45; assert_in_delta(0.0, (worksheet.outputs_costs_nb45||0), 0.002); end
  def test_outputs_costs_nb46; assert_in_epsilon(444.96653739859966, worksheet.outputs_costs_nb46, 0.002); end
  def test_outputs_costs_nb47; assert_in_epsilon(18.800234704173025, worksheet.outputs_costs_nb47, 0.002); end
  def test_outputs_costs_nb48; assert_in_epsilon(22.879057262713147, worksheet.outputs_costs_nb48, 0.002); end
  def test_outputs_costs_nb49; assert_in_epsilon(7.744521300858692, worksheet.outputs_costs_nb49, 0.002); end
  def test_outputs_costs_nb50; assert_in_delta(0.0, (worksheet.outputs_costs_nb50||0), 0.002); end
  def test_outputs_costs_nb51; assert_in_epsilon(1.404074486383266, worksheet.outputs_costs_nb51, 0.002); end
  def test_outputs_costs_nb52; assert_in_delta(0.8777503313208291, worksheet.outputs_costs_nb52, 0.002); end
  def test_outputs_costs_nb53; assert_in_epsilon(30.85120618250143, worksheet.outputs_costs_nb53, 0.002); end
  def test_outputs_costs_nb54; assert_in_epsilon(154.01287857006974, worksheet.outputs_costs_nb54, 0.002); end
  def test_outputs_costs_nb55; assert_in_epsilon(131.62226479170806, worksheet.outputs_costs_nb55, 0.002); end
  def test_outputs_costs_nb56; assert_in_epsilon(1767.1307878281034, worksheet.outputs_costs_nb56, 0.002); end
  def test_outputs_costs_nb57; assert_in_epsilon(44.27447402459198, worksheet.outputs_costs_nb57, 0.002); end
  def test_outputs_costs_nb58; assert_in_epsilon(165.42778512841008, worksheet.outputs_costs_nb58, 0.002); end
  def test_outputs_costs_nb59; assert_in_epsilon(83.03987779820059, worksheet.outputs_costs_nb59, 0.002); end
  def test_outputs_costs_nb60; assert_in_delta(0.0, (worksheet.outputs_costs_nb60||0), 0.002); end
  def test_outputs_costs_nb61; assert_in_epsilon(50.46140359742915, worksheet.outputs_costs_nb61, 0.002); end
  def test_outputs_costs_nb62; assert_in_epsilon(2.1444067074608766, worksheet.outputs_costs_nb62, 0.002); end
  def test_outputs_costs_nb63; assert_in_epsilon(2.611709104071616, worksheet.outputs_costs_nb63, 0.002); end
  def test_outputs_costs_nb64; assert_in_delta(0.0009008155240774561, worksheet.outputs_costs_nb64, 0.002); end
  def test_outputs_costs_nb65; assert_in_delta(0.0, (worksheet.outputs_costs_nb65||0), 0.002); end
  def test_outputs_costs_nb66; assert_in_epsilon(1.1984199043167767, worksheet.outputs_costs_nb66, 0.002); end
  def test_outputs_costs_nb67; assert_in_epsilon(1.207436910663224, worksheet.outputs_costs_nb67, 0.002); end
  def test_outputs_costs_nb68; assert_in_epsilon(284.83113600769434, worksheet.outputs_costs_nb68, 0.002); end
  def test_outputs_costs_nb69; assert_in_delta(0.0, (worksheet.outputs_costs_nb69||0), 0.002); end
  def test_outputs_costs_nb70; assert_in_epsilon(1258.1724763163595, worksheet.outputs_costs_nb70, 0.002); end
  def test_outputs_costs_nb71; assert_in_delta(0.0, (worksheet.outputs_costs_nb71||0), 0.002); end
  def test_outputs_costs_nb72; assert_in_delta(0.0, (worksheet.outputs_costs_nb72||0), 0.002); end
  def test_outputs_costs_nb73; assert_in_delta(0.0, (worksheet.outputs_costs_nb73||0), 0.002); end
  def test_outputs_costs_nb74; assert_in_epsilon(1209.0062278776497, worksheet.outputs_costs_nb74, 0.002); end
  def test_outputs_costs_nb75; assert_in_epsilon(84.7626356883243, worksheet.outputs_costs_nb75, 0.002); end
  def test_outputs_costs_nb76; assert_in_epsilon(110.2223480975595, worksheet.outputs_costs_nb76, 0.002); end
  def test_outputs_costs_nb77; assert_in_delta(0.00011501254166154987, worksheet.outputs_costs_nb77, 0.002); end
  def test_outputs_costs_nb78; assert_in_delta(1.8557096057666885e-07, worksheet.outputs_costs_nb78, 0.002); end
  def test_outputs_costs_nb79; assert_in_epsilon(219.19410848775692, worksheet.outputs_costs_nb79, 0.002); end
  def test_outputs_costs_nb80; assert_in_epsilon(20.009376882730862, worksheet.outputs_costs_nb80, 0.002); end
  def test_outputs_costs_nb81; assert_in_epsilon(24.11584386187367, worksheet.outputs_costs_nb81, 0.002); end
  def test_outputs_costs_nb82; assert_in_delta(5.135558085468755e-05, worksheet.outputs_costs_nb82, 0.002); end
  def test_outputs_costs_nb83; assert_in_delta(0.0, (worksheet.outputs_costs_nb83||0), 0.002); end
  def test_outputs_costs_nb84; assert_in_delta(0.014695747388117027, worksheet.outputs_costs_nb84, 0.002); end
  def test_outputs_costs_nb85; assert_in_delta(0.024376246468706765, worksheet.outputs_costs_nb85, 0.002); end
  def test_outputs_costs_nb86; assert_in_delta(0.0, (worksheet.outputs_costs_nb86||0), 0.002); end
  def test_outputs_costs_nb87; assert_in_delta(0.0, (worksheet.outputs_costs_nb87||0), 0.002); end
  def test_outputs_costs_nb88; assert_in_epsilon(1610.4740512260566, worksheet.outputs_costs_nb88, 0.002); end
  def test_outputs_costs_nb89; assert_in_epsilon(143.17056139717232, worksheet.outputs_costs_nb89, 0.002); end
  def test_outputs_costs_nb90; assert_in_epsilon(172.4912527231123, worksheet.outputs_costs_nb90, 0.002); end
  def test_outputs_costs_nb91; assert_in_delta(0.00031123331341475607, worksheet.outputs_costs_nb91, 0.002); end
  def test_outputs_costs_nb92; assert_in_delta(0.0, (worksheet.outputs_costs_nb92||0), 0.002); end
  def test_outputs_costs_nb93; assert_in_delta(0.09505661210685919, worksheet.outputs_costs_nb93, 0.002); end
  def test_outputs_costs_nb94; assert_in_delta(0.2517416459700818, worksheet.outputs_costs_nb94, 0.002); end
  def test_outputs_costs_nb95; assert_in_delta(0.0, (worksheet.outputs_costs_nb95||0), 0.002); end
  def test_outputs_costs_nb96; assert_in_delta(0.0, (worksheet.outputs_costs_nb96||0), 0.002); end
  def test_outputs_costs_nb97; assert_in_epsilon(130.90963555356868, worksheet.outputs_costs_nb97, 0.002); end
  def test_outputs_costs_nb98; assert_in_delta(0.0, (worksheet.outputs_costs_nb98||0), 0.002); end
  def test_outputs_costs_nb99; assert_in_epsilon(23.63840893184875, worksheet.outputs_costs_nb99, 0.002); end
  def test_outputs_costs_nb100; assert_in_epsilon(168.63564405362487, worksheet.outputs_costs_nb100, 0.002); end
  def test_outputs_costs_nb101; assert_in_epsilon(637.2864626693074, worksheet.outputs_costs_nb101, 0.002); end
  def test_outputs_costs_nb102; assert_in_epsilon(61.7263984352349, worksheet.outputs_costs_nb102, 0.002); end
  def test_outputs_costs_nb103; assert_in_epsilon(103.45423208663166, worksheet.outputs_costs_nb103, 0.002); end
  def test_outputs_costs_nb104; assert_in_epsilon(4.423986509142271, worksheet.outputs_costs_nb104, 0.002); end
  def test_outputs_costs_nb105; assert_in_epsilon(3.5594695053017196, worksheet.outputs_costs_nb105, 0.002); end
  def test_outputs_costs_nb106; assert_in_delta(0.0, (worksheet.outputs_costs_nb106||0), 0.002); end
  def test_outputs_costs_nb107; assert_in_epsilon(113.15600678429348, worksheet.outputs_costs_nb107, 0.002); end
  def test_outputs_costs_nb108; assert_in_epsilon(32.49686226001944, worksheet.outputs_costs_nb108, 0.002); end
  def test_outputs_costs_nb109; assert_in_epsilon(108.86476584494204, worksheet.outputs_costs_nb109, 0.002); end
  def test_outputs_costs_nb110; assert_in_epsilon(29.402789626606072, worksheet.outputs_costs_nb110, 0.002); end
  def test_outputs_costs_nb111; assert_in_epsilon(44.69966387577922, worksheet.outputs_costs_nb111, 0.002); end
  def test_outputs_costs_nb112; assert_in_epsilon(6.213486873692658, worksheet.outputs_costs_nb112, 0.002); end
  def test_outputs_costs_nb113; assert_in_delta(0.0, (worksheet.outputs_costs_nb113||0), 0.002); end
  def test_outputs_costs_nb114; assert_in_delta(0.0, (worksheet.outputs_costs_nb114||0), 0.002); end
  def test_outputs_costs_nb115; assert_in_epsilon(446.16539756759465, worksheet.outputs_costs_nb115, 0.002); end
  def test_outputs_costs_nb116; assert_in_epsilon(22.545159658377315, worksheet.outputs_costs_nb116, 0.002); end
  def test_outputs_costs_nb117; assert_in_epsilon(48.31105641080853, worksheet.outputs_costs_nb117, 0.002); end
  def test_outputs_costs_nb118; assert_in_epsilon(101.01051360835234, worksheet.outputs_costs_nb118, 0.002); end
  def test_outputs_costs_nb119; assert_in_epsilon(5.478140147322721, worksheet.outputs_costs_nb119, 0.002); end
  def test_outputs_costs_nb120; assert_in_epsilon(11.738871744262978, worksheet.outputs_costs_nb120, 0.002); end
  def test_outputs_costs_nb121; assert_in_epsilon(38.735978404243454, worksheet.outputs_costs_nb121, 0.002); end
  def test_outputs_costs_nb122; assert_in_epsilon(81.9799978054097, worksheet.outputs_costs_nb122, 0.002); end
  def test_outputs_costs_nb123; assert_in_epsilon(163.1653194899618, worksheet.outputs_costs_nb123, 0.002); end
  def test_outputs_costs_nb124; assert_in_epsilon(127.20179471635306, worksheet.outputs_costs_nb124, 0.002); end
  def test_outputs_costs_nb125; assert_in_epsilon(223.64136738584756, worksheet.outputs_costs_nb125, 0.002); end
  def test_outputs_costs_nb126; assert_in_epsilon(59.018037105910906, worksheet.outputs_costs_nb126, 0.002); end
  def test_outputs_costs_nb127; assert_in_epsilon(1.5038064760024306, worksheet.outputs_costs_nb127, 0.002); end
  def test_outputs_costs_nb128; assert_in_delta(0.0, (worksheet.outputs_costs_nb128||0), 0.002); end
  def test_outputs_costs_nb129; assert_in_epsilon(227.78079149934803, worksheet.outputs_costs_nb129, 0.002); end
  def test_outputs_costs_nb130; assert_in_epsilon(12.7740560650588, worksheet.outputs_costs_nb130, 0.002); end
  def test_outputs_costs_nb131; assert_in_epsilon(1.1242687275221679, worksheet.outputs_costs_nb131, 0.002); end
  def test_outputs_costs_nb132; assert_in_epsilon(4.333683103921506, worksheet.outputs_costs_nb132, 0.002); end
  def test_outputs_costs_nb133; assert_in_epsilon(19.04510854517623, worksheet.outputs_costs_nb133, 0.002); end
  def test_outputs_costs_nb134; assert_in_epsilon(15.272557804874044, worksheet.outputs_costs_nb134, 0.002); end
  def test_outputs_costs_nb135; assert_in_delta(0.0, (worksheet.outputs_costs_nb135||0), 0.002); end
  def test_outputs_costs_nb136; assert_in_delta(0.0, (worksheet.outputs_costs_nb136||0), 0.002); end
  def test_outputs_costs_nb137; assert_in_epsilon(208.69908910264246, worksheet.outputs_costs_nb137, 0.002); end
  def test_outputs_costs_nb138; assert_in_epsilon(101.12850906841096, worksheet.outputs_costs_nb138, 0.002); end
  def test_outputs_costs_nb139; assert_in_epsilon(220.92411594565266, worksheet.outputs_costs_nb139, 0.002); end
  def test_outputs_costs_nb140; assert_in_epsilon(69.7759987619114, worksheet.outputs_costs_nb140, 0.002); end
  def test_outputs_costs_nb141; assert_in_epsilon(768.0088421012745, worksheet.outputs_costs_nb141, 0.002); end
  def test_outputs_costs_nb142; assert_in_epsilon(691.6862760315064, worksheet.outputs_costs_nb142, 0.002); end
  def test_outputs_costs_nb143; assert_in_epsilon(55.48840928966074, worksheet.outputs_costs_nb143, 0.002); end
  def test_outputs_costs_nb144; assert_in_epsilon(35.6035807121298, worksheet.outputs_costs_nb144, 0.002); end
  def test_outputs_costs_nb145; assert_in_epsilon(58.77076753601858, worksheet.outputs_costs_nb145, 0.002); end
  def test_outputs_costs_nb146; assert_in_epsilon(18.561918040250916, worksheet.outputs_costs_nb146, 0.002); end
  def test_outputs_costs_nb147; assert_in_epsilon(203.35501342237106, worksheet.outputs_costs_nb147, 0.002); end
  def test_outputs_costs_nb148; assert_in_epsilon(176.75927837803295, worksheet.outputs_costs_nb148, 0.002); end
  def test_outputs_costs_nb149; assert_in_epsilon(12.831506817321191, worksheet.outputs_costs_nb149, 0.002); end
  def test_outputs_costs_nb150; assert_in_epsilon(32.28744598381912, worksheet.outputs_costs_nb150, 0.002); end
  def test_outputs_costs_nb151; assert_in_epsilon(139.4848383162872, worksheet.outputs_costs_nb151, 0.002); end
  def test_outputs_costs_nb152; assert_in_epsilon(108.45807435563916, worksheet.outputs_costs_nb152, 0.002); end
  def test_outputs_costs_nb153; assert_in_epsilon(15.93344432738329, worksheet.outputs_costs_nb153, 0.002); end
  def test_outputs_costs_nb154; assert_in_epsilon(3.070031683994158, worksheet.outputs_costs_nb154, 0.002); end
  def test_outputs_costs_nb155; assert_in_epsilon(6.665435783646001, worksheet.outputs_costs_nb155, 0.002); end
  def test_outputs_costs_nb156; assert_in_epsilon(4.409675112576894, worksheet.outputs_costs_nb156, 0.002); end
  def test_outputs_costs_nb157; assert_in_epsilon(5.65197354711736, worksheet.outputs_costs_nb157, 0.002); end
  def test_outputs_costs_nb158; assert_in_epsilon(32.45173240895993, worksheet.outputs_costs_nb158, 0.002); end
  def test_outputs_costs_nb159; assert_in_epsilon(46.05335974541818, worksheet.outputs_costs_nb159, 0.002); end
  def test_outputs_costs_nb160; assert_in_epsilon(1.1116362215308275, worksheet.outputs_costs_nb160, 0.002); end
  def test_outputs_costs_nb161; assert_in_epsilon(13.474982382428195, worksheet.outputs_costs_nb161, 0.002); end
  def test_outputs_costs_nb162; assert_in_epsilon(1.9792671636003925, worksheet.outputs_costs_nb162, 0.002); end
  def test_outputs_costs_nb163; assert_in_epsilon(5.92321690347986, worksheet.outputs_costs_nb163, 0.002); end
  def test_outputs_costs_nb164; assert_in_delta(0.19110667382537824, worksheet.outputs_costs_nb164, 0.002); end
  def test_outputs_costs_nb165; assert_in_epsilon(2.3470275603526938, worksheet.outputs_costs_nb165, 0.002); end
  def test_outputs_costs_nb166; assert_in_delta(0.35465929008699376, worksheet.outputs_costs_nb166, 0.002); end
  def test_outputs_costs_nb167; assert_in_epsilon(5.874949773317047, worksheet.outputs_costs_nb167, 0.002); end
  def test_outputs_costs_nb168; assert_in_epsilon(23.499799093268187, worksheet.outputs_costs_nb168, 0.002); end
  def test_outputs_costs_nb169; assert_in_epsilon(13.653379074682784, worksheet.outputs_costs_nb169, 0.002); end
  def test_outputs_costs_nb170; assert_in_epsilon(54.613516298731135, worksheet.outputs_costs_nb170, 0.002); end
  def test_outputs_costs_nb171; assert_in_epsilon(3.822881875891174, worksheet.outputs_costs_nb171, 0.002); end
  def test_outputs_costs_nb172; assert_in_epsilon(10.35149931900918, worksheet.outputs_costs_nb172, 0.002); end
  def test_outputs_costs_nb173; assert_in_delta(0.2835401438284235, worksheet.outputs_costs_nb173, 0.002); end
  def test_outputs_costs_nb174; assert_in_epsilon(4.665459408168657, worksheet.outputs_costs_nb174, 0.002); end
  def test_outputs_costs_nb175; assert_in_epsilon(33.870246276230944, worksheet.outputs_costs_nb175, 0.002); end
  def test_outputs_costs_nb176; assert_in_epsilon(27.978003905942476, worksheet.outputs_costs_nb176, 0.002); end
  def test_outputs_costs_nb177; assert_in_delta(0.0, (worksheet.outputs_costs_nb177||0), 0.002); end
  def test_outputs_costs_nb178; assert_in_delta(0.0, (worksheet.outputs_costs_nb178||0), 0.002); end
  def test_outputs_costs_nb179; assert_in_delta(0.0, (worksheet.outputs_costs_nb179||0), 0.002); end
  def test_outputs_costs_nb180; assert_in_delta(0.0, (worksheet.outputs_costs_nb180||0), 0.002); end
  def test_outputs_costs_nb181; assert_in_epsilon(8.703879564696077, worksheet.outputs_costs_nb181, 0.002); end
  def test_outputs_costs_nb182; assert_in_delta(0.0007799863058241077, worksheet.outputs_costs_nb182, 0.002); end
  def test_outputs_costs_nb183; assert_in_delta(0.0, (worksheet.outputs_costs_nb183||0), 0.002); end
  def test_outputs_costs_nb184; assert_in_epsilon(29.577002728583572, worksheet.outputs_costs_nb184, 0.002); end
  def test_outputs_costs_nb185; assert_in_epsilon(1.6599870494200968, worksheet.outputs_costs_nb185, 0.002); end
  def test_outputs_costs_nb186; assert_in_epsilon(7.552452673902531, worksheet.outputs_costs_nb186, 0.002); end
  def test_outputs_costs_nb187; assert_in_delta(0.5082791817003804, worksheet.outputs_costs_nb187, 0.002); end
  def test_outputs_costs_nb188; assert_in_epsilon(722.19215685892, worksheet.outputs_costs_nb188, 0.002); end
  def test_outputs_costs_nb207; assert_in_epsilon(77.07707500528308, worksheet.outputs_costs_nb207, 0.002); end
  def test_outputs_costs_nb208; assert_in_epsilon(97.71121580417298, worksheet.outputs_costs_nb208, 0.002); end
  def test_outputs_costs_nb209; assert_in_epsilon(289.67920126239557, worksheet.outputs_costs_nb209, 0.002); end
  def test_outputs_costs_nb210; assert_in_epsilon(60.276454631329784, worksheet.outputs_costs_nb210, 0.002); end
  def test_outputs_costs_nb211; assert_in_epsilon(88.86460466875079, worksheet.outputs_costs_nb211, 0.002); end
  def test_outputs_costs_nb212; assert_in_epsilon(120.25169527574266, worksheet.outputs_costs_nb212, 0.002); end
  def test_outputs_costs_nb213; assert_in_epsilon(122.38816673611983, worksheet.outputs_costs_nb213, 0.002); end
  def test_outputs_costs_nb214; assert_in_epsilon(3.9710690162684488, worksheet.outputs_costs_nb214, 0.002); end
  def test_outputs_costs_nb215; assert_in_epsilon(5.087323714281388, worksheet.outputs_costs_nb215, 0.002); end
  def test_outputs_costs_nb216; assert_in_epsilon(15.661916646627093, worksheet.outputs_costs_nb216, 0.002); end
  def test_outputs_costs_nb217; assert_in_epsilon(1.2610692423193766, worksheet.outputs_costs_nb217, 0.002); end
  def test_outputs_costs_nb218; assert_in_epsilon(1.8208406805859019, worksheet.outputs_costs_nb218, 0.002); end
  def test_outputs_costs_nb219; assert_in_epsilon(4.576124708546415, worksheet.outputs_costs_nb219, 0.002); end
  def test_outputs_costs_nb220; assert_in_epsilon(4.130028347626316, worksheet.outputs_costs_nb220, 0.002); end
  def test_outputs_costs_nb221; assert_in_epsilon(175.66897790444852, worksheet.outputs_costs_nb221, 0.002); end
  def test_outputs_costs_nb222; assert_in_epsilon(224.52643299553776, worksheet.outputs_costs_nb222, 0.002); end
  def test_outputs_costs_nb223; assert_in_epsilon(91.9336080600408, worksheet.outputs_costs_nb223, 0.002); end
  def test_outputs_costs_nb224; assert_in_epsilon(421.91243607271986, worksheet.outputs_costs_nb224, 0.002); end
  def test_outputs_costs_nb225; assert_in_epsilon(9.553474120077272, worksheet.outputs_costs_nb225, 0.002); end
  def test_outputs_costs_nb226; assert_in_epsilon(23.548104586011636, worksheet.outputs_costs_nb226, 0.002); end
  def test_outputs_costs_nb227; assert_in_epsilon(125.41635276506099, worksheet.outputs_costs_nb227, 0.002); end
  def test_outputs_costs_nb228; assert_in_epsilon(45.30683104137258, worksheet.outputs_costs_nb228, 0.002); end
  def test_outputs_costs_nb229; assert_in_epsilon(32.4681603756732, worksheet.outputs_costs_nb229, 0.002); end
  def test_outputs_costs_nb230; assert_in_epsilon(94.70160549158541, worksheet.outputs_costs_nb230, 0.002); end
  def test_outputs_costs_nb443; assert_in_epsilon(72.10053941838612, worksheet.outputs_costs_nb443, 0.002); end
  def test_outputs_costs_nb444; assert_in_epsilon(301.98124774214415, worksheet.outputs_costs_nb444, 0.002); end
  def test_outputs_costs_nb445; assert_in_epsilon(257.8101609720559, worksheet.outputs_costs_nb445, 0.002); end
  def test_outputs_costs_nb446; assert_in_epsilon(2463.161502259326, worksheet.outputs_costs_nb446, 0.002); end
  def test_outputs_costs_nb447; assert_in_epsilon(68.74917715532168, worksheet.outputs_costs_nb447, 0.002); end
  def test_outputs_costs_nb448; assert_in_epsilon(237.14710034817844, worksheet.outputs_costs_nb448, 0.002); end
  def test_outputs_costs_nb449; assert_in_epsilon(120.75616678315674, worksheet.outputs_costs_nb449, 0.002); end
  def test_outputs_costs_nb450; assert_in_delta(0.0, (worksheet.outputs_costs_nb450||0), 0.002); end
  def test_outputs_costs_nb451; assert_in_epsilon(298.98536606155045, worksheet.outputs_costs_nb451, 0.002); end
  def test_outputs_costs_nb452; assert_in_epsilon(12.620993675026586, worksheet.outputs_costs_nb452, 0.002); end
  def test_outputs_costs_nb453; assert_in_epsilon(15.463963692366947, worksheet.outputs_costs_nb453, 0.002); end
  def test_outputs_costs_nb454; assert_in_epsilon(5.294388709063369, worksheet.outputs_costs_nb454, 0.002); end
  def test_outputs_costs_nb455; assert_in_delta(0.0, (worksheet.outputs_costs_nb455||0), 0.002); end
  def test_outputs_costs_nb456; assert_in_delta(0.9653079884357005, worksheet.outputs_costs_nb456, 0.002); end
  def test_outputs_costs_nb457; assert_in_delta(0.6050372555242536, worksheet.outputs_costs_nb457, 0.002); end
  def test_outputs_costs_nb458; assert_in_epsilon(20.75718920471661, worksheet.outputs_costs_nb458, 0.002); end
  def test_outputs_costs_nb459; assert_in_epsilon(103.06689740015238, worksheet.outputs_costs_nb459, 0.002); end
  def test_outputs_costs_nb460; assert_in_epsilon(88.02625254570502, worksheet.outputs_costs_nb460, 0.002); end
  def test_outputs_costs_nb461; assert_in_epsilon(1182.4523820228962, worksheet.outputs_costs_nb461, 0.002); end
  def test_outputs_costs_nb462; assert_in_epsilon(29.61502404446214, worksheet.outputs_costs_nb462, 0.002); end
  def test_outputs_costs_nb463; assert_in_epsilon(110.79654323246436, worksheet.outputs_costs_nb463, 0.002); end
  def test_outputs_costs_nb464; assert_in_epsilon(55.69650823039704, worksheet.outputs_costs_nb464, 0.002); end
  def test_outputs_costs_nb465; assert_in_delta(0.0, (worksheet.outputs_costs_nb465||0), 0.002); end
  def test_outputs_costs_nb466; assert_in_epsilon(33.91682985396936, worksheet.outputs_costs_nb466, 0.002); end
  def test_outputs_costs_nb467; assert_in_epsilon(1.4401510393533017, worksheet.outputs_costs_nb467, 0.002); end
  def test_outputs_costs_nb468; assert_in_epsilon(1.7666017727113361, worksheet.outputs_costs_nb468, 0.002); end
  def test_outputs_costs_nb469; assert_in_delta(0.0007810389918660449, worksheet.outputs_costs_nb469, 0.002); end
  def test_outputs_costs_nb470; assert_in_delta(0.0, (worksheet.outputs_costs_nb470||0), 0.002); end
  def test_outputs_costs_nb471; assert_in_delta(0.8357631490063546, worksheet.outputs_costs_nb471, 0.002); end
  def test_outputs_costs_nb472; assert_in_delta(0.8423543689729454, worksheet.outputs_costs_nb472, 0.002); end
  def test_outputs_costs_nb473; assert_in_epsilon(192.54048212611806, worksheet.outputs_costs_nb473, 0.002); end
  def test_outputs_costs_nb474; assert_in_delta(0.0, (worksheet.outputs_costs_nb474||0), 0.002); end
  def test_outputs_costs_nb475; assert_in_epsilon(849.158718716387, worksheet.outputs_costs_nb475, 0.002); end
  def test_outputs_costs_nb476; assert_in_delta(0.0, (worksheet.outputs_costs_nb476||0), 0.002); end
  def test_outputs_costs_nb477; assert_in_delta(0.0, (worksheet.outputs_costs_nb477||0), 0.002); end
  def test_outputs_costs_nb478; assert_in_delta(0.0, (worksheet.outputs_costs_nb478||0), 0.002); end
  def test_outputs_costs_nb479; assert_in_epsilon(808.7797157168086, worksheet.outputs_costs_nb479, 0.002); end
  def test_outputs_costs_nb480; assert_in_epsilon(56.67224260157408, worksheet.outputs_costs_nb480, 0.002); end
  def test_outputs_costs_nb481; assert_in_epsilon(73.78868210352174, worksheet.outputs_costs_nb481, 0.002); end
  def test_outputs_costs_nb482; assert_in_delta(8.795444712119734e-05, worksheet.outputs_costs_nb482, 0.002); end
  def test_outputs_costs_nb483; assert_in_delta(1.5091958053428373e-07, worksheet.outputs_costs_nb483, 0.002); end
  def test_outputs_costs_nb484; assert_in_epsilon(146.69526243199098, worksheet.outputs_costs_nb484, 0.002); end
  def test_outputs_costs_nb485; assert_in_epsilon(13.38316439831743, worksheet.outputs_costs_nb485, 0.002); end
  def test_outputs_costs_nb486; assert_in_epsilon(16.164388860940882, worksheet.outputs_costs_nb486, 0.002); end
  def test_outputs_costs_nb487; assert_in_delta(3.887568284379607e-05, worksheet.outputs_costs_nb487, 0.002); end
  def test_outputs_costs_nb488; assert_in_delta(0.0, (worksheet.outputs_costs_nb488||0), 0.002); end
  def test_outputs_costs_nb489; assert_in_delta(0.010417120331745357, worksheet.outputs_costs_nb489, 0.002); end
  def test_outputs_costs_nb490; assert_in_delta(0.01692892970590335, worksheet.outputs_costs_nb490, 0.002); end
  def test_outputs_costs_nb491; assert_in_delta(0.0, (worksheet.outputs_costs_nb491||0), 0.002); end
  def test_outputs_costs_nb492; assert_in_delta(0.0, (worksheet.outputs_costs_nb492||0), 0.002); end
  def test_outputs_costs_nb493; assert_in_epsilon(1077.5259861850059, worksheet.outputs_costs_nb493, 0.002); end
  def test_outputs_costs_nb494; assert_in_epsilon(95.73311538015905, worksheet.outputs_costs_nb494, 0.002); end
  def test_outputs_costs_nb495; assert_in_epsilon(115.5663173793678, worksheet.outputs_costs_nb495, 0.002); end
  def test_outputs_costs_nb496; assert_in_delta(0.00023535846806405411, worksheet.outputs_costs_nb496, 0.002); end
  def test_outputs_costs_nb497; assert_in_delta(0.0, (worksheet.outputs_costs_nb497||0), 0.002); end
  def test_outputs_costs_nb498; assert_in_delta(0.06612112411019724, worksheet.outputs_costs_nb498, 0.002); end
  def test_outputs_costs_nb499; assert_in_delta(0.17120042801508983, worksheet.outputs_costs_nb499, 0.002); end
  def test_outputs_costs_nb500; assert_in_delta(0.0, (worksheet.outputs_costs_nb500||0), 0.002); end
  def test_outputs_costs_nb501; assert_in_delta(0.0, (worksheet.outputs_costs_nb501||0), 0.002); end
  def test_outputs_costs_nb502; assert_in_epsilon(88.45848551962428, worksheet.outputs_costs_nb502, 0.002); end
  def test_outputs_costs_nb503; assert_in_delta(0.0, (worksheet.outputs_costs_nb503||0), 0.002); end
  def test_outputs_costs_nb504; assert_in_epsilon(16.18575590391748, worksheet.outputs_costs_nb504, 0.002); end
  def test_outputs_costs_nb505; assert_in_epsilon(113.6284196455275, worksheet.outputs_costs_nb505, 0.002); end
  def test_outputs_costs_nb506; assert_in_epsilon(429.35484802591907, worksheet.outputs_costs_nb506, 0.002); end
  def test_outputs_costs_nb507; assert_in_epsilon(41.3710550088376, worksheet.outputs_costs_nb507, 0.002); end
  def test_outputs_costs_nb508; assert_in_epsilon(69.3035162393767, worksheet.outputs_costs_nb508, 0.002); end
  def test_outputs_costs_nb509; assert_in_epsilon(2.973813142897144, worksheet.outputs_costs_nb509, 0.002); end
  def test_outputs_costs_nb510; assert_in_epsilon(2.372979670201147, worksheet.outputs_costs_nb510, 0.002); end
  def test_outputs_costs_nb511; assert_in_delta(0.0, (worksheet.outputs_costs_nb511||0), 0.002); end
  def test_outputs_costs_nb512; assert_in_epsilon(77.82594843736203, worksheet.outputs_costs_nb512, 0.002); end
  def test_outputs_costs_nb513; assert_in_epsilon(21.92038489294178, worksheet.outputs_costs_nb513, 0.002); end
  def test_outputs_costs_nb514; assert_in_epsilon(73.35308823974312, worksheet.outputs_costs_nb514, 0.002); end
  def test_outputs_costs_nb515; assert_in_epsilon(19.70811126410841, worksheet.outputs_costs_nb515, 0.002); end
  def test_outputs_costs_nb516; assert_in_epsilon(29.958047545079104, worksheet.outputs_costs_nb516, 0.002); end
  def test_outputs_costs_nb517; assert_in_epsilon(4.182077669447599, worksheet.outputs_costs_nb517, 0.002); end
  def test_outputs_costs_nb518; assert_in_delta(0.0, (worksheet.outputs_costs_nb518||0), 0.002); end
  def test_outputs_costs_nb519; assert_in_delta(0.0, (worksheet.outputs_costs_nb519||0), 0.002); end
  def test_outputs_costs_nb520; assert_in_epsilon(298.8903455296029, worksheet.outputs_costs_nb520, 0.002); end
  def test_outputs_costs_nb521; assert_in_epsilon(15.092134661820438, worksheet.outputs_costs_nb521, 0.002); end
  def test_outputs_costs_nb522; assert_in_epsilon(32.3402885610438, worksheet.outputs_costs_nb522, 0.002); end
  def test_outputs_costs_nb523; assert_in_epsilon(67.70350240136561, worksheet.outputs_costs_nb523, 0.002); end
  def test_outputs_costs_nb524; assert_in_epsilon(3.668546189634779, worksheet.outputs_costs_nb524, 0.002); end
  def test_outputs_costs_nb525; assert_in_epsilon(7.861170406360244, worksheet.outputs_costs_nb525, 0.002); end
  def test_outputs_costs_nb526; assert_in_epsilon(26.704152418657216, worksheet.outputs_costs_nb526, 0.002); end
  def test_outputs_costs_nb527; assert_in_epsilon(55.26356174872009, worksheet.outputs_costs_nb527, 0.002); end
  def test_outputs_costs_nb528; assert_in_epsilon(109.98587077885213, worksheet.outputs_costs_nb528, 0.002); end
  def test_outputs_costs_nb529; assert_in_epsilon(87.85169102659025, worksheet.outputs_costs_nb529, 0.002); end
  def test_outputs_costs_nb530; assert_in_epsilon(150.4388381293464, worksheet.outputs_costs_nb530, 0.002); end
  def test_outputs_costs_nb531; assert_in_epsilon(39.71911373626333, worksheet.outputs_costs_nb531, 0.002); end
  def test_outputs_costs_nb532; assert_in_epsilon(1.0025376506682873, worksheet.outputs_costs_nb532, 0.002); end
  def test_outputs_costs_nb533; assert_in_delta(0.0, (worksheet.outputs_costs_nb533||0), 0.002); end
  def test_outputs_costs_nb534; assert_in_epsilon(156.4928471321502, worksheet.outputs_costs_nb534, 0.002); end
  def test_outputs_costs_nb535; assert_in_epsilon(8.616103484517497, worksheet.outputs_costs_nb535, 0.002); end
  def test_outputs_costs_nb536; assert_in_delta(0.7585106703189625, worksheet.outputs_costs_nb536, 0.002); end
  def test_outputs_costs_nb537; assert_in_epsilon(2.9588811457412483, worksheet.outputs_costs_nb537, 0.002); end
  def test_outputs_costs_nb538; assert_in_epsilon(12.829963560092905, worksheet.outputs_costs_nb538, 0.002); end
  def test_outputs_costs_nb539; assert_in_epsilon(10.297128860270355, worksheet.outputs_costs_nb539, 0.002); end
  def test_outputs_costs_nb540; assert_in_delta(0.0, (worksheet.outputs_costs_nb540||0), 0.002); end
  def test_outputs_costs_nb541; assert_in_delta(0.0, (worksheet.outputs_costs_nb541||0), 0.002); end
  def test_outputs_costs_nb542; assert_in_epsilon(139.7459430202194, worksheet.outputs_costs_nb542, 0.002); end
  def test_outputs_costs_nb543; assert_in_epsilon(67.71953648009853, worksheet.outputs_costs_nb543, 0.002); end
  def test_outputs_costs_nb544; assert_in_epsilon(147.89985474950984, worksheet.outputs_costs_nb544, 0.002); end
  def test_outputs_costs_nb545; assert_in_epsilon(46.71217556241606, worksheet.outputs_costs_nb545, 0.002); end
  def test_outputs_costs_nb546; assert_in_epsilon(512.7537083500424, worksheet.outputs_costs_nb546, 0.002); end
  def test_outputs_costs_nb547; assert_in_epsilon(461.8228441129993, worksheet.outputs_costs_nb547, 0.002); end
  def test_outputs_costs_nb548; assert_in_epsilon(37.156357873412915, worksheet.outputs_costs_nb548, 0.002); end
  def test_outputs_costs_nb549; assert_in_epsilon(23.77077726737975, worksheet.outputs_costs_nb549, 0.002); end
  def test_outputs_costs_nb550; assert_in_epsilon(39.345638619084156, worksheet.outputs_costs_nb550, 0.002); end
  def test_outputs_costs_nb551; assert_in_epsilon(12.426748265334284, worksheet.outputs_costs_nb551, 0.002); end
  def test_outputs_costs_nb552; assert_in_epsilon(135.76852210176872, worksheet.outputs_costs_nb552, 0.002); end
  def test_outputs_costs_nb553; assert_in_epsilon(118.02311662319796, worksheet.outputs_costs_nb553, 0.002); end
  def test_outputs_costs_nb554; assert_in_epsilon(8.601154119825168, worksheet.outputs_costs_nb554, 0.002); end
  def test_outputs_costs_nb555; assert_in_epsilon(21.688633989996305, worksheet.outputs_costs_nb555, 0.002); end
  def test_outputs_costs_nb556; assert_in_epsilon(93.63647611549389, worksheet.outputs_costs_nb556, 0.002); end
  def test_outputs_costs_nb557; assert_in_epsilon(72.39889955288588, worksheet.outputs_costs_nb557, 0.002); end
  def test_outputs_costs_nb558; assert_in_epsilon(10.682225110459699, worksheet.outputs_costs_nb558, 0.002); end
  def test_outputs_costs_nb559; assert_in_epsilon(2.058578902101962, worksheet.outputs_costs_nb559, 0.002); end
  def test_outputs_costs_nb560; assert_in_epsilon(4.478362679528459, worksheet.outputs_costs_nb560, 0.002); end
  def test_outputs_costs_nb561; assert_in_epsilon(2.960789232964462, worksheet.outputs_costs_nb561, 0.002); end
  def test_outputs_costs_nb562; assert_in_epsilon(3.772950077224389, worksheet.outputs_costs_nb562, 0.002); end
  def test_outputs_costs_nb563; assert_in_epsilon(21.75880585693814, worksheet.outputs_costs_nb563, 0.002); end
  def test_outputs_costs_nb564; assert_in_epsilon(30.713659352927518, worksheet.outputs_costs_nb564, 0.002); end
  def test_outputs_costs_nb565; assert_in_delta(0.7420652436817063, worksheet.outputs_costs_nb565, 0.002); end
  def test_outputs_costs_nb566; assert_in_epsilon(8.995257627195114, worksheet.outputs_costs_nb566, 0.002); end
  def test_outputs_costs_nb567; assert_in_epsilon(1.328849982322974, worksheet.outputs_costs_nb567, 0.002); end
  def test_outputs_costs_nb568; assert_in_epsilon(3.950971227181883, worksheet.outputs_costs_nb568, 0.002); end
  def test_outputs_costs_nb569; assert_in_delta(0.127587843544346, worksheet.outputs_costs_nb569, 0.002); end
  def test_outputs_costs_nb570; assert_in_epsilon(1.5669295552990652, worksheet.outputs_costs_nb570, 0.002); end
  def test_outputs_costs_nb571; assert_in_delta(0.2382297566685246, worksheet.outputs_costs_nb571, 0.002); end
  def test_outputs_costs_nb572; assert_in_epsilon(4.0146173101239295, worksheet.outputs_costs_nb572, 0.002); end
  def test_outputs_costs_nb573; assert_in_epsilon(16.058469240495718, worksheet.outputs_costs_nb573, 0.002); end
  def test_outputs_costs_nb574; assert_in_epsilon(9.430419413424136, worksheet.outputs_costs_nb574, 0.002); end
  def test_outputs_costs_nb575; assert_in_epsilon(37.721677653696545, worksheet.outputs_costs_nb575, 0.002); end
  def test_outputs_costs_nb576; assert_in_epsilon(2.561195252975466, worksheet.outputs_costs_nb576, 0.002); end
  def test_outputs_costs_nb577; assert_in_epsilon(6.946440940571062, worksheet.outputs_costs_nb577, 0.002); end
  def test_outputs_costs_nb578; assert_in_delta(0.18970968992358117, worksheet.outputs_costs_nb578, 0.002); end
  def test_outputs_costs_nb579; assert_in_epsilon(3.1116766696058122, worksheet.outputs_costs_nb579, 0.002); end
  def test_outputs_costs_nb580; assert_in_epsilon(22.58648524848008, worksheet.outputs_costs_nb580, 0.002); end
  def test_outputs_costs_nb581; assert_in_epsilon(18.657452224938098, worksheet.outputs_costs_nb581, 0.002); end
  def test_outputs_costs_nb582; assert_in_delta(0.0, (worksheet.outputs_costs_nb582||0), 0.002); end
  def test_outputs_costs_nb583; assert_in_delta(0.0, (worksheet.outputs_costs_nb583||0), 0.002); end
  def test_outputs_costs_nb584; assert_in_delta(0.0, (worksheet.outputs_costs_nb584||0), 0.002); end
  def test_outputs_costs_nb585; assert_in_delta(0.0, (worksheet.outputs_costs_nb585||0), 0.002); end
  def test_outputs_costs_nb586; assert_in_epsilon(5.804924802431961, worksheet.outputs_costs_nb586, 0.002); end
  def test_outputs_costs_nb587; assert_in_delta(0.0005674670049210493, worksheet.outputs_costs_nb587, 0.002); end
  def test_outputs_costs_nb588; assert_in_delta(0.0, (worksheet.outputs_costs_nb588||0), 0.002); end
  def test_outputs_costs_nb589; assert_in_epsilon(19.719244619423062, worksheet.outputs_costs_nb589, 0.002); end
  def test_outputs_costs_nb590; assert_in_epsilon(1.109580182055417, worksheet.outputs_costs_nb590, 0.002); end
  def test_outputs_costs_nb591; assert_in_epsilon(5.0525013439204685, worksheet.outputs_costs_nb591, 0.002); end
  def test_outputs_costs_nb592; assert_in_delta(0.3413371992781373, worksheet.outputs_costs_nb592, 0.002); end
  def test_outputs_costs_nb593; assert_in_epsilon(483.8389857494692, worksheet.outputs_costs_nb593, 0.002); end
  def test_outputs_costs_nb612; assert_in_epsilon(52.90461968777007, worksheet.outputs_costs_nb612, 0.002); end
  def test_outputs_costs_nb613; assert_in_epsilon(67.05185282813851, worksheet.outputs_costs_nb613, 0.002); end
  def test_outputs_costs_nb614; assert_in_epsilon(197.9356865081221, worksheet.outputs_costs_nb614, 0.002); end
  def test_outputs_costs_nb615; assert_in_epsilon(40.74825556952506, worksheet.outputs_costs_nb615, 0.002); end
  def test_outputs_costs_nb616; assert_in_epsilon(59.93753960300788, worksheet.outputs_costs_nb616, 0.002); end
  def test_outputs_costs_nb617; assert_in_epsilon(80.79920899871868, worksheet.outputs_costs_nb617, 0.002); end
  def test_outputs_costs_nb618; assert_in_epsilon(82.9616271733218, worksheet.outputs_costs_nb618, 0.002); end
  def test_outputs_costs_nb619; assert_in_epsilon(2.679665060665024, worksheet.outputs_costs_nb619, 0.002); end
  def test_outputs_costs_nb620; assert_in_epsilon(3.4323833167307454, worksheet.outputs_costs_nb620, 0.002); end
  def test_outputs_costs_nb621; assert_in_epsilon(10.553355232043721, worksheet.outputs_costs_nb621, 0.002); end
  def test_outputs_costs_nb622; assert_in_delta(0.8462252161295748, worksheet.outputs_costs_nb622, 0.002); end
  def test_outputs_costs_nb623; assert_in_epsilon(1.22129863499986, worksheet.outputs_costs_nb623, 0.002); end
  def test_outputs_costs_nb624; assert_in_epsilon(3.065353202720061, worksheet.outputs_costs_nb624, 0.002); end
  def test_outputs_costs_nb625; assert_in_epsilon(2.779011922718635, worksheet.outputs_costs_nb625, 0.002); end
  def test_outputs_costs_nb626; assert_in_epsilon(122.37332874583737, worksheet.outputs_costs_nb626, 0.002); end
  def test_outputs_costs_nb627; assert_in_epsilon(150.88375568639393, worksheet.outputs_costs_nb627, 0.002); end
  def test_outputs_costs_nb628; assert_in_epsilon(61.889873654079935, worksheet.outputs_costs_nb628, 0.002); end
  def test_outputs_costs_nb629; assert_in_epsilon(285.1200611755497, worksheet.outputs_costs_nb629, 0.002); end
  def test_outputs_costs_nb630; assert_in_epsilon(6.452273673554647, worksheet.outputs_costs_nb630, 0.002); end
  def test_outputs_costs_nb631; assert_in_epsilon(15.809497337037701, worksheet.outputs_costs_nb631, 0.002); end
  def test_outputs_costs_nb632; assert_in_epsilon(84.96082569392145, worksheet.outputs_costs_nb632, 0.002); end
  def test_outputs_costs_nb633; assert_in_epsilon(31.06288463892733, worksheet.outputs_costs_nb633, 0.002); end
  def test_outputs_costs_nb634; assert_in_epsilon(21.89488967150067, worksheet.outputs_costs_nb634, 0.002); end
  def test_outputs_costs_nb635; assert_in_epsilon(63.70294805850561, worksheet.outputs_costs_nb635, 0.002); end
  def test_outputs_costs_nb239; assert_in_epsilon(89.80432890554737, worksheet.outputs_costs_nb239, 0.002); end
  def test_outputs_costs_nb240; assert_in_epsilon(376.6713974933059, worksheet.outputs_costs_nb240, 0.002); end
  def test_outputs_costs_nb241; assert_in_epsilon(321.72417965163305, worksheet.outputs_costs_nb241, 0.002); end
  def test_outputs_costs_nb242; assert_in_epsilon(3474.4902001607547, worksheet.outputs_costs_nb242, 0.002); end
  def test_outputs_costs_nb243; assert_in_epsilon(85.77571383793845, worksheet.outputs_costs_nb243, 0.002); end
  def test_outputs_costs_nb244; assert_in_epsilon(318.05049839245464, worksheet.outputs_costs_nb244, 0.002); end
  def test_outputs_costs_nb245; assert_in_epsilon(160.01254983784136, worksheet.outputs_costs_nb245, 0.002); end
  def test_outputs_costs_nb246; assert_in_delta(0.0, (worksheet.outputs_costs_nb246||0), 0.002); end
  def test_outputs_costs_nb247; assert_in_epsilon(371.97595173007505, worksheet.outputs_costs_nb247, 0.002); end
  def test_outputs_costs_nb248; assert_in_epsilon(15.710614189599806, worksheet.outputs_costs_nb248, 0.002); end
  def test_outputs_costs_nb249; assert_in_epsilon(19.17151047754005, worksheet.outputs_costs_nb249, 0.002); end
  def test_outputs_costs_nb250; assert_in_epsilon(6.5194550049610305, worksheet.outputs_costs_nb250, 0.002); end
  def test_outputs_costs_nb251; assert_in_delta(0.0, (worksheet.outputs_costs_nb251||0), 0.002); end
  def test_outputs_costs_nb252; assert_in_epsilon(1.1846912374094831, worksheet.outputs_costs_nb252, 0.002); end
  def test_outputs_costs_nb253; assert_in_delta(0.7413937934225413, worksheet.outputs_costs_nb253, 0.002); end
  def test_outputs_costs_nb254; assert_in_epsilon(25.804197693609016, worksheet.outputs_costs_nb254, 0.002); end
  def test_outputs_costs_nb255; assert_in_epsilon(128.53988798511108, worksheet.outputs_costs_nb255, 0.002); end
  def test_outputs_costs_nb256; assert_in_epsilon(109.82425866870655, worksheet.outputs_costs_nb256, 0.002); end
  def test_outputs_costs_nb257; assert_in_epsilon(1474.7915849254998, worksheet.outputs_costs_nb257, 0.002); end
  def test_outputs_costs_nb258; assert_in_epsilon(36.94474903452706, worksheet.outputs_costs_nb258, 0.002); end
  def test_outputs_costs_nb259; assert_in_epsilon(138.11216418043725, worksheet.outputs_costs_nb259, 0.002); end
  def test_outputs_costs_nb260; assert_in_epsilon(69.36819301429883, worksheet.outputs_costs_nb260, 0.002); end
  def test_outputs_costs_nb261; assert_in_delta(0.0, (worksheet.outputs_costs_nb261||0), 0.002); end
  def test_outputs_costs_nb262; assert_in_epsilon(42.18911672569926, worksheet.outputs_costs_nb262, 0.002); end
  def test_outputs_costs_nb263; assert_in_epsilon(1.792278873407089, worksheet.outputs_costs_nb263, 0.002); end
  def test_outputs_costs_nb264; assert_in_epsilon(2.189155438391476, worksheet.outputs_costs_nb264, 0.002); end
  def test_outputs_costs_nb265; assert_in_delta(0.0008409272579717507, worksheet.outputs_costs_nb265, 0.002); end
  def test_outputs_costs_nb266; assert_in_delta(0.0, (worksheet.outputs_costs_nb266||0), 0.002); end
  def test_outputs_costs_nb267; assert_in_epsilon(1.0170915266615657, worksheet.outputs_costs_nb267, 0.002); end
  def test_outputs_costs_nb268; assert_in_epsilon(1.0248956398180846, worksheet.outputs_costs_nb268, 0.002); end
  def test_outputs_costs_nb269; assert_in_epsilon(238.6858090669062, worksheet.outputs_costs_nb269, 0.002); end
  def test_outputs_costs_nb270; assert_in_delta(0.0, (worksheet.outputs_costs_nb270||0), 0.002); end
  def test_outputs_costs_nb271; assert_in_epsilon(1053.6655975163733, worksheet.outputs_costs_nb271, 0.002); end
  def test_outputs_costs_nb272; assert_in_delta(0.0, (worksheet.outputs_costs_nb272||0), 0.002); end
  def test_outputs_costs_nb273; assert_in_delta(0.0, (worksheet.outputs_costs_nb273||0), 0.002); end
  def test_outputs_costs_nb274; assert_in_delta(0.0, (worksheet.outputs_costs_nb274||0), 0.002); end
  def test_outputs_costs_nb275; assert_in_epsilon(1008.8929717972292, worksheet.outputs_costs_nb275, 0.002); end
  def test_outputs_costs_nb276; assert_in_epsilon(70.71743914494918, worksheet.outputs_costs_nb276, 0.002); end
  def test_outputs_costs_nb277; assert_in_epsilon(92.00551510054062, worksheet.outputs_costs_nb277, 0.002); end
  def test_outputs_costs_nb278; assert_in_delta(0.0001014834943913736, worksheet.outputs_costs_nb278, 0.002); end
  def test_outputs_costs_nb279; assert_in_delta(1.682452705554763e-07, worksheet.outputs_costs_nb279, 0.002); end
  def test_outputs_costs_nb280; assert_in_epsilon(182.94468545987394, worksheet.outputs_costs_nb280, 0.002); end
  def test_outputs_costs_nb281; assert_in_epsilon(16.696270640524144, worksheet.outputs_costs_nb281, 0.002); end
  def test_outputs_costs_nb282; assert_in_epsilon(20.140116361407273, worksheet.outputs_costs_nb282, 0.002); end
  def test_outputs_costs_nb283; assert_in_delta(4.5115631849241796e-05, worksheet.outputs_costs_nb283, 0.002); end
  def test_outputs_costs_nb284; assert_in_delta(0.0, (worksheet.outputs_costs_nb284||0), 0.002); end
  def test_outputs_costs_nb285; assert_in_delta(0.012556433859931193, worksheet.outputs_costs_nb285, 0.002); end
  def test_outputs_costs_nb286; assert_in_delta(0.02065258808730506, worksheet.outputs_costs_nb286, 0.002); end
  def test_outputs_costs_nb287; assert_in_delta(0.0, (worksheet.outputs_costs_nb287||0), 0.002); end
  def test_outputs_costs_nb288; assert_in_delta(0.0, (worksheet.outputs_costs_nb288||0), 0.002); end
  def test_outputs_costs_nb289; assert_in_epsilon(1344.0000187055314, worksheet.outputs_costs_nb289, 0.002); end
  def test_outputs_costs_nb290; assert_in_epsilon(119.45183838866569, worksheet.outputs_costs_nb290, 0.002); end
  def test_outputs_costs_nb291; assert_in_epsilon(144.02878505124005, worksheet.outputs_costs_nb291, 0.002); end
  def test_outputs_costs_nb292; assert_in_delta(0.0002732958907394051, worksheet.outputs_costs_nb292, 0.002); end
  def test_outputs_costs_nb293; assert_in_delta(0.0, (worksheet.outputs_costs_nb293||0), 0.002); end
  def test_outputs_costs_nb294; assert_in_delta(0.08058886810852822, worksheet.outputs_costs_nb294, 0.002); end
  def test_outputs_costs_nb295; assert_in_delta(0.21147103699258582, worksheet.outputs_costs_nb295, 0.002); end
  def test_outputs_costs_nb296; assert_in_delta(0.0, (worksheet.outputs_costs_nb296||0), 0.002); end
  def test_outputs_costs_nb297; assert_in_delta(0.0, (worksheet.outputs_costs_nb297||0), 0.002); end
  def test_outputs_costs_nb298; assert_in_epsilon(109.68406053659648, worksheet.outputs_costs_nb298, 0.002); end
  def test_outputs_costs_nb299; assert_in_delta(0.0, (worksheet.outputs_costs_nb299||0), 0.002); end
  def test_outputs_costs_nb300; assert_in_epsilon(19.912082417883116, worksheet.outputs_costs_nb300, 0.002); end
  def test_outputs_costs_nb301; assert_in_epsilon(141.13203184957618, worksheet.outputs_costs_nb301, 0.002); end
  def test_outputs_costs_nb302; assert_in_epsilon(533.3206553476132, worksheet.outputs_costs_nb302, 0.002); end
  def test_outputs_costs_nb303; assert_in_epsilon(51.54872672203624, worksheet.outputs_costs_nb303, 0.002); end
  def test_outputs_costs_nb304; assert_in_epsilon(86.37887416300417, worksheet.outputs_costs_nb304, 0.002); end
  def test_outputs_costs_nb305; assert_in_epsilon(3.6988998260197072, worksheet.outputs_costs_nb305, 0.002); end
  def test_outputs_costs_nb306; assert_in_epsilon(2.9662245877514333, worksheet.outputs_costs_nb306, 0.002); end
  def test_outputs_costs_nb307; assert_in_delta(0.0, (worksheet.outputs_costs_nb307||0), 0.002); end
  def test_outputs_costs_nb308; assert_in_epsilon(95.49097761082777, worksheet.outputs_costs_nb308, 0.002); end
  def test_outputs_costs_nb309; assert_in_epsilon(27.208623576480612, worksheet.outputs_costs_nb309, 0.002); end
  def test_outputs_costs_nb310; assert_in_epsilon(91.10892704234257, worksheet.outputs_costs_nb310, 0.002); end
  def test_outputs_costs_nb311; assert_in_epsilon(24.555450445357245, worksheet.outputs_costs_nb311, 0.002); end
  def test_outputs_costs_nb312; assert_in_epsilon(37.32885571042917, worksheet.outputs_costs_nb312, 0.002); end
  def test_outputs_costs_nb313; assert_in_epsilon(5.197782271570127, worksheet.outputs_costs_nb313, 0.002); end
  def test_outputs_costs_nb314; assert_in_delta(0.0, (worksheet.outputs_costs_nb314||0), 0.002); end
  def test_outputs_costs_nb315; assert_in_delta(0.0, (worksheet.outputs_costs_nb315||0), 0.002); end
  def test_outputs_costs_nb316; assert_in_epsilon(372.5278715485988, worksheet.outputs_costs_nb316, 0.002); end
  def test_outputs_costs_nb317; assert_in_epsilon(18.818647160098877, worksheet.outputs_costs_nb317, 0.002); end
  def test_outputs_costs_nb318; assert_in_epsilon(40.32567248592617, worksheet.outputs_costs_nb318, 0.002); end
  def test_outputs_costs_nb319; assert_in_epsilon(84.35700800485898, worksheet.outputs_costs_nb319, 0.002); end
  def test_outputs_costs_nb320; assert_in_epsilon(4.57334316847875, worksheet.outputs_costs_nb320, 0.002); end
  def test_outputs_costs_nb321; assert_in_epsilon(9.800021075311612, worksheet.outputs_costs_nb321, 0.002); end
  def test_outputs_costs_nb322; assert_in_epsilon(32.720065411450335, worksheet.outputs_costs_nb322, 0.002); end
  def test_outputs_costs_nb323; assert_in_epsilon(68.62177977706489, worksheet.outputs_costs_nb323, 0.002); end
  def test_outputs_costs_nb324; assert_in_epsilon(136.57559513440697, worksheet.outputs_costs_nb324, 0.002); end
  def test_outputs_costs_nb325; assert_in_epsilon(107.52674287147165, worksheet.outputs_costs_nb325, 0.002); end
  def test_outputs_costs_nb326; assert_in_epsilon(187.04010275759694, worksheet.outputs_costs_nb326, 0.002); end
  def test_outputs_costs_nb327; assert_in_epsilon(49.368575421087115, worksheet.outputs_costs_nb327, 0.002); end
  def test_outputs_costs_nb328; assert_in_epsilon(1.253172063335359, worksheet.outputs_costs_nb328, 0.002); end
  def test_outputs_costs_nb329; assert_in_delta(0.0, (worksheet.outputs_costs_nb329||0), 0.002); end
  def test_outputs_costs_nb330; assert_in_epsilon(192.13681931574914, worksheet.outputs_costs_nb330, 0.002); end
  def test_outputs_costs_nb331; assert_in_epsilon(10.695079774788148, worksheet.outputs_costs_nb331, 0.002); end
  def test_outputs_costs_nb332; assert_in_delta(0.9413896989205651, worksheet.outputs_costs_nb332, 0.002); end
  def test_outputs_costs_nb333; assert_in_epsilon(3.646282124831377, worksheet.outputs_costs_nb333, 0.002); end
  def test_outputs_costs_nb334; assert_in_epsilon(15.937536052634567, worksheet.outputs_costs_nb334, 0.002); end
  def test_outputs_costs_nb335; assert_in_epsilon(12.784843332572201, worksheet.outputs_costs_nb335, 0.002); end
  def test_outputs_costs_nb336; assert_in_delta(0.0, (worksheet.outputs_costs_nb336||0), 0.002); end
  def test_outputs_costs_nb337; assert_in_delta(0.0, (worksheet.outputs_costs_nb337||0), 0.002); end
  def test_outputs_costs_nb338; assert_in_epsilon(174.22251606143092, worksheet.outputs_costs_nb338, 0.002); end
  def test_outputs_costs_nb339; assert_in_epsilon(84.42402277425475, worksheet.outputs_costs_nb339, 0.002); end
  def test_outputs_costs_nb340; assert_in_epsilon(184.41198534758126, worksheet.outputs_costs_nb340, 0.002); end
  def test_outputs_costs_nb341; assert_in_epsilon(58.24408716216373, worksheet.outputs_costs_nb341, 0.002); end
  def test_outputs_costs_nb342; assert_in_epsilon(640.3812752256586, worksheet.outputs_costs_nb342, 0.002); end
  def test_outputs_costs_nb343; assert_in_epsilon(576.7545600722528, worksheet.outputs_costs_nb343, 0.002); end
  def test_outputs_costs_nb344; assert_in_epsilon(46.322383581536826, worksheet.outputs_costs_nb344, 0.002); end
  def test_outputs_costs_nb345; assert_in_epsilon(29.687178989754777, worksheet.outputs_costs_nb345, 0.002); end
  def test_outputs_costs_nb346; assert_in_epsilon(49.05820307755137, worksheet.outputs_costs_nb346, 0.002); end
  def test_outputs_costs_nb347; assert_in_epsilon(15.494333152792603, worksheet.outputs_costs_nb347, 0.002); end
  def test_outputs_costs_nb348; assert_in_epsilon(169.56176776206988, worksheet.outputs_costs_nb348, 0.002); end
  def test_outputs_costs_nb349; assert_in_epsilon(147.39119750061545, worksheet.outputs_costs_nb349, 0.002); end
  def test_outputs_costs_nb350; assert_in_epsilon(10.71633046857318, worksheet.outputs_costs_nb350, 0.002); end
  def test_outputs_costs_nb351; assert_in_epsilon(26.988039986907715, worksheet.outputs_costs_nb351, 0.002); end
  def test_outputs_costs_nb352; assert_in_epsilon(116.56065721589054, worksheet.outputs_costs_nb352, 0.002); end
  def test_outputs_costs_nb353; assert_in_epsilon(90.42848695426251, worksheet.outputs_costs_nb353, 0.002); end
  def test_outputs_costs_nb354; assert_in_epsilon(13.307834718921494, worksheet.outputs_costs_nb354, 0.002); end
  def test_outputs_costs_nb355; assert_in_epsilon(2.56430529304806, worksheet.outputs_costs_nb355, 0.002); end
  def test_outputs_costs_nb356; assert_in_epsilon(5.57189923158723, worksheet.outputs_costs_nb356, 0.002); end
  def test_outputs_costs_nb357; assert_in_epsilon(3.685232172770678, worksheet.outputs_costs_nb357, 0.002); end
  def test_outputs_costs_nb358; assert_in_epsilon(4.712461812170875, worksheet.outputs_costs_nb358, 0.002); end
  def test_outputs_costs_nb359; assert_in_epsilon(27.10526913294903, worksheet.outputs_costs_nb359, 0.002); end
  def test_outputs_costs_nb360; assert_in_epsilon(38.38350954917286, worksheet.outputs_costs_nb360, 0.002); end
  def test_outputs_costs_nb361; assert_in_delta(0.9268507326062669, worksheet.outputs_costs_nb361, 0.002); end
  def test_outputs_costs_nb362; assert_in_epsilon(11.235120004811654, worksheet.outputs_costs_nb362, 0.002); end
  def test_outputs_costs_nb363; assert_in_epsilon(1.6540585729616832, worksheet.outputs_costs_nb363, 0.002); end
  def test_outputs_costs_nb364; assert_in_epsilon(4.9370940653308715, worksheet.outputs_costs_nb364, 0.002); end
  def test_outputs_costs_nb365; assert_in_delta(0.1593472586848621, worksheet.outputs_costs_nb365, 0.002); end
  def test_outputs_costs_nb366; assert_in_epsilon(1.9569785578258794, worksheet.outputs_costs_nb366, 0.002); end
  def test_outputs_costs_nb367; assert_in_delta(0.2964445233777592, worksheet.outputs_costs_nb367, 0.002); end
  def test_outputs_costs_nb368; assert_in_epsilon(4.944783541720489, worksheet.outputs_costs_nb368, 0.002); end
  def test_outputs_costs_nb369; assert_in_epsilon(19.779134166881956, worksheet.outputs_costs_nb369, 0.002); end
  def test_outputs_costs_nb370; assert_in_epsilon(11.541899244053461, worksheet.outputs_costs_nb370, 0.002); end
  def test_outputs_costs_nb371; assert_in_epsilon(46.167596976213844, worksheet.outputs_costs_nb371, 0.002); end
  def test_outputs_costs_nb372; assert_in_epsilon(3.1920385644333202, worksheet.outputs_costs_nb372, 0.002); end
  def test_outputs_costs_nb373; assert_in_epsilon(8.64897012979012, worksheet.outputs_costs_nb373, 0.002); end
  def test_outputs_costs_nb374; assert_in_delta(0.23662491687600237, worksheet.outputs_costs_nb374, 0.002); end
  def test_outputs_costs_nb375; assert_in_epsilon(3.888568038887235, worksheet.outputs_costs_nb375, 0.002); end
  def test_outputs_costs_nb376; assert_in_epsilon(28.228365762355512, worksheet.outputs_costs_nb376, 0.002); end
  def test_outputs_costs_nb377; assert_in_epsilon(23.317728065440285, worksheet.outputs_costs_nb377, 0.002); end
  def test_outputs_costs_nb378; assert_in_delta(0.0, (worksheet.outputs_costs_nb378||0), 0.002); end
  def test_outputs_costs_nb379; assert_in_delta(0.0, (worksheet.outputs_costs_nb379||0), 0.002); end
  def test_outputs_costs_nb380; assert_in_delta(0.0, (worksheet.outputs_costs_nb380||0), 0.002); end
  def test_outputs_costs_nb381; assert_in_delta(0.0, (worksheet.outputs_costs_nb381||0), 0.002); end
  def test_outputs_costs_nb382; assert_in_epsilon(7.254402183564018, worksheet.outputs_costs_nb382, 0.002); end
  def test_outputs_costs_nb383; assert_in_delta(0.0006737266553725784, worksheet.outputs_costs_nb383, 0.002); end
  def test_outputs_costs_nb384; assert_in_delta(0.0, (worksheet.outputs_costs_nb384||0), 0.002); end
  def test_outputs_costs_nb385; assert_in_epsilon(24.64812367400332, worksheet.outputs_costs_nb385, 0.002); end
  def test_outputs_costs_nb386; assert_in_epsilon(1.3847836157377569, worksheet.outputs_costs_nb386, 0.002); end
  def test_outputs_costs_nb387; assert_in_epsilon(6.3024770089115, worksheet.outputs_costs_nb387, 0.002); end
  def test_outputs_costs_nb388; assert_in_delta(0.4248081904892589, worksheet.outputs_costs_nb388, 0.002); end
  def test_outputs_costs_nb389; assert_in_epsilon(603.0155713041946, worksheet.outputs_costs_nb389, 0.002); end
  def test_outputs_costs_nb408; assert_in_epsilon(64.99084734652658, worksheet.outputs_costs_nb408, 0.002); end
  def test_outputs_costs_nb409; assert_in_epsilon(82.38153431615574, worksheet.outputs_costs_nb409, 0.002); end
  def test_outputs_costs_nb410; assert_in_epsilon(243.80744388525886, worksheet.outputs_costs_nb410, 0.002); end
  def test_outputs_costs_nb411; assert_in_epsilon(50.51235510042742, worksheet.outputs_costs_nb411, 0.002); end
  def test_outputs_costs_nb412; assert_in_epsilon(74.40107213587933, worksheet.outputs_costs_nb412, 0.002); end
  def test_outputs_costs_nb413; assert_in_epsilon(100.52545213723067, worksheet.outputs_costs_nb413, 0.002); end
  def test_outputs_costs_nb414; assert_in_epsilon(102.6748969547208, worksheet.outputs_costs_nb414, 0.002); end
  def test_outputs_costs_nb415; assert_in_epsilon(3.3253670384667364, worksheet.outputs_costs_nb415, 0.002); end
  def test_outputs_costs_nb416; assert_in_epsilon(4.259853515506067, worksheet.outputs_costs_nb416, 0.002); end
  def test_outputs_costs_nb417; assert_in_epsilon(13.107635939335408, worksheet.outputs_costs_nb417, 0.002); end
  def test_outputs_costs_nb418; assert_in_epsilon(1.0536472292244756, worksheet.outputs_costs_nb418, 0.002); end
  def test_outputs_costs_nb419; assert_in_epsilon(1.521069657792881, worksheet.outputs_costs_nb419, 0.002); end
  def test_outputs_costs_nb420; assert_in_epsilon(3.8207389556332383, worksheet.outputs_costs_nb420, 0.002); end
  def test_outputs_costs_nb421; assert_in_epsilon(3.4545201351724755, worksheet.outputs_costs_nb421, 0.002); end
  def test_outputs_costs_nb422; assert_in_epsilon(149.02115332514293, worksheet.outputs_costs_nb422, 0.002); end
  def test_outputs_costs_nb423; assert_in_epsilon(187.70509434096581, worksheet.outputs_costs_nb423, 0.002); end
  def test_outputs_costs_nb424; assert_in_epsilon(76.91174085706035, worksheet.outputs_costs_nb424, 0.002); end
  def test_outputs_costs_nb425; assert_in_epsilon(353.5162486241348, worksheet.outputs_costs_nb425, 0.002); end
  def test_outputs_costs_nb426; assert_in_epsilon(8.00287389681596, worksheet.outputs_costs_nb426, 0.002); end
  def test_outputs_costs_nb427; assert_in_epsilon(19.67880096152467, worksheet.outputs_costs_nb427, 0.002); end
  def test_outputs_costs_nb428; assert_in_epsilon(105.18858922949123, worksheet.outputs_costs_nb428, 0.002); end
  def test_outputs_costs_nb429; assert_in_epsilon(38.18485784014995, worksheet.outputs_costs_nb429, 0.002); end
  def test_outputs_costs_nb430; assert_in_epsilon(27.181525023586936, worksheet.outputs_costs_nb430, 0.002); end
  def test_outputs_costs_nb431; assert_in_epsilon(79.20227677504552, worksheet.outputs_costs_nb431, 0.002); end
  def test_outputs_emissions_h190; assert_in_delta(0.21613567908999795, worksheet.outputs_emissions_h190, 0.002); end
  def test_outputs_emissions_i190; assert_in_delta(0.21394604776644002, worksheet.outputs_emissions_i190, 0.002); end
  def test_outputs_emissions_j190; assert_in_delta(0.21806406453805793, worksheet.outputs_emissions_j190, 0.002); end
  def test_outputs_emissions_k190; assert_in_delta(0.2350098363903014, worksheet.outputs_emissions_k190, 0.002); end
  def test_outputs_emissions_l190; assert_in_delta(0.24810553785709447, worksheet.outputs_emissions_l190, 0.002); end
  def test_outputs_emissions_p190; assert_in_delta(0.27491412211189875, worksheet.outputs_emissions_p190, 0.002); end
  def test_outputs_emissions_q190; assert_in_delta(0.2947570429984681, worksheet.outputs_emissions_q190, 0.002); end
  def test_outputs_emissions_r190; assert_in_delta(0.30995367684572206, worksheet.outputs_emissions_r190, 0.002); end
  def test_outputs_emissions_s190; assert_in_delta(0.3304854327519442, worksheet.outputs_emissions_s190, 0.002); end
  def test_outputs_emissions_t190; assert_in_delta(0.34517145501349206, worksheet.outputs_emissions_t190, 0.002); end
  def test_outputs_emissions_u190; assert_in_delta(0.364609001006869, worksheet.outputs_emissions_u190, 0.002); end
  def test_outputs_emissions_v190; assert_in_delta(0.3812399454607267, worksheet.outputs_emissions_v190, 0.002); end
  def test_outputs_emissions_w190; assert_in_delta(0.38993606285481935, worksheet.outputs_emissions_w190, 0.002); end
  def test_outputs_emissions_x190; assert_in_delta(0.39687463640969367, worksheet.outputs_emissions_x190, 0.002); end
  def test_outputs_emissions_y190; assert_in_delta(0.4082689149309675, worksheet.outputs_emissions_y190, 0.002); end
  def test_outputs_emissions_z190; assert_in_delta(0.4178139185374971, worksheet.outputs_emissions_z190, 0.002); end
  def test_outputs_emissions_aa190; assert_in_delta(0.42765869761153635, worksheet.outputs_emissions_aa190, 0.002); end
  def test_outputs_emissions_ab190; assert_in_delta(0.43852977338520693, worksheet.outputs_emissions_ab190, 0.002); end
  def test_outputs_emissions_ac190; assert_in_delta(0.4492160854697433, worksheet.outputs_emissions_ac190, 0.002); end
  def test_outputs_emissions_ad190; assert_in_delta(0.4603054389484671, worksheet.outputs_emissions_ad190, 0.002); end
  def test_outputs_emissions_ae190; assert_in_delta(0.4718343011252339, worksheet.outputs_emissions_ae190, 0.002); end
  def test_outputs_emissions_af190; assert_in_delta(0.48359545383001334, worksheet.outputs_emissions_af190, 0.002); end
  def test_outputs_emissions_ag190; assert_in_delta(0.49573617548609744, worksheet.outputs_emissions_ag190, 0.002); end
  def test_outputs_emissions_ah190; assert_in_delta(0.5082481770408008, worksheet.outputs_emissions_ah190, 0.002); end
  def test_outputs_emissions_h112; assert_in_epsilon(25.34891757, worksheet.outputs_emissions_h112, 0.002); end
  def test_outputs_emissions_i112; assert_in_epsilon(26.374524320000003, worksheet.outputs_emissions_i112, 0.002); end
  def test_outputs_emissions_j112; assert_in_epsilon(28.35797029, worksheet.outputs_emissions_j112, 0.002); end
  def test_outputs_emissions_k112; assert_in_epsilon(31.52379656, worksheet.outputs_emissions_k112, 0.002); end
  def test_outputs_emissions_l112; assert_in_epsilon(35.02307894, worksheet.outputs_emissions_l112, 0.002); end
  def test_outputs_emissions_p112; assert_in_epsilon(36.49946729206735, worksheet.outputs_emissions_p112, 0.002); end
  def test_outputs_emissions_q112; assert_in_epsilon(40.469456017403964, worksheet.outputs_emissions_q112, 0.002); end
  def test_outputs_emissions_r112; assert_in_epsilon(41.93840187095068, worksheet.outputs_emissions_r112, 0.002); end
  def test_outputs_emissions_s112; assert_in_epsilon(44.676564623244836, worksheet.outputs_emissions_s112, 0.002); end
  def test_outputs_emissions_t112; assert_in_epsilon(49.254464892403426, worksheet.outputs_emissions_t112, 0.002); end
  def test_outputs_emissions_u112; assert_in_epsilon(55.926826312482206, worksheet.outputs_emissions_u112, 0.002); end
  def test_outputs_emissions_v112; assert_in_epsilon(57.95871510457131, worksheet.outputs_emissions_v112, 0.002); end
  def test_outputs_emissions_w112; assert_in_epsilon(58.30743459397837, worksheet.outputs_emissions_w112, 0.002); end
  def test_outputs_emissions_x112; assert_in_epsilon(61.672880807601025, worksheet.outputs_emissions_x112, 0.002); end
  def test_outputs_emissions_y112; assert_in_epsilon(63.70204107357458, worksheet.outputs_emissions_y112, 0.002); end
  def test_outputs_emissions_z112; assert_in_epsilon(65.73023778850923, worksheet.outputs_emissions_z112, 0.002); end
  def test_outputs_emissions_aa112; assert_in_epsilon(68.35152467628214, worksheet.outputs_emissions_aa112, 0.002); end
  def test_outputs_emissions_ab112; assert_in_epsilon(70.71001932342269, worksheet.outputs_emissions_ab112, 0.002); end
  def test_outputs_emissions_ac112; assert_in_epsilon(73.18481503263125, worksheet.outputs_emissions_ac112, 0.002); end
  def test_outputs_emissions_ad112; assert_in_epsilon(75.81732260043326, worksheet.outputs_emissions_ad112, 0.002); end
  def test_outputs_emissions_ae112; assert_in_epsilon(78.45379263641088, worksheet.outputs_emissions_ae112, 0.002); end
  def test_outputs_emissions_af112; assert_in_epsilon(81.18842683258327, worksheet.outputs_emissions_af112, 0.002); end
  def test_outputs_emissions_ag112; assert_in_epsilon(84.01482032790008, worksheet.outputs_emissions_ag112, 0.002); end
  def test_outputs_emissions_ah112; assert_in_epsilon(86.90968265179808, worksheet.outputs_emissions_ah112, 0.002); end
  def test_outputs_emissions_d4; assert_equal("2260 Gt CO2", worksheet.outputs_emissions_d4); end
  def test_outputs_emissions_d5; assert_equal("3010 Gt CO2", worksheet.outputs_emissions_d5); end
  def test_outputs_emissions_c103; assert_equal("Column1", worksheet.outputs_emissions_c103); end
  def test_outputs_emissions_d103; assert_equal("IPCC Sector", worksheet.outputs_emissions_d103); end
  def test_outputs_emissions_h103; assert_equal("1990", worksheet.outputs_emissions_h103); end
  def test_outputs_emissions_i103; assert_equal("1995", worksheet.outputs_emissions_i103); end
  def test_outputs_emissions_j103; assert_equal("2000", worksheet.outputs_emissions_j103); end
  def test_outputs_emissions_k103; assert_equal("2005", worksheet.outputs_emissions_k103); end
  def test_outputs_emissions_l103; assert_equal("2010", worksheet.outputs_emissions_l103); end
  def test_outputs_emissions_n103; assert_equal("2011 historic", worksheet.outputs_emissions_n103); end
  def test_outputs_emissions_p103; assert_equal("2011", worksheet.outputs_emissions_p103); end
  def test_outputs_emissions_q103; assert_equal("2015", worksheet.outputs_emissions_q103); end
  def test_outputs_emissions_r103; assert_equal("2020", worksheet.outputs_emissions_r103); end
  def test_outputs_emissions_s103; assert_equal("2025", worksheet.outputs_emissions_s103); end
  def test_outputs_emissions_t103; assert_equal("2030", worksheet.outputs_emissions_t103); end
  def test_outputs_emissions_u103; assert_equal("2035", worksheet.outputs_emissions_u103); end
  def test_outputs_emissions_v103; assert_equal("2040", worksheet.outputs_emissions_v103); end
  def test_outputs_emissions_w103; assert_equal("2045", worksheet.outputs_emissions_w103); end
  def test_outputs_emissions_x103; assert_equal("2050", worksheet.outputs_emissions_x103); end
  def test_outputs_emissions_y103; assert_equal("2055", worksheet.outputs_emissions_y103); end
  def test_outputs_emissions_z103; assert_equal("2060", worksheet.outputs_emissions_z103); end
  def test_outputs_emissions_aa103; assert_equal("2065", worksheet.outputs_emissions_aa103); end
  def test_outputs_emissions_ab103; assert_equal("2070", worksheet.outputs_emissions_ab103); end
  def test_outputs_emissions_ac103; assert_equal("2075", worksheet.outputs_emissions_ac103); end
  def test_outputs_emissions_ad103; assert_equal("2080", worksheet.outputs_emissions_ad103); end
  def test_outputs_emissions_ae103; assert_equal("2085", worksheet.outputs_emissions_ae103); end
  def test_outputs_emissions_af103; assert_equal("2090", worksheet.outputs_emissions_af103); end
  def test_outputs_emissions_ag103; assert_equal("2095", worksheet.outputs_emissions_ag103); end
  def test_outputs_emissions_ah103; assert_equal("2100", worksheet.outputs_emissions_ah103); end
  def test_outputs_emissions_c104; assert_equal("G.1A", worksheet.outputs_emissions_c104); end
  def test_outputs_emissions_d104; assert_equal("Global Fuel Combustion", worksheet.outputs_emissions_d104); end
  def test_outputs_emissions_h104; assert_in_epsilon(20.98869, worksheet.outputs_emissions_h104, 0.002); end
  def test_outputs_emissions_i104; assert_in_epsilon(21.850990000000003, worksheet.outputs_emissions_i104, 0.002); end
  def test_outputs_emissions_j104; assert_in_epsilon(23.75862, worksheet.outputs_emissions_j104, 0.002); end
  def test_outputs_emissions_k104; assert_in_epsilon(27.50138, worksheet.outputs_emissions_k104, 0.002); end
  def test_outputs_emissions_l104; assert_in_epsilon(30.509400000000003, worksheet.outputs_emissions_l104, 0.002); end
  def test_outputs_emissions_p104; assert_in_epsilon(31.223984675323106, worksheet.outputs_emissions_p104, 0.002); end
  def test_outputs_emissions_q104; assert_in_epsilon(35.005656365941796, worksheet.outputs_emissions_q104, 0.002); end
  def test_outputs_emissions_r104; assert_in_epsilon(38.73351229252238, worksheet.outputs_emissions_r104, 0.002); end
  def test_outputs_emissions_s104; assert_in_epsilon(43.05208311097322, worksheet.outputs_emissions_s104, 0.002); end
  def test_outputs_emissions_t104; assert_in_epsilon(46.3501739320629, worksheet.outputs_emissions_t104, 0.002); end
  def test_outputs_emissions_u104; assert_in_epsilon(49.8583653610315, worksheet.outputs_emissions_u104, 0.002); end
  def test_outputs_emissions_v104; assert_in_epsilon(53.55499773593213, worksheet.outputs_emissions_v104, 0.002); end
  def test_outputs_emissions_w104; assert_in_epsilon(57.02183743384978, worksheet.outputs_emissions_w104, 0.002); end
  def test_outputs_emissions_x104; assert_in_epsilon(60.35658345587164, worksheet.outputs_emissions_x104, 0.002); end
  def test_outputs_emissions_y104; assert_in_epsilon(62.342434924698715, worksheet.outputs_emissions_y104, 0.002); end
  def test_outputs_emissions_z104; assert_in_epsilon(64.3273434077607, worksheet.outputs_emissions_z104, 0.002); end
  def test_outputs_emissions_aa104; assert_in_epsilon(66.89268361454002, worksheet.outputs_emissions_aa104, 0.002); end
  def test_outputs_emissions_ab104; assert_in_epsilon(69.20084041111406, worksheet.outputs_emissions_ab104, 0.002); end
  def test_outputs_emissions_ac104; assert_in_epsilon(71.62281603156651, worksheet.outputs_emissions_ac104, 0.002); end
  def test_outputs_emissions_ad104; assert_in_epsilon(74.19913743302557, worksheet.outputs_emissions_ad104, 0.002); end
  def test_outputs_emissions_ae104; assert_in_epsilon(76.77933673086306, worksheet.outputs_emissions_ae104, 0.002); end
  def test_outputs_emissions_af104; assert_in_epsilon(79.45560505044216, worksheet.outputs_emissions_af104, 0.002); end
  def test_outputs_emissions_ag104; assert_in_epsilon(82.22167423101781, worksheet.outputs_emissions_ag104, 0.002); end
  def test_outputs_emissions_ah104; assert_in_epsilon(85.05475089547086, worksheet.outputs_emissions_ah104, 0.002); end
  def test_outputs_emissions_c105; assert_equal("G.1B", worksheet.outputs_emissions_c105); end
  def test_outputs_emissions_d105; assert_equal("Global Fugitive Emissions from Fuels", worksheet.outputs_emissions_d105); end
  def test_outputs_emissions_h105; assert_in_delta(0.16401936, worksheet.outputs_emissions_h105, 0.002); end
  def test_outputs_emissions_i105; assert_in_delta(0.20241883000000002, worksheet.outputs_emissions_i105, 0.002); end
  def test_outputs_emissions_j105; assert_in_delta(0.17221180000000003, worksheet.outputs_emissions_j105, 0.002); end
  def test_outputs_emissions_k105; assert_in_delta(0.21541402, worksheet.outputs_emissions_k105, 0.002); end
  def test_outputs_emissions_l105; assert_in_delta(0.22069656, worksheet.outputs_emissions_l105, 0.002); end
  def test_outputs_emissions_p105; assert_in_delta(0.24960873971748132, worksheet.outputs_emissions_p105, 0.002); end
  def test_outputs_emissions_q105; assert_in_delta(0.2762052598845886, worksheet.outputs_emissions_q105, 0.002); end
  def test_outputs_emissions_r105; assert_in_delta(0.3117137516966774, worksheet.outputs_emissions_r105, 0.002); end
  def test_outputs_emissions_s105; assert_in_delta(0.34233417017513107, worksheet.outputs_emissions_s105, 0.002); end
  def test_outputs_emissions_t105; assert_in_delta(0.37505740977023605, worksheet.outputs_emissions_t105, 0.002); end
  def test_outputs_emissions_u105; assert_in_delta(0.4035562191977392, worksheet.outputs_emissions_u105, 0.002); end
  def test_outputs_emissions_v105; assert_in_delta(0.4400256180773542, worksheet.outputs_emissions_v105, 0.002); end
  def test_outputs_emissions_w105; assert_in_delta(0.48498955221891615, worksheet.outputs_emissions_w105, 0.002); end
  def test_outputs_emissions_x105; assert_in_delta(0.5277625741846471, worksheet.outputs_emissions_x105, 0.002); end
  def test_outputs_emissions_c106; assert_equal("G.2", worksheet.outputs_emissions_c106); end
  def test_outputs_emissions_d106; assert_equal("Global Industrial Processes", worksheet.outputs_emissions_d106); end
  def test_outputs_emissions_h106; assert_in_delta(0.5752480000000001, worksheet.outputs_emissions_h106, 0.002); end
  def test_outputs_emissions_i106; assert_in_delta(0.721808, worksheet.outputs_emissions_i106, 0.002); end
  def test_outputs_emissions_j106; assert_in_delta(0.828064, worksheet.outputs_emissions_j106, 0.002); end
  def test_outputs_emissions_k106; assert_in_epsilon(1.17248, worksheet.outputs_emissions_k106, 0.002); end
  def test_outputs_emissions_l106; assert_in_epsilon(1.65306856, worksheet.outputs_emissions_l106, 0.002); end
  def test_outputs_emissions_p106; assert_in_epsilon(2.3859600570267654, worksheet.outputs_emissions_p106, 0.002); end
  def test_outputs_emissions_q106; assert_in_epsilon(2.7466561078066447, worksheet.outputs_emissions_q106, 0.002); end
  def test_outputs_emissions_r106; assert_in_epsilon(2.9502101449002622, worksheet.outputs_emissions_r106, 0.002); end
  def test_outputs_emissions_s106; assert_in_epsilon(3.169753975460384, worksheet.outputs_emissions_s106, 0.002); end
  def test_outputs_emissions_t106; assert_in_epsilon(3.408396936533907, worksheet.outputs_emissions_t106, 0.002); end
  def test_outputs_emissions_u106; assert_in_epsilon(3.648415080261798, worksheet.outputs_emissions_u106, 0.002); end
  def test_outputs_emissions_v106; assert_in_epsilon(3.90991913462351, worksheet.outputs_emissions_v106, 0.002); end
  def test_outputs_emissions_w106; assert_in_epsilon(4.202598815662823, worksheet.outputs_emissions_w106, 0.002); end
  def test_outputs_emissions_x106; assert_in_epsilon(4.4296154271463, worksheet.outputs_emissions_x106, 0.002); end
  def test_outputs_emissions_c107; assert_equal("G.3", worksheet.outputs_emissions_c107); end
  def test_outputs_emissions_d107; assert_equal("Global Solvent and Other Product Use", worksheet.outputs_emissions_d107); end
  def test_outputs_emissions_h107; assert_in_delta(0.0, (worksheet.outputs_emissions_h107||0), 0.002); end
  def test_outputs_emissions_i107; assert_in_delta(0.0, (worksheet.outputs_emissions_i107||0), 0.002); end
  def test_outputs_emissions_j107; assert_in_delta(0.0, (worksheet.outputs_emissions_j107||0), 0.002); end
  def test_outputs_emissions_k107; assert_in_delta(0.0, (worksheet.outputs_emissions_k107||0), 0.002); end
  def test_outputs_emissions_l107; assert_in_delta(0.0, (worksheet.outputs_emissions_l107||0), 0.002); end
  def test_outputs_emissions_p107; assert_in_delta(0.0, (worksheet.outputs_emissions_p107||0), 0.002); end
  def test_outputs_emissions_q107; assert_in_delta(0.0, (worksheet.outputs_emissions_q107||0), 0.002); end
  def test_outputs_emissions_r107; assert_in_delta(0.0, (worksheet.outputs_emissions_r107||0), 0.002); end
  def test_outputs_emissions_s107; assert_in_delta(0.0, (worksheet.outputs_emissions_s107||0), 0.002); end
  def test_outputs_emissions_t107; assert_in_delta(0.0, (worksheet.outputs_emissions_t107||0), 0.002); end
  def test_outputs_emissions_u107; assert_in_delta(0.0, (worksheet.outputs_emissions_u107||0), 0.002); end
  def test_outputs_emissions_v107; assert_in_delta(0.0, (worksheet.outputs_emissions_v107||0), 0.002); end
  def test_outputs_emissions_w107; assert_in_delta(0.0, (worksheet.outputs_emissions_w107||0), 0.002); end
  def test_outputs_emissions_x107; assert_in_delta(0.0, (worksheet.outputs_emissions_x107||0), 0.002); end
  def test_outputs_emissions_c108; assert_equal("G.4", worksheet.outputs_emissions_c108); end
  def test_outputs_emissions_d108; assert_equal("Global Agriculture", worksheet.outputs_emissions_d108); end
  def test_outputs_emissions_h108; assert_in_delta(0.0, (worksheet.outputs_emissions_h108||0), 0.002); end
  def test_outputs_emissions_i108; assert_in_delta(0.0, (worksheet.outputs_emissions_i108||0), 0.002); end
  def test_outputs_emissions_j108; assert_in_delta(0.0, (worksheet.outputs_emissions_j108||0), 0.002); end
  def test_outputs_emissions_k108; assert_in_delta(0.0, (worksheet.outputs_emissions_k108||0), 0.002); end
  def test_outputs_emissions_l108; assert_in_delta(0.0, (worksheet.outputs_emissions_l108||0), 0.002); end
  def test_outputs_emissions_p108; assert_in_delta(0.0, (worksheet.outputs_emissions_p108||0), 0.002); end
  def test_outputs_emissions_q108; assert_in_delta(0.0, (worksheet.outputs_emissions_q108||0), 0.002); end
  def test_outputs_emissions_r108; assert_in_delta(0.0, (worksheet.outputs_emissions_r108||0), 0.002); end
  def test_outputs_emissions_s108; assert_in_delta(0.0, (worksheet.outputs_emissions_s108||0), 0.002); end
  def test_outputs_emissions_t108; assert_in_delta(0.0, (worksheet.outputs_emissions_t108||0), 0.002); end
  def test_outputs_emissions_u108; assert_in_delta(0.0, (worksheet.outputs_emissions_u108||0), 0.002); end
  def test_outputs_emissions_v108; assert_in_delta(0.0, (worksheet.outputs_emissions_v108||0), 0.002); end
  def test_outputs_emissions_w108; assert_in_delta(0.0, (worksheet.outputs_emissions_w108||0), 0.002); end
  def test_outputs_emissions_x108; assert_in_delta(0.0, (worksheet.outputs_emissions_x108||0), 0.002); end
  def test_outputs_emissions_c109; assert_equal("G.5", worksheet.outputs_emissions_c109); end
  def test_outputs_emissions_d109; assert_equal("Global Land Use, Land-Use Change and Forestry", worksheet.outputs_emissions_d109); end
  def test_outputs_emissions_h109; assert_in_epsilon(3.6209602100000002, worksheet.outputs_emissions_h109, 0.002); end
  def test_outputs_emissions_i109; assert_in_epsilon(3.59930749, worksheet.outputs_emissions_i109, 0.002); end
  def test_outputs_emissions_j109; assert_in_epsilon(3.59907449, worksheet.outputs_emissions_j109, 0.002); end
  def test_outputs_emissions_k109; assert_in_epsilon(2.63452254, worksheet.outputs_emissions_k109, 0.002); end
  def test_outputs_emissions_l109; assert_in_epsilon(2.6399138200000003, worksheet.outputs_emissions_l109, 0.002); end
  def test_outputs_emissions_p109; assert_in_epsilon(2.63991382, worksheet.outputs_emissions_p109, 0.002); end
  def test_outputs_emissions_q109; assert_in_epsilon(2.4409382837709357, worksheet.outputs_emissions_q109, 0.002); end
  def test_outputs_emissions_r109; assert_in_delta(-0.057034318168638576, worksheet.outputs_emissions_r109, 0.002); end
  def test_outputs_emissions_s109; assert_in_epsilon(-1.887606633363892, worksheet.outputs_emissions_s109, 0.002); end
  def test_outputs_emissions_t109; assert_in_delta(-0.8791633859636168, worksheet.outputs_emissions_t109, 0.002); end
  def test_outputs_emissions_u109; assert_in_epsilon(2.016489651991167, worksheet.outputs_emissions_u109, 0.002); end
  def test_outputs_emissions_v109; assert_in_delta(0.053772615938314505, worksheet.outputs_emissions_v109, 0.002); end
  def test_outputs_emissions_w109; assert_in_epsilon(-3.401991207753151, worksheet.outputs_emissions_w109, 0.002); end
  def test_outputs_emissions_x109; assert_in_epsilon(-3.6410806496015726, worksheet.outputs_emissions_x109, 0.002); end
  def test_outputs_emissions_c110; assert_equal("G.6", worksheet.outputs_emissions_c110); end
  def test_outputs_emissions_d110; assert_equal("Global Waste", worksheet.outputs_emissions_d110); end
  def test_outputs_emissions_h110; assert_in_delta(0.0, (worksheet.outputs_emissions_h110||0), 0.002); end
  def test_outputs_emissions_i110; assert_in_delta(0.0, (worksheet.outputs_emissions_i110||0), 0.002); end
  def test_outputs_emissions_j110; assert_in_delta(0.0, (worksheet.outputs_emissions_j110||0), 0.002); end
  def test_outputs_emissions_k110; assert_in_delta(0.0, (worksheet.outputs_emissions_k110||0), 0.002); end
  def test_outputs_emissions_l110; assert_in_delta(0.0, (worksheet.outputs_emissions_l110||0), 0.002); end
  def test_outputs_emissions_p110; assert_in_delta(0.0, (worksheet.outputs_emissions_p110||0), 0.002); end
  def test_outputs_emissions_q110; assert_in_delta(0.0, (worksheet.outputs_emissions_q110||0), 0.002); end
  def test_outputs_emissions_r110; assert_in_delta(0.0, (worksheet.outputs_emissions_r110||0), 0.002); end
  def test_outputs_emissions_s110; assert_in_delta(0.0, (worksheet.outputs_emissions_s110||0), 0.002); end
  def test_outputs_emissions_t110; assert_in_delta(0.0, (worksheet.outputs_emissions_t110||0), 0.002); end
  def test_outputs_emissions_u110; assert_in_delta(0.0, (worksheet.outputs_emissions_u110||0), 0.002); end
  def test_outputs_emissions_v110; assert_in_delta(0.0, (worksheet.outputs_emissions_v110||0), 0.002); end
  def test_outputs_emissions_w110; assert_in_delta(0.0, (worksheet.outputs_emissions_w110||0), 0.002); end
  def test_outputs_emissions_x110; assert_in_delta(0.0, (worksheet.outputs_emissions_x110||0), 0.002); end
  def test_outputs_emissions_c111; assert_equal("G.7", worksheet.outputs_emissions_c111); end
  def test_outputs_emissions_d111; assert_equal("Global Other", worksheet.outputs_emissions_d111); end
  def test_outputs_emissions_h111; assert_in_delta(0.0, (worksheet.outputs_emissions_h111||0), 0.002); end
  def test_outputs_emissions_i111; assert_in_delta(0.0, (worksheet.outputs_emissions_i111||0), 0.002); end
  def test_outputs_emissions_j111; assert_in_delta(0.0, (worksheet.outputs_emissions_j111||0), 0.002); end
  def test_outputs_emissions_k111; assert_in_delta(0.0, (worksheet.outputs_emissions_k111||0), 0.002); end
  def test_outputs_emissions_l111; assert_in_delta(0.0, (worksheet.outputs_emissions_l111||0), 0.002); end
  def test_outputs_emissions_p111; assert_in_delta(0.0, (worksheet.outputs_emissions_p111||0), 0.002); end
  def test_outputs_emissions_q111; assert_in_delta(0.0, (worksheet.outputs_emissions_q111||0), 0.002); end
  def test_outputs_emissions_r111; assert_in_delta(0.0, (worksheet.outputs_emissions_r111||0), 0.002); end
  def test_outputs_emissions_s111; assert_in_delta(0.0, (worksheet.outputs_emissions_s111||0), 0.002); end
  def test_outputs_emissions_t111; assert_in_delta(0.0, (worksheet.outputs_emissions_t111||0), 0.002); end
  def test_outputs_emissions_u111; assert_in_delta(0.0, (worksheet.outputs_emissions_u111||0), 0.002); end
  def test_outputs_emissions_v111; assert_in_delta(0.0, (worksheet.outputs_emissions_v111||0), 0.002); end
  def test_outputs_emissions_w111; assert_in_delta(0.0, (worksheet.outputs_emissions_w111||0), 0.002); end
  def test_outputs_emissions_x111; assert_in_delta(0.0, (worksheet.outputs_emissions_x111||0), 0.002); end
  def test_outputs_emissions_d112; assert_equal("Total", worksheet.outputs_emissions_d112); end
  def test_outputs_emissions_d113; assert_equal("Cumulative emissions", worksheet.outputs_emissions_d113); end
  def test_outputs_emissions_h113; assert_in_epsilon(805.0, worksheet.outputs_emissions_h113, 0.002); end
  def test_outputs_emissions_i113; assert_in_epsilon(920.0, worksheet.outputs_emissions_i113, 0.002); end
  def test_outputs_emissions_j113; assert_in_epsilon(1041.0, worksheet.outputs_emissions_j113, 0.002); end
  def test_outputs_emissions_k113; assert_in_epsilon(1178.0, worksheet.outputs_emissions_k113, 0.002); end
  def test_outputs_emissions_l113; assert_in_epsilon(1853.5005327079327, worksheet.outputs_emissions_l113, 0.002); end
  def test_outputs_emissions_n113; assert_in_epsilon(1890.0, worksheet.outputs_emissions_n113, 0.002); end
  def test_outputs_emissions_p113; assert_in_epsilon(1890.0, worksheet.outputs_emissions_p113, 0.002); end
  def test_outputs_emissions_q113; assert_in_epsilon(2043.9378466189426, worksheet.outputs_emissions_q113, 0.002); end
  def test_outputs_emissions_r113; assert_in_epsilon(2249.957491339829, worksheet.outputs_emissions_r113, 0.002); end
  def test_outputs_emissions_s113; assert_in_epsilon(2466.494907575318, worksheet.outputs_emissions_s113, 0.002); end
  def test_outputs_emissions_t113; assert_in_epsilon(2701.3224813644388, worksheet.outputs_emissions_t113, 0.002); end
  def test_outputs_emissions_u113; assert_in_epsilon(2964.2757093766527, worksheet.outputs_emissions_u113, 0.002); end
  def test_outputs_emissions_v113; assert_in_epsilon(3248.9895629192865, worksheet.outputs_emissions_v113, 0.002); end
  def test_outputs_emissions_w113; assert_in_epsilon(3539.6549371656606, worksheet.outputs_emissions_w113, 0.002); end
  def test_outputs_emissions_x113; assert_in_epsilon(3839.605725669609, worksheet.outputs_emissions_x113, 0.002); end
  def test_outputs_emissions_y113; assert_in_epsilon(4153.043030372548, worksheet.outputs_emissions_y113, 0.002); end
  def test_outputs_emissions_z113; assert_in_epsilon(4476.623727527757, worksheet.outputs_emissions_z113, 0.002); end
  def test_outputs_emissions_aa113; assert_in_epsilon(4811.828133689735, worksheet.outputs_emissions_aa113, 0.002); end
  def test_outputs_emissions_ab113; assert_in_epsilon(5159.481993688997, worksheet.outputs_emissions_ab113, 0.002); end
  def test_outputs_emissions_ac113; assert_in_epsilon(5519.219079579132, worksheet.outputs_emissions_ac113, 0.002); end
  def test_outputs_emissions_ad113; assert_in_epsilon(5891.7244236617935, worksheet.outputs_emissions_ad113, 0.002); end
  def test_outputs_emissions_ae113; assert_in_epsilon(6277.402211753903, worksheet.outputs_emissions_ae113, 0.002); end
  def test_outputs_emissions_af113; assert_in_epsilon(6676.507760426389, worksheet.outputs_emissions_af113, 0.002); end
  def test_outputs_emissions_ag113; assert_in_epsilon(7089.515878327597, worksheet.outputs_emissions_ag113, 0.002); end
  def test_outputs_emissions_ah113; assert_in_epsilon(7516.827135776843, worksheet.outputs_emissions_ah113, 0.002); end
  def test_outputs_emissions_d75; assert_equal("Gas", worksheet.outputs_emissions_d75); end
  def test_outputs_emissions_h75; assert_in_epsilon(1990.0, worksheet.outputs_emissions_h75, 0.002); end
  def test_outputs_emissions_i75; assert_in_epsilon(1995.0, worksheet.outputs_emissions_i75, 0.002); end
  def test_outputs_emissions_j75; assert_in_epsilon(2000.0, worksheet.outputs_emissions_j75, 0.002); end
  def test_outputs_emissions_k75; assert_in_epsilon(2005.0, worksheet.outputs_emissions_k75, 0.002); end
  def test_outputs_emissions_l75; assert_in_epsilon(2010.0, worksheet.outputs_emissions_l75, 0.002); end
  def test_outputs_emissions_p75; assert_in_epsilon(2011.0, worksheet.outputs_emissions_p75, 0.002); end
  def test_outputs_emissions_q75; assert_in_epsilon(2015.0, worksheet.outputs_emissions_q75, 0.002); end
  def test_outputs_emissions_r75; assert_in_epsilon(2020.0, worksheet.outputs_emissions_r75, 0.002); end
  def test_outputs_emissions_s75; assert_in_epsilon(2025.0, worksheet.outputs_emissions_s75, 0.002); end
  def test_outputs_emissions_t75; assert_in_epsilon(2030.0, worksheet.outputs_emissions_t75, 0.002); end
  def test_outputs_emissions_u75; assert_in_epsilon(2035.0, worksheet.outputs_emissions_u75, 0.002); end
  def test_outputs_emissions_v75; assert_in_epsilon(2040.0, worksheet.outputs_emissions_v75, 0.002); end
  def test_outputs_emissions_w75; assert_in_epsilon(2045.0, worksheet.outputs_emissions_w75, 0.002); end
  def test_outputs_emissions_x75; assert_in_epsilon(2050.0, worksheet.outputs_emissions_x75, 0.002); end
  def test_outputs_emissions_y75; assert_in_epsilon(2055.0, worksheet.outputs_emissions_y75, 0.002); end
  def test_outputs_emissions_z75; assert_in_epsilon(2060.0, worksheet.outputs_emissions_z75, 0.002); end
  def test_outputs_emissions_aa75; assert_in_epsilon(2065.0, worksheet.outputs_emissions_aa75, 0.002); end
  def test_outputs_emissions_ab75; assert_in_epsilon(2070.0, worksheet.outputs_emissions_ab75, 0.002); end
  def test_outputs_emissions_ac75; assert_in_epsilon(2075.0, worksheet.outputs_emissions_ac75, 0.002); end
  def test_outputs_emissions_ad75; assert_in_epsilon(2080.0, worksheet.outputs_emissions_ad75, 0.002); end
  def test_outputs_emissions_ae75; assert_in_epsilon(2085.0, worksheet.outputs_emissions_ae75, 0.002); end
  def test_outputs_emissions_af75; assert_in_epsilon(2090.0, worksheet.outputs_emissions_af75, 0.002); end
  def test_outputs_emissions_ag75; assert_in_epsilon(2095.0, worksheet.outputs_emissions_ag75, 0.002); end
  def test_outputs_emissions_ah75; assert_in_epsilon(2100.0, worksheet.outputs_emissions_ah75, 0.002); end
  def test_outputs_emissions_d76; assert_equal("CO2", worksheet.outputs_emissions_d76); end
  def test_outputs_emissions_h76; assert_in_epsilon(25.34891757, worksheet.outputs_emissions_h76, 0.002); end
  def test_outputs_emissions_i76; assert_in_epsilon(26.374524320000003, worksheet.outputs_emissions_i76, 0.002); end
  def test_outputs_emissions_j76; assert_in_epsilon(28.35797029, worksheet.outputs_emissions_j76, 0.002); end
  def test_outputs_emissions_k76; assert_in_epsilon(31.52379656, worksheet.outputs_emissions_k76, 0.002); end
  def test_outputs_emissions_l76; assert_in_epsilon(35.02307894, worksheet.outputs_emissions_l76, 0.002); end
  def test_outputs_emissions_p76; assert_in_epsilon(36.49946729206735, worksheet.outputs_emissions_p76, 0.002); end
  def test_outputs_emissions_q76; assert_in_epsilon(40.469456017403964, worksheet.outputs_emissions_q76, 0.002); end
  def test_outputs_emissions_r76; assert_in_epsilon(41.93840187095068, worksheet.outputs_emissions_r76, 0.002); end
  def test_outputs_emissions_s76; assert_in_epsilon(44.676564623244836, worksheet.outputs_emissions_s76, 0.002); end
  def test_outputs_emissions_t76; assert_in_epsilon(49.254464892403426, worksheet.outputs_emissions_t76, 0.002); end
  def test_outputs_emissions_u76; assert_in_epsilon(55.926826312482206, worksheet.outputs_emissions_u76, 0.002); end
  def test_outputs_emissions_v76; assert_in_epsilon(57.95871510457131, worksheet.outputs_emissions_v76, 0.002); end
  def test_outputs_emissions_w76; assert_in_epsilon(58.30743459397837, worksheet.outputs_emissions_w76, 0.002); end
  def test_outputs_emissions_x76; assert_in_epsilon(61.672880807601025, worksheet.outputs_emissions_x76, 0.002); end
  def test_outputs_emissions_y76; assert_in_epsilon(63.70204107357458, worksheet.outputs_emissions_y76, 0.002); end
  def test_outputs_emissions_z76; assert_in_epsilon(65.73023778850923, worksheet.outputs_emissions_z76, 0.002); end
  def test_outputs_emissions_aa76; assert_in_epsilon(68.35152467628214, worksheet.outputs_emissions_aa76, 0.002); end
  def test_outputs_emissions_ab76; assert_in_epsilon(70.71001932342269, worksheet.outputs_emissions_ab76, 0.002); end
  def test_outputs_emissions_ac76; assert_in_epsilon(73.18481503263125, worksheet.outputs_emissions_ac76, 0.002); end
  def test_outputs_emissions_ad76; assert_in_epsilon(75.81732260043326, worksheet.outputs_emissions_ad76, 0.002); end
  def test_outputs_emissions_ae76; assert_in_epsilon(78.45379263641088, worksheet.outputs_emissions_ae76, 0.002); end
  def test_outputs_emissions_af76; assert_in_epsilon(81.18842683258327, worksheet.outputs_emissions_af76, 0.002); end
  def test_outputs_emissions_ag76; assert_in_epsilon(84.01482032790008, worksheet.outputs_emissions_ag76, 0.002); end
  def test_outputs_emissions_ah76; assert_in_epsilon(86.90968265179808, worksheet.outputs_emissions_ah76, 0.002); end
  def test_outputs_emissions_d77; assert_equal("CH4", worksheet.outputs_emissions_d77); end
  def test_outputs_emissions_h77; assert_in_epsilon(6.2679346936099405, worksheet.outputs_emissions_h77, 0.002); end
  def test_outputs_emissions_i77; assert_in_epsilon(6.204435385226761, worksheet.outputs_emissions_i77, 0.002); end
  def test_outputs_emissions_j77; assert_in_epsilon(6.32385787160368, worksheet.outputs_emissions_j77, 0.002); end
  def test_outputs_emissions_k77; assert_in_epsilon(6.815285255318741, worksheet.outputs_emissions_k77, 0.002); end
  def test_outputs_emissions_l77; assert_in_epsilon(7.19506059785574, worksheet.outputs_emissions_l77, 0.002); end
  def test_outputs_emissions_p77; assert_in_epsilon(7.9725095412450635, worksheet.outputs_emissions_p77, 0.002); end
  def test_outputs_emissions_q77; assert_in_epsilon(8.547954246955575, worksheet.outputs_emissions_q77, 0.002); end
  def test_outputs_emissions_r77; assert_in_epsilon(8.98865662852594, worksheet.outputs_emissions_r77, 0.002); end
  def test_outputs_emissions_s77; assert_in_epsilon(9.584077549806382, worksheet.outputs_emissions_s77, 0.002); end
  def test_outputs_emissions_t77; assert_in_epsilon(10.009972195391269, worksheet.outputs_emissions_t77, 0.002); end
  def test_outputs_emissions_u77; assert_in_epsilon(10.5736610291992, worksheet.outputs_emissions_u77, 0.002); end
  def test_outputs_emissions_v77; assert_in_epsilon(11.055958418361074, worksheet.outputs_emissions_v77, 0.002); end
  def test_outputs_emissions_w77; assert_in_epsilon(11.308145822789761, worksheet.outputs_emissions_w77, 0.002); end
  def test_outputs_emissions_x77; assert_in_epsilon(11.509364455881116, worksheet.outputs_emissions_x77, 0.002); end
  def test_outputs_emissions_y77; assert_in_epsilon(11.839798532998058, worksheet.outputs_emissions_y77, 0.002); end
  def test_outputs_emissions_z77; assert_in_epsilon(12.116603637587415, worksheet.outputs_emissions_z77, 0.002); end
  def test_outputs_emissions_aa77; assert_in_epsilon(12.402102230734554, worksheet.outputs_emissions_aa77, 0.002); end
  def test_outputs_emissions_ab77; assert_in_epsilon(12.717363428171002, worksheet.outputs_emissions_ab77, 0.002); end
  def test_outputs_emissions_ac77; assert_in_epsilon(13.027266478622556, worksheet.outputs_emissions_ac77, 0.002); end
  def test_outputs_emissions_ad77; assert_in_epsilon(13.348857729505546, worksheet.outputs_emissions_ad77, 0.002); end
  def test_outputs_emissions_ae77; assert_in_epsilon(13.683194732631783, worksheet.outputs_emissions_ae77, 0.002); end
  def test_outputs_emissions_af77; assert_in_epsilon(14.024268161070387, worksheet.outputs_emissions_af77, 0.002); end
  def test_outputs_emissions_ag77; assert_in_epsilon(14.376349089096825, worksheet.outputs_emissions_ag77, 0.002); end
  def test_outputs_emissions_ah77; assert_in_epsilon(14.739197134183224, worksheet.outputs_emissions_ah77, 0.002); end
  def test_outputs_emissions_d78; assert_equal("N2O", worksheet.outputs_emissions_d78); end
  def test_outputs_emissions_h78; assert_in_epsilon(3.2380841507989895, worksheet.outputs_emissions_h78, 0.002); end
  def test_outputs_emissions_i78; assert_in_epsilon(3.1897596536509, worksheet.outputs_emissions_i78, 0.002); end
  def test_outputs_emissions_j78; assert_in_epsilon(3.13992066945797, worksheet.outputs_emissions_j78, 0.002); end
  def test_outputs_emissions_k78; assert_in_epsilon(3.3631391265087096, worksheet.outputs_emissions_k78, 0.002); end
  def test_outputs_emissions_l78; assert_in_epsilon(3.5161561617384898, worksheet.outputs_emissions_l78, 0.002); end
  def test_outputs_emissions_p78; assert_in_epsilon(2.3656074645297185, worksheet.outputs_emissions_p78, 0.002); end
  def test_outputs_emissions_q78; assert_in_epsilon(2.4791624574767903, worksheet.outputs_emissions_q78, 0.002); end
  def test_outputs_emissions_r78; assert_in_epsilon(2.589658221695609, worksheet.outputs_emissions_r78, 0.002); end
  def test_outputs_emissions_s78; assert_in_epsilon(2.704011792177314, worksheet.outputs_emissions_s78, 0.002); end
  def test_outputs_emissions_t78; assert_in_epsilon(2.8133286831787463, worksheet.outputs_emissions_t78, 0.002); end
  def test_outputs_emissions_u78; assert_in_epsilon(2.9467795714893126, worksheet.outputs_emissions_u78, 0.002); end
  def test_outputs_emissions_v78; assert_in_epsilon(3.0831924277091267, worksheet.outputs_emissions_v78, 0.002); end
  def test_outputs_emissions_w78; assert_in_epsilon(3.192357562495252, worksheet.outputs_emissions_w78, 0.002); end
  def test_outputs_emissions_x78; assert_in_epsilon(3.2783994290590774, worksheet.outputs_emissions_x78, 0.002); end
  def test_outputs_emissions_y78; assert_in_epsilon(3.3955075836997963, worksheet.outputs_emissions_y78, 0.002); end
  def test_outputs_emissions_z78; assert_in_epsilon(3.505798480790304, worksheet.outputs_emissions_z78, 0.002); end
  def test_outputs_emissions_aa78; assert_in_epsilon(3.6164869293030835, worksheet.outputs_emissions_aa78, 0.002); end
  def test_outputs_emissions_ab78; assert_in_epsilon(3.7358790656812255, worksheet.outputs_emissions_ab78, 0.002); end
  def test_outputs_emissions_ac78; assert_in_epsilon(3.856077766806312, worksheet.outputs_emissions_ac78, 0.002); end
  def test_outputs_emissions_ad78; assert_in_epsilon(3.979775307402396, worksheet.outputs_emissions_ad78, 0.002); end
  def test_outputs_emissions_ae78; assert_in_epsilon(4.10806687556544, worksheet.outputs_emissions_ae78, 0.002); end
  def test_outputs_emissions_af78; assert_in_epsilon(4.23950118687215, worksheet.outputs_emissions_af78, 0.002); end
  def test_outputs_emissions_ag78; assert_in_epsilon(4.374903238784851, worksheet.outputs_emissions_ag78, 0.002); end
  def test_outputs_emissions_ah78; assert_in_epsilon(4.514438618934605, worksheet.outputs_emissions_ah78, 0.002); end
  def test_outputs_emissions_d79; assert_equal("Total", worksheet.outputs_emissions_d79); end
  def test_outputs_emissions_h79; assert_in_epsilon(34.85493641440893, worksheet.outputs_emissions_h79, 0.002); end
  def test_outputs_emissions_i79; assert_in_epsilon(35.76871935887767, worksheet.outputs_emissions_i79, 0.002); end
  def test_outputs_emissions_j79; assert_in_epsilon(37.821748831061655, worksheet.outputs_emissions_j79, 0.002); end
  def test_outputs_emissions_k79; assert_in_epsilon(41.70222094182745, worksheet.outputs_emissions_k79, 0.002); end
  def test_outputs_emissions_l79; assert_in_epsilon(45.73429569959423, worksheet.outputs_emissions_l79, 0.002); end
  def test_outputs_emissions_p79; assert_in_epsilon(46.83758429784213, worksheet.outputs_emissions_p79, 0.002); end
  def test_outputs_emissions_q79; assert_in_epsilon(51.49657272183633, worksheet.outputs_emissions_q79, 0.002); end
  def test_outputs_emissions_r79; assert_in_epsilon(53.51671672117222, worksheet.outputs_emissions_r79, 0.002); end
  def test_outputs_emissions_s79; assert_in_epsilon(56.96465396522853, worksheet.outputs_emissions_s79, 0.002); end
  def test_outputs_emissions_t79; assert_in_epsilon(62.07776577097344, worksheet.outputs_emissions_t79, 0.002); end
  def test_outputs_emissions_u79; assert_in_epsilon(69.44726691317072, worksheet.outputs_emissions_u79, 0.002); end
  def test_outputs_emissions_v79; assert_in_epsilon(72.0978659506415, worksheet.outputs_emissions_v79, 0.002); end
  def test_outputs_emissions_w79; assert_in_epsilon(72.80793797926337, worksheet.outputs_emissions_w79, 0.002); end
  def test_outputs_emissions_x79; assert_in_epsilon(76.46064469254122, worksheet.outputs_emissions_x79, 0.002); end
  def test_outputs_emissions_y79; assert_in_epsilon(78.93734719027243, worksheet.outputs_emissions_y79, 0.002); end
  def test_outputs_emissions_z79; assert_in_epsilon(81.35263990688695, worksheet.outputs_emissions_z79, 0.002); end
  def test_outputs_emissions_aa79; assert_in_epsilon(84.37011383631977, worksheet.outputs_emissions_aa79, 0.002); end
  def test_outputs_emissions_ab79; assert_in_epsilon(87.16326181727491, worksheet.outputs_emissions_ab79, 0.002); end
  def test_outputs_emissions_ac79; assert_in_epsilon(90.06815927806011, worksheet.outputs_emissions_ac79, 0.002); end
  def test_outputs_emissions_ad79; assert_in_epsilon(93.1459556373412, worksheet.outputs_emissions_ad79, 0.002); end
  def test_outputs_emissions_ae79; assert_in_epsilon(96.2450542446081, worksheet.outputs_emissions_ae79, 0.002); end
  def test_outputs_emissions_af79; assert_in_epsilon(99.4521961805258, worksheet.outputs_emissions_af79, 0.002); end
  def test_outputs_emissions_ag79; assert_in_epsilon(102.76607265578176, worksheet.outputs_emissions_ag79, 0.002); end
  def test_outputs_emissions_ah79; assert_in_epsilon(106.16331840491591, worksheet.outputs_emissions_ah79, 0.002); end
  def test_outputs_emissions_c60; assert_equal("Emissions by sector", worksheet.outputs_emissions_c60); end
  def test_outputs_emissions_d60; assert_equal("Calculator Sector", worksheet.outputs_emissions_d60); end
  def test_outputs_emissions_h60; assert_equal("1990", worksheet.outputs_emissions_h60); end
  def test_outputs_emissions_i60; assert_equal("1995", worksheet.outputs_emissions_i60); end
  def test_outputs_emissions_j60; assert_equal("2000", worksheet.outputs_emissions_j60); end
  def test_outputs_emissions_k60; assert_equal("2005", worksheet.outputs_emissions_k60); end
  def test_outputs_emissions_l60; assert_in_epsilon(2010.0, worksheet.outputs_emissions_l60, 0.002); end
  def test_outputs_emissions_p60; assert_in_epsilon(2011.0, worksheet.outputs_emissions_p60, 0.002); end
  def test_outputs_emissions_q60; assert_in_epsilon(2015.0, worksheet.outputs_emissions_q60, 0.002); end
  def test_outputs_emissions_r60; assert_in_epsilon(2020.0, worksheet.outputs_emissions_r60, 0.002); end
  def test_outputs_emissions_s60; assert_in_epsilon(2025.0, worksheet.outputs_emissions_s60, 0.002); end
  def test_outputs_emissions_t60; assert_in_epsilon(2030.0, worksheet.outputs_emissions_t60, 0.002); end
  def test_outputs_emissions_u60; assert_in_epsilon(2035.0, worksheet.outputs_emissions_u60, 0.002); end
  def test_outputs_emissions_v60; assert_in_epsilon(2040.0, worksheet.outputs_emissions_v60, 0.002); end
  def test_outputs_emissions_w60; assert_in_epsilon(2045.0, worksheet.outputs_emissions_w60, 0.002); end
  def test_outputs_emissions_x60; assert_in_epsilon(2050.0, worksheet.outputs_emissions_x60, 0.002); end
  def test_outputs_emissions_y60; assert_in_epsilon(2055.0, worksheet.outputs_emissions_y60, 0.002); end
  def test_outputs_emissions_z60; assert_in_epsilon(2060.0, worksheet.outputs_emissions_z60, 0.002); end
  def test_outputs_emissions_aa60; assert_in_epsilon(2065.0, worksheet.outputs_emissions_aa60, 0.002); end
  def test_outputs_emissions_ab60; assert_in_epsilon(2070.0, worksheet.outputs_emissions_ab60, 0.002); end
  def test_outputs_emissions_ac60; assert_in_epsilon(2075.0, worksheet.outputs_emissions_ac60, 0.002); end
  def test_outputs_emissions_ad60; assert_in_epsilon(2080.0, worksheet.outputs_emissions_ad60, 0.002); end
  def test_outputs_emissions_ae60; assert_in_epsilon(2085.0, worksheet.outputs_emissions_ae60, 0.002); end
  def test_outputs_emissions_af60; assert_in_epsilon(2090.0, worksheet.outputs_emissions_af60, 0.002); end
  def test_outputs_emissions_ag60; assert_in_epsilon(2095.0, worksheet.outputs_emissions_ag60, 0.002); end
  def test_outputs_emissions_ah60; assert_in_epsilon(2100.0, worksheet.outputs_emissions_ah60, 0.002); end
  def test_outputs_emissions_c61; assert_equal("G.10", worksheet.outputs_emissions_c61); end
  def test_outputs_emissions_d61; assert_equal("Global Transport", worksheet.outputs_emissions_d61); end
  def test_outputs_emissions_h61; assert_in_epsilon(4.5968100000000005, worksheet.outputs_emissions_h61, 0.002); end
  def test_outputs_emissions_i61; assert_in_epsilon(5.02333, worksheet.outputs_emissions_i61, 0.002); end
  def test_outputs_emissions_j61; assert_in_epsilon(5.72027, worksheet.outputs_emissions_j61, 0.002); end
  def test_outputs_emissions_k61; assert_in_epsilon(6.39796, worksheet.outputs_emissions_k61, 0.002); end
  def test_outputs_emissions_l61; assert_in_epsilon(6.90623, worksheet.outputs_emissions_l61, 0.002); end
  def test_outputs_emissions_p61; assert_in_epsilon(6.414174751399319, worksheet.outputs_emissions_p61, 0.002); end
  def test_outputs_emissions_q61; assert_in_epsilon(6.925563558903663, worksheet.outputs_emissions_q61, 0.002); end
  def test_outputs_emissions_r61; assert_in_epsilon(7.477389292382165, worksheet.outputs_emissions_r61, 0.002); end
  def test_outputs_emissions_s61; assert_in_epsilon(8.034023363614878, worksheet.outputs_emissions_s61, 0.002); end
  def test_outputs_emissions_t61; assert_in_epsilon(8.597599096701021, worksheet.outputs_emissions_t61, 0.002); end
  def test_outputs_emissions_u61; assert_in_epsilon(9.170690150192712, worksheet.outputs_emissions_u61, 0.002); end
  def test_outputs_emissions_v61; assert_in_epsilon(9.755041662121268, worksheet.outputs_emissions_v61, 0.002); end
  def test_outputs_emissions_w61; assert_in_epsilon(10.35216229209815, worksheet.outputs_emissions_w61, 0.002); end
  def test_outputs_emissions_x61; assert_in_epsilon(10.96251103673778, worksheet.outputs_emissions_x61, 0.002); end
  def test_outputs_emissions_c62; assert_equal("G.20", worksheet.outputs_emissions_c62); end
  def test_outputs_emissions_d62; assert_equal("Global Buildings", worksheet.outputs_emissions_d62); end
  def test_outputs_emissions_h62; assert_in_epsilon(3.5572380711154223, worksheet.outputs_emissions_h62, 0.002); end
  def test_outputs_emissions_i62; assert_in_epsilon(3.40461542005277, worksheet.outputs_emissions_i62, 0.002); end
  def test_outputs_emissions_j62; assert_in_epsilon(3.354907742912074, worksheet.outputs_emissions_j62, 0.002); end
  def test_outputs_emissions_k62; assert_in_epsilon(3.571160504318861, worksheet.outputs_emissions_k62, 0.002); end
  def test_outputs_emissions_l62; assert_in_epsilon(3.657419802739237, worksheet.outputs_emissions_l62, 0.002); end
  def test_outputs_emissions_p62; assert_in_epsilon(1.5812608294687114, worksheet.outputs_emissions_p62, 0.002); end
  def test_outputs_emissions_q62; assert_in_epsilon(1.7291939633493256, worksheet.outputs_emissions_q62, 0.002); end
  def test_outputs_emissions_r62; assert_in_epsilon(1.867370092157181, worksheet.outputs_emissions_r62, 0.002); end
  def test_outputs_emissions_s62; assert_in_epsilon(1.97789461734819, worksheet.outputs_emissions_s62, 0.002); end
  def test_outputs_emissions_t62; assert_in_epsilon(2.0641259691702074, worksheet.outputs_emissions_t62, 0.002); end
  def test_outputs_emissions_u62; assert_in_epsilon(2.1234846728492425, worksheet.outputs_emissions_u62, 0.002); end
  def test_outputs_emissions_v62; assert_in_epsilon(2.1512141807707446, worksheet.outputs_emissions_v62, 0.002); end
  def test_outputs_emissions_w62; assert_in_epsilon(2.1274455890535227, worksheet.outputs_emissions_w62, 0.002); end
  def test_outputs_emissions_x62; assert_in_epsilon(2.066279886091989, worksheet.outputs_emissions_x62, 0.002); end
  def test_outputs_emissions_c63; assert_equal("G.30", worksheet.outputs_emissions_c63); end
  def test_outputs_emissions_d63; assert_equal("Global Manufacturing", worksheet.outputs_emissions_d63); end
  def test_outputs_emissions_h63; assert_in_epsilon(5.4239727545553, worksheet.outputs_emissions_h63, 0.002); end
  def test_outputs_emissions_i63; assert_in_epsilon(5.531303861360651, worksheet.outputs_emissions_i63, 0.002); end
  def test_outputs_emissions_j63; assert_in_epsilon(5.66031394402772, worksheet.outputs_emissions_j63, 0.002); end
  def test_outputs_emissions_k63; assert_in_epsilon(6.821436971551759, worksheet.outputs_emissions_k63, 0.002); end
  def test_outputs_emissions_l63; assert_in_epsilon(8.125303565793601, worksheet.outputs_emissions_l63, 0.002); end
  def test_outputs_emissions_p63; assert_in_epsilon(8.346677918451086, worksheet.outputs_emissions_p63, 0.002); end
  def test_outputs_emissions_q63; assert_in_epsilon(9.500910987805637, worksheet.outputs_emissions_q63, 0.002); end
  def test_outputs_emissions_r63; assert_in_epsilon(10.310671851179038, worksheet.outputs_emissions_r63, 0.002); end
  def test_outputs_emissions_s63; assert_in_epsilon(11.070434811849413, worksheet.outputs_emissions_s63, 0.002); end
  def test_outputs_emissions_t63; assert_in_epsilon(11.879985451400017, worksheet.outputs_emissions_t63, 0.002); end
  def test_outputs_emissions_u63; assert_in_epsilon(12.675685133781839, worksheet.outputs_emissions_u63, 0.002); end
  def test_outputs_emissions_v63; assert_in_epsilon(13.525404796281435, worksheet.outputs_emissions_v63, 0.002); end
  def test_outputs_emissions_w63; assert_in_epsilon(14.464730247910422, worksheet.outputs_emissions_w63, 0.002); end
  def test_outputs_emissions_x63; assert_in_epsilon(15.152376961278836, worksheet.outputs_emissions_x63, 0.002); end
  def test_outputs_emissions_c64; assert_equal("G.40", worksheet.outputs_emissions_c64); end
  def test_outputs_emissions_d64; assert_equal("Global Electricity Generation and Global Fuel production", worksheet.outputs_emissions_d64); end
  def test_outputs_emissions_h64; assert_in_epsilon(10.48075881029452, worksheet.outputs_emissions_h64, 0.002); end
  def test_outputs_emissions_i64; assert_in_epsilon(11.08127397186996, worksheet.outputs_emissions_i64, 0.002); end
  def test_outputs_emissions_j64; assert_in_epsilon(12.42520542747288, worksheet.outputs_emissions_j64, 0.002); end
  def test_outputs_emissions_k64; assert_in_epsilon(14.705129986304412, worksheet.outputs_emissions_k64, 0.002); end
  def test_outputs_emissions_l64; assert_in_epsilon(16.53458439282281, worksheet.outputs_emissions_l64, 0.002); end
  def test_outputs_emissions_p64; assert_in_epsilon(20.57244456525599, worksheet.outputs_emissions_p64, 0.002); end
  def test_outputs_emissions_q64; assert_in_epsilon(23.375788516240718, worksheet.outputs_emissions_q64, 0.002); end
  def test_outputs_emissions_r64; assert_in_epsilon(26.11672566068383, worksheet.outputs_emissions_r64, 0.002); end
  def test_outputs_emissions_s64; assert_in_epsilon(29.70455242829521, worksheet.outputs_emissions_s64, 0.002); end
  def test_outputs_emissions_t64; assert_in_epsilon(32.05278107574415, worksheet.outputs_emissions_t64, 0.002); end
  def test_outputs_emissions_u64; assert_in_epsilon(34.73243111408507, worksheet.outputs_emissions_u64, 0.002); end
  def test_outputs_emissions_v64; assert_in_epsilon(37.54014747484827, worksheet.outputs_emissions_v64, 0.002); end
  def test_outputs_emissions_w64; assert_in_epsilon(39.97156620988956, worksheet.outputs_emissions_w64, 0.002); end
  def test_outputs_emissions_x64; assert_in_epsilon(42.487055979759965, worksheet.outputs_emissions_x64, 0.002); end
  def test_outputs_emissions_d65; assert_equal("Land and food", worksheet.outputs_emissions_d65); end
  def test_outputs_emissions_h65; assert_in_epsilon(10.796156778443688, worksheet.outputs_emissions_h65, 0.002); end
  def test_outputs_emissions_i65; assert_in_epsilon(10.72819610559427, worksheet.outputs_emissions_i65, 0.002); end
  def test_outputs_emissions_j65; assert_in_epsilon(10.661061716648991, worksheet.outputs_emissions_j65, 0.002); end
  def test_outputs_emissions_k65; assert_in_epsilon(10.206533479652432, worksheet.outputs_emissions_k65, 0.002); end
  def test_outputs_emissions_l65; assert_in_epsilon(10.510757938238582, worksheet.outputs_emissions_l65, 0.002); end
  def test_outputs_emissions_p65; assert_in_epsilon(9.923026233267034, worksheet.outputs_emissions_p65, 0.002); end
  def test_outputs_emissions_q65; assert_in_epsilon(9.965115695536989, worksheet.outputs_emissions_q65, 0.002); end
  def test_outputs_emissions_r65; assert_in_epsilon(7.744559824770011, worksheet.outputs_emissions_r65, 0.002); end
  def test_outputs_emissions_s65; assert_in_epsilon(6.177748744120846, worksheet.outputs_emissions_s65, 0.002); end
  def test_outputs_emissions_t65; assert_in_epsilon(7.483274177958053, worksheet.outputs_emissions_t65, 0.002); end
  def test_outputs_emissions_u65; assert_in_epsilon(10.744975842261862, worksheet.outputs_emissions_u65, 0.002); end
  def test_outputs_emissions_v65; assert_in_epsilon(9.12605783661979, worksheet.outputs_emissions_v65, 0.002); end
  def test_outputs_emissions_w65; assert_in_epsilon(5.892033640311737, worksheet.outputs_emissions_w65, 0.002); end
  def test_outputs_emissions_x65; assert_in_epsilon(5.792420828672634, worksheet.outputs_emissions_x65, 0.002); end
  def test_outputs_emissions_d66; assert_equal("Greenhouse gas removal", worksheet.outputs_emissions_d66); end
  def test_outputs_emissions_h66; assert_in_delta(0.0, (worksheet.outputs_emissions_h66||0), 0.002); end
  def test_outputs_emissions_i66; assert_in_delta(0.0, (worksheet.outputs_emissions_i66||0), 0.002); end
  def test_outputs_emissions_j66; assert_in_delta(0.0, (worksheet.outputs_emissions_j66||0), 0.002); end
  def test_outputs_emissions_k66; assert_in_delta(0.0, (worksheet.outputs_emissions_k66||0), 0.002); end
  def test_outputs_emissions_l66; assert_in_delta(0.0, (worksheet.outputs_emissions_l66||0), 0.002); end
  def test_outputs_emissions_p66; assert_in_delta(0.0, (worksheet.outputs_emissions_p66||0), 0.002); end
  def test_outputs_emissions_q66; assert_in_delta(0.0, (worksheet.outputs_emissions_q66||0), 0.002); end
  def test_outputs_emissions_r66; assert_in_delta(0.0, (worksheet.outputs_emissions_r66||0), 0.002); end
  def test_outputs_emissions_s66; assert_in_delta(0.0, (worksheet.outputs_emissions_s66||0), 0.002); end
  def test_outputs_emissions_t66; assert_in_delta(0.0, (worksheet.outputs_emissions_t66||0), 0.002); end
  def test_outputs_emissions_u66; assert_in_delta(0.0, (worksheet.outputs_emissions_u66||0), 0.002); end
  def test_outputs_emissions_v66; assert_in_delta(0.0, (worksheet.outputs_emissions_v66||0), 0.002); end
  def test_outputs_emissions_w66; assert_in_delta(0.0, (worksheet.outputs_emissions_w66||0), 0.002); end
  def test_outputs_emissions_x66; assert_in_delta(0.0, (worksheet.outputs_emissions_x66||0), 0.002); end
  def test_outputs_emissions_d67; assert_equal("Total", worksheet.outputs_emissions_d67); end
  def test_outputs_emissions_h67; assert_in_epsilon(34.85493641440893, worksheet.outputs_emissions_h67, 0.002); end
  def test_outputs_emissions_i67; assert_in_epsilon(35.76871935887767, worksheet.outputs_emissions_i67, 0.002); end
  def test_outputs_emissions_j67; assert_in_epsilon(37.82175883106165, worksheet.outputs_emissions_j67, 0.002); end
  def test_outputs_emissions_k67; assert_in_epsilon(41.70222094182745, worksheet.outputs_emissions_k67, 0.002); end
  def test_outputs_emissions_l67; assert_in_epsilon(45.73429569959423, worksheet.outputs_emissions_l67, 0.002); end
  def test_outputs_emissions_p67; assert_in_epsilon(46.83758429784214, worksheet.outputs_emissions_p67, 0.002); end
  def test_outputs_emissions_q67; assert_in_epsilon(51.49657272183633, worksheet.outputs_emissions_q67, 0.002); end
  def test_outputs_emissions_r67; assert_in_epsilon(53.51671672117222, worksheet.outputs_emissions_r67, 0.002); end
  def test_outputs_emissions_s67; assert_in_epsilon(56.96465396522853, worksheet.outputs_emissions_s67, 0.002); end
  def test_outputs_emissions_t67; assert_in_epsilon(62.07776577097345, worksheet.outputs_emissions_t67, 0.002); end
  def test_outputs_emissions_u67; assert_in_epsilon(69.44726691317072, worksheet.outputs_emissions_u67, 0.002); end
  def test_outputs_emissions_v67; assert_in_epsilon(72.09786595064149, worksheet.outputs_emissions_v67, 0.002); end
  def test_outputs_emissions_w67; assert_in_epsilon(72.80793797926339, worksheet.outputs_emissions_w67, 0.002); end
  def test_outputs_emissions_x67; assert_in_epsilon(76.46064469254121, worksheet.outputs_emissions_x67, 0.002); end
  def test_outputs_emissions_y67; assert_in_epsilon(78.93734719027243, worksheet.outputs_emissions_y67, 0.002); end
  def test_outputs_emissions_z67; assert_in_epsilon(81.35263990688695, worksheet.outputs_emissions_z67, 0.002); end
  def test_outputs_emissions_aa67; assert_in_epsilon(84.37011383631977, worksheet.outputs_emissions_aa67, 0.002); end
  def test_outputs_emissions_ab67; assert_in_epsilon(87.16326181727491, worksheet.outputs_emissions_ab67, 0.002); end
  def test_outputs_emissions_ac67; assert_in_epsilon(90.06815927806011, worksheet.outputs_emissions_ac67, 0.002); end
  def test_outputs_emissions_ad67; assert_in_epsilon(93.1459556373412, worksheet.outputs_emissions_ad67, 0.002); end
  def test_outputs_emissions_ae67; assert_in_epsilon(96.2450542446081, worksheet.outputs_emissions_ae67, 0.002); end
  def test_outputs_emissions_af67; assert_in_epsilon(99.4521961805258, worksheet.outputs_emissions_af67, 0.002); end
  def test_outputs_emissions_ag67; assert_in_epsilon(102.76607265578176, worksheet.outputs_emissions_ag67, 0.002); end
  def test_outputs_emissions_ah67; assert_in_epsilon(106.16331840491591, worksheet.outputs_emissions_ah67, 0.002); end
  def test_outputs_emissions_c45; assert_equal("Column1", worksheet.outputs_emissions_c45); end
  def test_outputs_emissions_d45; assert_equal("IPCC Sector", worksheet.outputs_emissions_d45); end
  def test_outputs_emissions_h45; assert_equal("1990", worksheet.outputs_emissions_h45); end
  def test_outputs_emissions_i45; assert_equal("1995", worksheet.outputs_emissions_i45); end
  def test_outputs_emissions_j45; assert_equal("2000", worksheet.outputs_emissions_j45); end
  def test_outputs_emissions_k45; assert_equal("2005", worksheet.outputs_emissions_k45); end
  def test_outputs_emissions_l45; assert_equal("2010", worksheet.outputs_emissions_l45); end
  def test_outputs_emissions_m45; assert_equal("….", worksheet.outputs_emissions_m45); end
  def test_outputs_emissions_p45; assert_equal("2011", worksheet.outputs_emissions_p45); end
  def test_outputs_emissions_q45; assert_equal("2015", worksheet.outputs_emissions_q45); end
  def test_outputs_emissions_r45; assert_equal("2020", worksheet.outputs_emissions_r45); end
  def test_outputs_emissions_s45; assert_equal("2025", worksheet.outputs_emissions_s45); end
  def test_outputs_emissions_t45; assert_equal("2030", worksheet.outputs_emissions_t45); end
  def test_outputs_emissions_u45; assert_equal("2035", worksheet.outputs_emissions_u45); end
  def test_outputs_emissions_v45; assert_equal("2040", worksheet.outputs_emissions_v45); end
  def test_outputs_emissions_w45; assert_equal("2045", worksheet.outputs_emissions_w45); end
  def test_outputs_emissions_x45; assert_equal("2050", worksheet.outputs_emissions_x45); end
  def test_outputs_emissions_y45; assert_equal("2055", worksheet.outputs_emissions_y45); end
  def test_outputs_emissions_z45; assert_equal("2060", worksheet.outputs_emissions_z45); end
  def test_outputs_emissions_aa45; assert_equal("2065", worksheet.outputs_emissions_aa45); end
  def test_outputs_emissions_ab45; assert_equal("2070", worksheet.outputs_emissions_ab45); end
  def test_outputs_emissions_ac45; assert_equal("2075", worksheet.outputs_emissions_ac45); end
  def test_outputs_emissions_ad45; assert_equal("2080", worksheet.outputs_emissions_ad45); end
  def test_outputs_emissions_ae45; assert_equal("2085", worksheet.outputs_emissions_ae45); end
  def test_outputs_emissions_af45; assert_equal("2090", worksheet.outputs_emissions_af45); end
  def test_outputs_emissions_ag45; assert_equal("2095", worksheet.outputs_emissions_ag45); end
  def test_outputs_emissions_ah45; assert_equal("2100", worksheet.outputs_emissions_ah45); end
  def test_outputs_emissions_c46; assert_equal("G.1A", worksheet.outputs_emissions_c46); end
  def test_outputs_emissions_d46; assert_equal("Global Fuel Combustion", worksheet.outputs_emissions_d46); end
  def test_outputs_emissions_h46; assert_in_epsilon(21.62825807111542, worksheet.outputs_emissions_h46, 0.002); end
  def test_outputs_emissions_i46; assert_in_epsilon(22.511665420052775, worksheet.outputs_emissions_i46, 0.002); end
  def test_outputs_emissions_j46; assert_in_epsilon(24.432527742912075, worksheet.outputs_emissions_j46, 0.002); end
  def test_outputs_emissions_k46; assert_in_epsilon(28.22731050431886, worksheet.outputs_emissions_k46, 0.002); end
  def test_outputs_emissions_l46; assert_in_epsilon(31.28377980273924, worksheet.outputs_emissions_l46, 0.002); end
  def test_outputs_emissions_p46; assert_in_epsilon(31.54341529330382, worksheet.outputs_emissions_p46, 0.002); end
  def test_outputs_emissions_q46; assert_in_epsilon(35.37366847137439, worksheet.outputs_emissions_q46, 0.002); end
  def test_outputs_emissions_r46; assert_in_epsilon(39.14373957476392, worksheet.outputs_emissions_r46, 0.002); end
  def test_outputs_emissions_s46; assert_in_epsilon(43.51322976478057, worksheet.outputs_emissions_s46, 0.002); end
  def test_outputs_emissions_t46; assert_in_epsilon(46.84639707297014, worksheet.outputs_emissions_t46, 0.002); end
  def test_outputs_emissions_u46; assert_in_epsilon(50.39695945852479, worksheet.outputs_emissions_u46, 0.002); end
  def test_outputs_emissions_v46; assert_in_epsilon(54.14401447199759, worksheet.outputs_emissions_v46, 0.002); end
  def test_outputs_emissions_w46; assert_in_epsilon(57.664519112424394, worksheet.outputs_emissions_w46, 0.002); end
  def test_outputs_emissions_x46; assert_in_epsilon(61.05135974407095, worksheet.outputs_emissions_x46, 0.002); end
  def test_outputs_emissions_c47; assert_equal("G.1B", worksheet.outputs_emissions_c47); end
  def test_outputs_emissions_d47; assert_equal("Global Fugitive Emissions from Fuels", worksheet.outputs_emissions_d47); end
  def test_outputs_emissions_h47; assert_in_epsilon(1.97211881029452, worksheet.outputs_emissions_h47, 0.002); end
  def test_outputs_emissions_i47; assert_in_epsilon(1.92072397186996, worksheet.outputs_emissions_i47, 0.002); end
  def test_outputs_emissions_j47; assert_in_epsilon(2.0150954274728803, worksheet.outputs_emissions_j47, 0.002); end
  def test_outputs_emissions_k47; assert_in_epsilon(2.27969998630441, worksheet.outputs_emissions_k47, 0.002); end
  def test_outputs_emissions_l47; assert_in_epsilon(2.48650439282281, worksheet.outputs_emissions_l47, 0.002); end
  def test_outputs_emissions_p47; assert_in_epsilon(2.8600305003445134, worksheet.outputs_emissions_p47, 0.002); end
  def test_outputs_emissions_q47; assert_in_epsilon(3.260629620815241, worksheet.outputs_emissions_q47, 0.002); end
  def test_outputs_emissions_r47; assert_in_epsilon(3.516089310263035, worksheet.outputs_emissions_r47, 0.002); end
  def test_outputs_emissions_s47; assert_in_epsilon(3.930431840435934, worksheet.outputs_emissions_s47, 0.002); end
  def test_outputs_emissions_t47; assert_in_epsilon(4.154318514367925, worksheet.outputs_emissions_t47, 0.002); end
  def test_outputs_emissions_u47; assert_in_epsilon(4.460251860104377, worksheet.outputs_emissions_u47, 0.002); end
  def test_outputs_emissions_v47; assert_in_epsilon(4.7087930326081135, worksheet.outputs_emissions_v47, 0.002); end
  def test_outputs_emissions_w47; assert_in_epsilon(4.826838611718559, worksheet.outputs_emissions_w47, 0.002); end
  def test_outputs_emissions_x47; assert_in_epsilon(4.953538829809976, worksheet.outputs_emissions_x47, 0.002); end
  def test_outputs_emissions_c48; assert_equal("G.2", worksheet.outputs_emissions_c48); end
  def test_outputs_emissions_d48; assert_equal("Global Industrial Processes", worksheet.outputs_emissions_d48); end
  def test_outputs_emissions_h48; assert_in_delta(0.8635527545553001, worksheet.outputs_emissions_h48, 0.002); end
  def test_outputs_emissions_i48; assert_in_epsilon(1.0090538613606506, worksheet.outputs_emissions_i48, 0.002); end
  def test_outputs_emissions_j48; assert_in_epsilon(1.05186394402772, worksheet.outputs_emissions_j48, 0.002); end
  def test_outputs_emissions_k48; assert_in_epsilon(1.3834269715517598, worksheet.outputs_emissions_k48, 0.002); end
  def test_outputs_emissions_l48; assert_in_epsilon(1.8539335657936016, worksheet.outputs_emissions_l48, 0.002); end
  def test_outputs_emissions_p48; assert_in_epsilon(2.5111122709267653, worksheet.outputs_emissions_p48, 0.002); end
  def test_outputs_emissions_q48; assert_in_epsilon(2.8971589341097177, worksheet.outputs_emissions_q48, 0.002); end
  def test_outputs_emissions_r48; assert_in_epsilon(3.1123280113752654, worksheet.outputs_emissions_r48, 0.002); end
  def test_outputs_emissions_s48; assert_in_epsilon(3.343243615891196, worksheet.outputs_emissions_s48, 0.002); end
  def test_outputs_emissions_t48; assert_in_epsilon(3.5937760056773187, worksheet.outputs_emissions_t48, 0.002); end
  def test_outputs_emissions_u48; assert_in_epsilon(3.845079752279688, worksheet.outputs_emissions_u48, 0.002); end
  def test_outputs_emissions_v48; assert_in_epsilon(4.119000609416018, worksheet.outputs_emissions_v48, 0.002); end
  def test_outputs_emissions_w48; assert_in_epsilon(4.424546614808692, worksheet.outputs_emissions_w48, 0.002); end
  def test_outputs_emissions_x48; assert_in_epsilon(4.663325289987645, worksheet.outputs_emissions_x48, 0.002); end
  def test_outputs_emissions_c49; assert_equal("G.3", worksheet.outputs_emissions_c49); end
  def test_outputs_emissions_d49; assert_equal("Global Solvent and Other Product Use", worksheet.outputs_emissions_d49); end
  def test_outputs_emissions_h49; assert_in_delta(0.0, (worksheet.outputs_emissions_h49||0), 0.002); end
  def test_outputs_emissions_i49; assert_in_delta(0.0, (worksheet.outputs_emissions_i49||0), 0.002); end
  def test_outputs_emissions_j49; assert_in_delta(0.0, (worksheet.outputs_emissions_j49||0), 0.002); end
  def test_outputs_emissions_k49; assert_in_delta(0.0, (worksheet.outputs_emissions_k49||0), 0.002); end
  def test_outputs_emissions_l49; assert_in_delta(0.0, (worksheet.outputs_emissions_l49||0), 0.002); end
  def test_outputs_emissions_p49; assert_in_delta(0.0, (worksheet.outputs_emissions_p49||0), 0.002); end
  def test_outputs_emissions_q49; assert_in_delta(0.0, (worksheet.outputs_emissions_q49||0), 0.002); end
  def test_outputs_emissions_r49; assert_in_delta(0.0, (worksheet.outputs_emissions_r49||0), 0.002); end
  def test_outputs_emissions_s49; assert_in_delta(0.0, (worksheet.outputs_emissions_s49||0), 0.002); end
  def test_outputs_emissions_t49; assert_in_delta(0.0, (worksheet.outputs_emissions_t49||0), 0.002); end
  def test_outputs_emissions_u49; assert_in_delta(0.0, (worksheet.outputs_emissions_u49||0), 0.002); end
  def test_outputs_emissions_v49; assert_in_delta(0.0, (worksheet.outputs_emissions_v49||0), 0.002); end
  def test_outputs_emissions_w49; assert_in_delta(0.0, (worksheet.outputs_emissions_w49||0), 0.002); end
  def test_outputs_emissions_x49; assert_in_delta(0.0, (worksheet.outputs_emissions_x49||0), 0.002); end
  def test_outputs_emissions_c50; assert_equal("G.4", worksheet.outputs_emissions_c50); end
  def test_outputs_emissions_d50; assert_equal("Global Agriculture", worksheet.outputs_emissions_d50); end
  def test_outputs_emissions_h50; assert_in_epsilon(5.62178989983279, worksheet.outputs_emissions_h50, 0.002); end
  def test_outputs_emissions_i50; assert_in_epsilon(5.501831340352361, worksheet.outputs_emissions_i50, 0.002); end
  def test_outputs_emissions_j50; assert_in_epsilon(5.42376971473413, worksheet.outputs_emissions_j50, 0.002); end
  def test_outputs_emissions_k50; assert_in_epsilon(5.79845056426927, worksheet.outputs_emissions_k50, 0.002); end
  def test_outputs_emissions_l50; assert_in_epsilon(5.99880140697078, worksheet.outputs_emissions_l50, 0.002); end
  def test_outputs_emissions_p50; assert_in_epsilon(5.811749701999231, worksheet.outputs_emissions_p50, 0.002); end
  def test_outputs_emissions_q50; assert_in_epsilon(6.0248222386265935, worksheet.outputs_emissions_q50, 0.002); end
  def test_outputs_emissions_r50; assert_in_epsilon(6.2460130632408575, worksheet.outputs_emissions_r50, 0.002); end
  def test_outputs_emissions_s50; assert_in_epsilon(6.457072374844611, worksheet.outputs_emissions_s50, 0.002); end
  def test_outputs_emissions_t50; assert_in_epsilon(6.696071877193372, worksheet.outputs_emissions_t50, 0.002); end
  def test_outputs_emissions_u50; assert_in_epsilon(6.991855592009832, worksheet.outputs_emissions_u50, 0.002); end
  def test_outputs_emissions_v50; assert_in_epsilon(7.2704195636831646, worksheet.outputs_emissions_v50, 0.002); end
  def test_outputs_emissions_w50; assert_in_epsilon(7.450818417541311, worksheet.outputs_emissions_w50, 0.002); end
  def test_outputs_emissions_x50; assert_in_epsilon(7.5653036713840915, worksheet.outputs_emissions_x50, 0.002); end
  def test_outputs_emissions_c51; assert_equal("G.5", worksheet.outputs_emissions_c51); end
  def test_outputs_emissions_d51; assert_equal("Global Land Use, Land-Use Change and Forestry", worksheet.outputs_emissions_d51); end
  def test_outputs_emissions_h51; assert_in_epsilon(3.6209602100000002, worksheet.outputs_emissions_h51, 0.002); end
  def test_outputs_emissions_i51; assert_in_epsilon(3.59930749, worksheet.outputs_emissions_i51, 0.002); end
  def test_outputs_emissions_j51; assert_in_epsilon(3.59907449, worksheet.outputs_emissions_j51, 0.002); end
  def test_outputs_emissions_k51; assert_in_epsilon(2.63452254, worksheet.outputs_emissions_k51, 0.002); end
  def test_outputs_emissions_l51; assert_in_epsilon(2.6399138200000003, worksheet.outputs_emissions_l51, 0.002); end
  def test_outputs_emissions_p51; assert_in_epsilon(2.63991382, worksheet.outputs_emissions_p51, 0.002); end
  def test_outputs_emissions_q51; assert_in_epsilon(2.4409382837709357, worksheet.outputs_emissions_q51, 0.002); end
  def test_outputs_emissions_r51; assert_in_delta(-0.057034318168638576, worksheet.outputs_emissions_r51, 0.002); end
  def test_outputs_emissions_s51; assert_in_epsilon(-1.887606633363892, worksheet.outputs_emissions_s51, 0.002); end
  def test_outputs_emissions_t51; assert_in_delta(-0.8791633859636168, worksheet.outputs_emissions_t51, 0.002); end
  def test_outputs_emissions_u51; assert_in_epsilon(2.016489651991167, worksheet.outputs_emissions_u51, 0.002); end
  def test_outputs_emissions_v51; assert_in_delta(0.053772615938314505, worksheet.outputs_emissions_v51, 0.002); end
  def test_outputs_emissions_w51; assert_in_epsilon(-3.401991207753151, worksheet.outputs_emissions_w51, 0.002); end
  def test_outputs_emissions_x51; assert_in_epsilon(-3.6410806496015726, worksheet.outputs_emissions_x51, 0.002); end
  def test_outputs_emissions_c52; assert_equal("G.6", worksheet.outputs_emissions_c52); end
  def test_outputs_emissions_d52; assert_equal("Global Waste", worksheet.outputs_emissions_d52); end
  def test_outputs_emissions_h52; assert_in_epsilon(1.1482566686108997, worksheet.outputs_emissions_h52, 0.002); end
  def test_outputs_emissions_i52; assert_in_epsilon(1.2261372752419115, worksheet.outputs_emissions_i52, 0.002); end
  def test_outputs_emissions_j52; assert_in_epsilon(1.2994175119148552, worksheet.outputs_emissions_j52, 0.002); end
  def test_outputs_emissions_k52; assert_in_epsilon(1.3788103753831609, worksheet.outputs_emissions_k52, 0.002); end
  def test_outputs_emissions_l52; assert_in_epsilon(1.4713627112678027, worksheet.outputs_emissions_l52, 0.002); end
  def test_outputs_emissions_p52; assert_in_epsilon(1.4713627112678027, worksheet.outputs_emissions_p52, 0.002); end
  def test_outputs_emissions_q52; assert_in_epsilon(1.4993551731394594, worksheet.outputs_emissions_q52, 0.002); end
  def test_outputs_emissions_r52; assert_in_epsilon(1.555581079697793, worksheet.outputs_emissions_r52, 0.002); end
  def test_outputs_emissions_s52; assert_in_epsilon(1.6082830026401274, worksheet.outputs_emissions_s52, 0.002); end
  def test_outputs_emissions_t52; assert_in_epsilon(1.6663656867282988, worksheet.outputs_emissions_t52, 0.002); end
  def test_outputs_emissions_u52; assert_in_epsilon(1.736630598260863, worksheet.outputs_emissions_u52, 0.002); end
  def test_outputs_emissions_v52; assert_in_epsilon(1.8018656569983107, worksheet.outputs_emissions_v52, 0.002); end
  def test_outputs_emissions_w52; assert_in_epsilon(1.8432064305235758, worksheet.outputs_emissions_w52, 0.002); end
  def test_outputs_emissions_x52; assert_in_epsilon(1.8681978068901153, worksheet.outputs_emissions_x52, 0.002); end
  def test_outputs_emissions_c53; assert_equal("G.7", worksheet.outputs_emissions_c53); end
  def test_outputs_emissions_d53; assert_equal("Global Other", worksheet.outputs_emissions_d53); end
  def test_outputs_emissions_h53; assert_in_delta(0.0, (worksheet.outputs_emissions_h53||0), 0.002); end
  def test_outputs_emissions_i53; assert_in_delta(0.0, (worksheet.outputs_emissions_i53||0), 0.002); end
  def test_outputs_emissions_j53; assert_in_delta(0.0, (worksheet.outputs_emissions_j53||0), 0.002); end
  def test_outputs_emissions_k53; assert_in_delta(0.0, (worksheet.outputs_emissions_k53||0), 0.002); end
  def test_outputs_emissions_l53; assert_in_delta(0.0, (worksheet.outputs_emissions_l53||0), 0.002); end
  def test_outputs_emissions_p53; assert_in_delta(0.0, (worksheet.outputs_emissions_p53||0), 0.002); end
  def test_outputs_emissions_q53; assert_in_delta(0.0, (worksheet.outputs_emissions_q53||0), 0.002); end
  def test_outputs_emissions_r53; assert_in_delta(0.0, (worksheet.outputs_emissions_r53||0), 0.002); end
  def test_outputs_emissions_s53; assert_in_delta(0.0, (worksheet.outputs_emissions_s53||0), 0.002); end
  def test_outputs_emissions_t53; assert_in_delta(0.0, (worksheet.outputs_emissions_t53||0), 0.002); end
  def test_outputs_emissions_u53; assert_in_delta(0.0, (worksheet.outputs_emissions_u53||0), 0.002); end
  def test_outputs_emissions_v53; assert_in_delta(0.0, (worksheet.outputs_emissions_v53||0), 0.002); end
  def test_outputs_emissions_w53; assert_in_delta(0.0, (worksheet.outputs_emissions_w53||0), 0.002); end
  def test_outputs_emissions_x53; assert_in_delta(0.0, (worksheet.outputs_emissions_x53||0), 0.002); end
  def test_outputs_emissions_d54; assert_equal("Total", worksheet.outputs_emissions_d54); end
  def test_outputs_emissions_h54; assert_in_epsilon(34.85493641440893, worksheet.outputs_emissions_h54, 0.002); end
  def test_outputs_emissions_i54; assert_in_epsilon(35.76871935887767, worksheet.outputs_emissions_i54, 0.002); end
  def test_outputs_emissions_j54; assert_in_epsilon(37.821748831061655, worksheet.outputs_emissions_j54, 0.002); end
  def test_outputs_emissions_k54; assert_in_epsilon(41.70222094182745, worksheet.outputs_emissions_k54, 0.002); end
  def test_outputs_emissions_l54; assert_in_epsilon(45.73429569959423, worksheet.outputs_emissions_l54, 0.002); end
  def test_outputs_emissions_p54; assert_in_epsilon(46.83758429784213, worksheet.outputs_emissions_p54, 0.002); end
  def test_outputs_emissions_q54; assert_in_epsilon(51.49657272183633, worksheet.outputs_emissions_q54, 0.002); end
  def test_outputs_emissions_r54; assert_in_epsilon(53.51671672117222, worksheet.outputs_emissions_r54, 0.002); end
  def test_outputs_emissions_s54; assert_in_epsilon(56.96465396522853, worksheet.outputs_emissions_s54, 0.002); end
  def test_outputs_emissions_t54; assert_in_epsilon(62.07776577097344, worksheet.outputs_emissions_t54, 0.002); end
  def test_outputs_emissions_u54; assert_in_epsilon(69.44726691317072, worksheet.outputs_emissions_u54, 0.002); end
  def test_outputs_emissions_v54; assert_in_epsilon(72.0978659506415, worksheet.outputs_emissions_v54, 0.002); end
  def test_outputs_emissions_w54; assert_in_epsilon(72.80793797926337, worksheet.outputs_emissions_w54, 0.002); end
  def test_outputs_emissions_x54; assert_in_epsilon(76.46064469254122, worksheet.outputs_emissions_x54, 0.002); end
  def test_outputs_emissions_y54; assert_in_epsilon(78.93734719027243, worksheet.outputs_emissions_y54, 0.002); end
  def test_outputs_emissions_z54; assert_in_epsilon(81.35263990688695, worksheet.outputs_emissions_z54, 0.002); end
  def test_outputs_emissions_aa54; assert_in_epsilon(84.37011383631977, worksheet.outputs_emissions_aa54, 0.002); end
  def test_outputs_emissions_ab54; assert_in_epsilon(87.16326181727491, worksheet.outputs_emissions_ab54, 0.002); end
  def test_outputs_emissions_ac54; assert_in_epsilon(90.06815927806011, worksheet.outputs_emissions_ac54, 0.002); end
  def test_outputs_emissions_ad54; assert_in_epsilon(93.1459556373412, worksheet.outputs_emissions_ad54, 0.002); end
  def test_outputs_emissions_ae54; assert_in_epsilon(96.2450542446081, worksheet.outputs_emissions_ae54, 0.002); end
  def test_outputs_emissions_af54; assert_in_epsilon(99.4521961805258, worksheet.outputs_emissions_af54, 0.002); end
  def test_outputs_emissions_ag54; assert_in_epsilon(102.76607265578176, worksheet.outputs_emissions_ag54, 0.002); end
  def test_outputs_emissions_ah54; assert_in_epsilon(106.16331840491591, worksheet.outputs_emissions_ah54, 0.002); end
  def test_outputs_emissions_d13; assert_equal("IPCC Sector", worksheet.outputs_emissions_d13); end
  def test_outputs_emissions_p13; assert_in_epsilon(2011.0, worksheet.outputs_emissions_p13, 0.002); end
  def test_outputs_emissions_q13; assert_in_epsilon(2015.0, worksheet.outputs_emissions_q13, 0.002); end
  def test_outputs_emissions_r13; assert_in_epsilon(2020.0, worksheet.outputs_emissions_r13, 0.002); end
  def test_outputs_emissions_s13; assert_in_epsilon(2025.0, worksheet.outputs_emissions_s13, 0.002); end
  def test_outputs_emissions_t13; assert_in_epsilon(2030.0, worksheet.outputs_emissions_t13, 0.002); end
  def test_outputs_emissions_u13; assert_in_epsilon(2035.0, worksheet.outputs_emissions_u13, 0.002); end
  def test_outputs_emissions_v13; assert_in_epsilon(2040.0, worksheet.outputs_emissions_v13, 0.002); end
  def test_outputs_emissions_w13; assert_in_epsilon(2045.0, worksheet.outputs_emissions_w13, 0.002); end
  def test_outputs_emissions_x13; assert_in_epsilon(2050.0, worksheet.outputs_emissions_x13, 0.002); end
  def test_outputs_emissions_y13; assert_in_epsilon(2055.0, worksheet.outputs_emissions_y13, 0.002); end
  def test_outputs_emissions_z13; assert_in_epsilon(2060.0, worksheet.outputs_emissions_z13, 0.002); end
  def test_outputs_emissions_aa13; assert_in_epsilon(2065.0, worksheet.outputs_emissions_aa13, 0.002); end
  def test_outputs_emissions_ab13; assert_in_epsilon(2070.0, worksheet.outputs_emissions_ab13, 0.002); end
  def test_outputs_emissions_ac13; assert_in_epsilon(2075.0, worksheet.outputs_emissions_ac13, 0.002); end
  def test_outputs_emissions_ad13; assert_in_epsilon(2080.0, worksheet.outputs_emissions_ad13, 0.002); end
  def test_outputs_emissions_ae13; assert_in_epsilon(2085.0, worksheet.outputs_emissions_ae13, 0.002); end
  def test_outputs_emissions_af13; assert_in_epsilon(2090.0, worksheet.outputs_emissions_af13, 0.002); end
  def test_outputs_emissions_ag13; assert_in_epsilon(2095.0, worksheet.outputs_emissions_ag13, 0.002); end
  def test_outputs_emissions_ah13; assert_in_epsilon(2100.0, worksheet.outputs_emissions_ah13, 0.002); end
  def test_outputs_emissions_c14; assert_equal("G.1A", worksheet.outputs_emissions_c14); end
  def test_outputs_emissions_d14; assert_equal("Global Fuel Combustion", worksheet.outputs_emissions_d14); end
  def test_outputs_emissions_p14; assert_in_epsilon(4.527910467518852, worksheet.outputs_emissions_p14, 0.002); end
  def test_outputs_emissions_q14; assert_in_epsilon(4.829313482827801, worksheet.outputs_emissions_q14, 0.002); end
  def test_outputs_emissions_r14; assert_in_epsilon(5.072568717054801, worksheet.outputs_emissions_r14, 0.002); end
  def test_outputs_emissions_s14; assert_in_epsilon(5.383026917563233, worksheet.outputs_emissions_s14, 0.002); end
  def test_outputs_emissions_t14; assert_in_epsilon(5.560444792996095, worksheet.outputs_emissions_t14, 0.002); end
  def test_outputs_emissions_u14; assert_in_epsilon(5.763969228443289, worksheet.outputs_emissions_u14, 0.002); end
  def test_outputs_emissions_v14; assert_in_epsilon(5.990252176228426, worksheet.outputs_emissions_v14, 0.002); end
  def test_outputs_emissions_w14; assert_in_epsilon(6.194865251551806, worksheet.outputs_emissions_w14, 0.002); end
  def test_outputs_emissions_x14; assert_in_epsilon(6.392180014026983, worksheet.outputs_emissions_x14, 0.002); end
  def test_outputs_emissions_c15; assert_equal("G.1B", worksheet.outputs_emissions_c15); end
  def test_outputs_emissions_d15; assert_equal("Global Fugitive Emissions from Fuels", worksheet.outputs_emissions_d15); end
  def test_outputs_emissions_p15; assert_in_delta(0.4105440682157896, worksheet.outputs_emissions_p15, 0.002); end
  def test_outputs_emissions_q15; assert_in_delta(0.44515039776135873, worksheet.outputs_emissions_q15, 0.002); end
  def test_outputs_emissions_r15; assert_in_delta(0.45564386119893685, worksheet.outputs_emissions_r15, 0.002); end
  def test_outputs_emissions_s15; assert_in_delta(0.48623419840554155, worksheet.outputs_emissions_s15, 0.002); end
  def test_outputs_emissions_t15; assert_in_delta(0.4930978729417116, worksheet.outputs_emissions_t15, 0.002); end
  def test_outputs_emissions_u15; assert_in_delta(0.5101251097083765, worksheet.outputs_emissions_u15, 0.002); end
  def test_outputs_emissions_v15; assert_in_delta(0.5209598509836786, worksheet.outputs_emissions_v15, 0.002); end
  def test_outputs_emissions_w15; assert_in_delta(0.5185444229975597, worksheet.outputs_emissions_w15, 0.002); end
  def test_outputs_emissions_x15; assert_in_delta(0.5186438441232754, worksheet.outputs_emissions_x15, 0.002); end
  def test_outputs_emissions_c16; assert_equal("G.2", worksheet.outputs_emissions_c16); end
  def test_outputs_emissions_d16; assert_equal("Global Industrial Processes", worksheet.outputs_emissions_d16); end
  def test_outputs_emissions_p16; assert_in_delta(0.36045848019057186, worksheet.outputs_emissions_p16, 0.002); end
  def test_outputs_emissions_q16; assert_in_delta(0.39552834939111053, worksheet.outputs_emissions_q16, 0.002); end
  def test_outputs_emissions_r16; assert_in_delta(0.4033211409850528, worksheet.outputs_emissions_r16, 0.002); end
  def test_outputs_emissions_s16; assert_in_delta(0.41359307212079793, worksheet.outputs_emissions_s16, 0.002); end
  def test_outputs_emissions_t16; assert_in_delta(0.4265641399665444, worksheet.outputs_emissions_t16, 0.002); end
  def test_outputs_emissions_u16; assert_in_delta(0.4397670337888121, worksheet.outputs_emissions_u16, 0.002); end
  def test_outputs_emissions_v16; assert_in_delta(0.4557078488740696, worksheet.outputs_emissions_v16, 0.002); end
  def test_outputs_emissions_w16; assert_in_delta(0.47532643122387364, worksheet.outputs_emissions_w16, 0.002); end
  def test_outputs_emissions_x16; assert_in_delta(0.48825799855277613, worksheet.outputs_emissions_x16, 0.002); end
  def test_outputs_emissions_c17; assert_equal("G.3", worksheet.outputs_emissions_c17); end
  def test_outputs_emissions_d17; assert_equal("Global Solvent and Other Product Use", worksheet.outputs_emissions_d17); end
  def test_outputs_emissions_p17; assert_in_delta(0.0, (worksheet.outputs_emissions_p17||0), 0.002); end
  def test_outputs_emissions_q17; assert_in_delta(0.0, (worksheet.outputs_emissions_q17||0), 0.002); end
  def test_outputs_emissions_r17; assert_in_delta(0.0, (worksheet.outputs_emissions_r17||0), 0.002); end
  def test_outputs_emissions_s17; assert_in_delta(0.0, (worksheet.outputs_emissions_s17||0), 0.002); end
  def test_outputs_emissions_t17; assert_in_delta(0.0, (worksheet.outputs_emissions_t17||0), 0.002); end
  def test_outputs_emissions_u17; assert_in_delta(0.0, (worksheet.outputs_emissions_u17||0), 0.002); end
  def test_outputs_emissions_v17; assert_in_delta(0.0, (worksheet.outputs_emissions_v17||0), 0.002); end
  def test_outputs_emissions_w17; assert_in_delta(0.0, (worksheet.outputs_emissions_w17||0), 0.002); end
  def test_outputs_emissions_x17; assert_in_delta(0.0, (worksheet.outputs_emissions_x17||0), 0.002); end
  def test_outputs_emissions_c18; assert_equal("G.4", worksheet.outputs_emissions_c18); end
  def test_outputs_emissions_d18; assert_equal("Global Agriculture", worksheet.outputs_emissions_d18); end
  def test_outputs_emissions_p18; assert_in_delta(0.8342496228006158, worksheet.outputs_emissions_p18, 0.002); end
  def test_outputs_emissions_q18; assert_in_delta(0.8225258087717278, worksheet.outputs_emissions_q18, 0.002); end
  def test_outputs_emissions_r18; assert_in_delta(0.8094099034763029, worksheet.outputs_emissions_r18, 0.002); end
  def test_outputs_emissions_s18; assert_in_delta(0.7988052045397915, worksheet.outputs_emissions_s18, 0.002); end
  def test_outputs_emissions_t18; assert_in_delta(0.7947919227400005, worksheet.outputs_emissions_t18, 0.002); end
  def test_outputs_emissions_u18; assert_in_delta(0.7996680933743674, worksheet.outputs_emissions_u18, 0.002); end
  def test_outputs_emissions_v18; assert_in_delta(0.8043667806710382, worksheet.outputs_emissions_v18, 0.002); end
  def test_outputs_emissions_w18; assert_in_delta(0.8004370247233006, worksheet.outputs_emissions_w18, 0.002); end
  def test_outputs_emissions_x18; assert_in_delta(0.7921000143319945, worksheet.outputs_emissions_x18, 0.002); end
  def test_outputs_emissions_c19; assert_equal("G.5", worksheet.outputs_emissions_c19); end
  def test_outputs_emissions_d19; assert_equal("Global Land Use, Land-Use Change and Forestry", worksheet.outputs_emissions_d19); end
  def test_outputs_emissions_p19; assert_in_delta(0.3789473431389396, worksheet.outputs_emissions_p19, 0.002); end
  def test_outputs_emissions_q19; assert_in_delta(0.3332438130951796, worksheet.outputs_emissions_q19, 0.002); end
  def test_outputs_emissions_r19; assert_in_delta(-0.007390977491769989, worksheet.outputs_emissions_r19, 0.002); end
  def test_outputs_emissions_s19; assert_in_delta(-0.2335160449384303, worksheet.outputs_emissions_s19, 0.002); end
  def test_outputs_emissions_t19; assert_in_delta(-0.10435251752786005, worksheet.outputs_emissions_t19, 0.002); end
  def test_outputs_emissions_u19; assert_in_delta(0.23062868134171416, worksheet.outputs_emissions_u19, 0.002); end
  def test_outputs_emissions_v19; assert_in_delta(0.005949162299603306, worksheet.outputs_emissions_v19, 0.002); end
  def test_outputs_emissions_w19; assert_in_delta(-0.3654739074110125, worksheet.outputs_emissions_w19, 0.002); end
  def test_outputs_emissions_x19; assert_in_delta(-0.38122726595133494, worksheet.outputs_emissions_x19, 0.002); end
  def test_outputs_emissions_c20; assert_equal("G.6", worksheet.outputs_emissions_c20); end
  def test_outputs_emissions_d20; assert_equal("Global Waste", worksheet.outputs_emissions_d20); end
  def test_outputs_emissions_p20; assert_in_delta(0.21120726972391873, worksheet.outputs_emissions_p20, 0.002); end
  def test_outputs_emissions_q20; assert_in_delta(0.20469621800887172, worksheet.outputs_emissions_q20, 0.002); end
  def test_outputs_emissions_r20; assert_in_delta(0.20158503013351772, worksheet.outputs_emissions_r20, 0.002); end
  def test_outputs_emissions_s20; assert_in_delta(0.19896088479459445, worksheet.outputs_emissions_s20, 0.002); end
  def test_outputs_emissions_t20; assert_in_delta(0.197789691095411, worksheet.outputs_emissions_t20, 0.002); end
  def test_outputs_emissions_u20; assert_in_delta(0.19862081834096584, worksheet.outputs_emissions_u20, 0.002); end
  def test_outputs_emissions_v20; assert_in_delta(0.1993503765533988, worksheet.outputs_emissions_v20, 0.002); end
  def test_outputs_emissions_w20; assert_in_delta(0.19801457887172647, worksheet.outputs_emissions_w20, 0.002); end
  def test_outputs_emissions_x20; assert_in_delta(0.19560345147942065, worksheet.outputs_emissions_x20, 0.002); end
  def test_outputs_emissions_c21; assert_equal("G.7", worksheet.outputs_emissions_c21); end
  def test_outputs_emissions_d21; assert_equal("Global Other", worksheet.outputs_emissions_d21); end
  def test_outputs_emissions_p21; assert_in_delta(0.0, (worksheet.outputs_emissions_p21||0), 0.002); end
  def test_outputs_emissions_q21; assert_in_delta(0.0, (worksheet.outputs_emissions_q21||0), 0.002); end
  def test_outputs_emissions_r21; assert_in_delta(0.0, (worksheet.outputs_emissions_r21||0), 0.002); end
  def test_outputs_emissions_s21; assert_in_delta(0.0, (worksheet.outputs_emissions_s21||0), 0.002); end
  def test_outputs_emissions_t21; assert_in_delta(0.0, (worksheet.outputs_emissions_t21||0), 0.002); end
  def test_outputs_emissions_u21; assert_in_delta(0.0, (worksheet.outputs_emissions_u21||0), 0.002); end
  def test_outputs_emissions_v21; assert_in_delta(0.0, (worksheet.outputs_emissions_v21||0), 0.002); end
  def test_outputs_emissions_w21; assert_in_delta(0.0, (worksheet.outputs_emissions_w21||0), 0.002); end
  def test_outputs_emissions_x21; assert_in_delta(0.0, (worksheet.outputs_emissions_x21||0), 0.002); end
  def test_outputs_emissions_d22; assert_equal("Total", worksheet.outputs_emissions_d22); end
  def test_outputs_emissions_p22; assert_in_epsilon(6.723317251588688, worksheet.outputs_emissions_p22, 0.002); end
  def test_outputs_emissions_q22; assert_in_epsilon(7.030458069856049, worksheet.outputs_emissions_q22, 0.002); end
  def test_outputs_emissions_r22; assert_in_epsilon(6.935137675356842, worksheet.outputs_emissions_r22, 0.002); end
  def test_outputs_emissions_s22; assert_in_epsilon(7.047104232485528, worksheet.outputs_emissions_s22, 0.002); end
  def test_outputs_emissions_t22; assert_in_epsilon(7.368335902211903, worksheet.outputs_emissions_t22, 0.002); end
  def test_outputs_emissions_u22; assert_in_epsilon(7.942778964997524, worksheet.outputs_emissions_u22, 0.002); end
  def test_outputs_emissions_v22; assert_in_epsilon(7.976586195610215, worksheet.outputs_emissions_v22, 0.002); end
  def test_outputs_emissions_w22; assert_in_epsilon(7.821713801957253, worksheet.outputs_emissions_w22, 0.002); end
  def test_outputs_emissions_x22; assert_in_epsilon(8.005558056563116, worksheet.outputs_emissions_x22, 0.002); end
  def test_outputs_emissions_c342; assert_equal("Method", worksheet.outputs_emissions_c342); end
  def test_outputs_emissions_h342; assert_in_epsilon(1990.0, worksheet.outputs_emissions_h342, 0.002); end
  def test_outputs_emissions_i342; assert_in_epsilon(1995.0, worksheet.outputs_emissions_i342, 0.002); end
  def test_outputs_emissions_j342; assert_in_epsilon(2000.0, worksheet.outputs_emissions_j342, 0.002); end
  def test_outputs_emissions_k342; assert_in_epsilon(2005.0, worksheet.outputs_emissions_k342, 0.002); end
  def test_outputs_emissions_l342; assert_in_epsilon(2010.0, worksheet.outputs_emissions_l342, 0.002); end
  def test_outputs_emissions_n342; assert_in_epsilon(2011.0, worksheet.outputs_emissions_n342, 0.002); end
  def test_outputs_emissions_p342; assert_in_epsilon(2011.0, worksheet.outputs_emissions_p342, 0.002); end
  def test_outputs_emissions_q342; assert_in_epsilon(2015.0, worksheet.outputs_emissions_q342, 0.002); end
  def test_outputs_emissions_r342; assert_in_epsilon(2020.0, worksheet.outputs_emissions_r342, 0.002); end
  def test_outputs_emissions_s342; assert_in_epsilon(2025.0, worksheet.outputs_emissions_s342, 0.002); end
  def test_outputs_emissions_t342; assert_in_epsilon(2030.0, worksheet.outputs_emissions_t342, 0.002); end
  def test_outputs_emissions_u342; assert_in_epsilon(2035.0, worksheet.outputs_emissions_u342, 0.002); end
  def test_outputs_emissions_v342; assert_in_epsilon(2040.0, worksheet.outputs_emissions_v342, 0.002); end
  def test_outputs_emissions_w342; assert_in_epsilon(2045.0, worksheet.outputs_emissions_w342, 0.002); end
  def test_outputs_emissions_x342; assert_in_epsilon(2050.0, worksheet.outputs_emissions_x342, 0.002); end
  def test_outputs_emissions_c343; assert_equal("Biochar", worksheet.outputs_emissions_c343); end
  def test_outputs_emissions_d343; assert_equal("GGR.biochar", worksheet.outputs_emissions_d343); end
  def test_outputs_emissions_f343; assert_equal("CO2", worksheet.outputs_emissions_f343); end
  def test_outputs_emissions_p343; assert_in_delta(0.0, (worksheet.outputs_emissions_p343||0), 0.002); end
  def test_outputs_emissions_q343; assert_in_delta(0.0, (worksheet.outputs_emissions_q343||0), 0.002); end
  def test_outputs_emissions_r343; assert_in_delta(0.0, (worksheet.outputs_emissions_r343||0), 0.002); end
  def test_outputs_emissions_s343; assert_in_delta(0.0, (worksheet.outputs_emissions_s343||0), 0.002); end
  def test_outputs_emissions_t343; assert_in_delta(0.0, (worksheet.outputs_emissions_t343||0), 0.002); end
  def test_outputs_emissions_u343; assert_in_delta(0.0, (worksheet.outputs_emissions_u343||0), 0.002); end
  def test_outputs_emissions_v343; assert_in_delta(0.0, (worksheet.outputs_emissions_v343||0), 0.002); end
  def test_outputs_emissions_w343; assert_in_delta(0.0, (worksheet.outputs_emissions_w343||0), 0.002); end
  def test_outputs_emissions_x343; assert_in_delta(0.0, (worksheet.outputs_emissions_x343||0), 0.002); end
  def test_outputs_emissions_c344; assert_equal("Air capture", worksheet.outputs_emissions_c344); end
  def test_outputs_emissions_d344; assert_equal("GGR.air.capture", worksheet.outputs_emissions_d344); end
  def test_outputs_emissions_f344; assert_equal("CO2", worksheet.outputs_emissions_f344); end
  def test_outputs_emissions_p344; assert_in_delta(0.0, (worksheet.outputs_emissions_p344||0), 0.002); end
  def test_outputs_emissions_q344; assert_in_delta(0.0, (worksheet.outputs_emissions_q344||0), 0.002); end
  def test_outputs_emissions_r344; assert_in_delta(0.0, (worksheet.outputs_emissions_r344||0), 0.002); end
  def test_outputs_emissions_s344; assert_in_delta(0.0, (worksheet.outputs_emissions_s344||0), 0.002); end
  def test_outputs_emissions_t344; assert_in_delta(0.0, (worksheet.outputs_emissions_t344||0), 0.002); end
  def test_outputs_emissions_u344; assert_in_delta(0.0, (worksheet.outputs_emissions_u344||0), 0.002); end
  def test_outputs_emissions_v344; assert_in_delta(0.0, (worksheet.outputs_emissions_v344||0), 0.002); end
  def test_outputs_emissions_w344; assert_in_delta(0.0, (worksheet.outputs_emissions_w344||0), 0.002); end
  def test_outputs_emissions_x344; assert_in_delta(0.0, (worksheet.outputs_emissions_x344||0), 0.002); end
  def test_outputs_emissions_c345; assert_equal("Ocean fertilisation", worksheet.outputs_emissions_c345); end
  def test_outputs_emissions_d345; assert_equal("GGR.ocean.fertilisation", worksheet.outputs_emissions_d345); end
  def test_outputs_emissions_f345; assert_equal("CO2", worksheet.outputs_emissions_f345); end
  def test_outputs_emissions_p345; assert_in_delta(0.0, (worksheet.outputs_emissions_p345||0), 0.002); end
  def test_outputs_emissions_q345; assert_in_delta(0.0, (worksheet.outputs_emissions_q345||0), 0.002); end
  def test_outputs_emissions_r345; assert_in_delta(0.0, (worksheet.outputs_emissions_r345||0), 0.002); end
  def test_outputs_emissions_s345; assert_in_delta(0.0, (worksheet.outputs_emissions_s345||0), 0.002); end
  def test_outputs_emissions_t345; assert_in_delta(0.0, (worksheet.outputs_emissions_t345||0), 0.002); end
  def test_outputs_emissions_u345; assert_in_delta(0.0, (worksheet.outputs_emissions_u345||0), 0.002); end
  def test_outputs_emissions_v345; assert_in_delta(0.0, (worksheet.outputs_emissions_v345||0), 0.002); end
  def test_outputs_emissions_w345; assert_in_delta(0.0, (worksheet.outputs_emissions_w345||0), 0.002); end
  def test_outputs_emissions_x345; assert_in_delta(0.0, (worksheet.outputs_emissions_x345||0), 0.002); end
  def test_outputs_emissions_c346; assert_equal("Enhanced weathering ocean", worksheet.outputs_emissions_c346); end
  def test_outputs_emissions_d346; assert_equal("GGR.enhanced.weathering.ocean", worksheet.outputs_emissions_d346); end
  def test_outputs_emissions_f346; assert_equal("CO2", worksheet.outputs_emissions_f346); end
  def test_outputs_emissions_p346; assert_in_delta(0.0, (worksheet.outputs_emissions_p346||0), 0.002); end
  def test_outputs_emissions_q346; assert_in_delta(0.0, (worksheet.outputs_emissions_q346||0), 0.002); end
  def test_outputs_emissions_r346; assert_in_delta(0.0, (worksheet.outputs_emissions_r346||0), 0.002); end
  def test_outputs_emissions_s346; assert_in_delta(0.0, (worksheet.outputs_emissions_s346||0), 0.002); end
  def test_outputs_emissions_t346; assert_in_delta(0.0, (worksheet.outputs_emissions_t346||0), 0.002); end
  def test_outputs_emissions_u346; assert_in_delta(0.0, (worksheet.outputs_emissions_u346||0), 0.002); end
  def test_outputs_emissions_v346; assert_in_delta(0.0, (worksheet.outputs_emissions_v346||0), 0.002); end
  def test_outputs_emissions_w346; assert_in_delta(0.0, (worksheet.outputs_emissions_w346||0), 0.002); end
  def test_outputs_emissions_x346; assert_in_delta(0.0, (worksheet.outputs_emissions_x346||0), 0.002); end
  def test_outputs_emissions_c347; assert_equal("Enhanced weathering terrestrial", worksheet.outputs_emissions_c347); end
  def test_outputs_emissions_d347; assert_equal("GGR.enhanced.weathering.terrestrial", worksheet.outputs_emissions_d347); end
  def test_outputs_emissions_f347; assert_equal("CO2", worksheet.outputs_emissions_f347); end
  def test_outputs_emissions_p347; assert_in_delta(0.0, (worksheet.outputs_emissions_p347||0), 0.002); end
  def test_outputs_emissions_q347; assert_in_delta(0.0, (worksheet.outputs_emissions_q347||0), 0.002); end
  def test_outputs_emissions_r347; assert_in_delta(0.0, (worksheet.outputs_emissions_r347||0), 0.002); end
  def test_outputs_emissions_s347; assert_in_delta(0.0, (worksheet.outputs_emissions_s347||0), 0.002); end
  def test_outputs_emissions_t347; assert_in_delta(0.0, (worksheet.outputs_emissions_t347||0), 0.002); end
  def test_outputs_emissions_u347; assert_in_delta(0.0, (worksheet.outputs_emissions_u347||0), 0.002); end
  def test_outputs_emissions_v347; assert_in_delta(0.0, (worksheet.outputs_emissions_v347||0), 0.002); end
  def test_outputs_emissions_w347; assert_in_delta(0.0, (worksheet.outputs_emissions_w347||0), 0.002); end
  def test_outputs_emissions_x347; assert_in_delta(0.0, (worksheet.outputs_emissions_x347||0), 0.002); end
  def test_outputs_emissions_h267; assert_in_delta(0.012219185474713169, worksheet.outputs_emissions_h267, 0.002); end
  def test_outputs_emissions_i267; assert_in_delta(0.01203682888170151, worksheet.outputs_emissions_i267, 0.002); end
  def test_outputs_emissions_j267; assert_in_delta(0.011848757243237622, worksheet.outputs_emissions_j267, 0.002); end
  def test_outputs_emissions_k267; assert_in_delta(0.012691091043429093, worksheet.outputs_emissions_k267, 0.002); end
  def test_outputs_emissions_l267; assert_in_delta(0.013268513817881094, worksheet.outputs_emissions_l267, 0.002); end
  def test_outputs_emissions_p267; assert_in_delta(0.008926820620866862, worksheet.outputs_emissions_p267, 0.002); end
  def test_outputs_emissions_q267; assert_in_delta(0.009355330028214303, worksheet.outputs_emissions_q267, 0.002); end
  def test_outputs_emissions_r267; assert_in_delta(0.009772295176209846, worksheet.outputs_emissions_r267, 0.002); end
  def test_outputs_emissions_s267; assert_in_delta(0.010203818083687977, worksheet.outputs_emissions_s267, 0.002); end
  def test_outputs_emissions_t267; assert_in_delta(0.010616334653504703, worksheet.outputs_emissions_t267, 0.002); end
  def test_outputs_emissions_u267; assert_in_delta(0.011119922911280425, worksheet.outputs_emissions_u267, 0.002); end
  def test_outputs_emissions_v267; assert_in_delta(0.011634688406449534, worksheet.outputs_emissions_v267, 0.002); end
  def test_outputs_emissions_w267; assert_in_delta(0.012046632311302838, worksheet.outputs_emissions_w267, 0.002); end
  def test_outputs_emissions_x267; assert_in_delta(0.012371318600222933, worksheet.outputs_emissions_x267, 0.002); end
  def test_outputs_emissions_y267; assert_in_delta(0.012813236164904892, worksheet.outputs_emissions_y267, 0.002); end
  def test_outputs_emissions_z267; assert_in_delta(0.013229428229397374, worksheet.outputs_emissions_z267, 0.002); end
  def test_outputs_emissions_aa267; assert_in_delta(0.013647120487936164, worksheet.outputs_emissions_aa267, 0.002); end
  def test_outputs_emissions_ab267; assert_in_delta(0.014097656851627265, worksheet.outputs_emissions_ab267, 0.002); end
  def test_outputs_emissions_ac267; assert_in_delta(0.014551236855872876, worksheet.outputs_emissions_ac267, 0.002); end
  def test_outputs_emissions_ad267; assert_in_delta(0.01501802002793357, worksheet.outputs_emissions_ad267, 0.002); end
  def test_outputs_emissions_ae267; assert_in_delta(0.015502139153077132, worksheet.outputs_emissions_ae267, 0.002); end
  def test_outputs_emissions_af267; assert_in_delta(0.01599811768631, worksheet.outputs_emissions_af267, 0.002); end
  def test_outputs_emissions_ag267; assert_in_delta(0.016509068825603213, worksheet.outputs_emissions_ag267, 0.002); end
  def test_outputs_emissions_ah267; assert_in_delta(0.017035617429941904, worksheet.outputs_emissions_ah267, 0.002); end
  def test_outputs_emissions_c258; assert_equal("Column1", worksheet.outputs_emissions_c258); end
  def test_outputs_emissions_d258; assert_equal("IPCC Sector", worksheet.outputs_emissions_d258); end
  def test_outputs_emissions_h258; assert_equal("1990", worksheet.outputs_emissions_h258); end
  def test_outputs_emissions_i258; assert_equal("1995", worksheet.outputs_emissions_i258); end
  def test_outputs_emissions_j258; assert_equal("2000", worksheet.outputs_emissions_j258); end
  def test_outputs_emissions_k258; assert_equal("2005", worksheet.outputs_emissions_k258); end
  def test_outputs_emissions_l258; assert_equal("2010", worksheet.outputs_emissions_l258); end
  def test_outputs_emissions_p258; assert_equal("2011", worksheet.outputs_emissions_p258); end
  def test_outputs_emissions_q258; assert_equal("2015", worksheet.outputs_emissions_q258); end
  def test_outputs_emissions_r258; assert_equal("2020", worksheet.outputs_emissions_r258); end
  def test_outputs_emissions_s258; assert_equal("2025", worksheet.outputs_emissions_s258); end
  def test_outputs_emissions_t258; assert_equal("2030", worksheet.outputs_emissions_t258); end
  def test_outputs_emissions_u258; assert_equal("2035", worksheet.outputs_emissions_u258); end
  def test_outputs_emissions_v258; assert_equal("2040", worksheet.outputs_emissions_v258); end
  def test_outputs_emissions_w258; assert_equal("2045", worksheet.outputs_emissions_w258); end
  def test_outputs_emissions_x258; assert_equal("2050", worksheet.outputs_emissions_x258); end
  def test_outputs_emissions_y258; assert_equal("2055", worksheet.outputs_emissions_y258); end
  def test_outputs_emissions_z258; assert_equal("2060", worksheet.outputs_emissions_z258); end
  def test_outputs_emissions_aa258; assert_equal("2065", worksheet.outputs_emissions_aa258); end
  def test_outputs_emissions_ab258; assert_equal("2070", worksheet.outputs_emissions_ab258); end
  def test_outputs_emissions_ac258; assert_equal("2075", worksheet.outputs_emissions_ac258); end
  def test_outputs_emissions_ad258; assert_equal("2080", worksheet.outputs_emissions_ad258); end
  def test_outputs_emissions_ae258; assert_equal("2085", worksheet.outputs_emissions_ae258); end
  def test_outputs_emissions_af258; assert_equal("2090", worksheet.outputs_emissions_af258); end
  def test_outputs_emissions_ag258; assert_equal("2095", worksheet.outputs_emissions_ag258); end
  def test_outputs_emissions_ah258; assert_equal("2100", worksheet.outputs_emissions_ah258); end
  def test_outputs_emissions_c259; assert_equal("G.1A", worksheet.outputs_emissions_c259); end
  def test_outputs_emissions_d259; assert_equal("Global Fuel Combustion", worksheet.outputs_emissions_d259); end
  def test_outputs_emissions_h259; assert_in_delta(0.0009130686233989812, worksheet.outputs_emissions_h259, 0.002); end
  def test_outputs_emissions_i259; assert_in_delta(0.0009965133809872679, worksheet.outputs_emissions_i259, 0.002); end
  def test_outputs_emissions_j259; assert_in_delta(0.001054643547268351, worksheet.outputs_emissions_j259, 0.002); end
  def test_outputs_emissions_k259; assert_in_delta(0.001146013024618166, worksheet.outputs_emissions_k259, 0.002); end
  def test_outputs_emissions_l259; assert_in_delta(0.0012359546542829699, worksheet.outputs_emissions_l259, 0.002); end
  def test_outputs_emissions_p259; assert_in_delta(0.0010039539195364291, worksheet.outputs_emissions_p259, 0.002); end
  def test_outputs_emissions_q259; assert_in_delta(0.001162690206668965, worksheet.outputs_emissions_q259, 0.002); end
  def test_outputs_emissions_r259; assert_in_delta(0.0012976240100534054, worksheet.outputs_emissions_r259, 0.002); end
  def test_outputs_emissions_s259; assert_in_delta(0.0014616768086251819, worksheet.outputs_emissions_s259, 0.002); end
  def test_outputs_emissions_t259; assert_in_delta(0.0015724063476109257, worksheet.outputs_emissions_t259, 0.002); end
  def test_outputs_emissions_u259; assert_in_delta(0.0017093957171174243, worksheet.outputs_emissions_u259, 0.002); end
  def test_outputs_emissions_v259; assert_in_delta(0.0018754959454228138, worksheet.outputs_emissions_v259, 0.002); end
  def test_outputs_emissions_w259; assert_in_delta(0.0020552868247790505, worksheet.outputs_emissions_w259, 0.002); end
  def test_outputs_emissions_x259; assert_in_delta(0.0022297967260135458, worksheet.outputs_emissions_x259, 0.002); end
  def test_outputs_emissions_c260; assert_equal("G.1B", worksheet.outputs_emissions_c260); end
  def test_outputs_emissions_d260; assert_equal("Global Fugitive Emissions from Fuels", worksheet.outputs_emissions_d260); end
  def test_outputs_emissions_h260; assert_in_delta(0.0, (worksheet.outputs_emissions_h260||0), 0.002); end
  def test_outputs_emissions_i260; assert_in_delta(0.0, (worksheet.outputs_emissions_i260||0), 0.002); end
  def test_outputs_emissions_j260; assert_in_delta(0.0, (worksheet.outputs_emissions_j260||0), 0.002); end
  def test_outputs_emissions_k260; assert_in_delta(0.0, (worksheet.outputs_emissions_k260||0), 0.002); end
  def test_outputs_emissions_l260; assert_in_delta(0.0, (worksheet.outputs_emissions_l260||0), 0.002); end
  def test_outputs_emissions_p260; assert_in_delta(0.0, (worksheet.outputs_emissions_p260||0), 0.002); end
  def test_outputs_emissions_q260; assert_in_delta(0.0, (worksheet.outputs_emissions_q260||0), 0.002); end
  def test_outputs_emissions_r260; assert_in_delta(0.0, (worksheet.outputs_emissions_r260||0), 0.002); end
  def test_outputs_emissions_s260; assert_in_delta(0.0, (worksheet.outputs_emissions_s260||0), 0.002); end
  def test_outputs_emissions_t260; assert_in_delta(0.0, (worksheet.outputs_emissions_t260||0), 0.002); end
  def test_outputs_emissions_u260; assert_in_delta(0.0, (worksheet.outputs_emissions_u260||0), 0.002); end
  def test_outputs_emissions_v260; assert_in_delta(0.0, (worksheet.outputs_emissions_v260||0), 0.002); end
  def test_outputs_emissions_w260; assert_in_delta(0.0, (worksheet.outputs_emissions_w260||0), 0.002); end
  def test_outputs_emissions_x260; assert_in_delta(0.0, (worksheet.outputs_emissions_x260||0), 0.002); end
  def test_outputs_emissions_c261; assert_equal("G.2", worksheet.outputs_emissions_c261); end
  def test_outputs_emissions_d261; assert_equal("Global Industrial Processes", worksheet.outputs_emissions_d261); end
  def test_outputs_emissions_h261; assert_in_delta(0.0010588904336770641, worksheet.outputs_emissions_h261, 0.002); end
  def test_outputs_emissions_i261; assert_in_delta(0.001058384026600717, worksheet.outputs_emissions_i261, 0.002); end
  def test_outputs_emissions_j261; assert_in_delta(0.0008160774983504037, worksheet.outputs_emissions_j261, 0.002); end
  def test_outputs_emissions_k261; assert_in_delta(0.0007678739913186566, worksheet.outputs_emissions_k261, 0.002); end
  def test_outputs_emissions_l261; assert_in_delta(0.0007341236710068264, worksheet.outputs_emissions_l261, 0.002); end
  def test_outputs_emissions_p261; assert_in_delta(0.00044470400000000014, worksheet.outputs_emissions_p261, 0.002); end
  def test_outputs_emissions_q261; assert_in_delta(0.0005348662165563738, worksheet.outputs_emissions_q261, 0.002); end
  def test_outputs_emissions_r261; assert_in_delta(0.0005765673950914343, worksheet.outputs_emissions_r261, 0.002); end
  def test_outputs_emissions_s261; assert_in_delta(0.0006171911979531631, worksheet.outputs_emissions_s261, 0.002); end
  def test_outputs_emissions_t261; assert_in_delta(0.0006595627692284817, worksheet.outputs_emissions_t261, 0.002); end
  def test_outputs_emissions_u261; assert_in_delta(0.0006997801350981987, worksheet.outputs_emissions_u261, 0.002); end
  def test_outputs_emissions_v261; assert_in_delta(0.0007439435095857845, worksheet.outputs_emissions_v261, 0.002); end
  def test_outputs_emissions_w261; assert_in_delta(0.000789493995496394, worksheet.outputs_emissions_w261, 0.002); end
  def test_outputs_emissions_x261; assert_in_delta(0.0008315802818913109, worksheet.outputs_emissions_x261, 0.002); end
  def test_outputs_emissions_c262; assert_equal("G.3", worksheet.outputs_emissions_c262); end
  def test_outputs_emissions_d262; assert_equal("Global Solvent and Other Product Use", worksheet.outputs_emissions_d262); end
  def test_outputs_emissions_h262; assert_in_delta(0.0, (worksheet.outputs_emissions_h262||0), 0.002); end
  def test_outputs_emissions_i262; assert_in_delta(0.0, (worksheet.outputs_emissions_i262||0), 0.002); end
  def test_outputs_emissions_j262; assert_in_delta(0.0, (worksheet.outputs_emissions_j262||0), 0.002); end
  def test_outputs_emissions_k262; assert_in_delta(0.0, (worksheet.outputs_emissions_k262||0), 0.002); end
  def test_outputs_emissions_l262; assert_in_delta(0.0, (worksheet.outputs_emissions_l262||0), 0.002); end
  def test_outputs_emissions_p262; assert_in_delta(0.0, (worksheet.outputs_emissions_p262||0), 0.002); end
  def test_outputs_emissions_q262; assert_in_delta(0.0, (worksheet.outputs_emissions_q262||0), 0.002); end
  def test_outputs_emissions_r262; assert_in_delta(0.0, (worksheet.outputs_emissions_r262||0), 0.002); end
  def test_outputs_emissions_s262; assert_in_delta(0.0, (worksheet.outputs_emissions_s262||0), 0.002); end
  def test_outputs_emissions_t262; assert_in_delta(0.0, (worksheet.outputs_emissions_t262||0), 0.002); end
  def test_outputs_emissions_u262; assert_in_delta(0.0, (worksheet.outputs_emissions_u262||0), 0.002); end
  def test_outputs_emissions_v262; assert_in_delta(0.0, (worksheet.outputs_emissions_v262||0), 0.002); end
  def test_outputs_emissions_w262; assert_in_delta(0.0, (worksheet.outputs_emissions_w262||0), 0.002); end
  def test_outputs_emissions_x262; assert_in_delta(0.0, (worksheet.outputs_emissions_x262||0), 0.002); end
  def test_outputs_emissions_c263; assert_equal("G.4", worksheet.outputs_emissions_c263); end
  def test_outputs_emissions_d263; assert_equal("Global Agriculture", worksheet.outputs_emissions_d263); end
  def test_outputs_emissions_h263; assert_in_delta(0.009956991391139623, worksheet.outputs_emissions_h263, 0.002); end
  def test_outputs_emissions_i263; assert_in_delta(0.009679164975862868, worksheet.outputs_emissions_i263, 0.002); end
  def test_outputs_emissions_j263; assert_in_delta(0.009651220745010868, worksheet.outputs_emissions_j263, 0.002); end
  def test_outputs_emissions_k263; assert_in_delta(0.01042663335693185, worksheet.outputs_emissions_k263, 0.002); end
  def test_outputs_emissions_l263; assert_in_delta(0.010931037319002792, worksheet.outputs_emissions_l263, 0.002); end
  def test_outputs_emissions_p263; assert_in_delta(0.007110764527741934, worksheet.outputs_emissions_p263, 0.002); end
  def test_outputs_emissions_q263; assert_in_delta(0.007283385734511223, worksheet.outputs_emissions_q263, 0.002); end
  def test_outputs_emissions_r263; assert_in_delta(0.007509676333579284, worksheet.outputs_emissions_r263, 0.002); end
  def test_outputs_emissions_s263; assert_in_delta(0.007723363008701273, worksheet.outputs_emissions_s263, 0.002); end
  def test_outputs_emissions_t263; assert_in_delta(0.00796827526528211, worksheet.outputs_emissions_t263, 0.002); end
  def test_outputs_emissions_u263; assert_in_delta(0.008277111691583468, worksheet.outputs_emissions_u263, 0.002); end
  def test_outputs_emissions_v263; assert_in_delta(0.008565324438359723, worksheet.outputs_emissions_v263, 0.002); end
  def test_outputs_emissions_w263; assert_in_delta(0.008741604217574719, worksheet.outputs_emissions_w263, 0.002); end
  def test_outputs_emissions_x263; assert_in_delta(0.008843453990792512, worksheet.outputs_emissions_x263, 0.002); end
  def test_outputs_emissions_c264; assert_equal("G.5", worksheet.outputs_emissions_c264); end
  def test_outputs_emissions_d264; assert_equal("Global Land Use, Land-Use Change and Forestry", worksheet.outputs_emissions_d264); end
  def test_outputs_emissions_h264; assert_in_delta(0.0, (worksheet.outputs_emissions_h264||0), 0.002); end
  def test_outputs_emissions_i264; assert_in_delta(0.0, (worksheet.outputs_emissions_i264||0), 0.002); end
  def test_outputs_emissions_j264; assert_in_delta(0.0, (worksheet.outputs_emissions_j264||0), 0.002); end
  def test_outputs_emissions_k264; assert_in_delta(0.0, (worksheet.outputs_emissions_k264||0), 0.002); end
  def test_outputs_emissions_l264; assert_in_delta(0.0, (worksheet.outputs_emissions_l264||0), 0.002); end
  def test_outputs_emissions_p264; assert_in_delta(0.0, (worksheet.outputs_emissions_p264||0), 0.002); end
  def test_outputs_emissions_q264; assert_in_delta(0.0, (worksheet.outputs_emissions_q264||0), 0.002); end
  def test_outputs_emissions_r264; assert_in_delta(0.0, (worksheet.outputs_emissions_r264||0), 0.002); end
  def test_outputs_emissions_s264; assert_in_delta(0.0, (worksheet.outputs_emissions_s264||0), 0.002); end
  def test_outputs_emissions_t264; assert_in_delta(0.0, (worksheet.outputs_emissions_t264||0), 0.002); end
  def test_outputs_emissions_u264; assert_in_delta(0.0, (worksheet.outputs_emissions_u264||0), 0.002); end
  def test_outputs_emissions_v264; assert_in_delta(0.0, (worksheet.outputs_emissions_v264||0), 0.002); end
  def test_outputs_emissions_w264; assert_in_delta(0.0, (worksheet.outputs_emissions_w264||0), 0.002); end
  def test_outputs_emissions_x264; assert_in_delta(0.0, (worksheet.outputs_emissions_x264||0), 0.002); end
  def test_outputs_emissions_c265; assert_equal("G.6", worksheet.outputs_emissions_c265); end
  def test_outputs_emissions_d265; assert_equal("Global Waste", worksheet.outputs_emissions_d265); end
  def test_outputs_emissions_h265; assert_in_delta(0.0002902350264975083, worksheet.outputs_emissions_h265, 0.002); end
  def test_outputs_emissions_i265; assert_in_delta(0.0003027664982506464, worksheet.outputs_emissions_i265, 0.002); end
  def test_outputs_emissions_j265; assert_in_delta(0.0003268154526079815, worksheet.outputs_emissions_j265, 0.002); end
  def test_outputs_emissions_k265; assert_in_delta(0.0003505706705604558, worksheet.outputs_emissions_k265, 0.002); end
  def test_outputs_emissions_l265; assert_in_delta(0.0003673981735885, worksheet.outputs_emissions_l265, 0.002); end
  def test_outputs_emissions_p265; assert_in_delta(0.0003673981735885, worksheet.outputs_emissions_p265, 0.002); end
  def test_outputs_emissions_q265; assert_in_delta(0.00037438787047774, worksheet.outputs_emissions_q265, 0.002); end
  def test_outputs_emissions_r265; assert_in_delta(0.00038842743748572137, worksheet.outputs_emissions_r265, 0.002); end
  def test_outputs_emissions_s265; assert_in_delta(0.0004015870684083589, worksheet.outputs_emissions_s265, 0.002); end
  def test_outputs_emissions_t265; assert_in_delta(0.0004160902713831881, worksheet.outputs_emissions_t265, 0.002); end
  def test_outputs_emissions_u265; assert_in_delta(0.00043363536748133364, worksheet.outputs_emissions_u265, 0.002); end
  def test_outputs_emissions_v265; assert_in_delta(0.00044992451308121454, worksheet.outputs_emissions_v265, 0.002); end
  def test_outputs_emissions_w265; assert_in_delta(0.0004602472734526739, worksheet.outputs_emissions_w265, 0.002); end
  def test_outputs_emissions_x265; assert_in_delta(0.00046648760152556495, worksheet.outputs_emissions_x265, 0.002); end
  def test_outputs_emissions_c266; assert_equal("G.7", worksheet.outputs_emissions_c266); end
  def test_outputs_emissions_d266; assert_equal("Global Other", worksheet.outputs_emissions_d266); end
  def test_outputs_emissions_h266; assert_in_delta(0.0, (worksheet.outputs_emissions_h266||0), 0.002); end
  def test_outputs_emissions_i266; assert_in_delta(0.0, (worksheet.outputs_emissions_i266||0), 0.002); end
  def test_outputs_emissions_j266; assert_in_delta(0.0, (worksheet.outputs_emissions_j266||0), 0.002); end
  def test_outputs_emissions_k266; assert_in_delta(0.0, (worksheet.outputs_emissions_k266||0), 0.002); end
  def test_outputs_emissions_l266; assert_in_delta(0.0, (worksheet.outputs_emissions_l266||0), 0.002); end
  def test_outputs_emissions_p266; assert_in_delta(0.0, (worksheet.outputs_emissions_p266||0), 0.002); end
  def test_outputs_emissions_q266; assert_in_delta(0.0, (worksheet.outputs_emissions_q266||0), 0.002); end
  def test_outputs_emissions_r266; assert_in_delta(0.0, (worksheet.outputs_emissions_r266||0), 0.002); end
  def test_outputs_emissions_s266; assert_in_delta(0.0, (worksheet.outputs_emissions_s266||0), 0.002); end
  def test_outputs_emissions_t266; assert_in_delta(0.0, (worksheet.outputs_emissions_t266||0), 0.002); end
  def test_outputs_emissions_u266; assert_in_delta(0.0, (worksheet.outputs_emissions_u266||0), 0.002); end
  def test_outputs_emissions_v266; assert_in_delta(0.0, (worksheet.outputs_emissions_v266||0), 0.002); end
  def test_outputs_emissions_w266; assert_in_delta(0.0, (worksheet.outputs_emissions_w266||0), 0.002); end
  def test_outputs_emissions_x266; assert_in_delta(0.0, (worksheet.outputs_emissions_x266||0), 0.002); end
  def test_outputs_emissions_d267; assert_equal("Total", worksheet.outputs_emissions_d267); end
  def test_outputs_emissions_d268; assert_equal("Cumulative emissions", worksheet.outputs_emissions_d268); end
  def test_outputs_emissions_p268; assert_in_delta(0.008926820620866862, worksheet.outputs_emissions_p268, 0.002); end
  def test_outputs_emissions_q268; assert_in_delta(0.018282150649081164, worksheet.outputs_emissions_q268, 0.002); end
  def test_outputs_emissions_r268; assert_in_delta(0.02805444582529101, worksheet.outputs_emissions_r268, 0.002); end
  def test_outputs_emissions_s268; assert_in_delta(0.03825826390897899, worksheet.outputs_emissions_s268, 0.002); end
  def test_outputs_emissions_t268; assert_in_delta(0.04887459856248369, worksheet.outputs_emissions_t268, 0.002); end
  def test_outputs_emissions_u268; assert_in_delta(0.05999452147376411, worksheet.outputs_emissions_u268, 0.002); end
  def test_outputs_emissions_v268; assert_in_delta(0.07162920988021365, worksheet.outputs_emissions_v268, 0.002); end
  def test_outputs_emissions_w268; assert_in_delta(0.08367584219151648, worksheet.outputs_emissions_w268, 0.002); end
  def test_outputs_emissions_x268; assert_in_delta(0.09604716079173942, worksheet.outputs_emissions_x268, 0.002); end
  def test_detailed_lever_guides_b69; assert_equal("Lever", worksheet.detailed_lever_guides_b69); end
  def test_detailed_lever_guides_c69; assert_equal("What is it", worksheet.detailed_lever_guides_c69); end
  def test_detailed_lever_guides_d69; assert_equal("Key constraints", worksheet.detailed_lever_guides_d69); end
  def test_detailed_lever_guides_e69; assert_equal("State of development of this technique", worksheet.detailed_lever_guides_e69); end
  def test_detailed_lever_guides_b70; assert_equal("Biochar", worksheet.detailed_lever_guides_b70); end
  def test_detailed_lever_guides_c70; assert_equal("Biomass contains carbon taken from the carbon dioxide air through the process of photosynthesis. Heating biomass in an oxygen-deficient environment results in incomplete combustion and the production of a char that has high carbon content, some of which is ‘recalcitrant’ (meaning resistant to decomposing and being re-released back into the atmosphere). If this char is buried, then this carbon is sequestered away from the atmosphere. ", worksheet.detailed_lever_guides_c70); end
  def test_detailed_lever_guides_d70; assert_equal("• Carbon stability: the proportion of recalcitrant carbon in a biochar is a function of many factors: the biomass feedstock, the method of producing the biochar, and the characteristics of the soil into which the biochar is placed. \r• Dispute for natural resources: the availability of biomass to produce the biochar.\r• Impacts on human health: Biochar dust poses a potential hazard to human health.\r• Impacts on soil biota: The addition of biochar alters the property of the soil. In many cases it can lead to enhanced crop yields. However, it can also lead to increased production of methane, and cause impacts on the biological diversity of the soil.\r• Albedo effect: the addition of large amounts of biochar to soils may result in reduced albedo (ability of the surface of the earth to reflect heat energy from the sun), thereby counteracting some of the cooling benefit of removing carbon dioxide.\r• Fire impacts: if a land area into which biochar has been added is affected by fire (e.g. fire use as an agronomical practice, accidental fire, or even as the result of a warming climate), then the carbon stored may be released back into the atmosphere.", worksheet.detailed_lever_guides_d70); end
  def test_detailed_lever_guides_e70; assert_equal("Biochar is already routinely produced for use as charcoal and as a soil improver. As such, large-scale production is already practised. What is less well-established is the long-term characterisation of the behaviour of biochar as a means of storing carbon away from the atmosphere. ", worksheet.detailed_lever_guides_e70); end
  def test_detailed_lever_guides_b71; assert_equal("Direct air capture", worksheet.detailed_lever_guides_b71); end
  def test_detailed_lever_guides_c71; assert_equal("Direct air capture (DAC) involves using chemical processes to directly capture carbon dioxide from ambient air. Typically this will involve using an alkaline material (such as sodium hydroxide) which reacts with carbon dioxide, or a material which adsorbs the carbon dioxide. The carbon dioxide is then stored underground in suitable geological formations. DAC differs from carbon capture and storage (CCS), in that CCS involves capturing carbon dioxide from large stationary sources, such as power plants or cement plants (4-30% concentration) rather than from ambient air (~0.04% concentration). ", worksheet.detailed_lever_guides_c71); end
  def test_detailed_lever_guides_d71; assert_equal("• Energy penalty: this is the amount of energy that is required to run such systems, which may counteract the carbon savings made through the DAC process.\r• Physical constraints: given the low initial concentration of carbon dioxide in ambient air, it is necessary to treat 1.4 million cubic metres of air to remove a single tonne of carbon dioxide. These volumes indicate that the scale of the machinery is likely to be large with significant resource implications.\r• Water: many, but not all, DAC techniques have a significant water requirement.\r• Costs: it is unlikely that DAC from ambient air will be cost competitive with CCS, as the starting concentration of the carbon dioxide feedstock is so much lower. It would make economic sense to first exhaust all potential CCS opportunities before applying DAC. The exception to this would be if large quantities of extra low-carbon energy ¬¬¬(known as “stranded energy”) were available in locations close to geological storage sites.\r• Geological storage: DAC will compete with geological storage space with CCS from large stationary plants.", worksheet.detailed_lever_guides_d71); end
  def test_detailed_lever_guides_e71; assert_equal("There are about a dozen proposed DAC technologies – not all of them in the public domain – which have been demonstrated at small scales. Technically the process works – it can be demonstrated that carbon dioxide can be removed from air in the way envisaged. Indeed, the removal of carbon dioxide from ambient air in submarines and spacecraft has been practised for decades. The real question is about the carbon balance of the systems (is more carbon dioxide emitted during the life-cycle of the technology than is removed by the process) and the economics.", worksheet.detailed_lever_guides_e71); end
  def test_detailed_lever_guides_b72; assert_equal("Ocean fertilisation", worksheet.detailed_lever_guides_b72); end
  def test_detailed_lever_guides_c72; assert_equal("Ocean fertilisation (OF) involves enhancing the biological capacity of the oceans to draw down more carbon dioxide from the atmosphere. Photosynthesising organisms incorporate carbon dioxide from the air into their cells as they grow and multiply. Some of this carbon will eventually end up in the deep ocean where it will be effectively stored away from the atmosphere. Some parts of the ocean are deficient in micronutrients such as iron, which organisms need to grow. By adding iron filings, more photosynthesis can occur and more carbon can be transported from the atmosphere to the deep ocean. ", worksheet.detailed_lever_guides_c72); end
  def test_detailed_lever_guides_d72; assert_equal("• Biological constraints: The effectiveness of OF is limited by the area of ocean that is deficient in micronutrients. Once iron is no longer a constraint, photosynthetic activity can increase up to the point that the next constraining factor limits growth (typically the availability of nitrate).\r• Logistics: some proponents of OF have suggested that it may be possible to boost macronutrients such as nitrate as a means of enhancing photosynthetic capacity. While that may be possible, the quantity of material that is required to boost photosynthesis may be impractical.\r• Impacts on marine biodiversity: serious environmental concerns have been raised about OF. The introduction of micronutrients into the ocean will alter its ecology, favouring certain types of organism over others that thrive in low-iron waters. In addition, increased photosynthetic activity could lead to increased ocean acidification and a decrease in dissolved oxygen.\r• Efficacy: it is not sufficient for photosynthetic activity to just increase – for the technique to have a positive impact on the climate, the carbon must be transferred from the atmosphere to the deep ocean. Some studies show that a large fraction of the carbon is released back into the atmosphere as the algae die or enter the food chain, so the efficacy of the technique has been questioned. \r• Governance: the governance issues relating to OF are complicated. Rules established by the London Convention/London Protocol (LC/LP) restrict activities to small-scale scientific experiments, while the Convention on Biological Diversity also seeks to restrict such activities.", worksheet.detailed_lever_guides_d72); end
  def test_detailed_lever_guides_e72; assert_equal("A small number of OF experiments have been undertaken – most with approval of national research establishments, but some without such approval. Those experiments that have been undertaken without approval have been highly controversial and have created a backlash against the technique as a whole. Moreover, the results of the officially approved OF experiments have indicated, at least in some instances, that there has been net carbon drawdown, but there are still many unanswered questions as to the long-term effects of this technique on both carbon removal and ecological consequences. ", worksheet.detailed_lever_guides_e72); end
  def test_detailed_lever_guides_b73; assert_equal("Enhanced weathering (oceanic)", worksheet.detailed_lever_guides_b73); end
  def test_detailed_lever_guides_c73; assert_equal("Enhanced weathering – oceanic (EW-O) seeks to enhance the chemical capacity of the oceans to draw down carbon dioxide by introducing alkaline materials that increase the pH of the ocean and allow more carbon to be stored as dissolved inorganic carbon (DIC) in the ocean. Various proposed methods have been suggested – adding limestone (calcium carbonate), hydrated lime (calcium hydroxide) or finely ground olivine (magnesium silicate), or by electrolysis of seawater.", worksheet.detailed_lever_guides_c73); end
  def test_detailed_lever_guides_d73; assert_equal("• Impacts on ocean biota: The increase in pH will affect ecosystems as certain organisms will be more suited to it than others. However, adding alkaline materials could counteract the ocean acidification process that has been caused by higher levels of carbon dioxide in the atmosphere and affects some species. Calcium and magnesium ion concentrations will become higher than historical levels, though.\r• Energy penalty and costs: the process for obtaining alkaline materials is likely to be costly both in economic and energy terms. There are few naturally occurring deposits of alkaline materials that could be added to the ocean, but it may be possible to manufacture such materials.\r• Logistics: to have a real impact on the concentration of carbon dioxide in the atmosphere would require a massive mining, mineral processing and distribution industry.\r• Governance: the application of EW-O would involve governance challenges, as the ocean is a global commons (an international global resource). An amendment (currently in progress) to the LC/LP would permit small scale research activities, but deployment would require further amendments. ", worksheet.detailed_lever_guides_d73); end
  def test_detailed_lever_guides_e73; assert_equal("EW-O has been studied in the laboratory and has been modelled, but it has not been researched in the open environment. The processes required to generate alkaline materials are well established and practised at an industrial scale, but the application of alkaline materials to the ocean has not been undertaken. The principles of how DIC behaves in the ocean in response to increased pH is also well understood, but what are not well understood – and cannot be established without experimentation – are the impacts on the environment – both positive and negative – of increasing ocean pH. ", worksheet.detailed_lever_guides_e73); end
  def test_detailed_lever_guides_b74; assert_equal("Enhanced weathering (terrestial)", worksheet.detailed_lever_guides_b74); end
  def test_detailed_lever_guides_c74; assert_equal("As silicate minerals weather, they absorb carbon dioxide from the atmosphere and store it in carbonate minerals. Enhanced weathering – terrestrial (EW-T) seeks to accelerate this natural process, which is usually very slow. The main proposed method involves grinding minerals like olivine (magnesium silicate) into a fine dust, which will react more quickly because of the higher surface-area-to-volume ratio.", worksheet.detailed_lever_guides_c74); end
  def test_detailed_lever_guides_d74; assert_equal("• Energy penalty and costs: the energy and cost requirements for grinding appropriate minerals sufficiently are high.\r• Impacts on human health: the particle size to which such minerals need to be ground to is often smaller than 10 microns in diameter - a size which can cause harm to health.\r• Geological constraints: there is an upper limit as to the amount of carbon dioxide that can be sequestered via this method, based on the saturation state of silicic acid that is produced when the magnesium silicate reacts.\r• Land use impacts: this technique will affect soils, for example by introducing trace metals present in the olivine, changing the pH. The places currently identified as most suitable for enhanced weathering (tropical areas that have high rainfall and high temperatures) are also some of the most important areas for biodiversity globally. \r• Transboundary effects: while EW-T would occur on territory under the jurisdiction of individual states, runoff from EW-T could have transboundary effects by altering the pH of river systems and potentially enhancing the saturation state of silicic acid in coastal waters. ", worksheet.detailed_lever_guides_d74); end
  def test_detailed_lever_guides_e74; assert_equal("EW-T has been studied in the laboratory and has been modelled, but it has had little research in the open environment. Proponents of EW-T have sold some ground olivine as a soil additive, whilst marketing it as a means of removing carbon dioxide from the atmosphere. Technical and theoretical modelling of the particle sizes indicate that while there would be some carbon dioxide drawdown, it is far less than has been claimed. ", worksheet.detailed_lever_guides_e74); end
  def test_detailed_lever_guides_b5; assert_equal("Lever", worksheet.detailed_lever_guides_b5); end
  def test_detailed_lever_guides_c5; assert_equal("Code", worksheet.detailed_lever_guides_c5); end
  def test_detailed_lever_guides_d5; assert_equal("Situation today", worksheet.detailed_lever_guides_d5); end
  def test_detailed_lever_guides_e5; assert_equal("Chosen level description", worksheet.detailed_lever_guides_e5); end
  def test_detailed_lever_guides_f5; assert_equal("Energy supply / demand from choice by 2050", worksheet.detailed_lever_guides_f5); end
  def test_detailed_lever_guides_g5; assert_equal("Interactions with other levers", worksheet.detailed_lever_guides_g5); end
  def test_detailed_lever_guides_h5; assert_equal("Level 1 short description", worksheet.detailed_lever_guides_h5); end
  def test_detailed_lever_guides_i5; assert_equal("Level 1 longer description", worksheet.detailed_lever_guides_i5); end
  def test_detailed_lever_guides_j5; assert_equal("Level 2 short description", worksheet.detailed_lever_guides_j5); end
  def test_detailed_lever_guides_k5; assert_equal("Level 2 longer description", worksheet.detailed_lever_guides_k5); end
  def test_detailed_lever_guides_l5; assert_equal("Level 3 short description", worksheet.detailed_lever_guides_l5); end
  def test_detailed_lever_guides_m5; assert_equal("Level 3 longer description", worksheet.detailed_lever_guides_m5); end
  def test_detailed_lever_guides_n5; assert_equal("Level 4 short description", worksheet.detailed_lever_guides_n5); end
  def test_detailed_lever_guides_o5; assert_equal("Level 4 longer description", worksheet.detailed_lever_guides_o5); end
  def test_detailed_lever_guides_b6; assert_equal("Global population", worksheet.detailed_lever_guides_b6); end
  def test_detailed_lever_guides_d6; assert_equal("In 2010 the world population was around 6.9 billion.", worksheet.detailed_lever_guides_d6); end
  def test_detailed_lever_guides_g6; assert_equal("This lever also drives the total food consumption, total buildings demand and total transport demand.", worksheet.detailed_lever_guides_g6); end
  def test_detailed_lever_guides_h6; assert_equal("In 2050 the world population rises to around 10.9 billion.", worksheet.detailed_lever_guides_h6); end
  def test_detailed_lever_guides_i6; assert_equal("In 2050 the world population rises to around 10.9 billion.", worksheet.detailed_lever_guides_i6); end
  def test_detailed_lever_guides_j6; assert_equal("In 2050 the world population rises to around 9.6 billion.", worksheet.detailed_lever_guides_j6); end
  def test_detailed_lever_guides_k6; assert_equal("In 2050 the world population rises to around 9.6 billion.", worksheet.detailed_lever_guides_k6); end
  def test_detailed_lever_guides_l6; assert_equal("In 2050 the world population rises to around 8.3 billion.", worksheet.detailed_lever_guides_l6); end
  def test_detailed_lever_guides_m6; assert_equal("In 2050 the world population rises to around 8.3 billion.", worksheet.detailed_lever_guides_m6); end
  def test_detailed_lever_guides_n6; assert_equal("This lever only has three levels.", worksheet.detailed_lever_guides_n6); end
  def test_detailed_lever_guides_o6; assert_equal("This lever only has three levels.", worksheet.detailed_lever_guides_o6); end
  def test_detailed_lever_guides_b7; assert_equal("Urbanisation", worksheet.detailed_lever_guides_b7); end
  def test_detailed_lever_guides_d7; assert_equal("In 2010, 52% of the world's population lived in urban areas.", worksheet.detailed_lever_guides_d7); end
  def test_detailed_lever_guides_g7; assert_equal("This lever also drives the total buildings demand and total transport demand.", worksheet.detailed_lever_guides_g7); end
  def test_detailed_lever_guides_h7; assert_equal("By 2050, 75% of the world's population live in urban areas.", worksheet.detailed_lever_guides_h7); end
  def test_detailed_lever_guides_i7; assert_equal("By 2050, 75% of the world's population live in urban areas.", worksheet.detailed_lever_guides_i7); end
  def test_detailed_lever_guides_j7; assert_equal("By 2050, 66% of the world's population live in urban areas.", worksheet.detailed_lever_guides_j7); end
  def test_detailed_lever_guides_k7; assert_equal("By 2050, 66% of the world's population live in urban areas.", worksheet.detailed_lever_guides_k7); end
  def test_detailed_lever_guides_l7; assert_equal("By 2050, 58% of the world's population live in urban areas.", worksheet.detailed_lever_guides_l7); end
  def test_detailed_lever_guides_m7; assert_equal("By 2050, 58% of the world's population live in urban areas.", worksheet.detailed_lever_guides_m7); end
  def test_detailed_lever_guides_n7; assert_equal("This lever only has three levels.", worksheet.detailed_lever_guides_n7); end
  def test_detailed_lever_guides_o7; assert_equal("This lever only has three levels.", worksheet.detailed_lever_guides_o7); end
  def test_detailed_lever_guides_b8; assert_equal("Passenger distance", worksheet.detailed_lever_guides_b8); end
  def test_detailed_lever_guides_d8; assert_equal("In 2011, the weighted average distance travelled per person was around 7,500 km/year, however this masks the variation throughout the world. While the yearly average distance travelled per person was roughly 10-12,000 km per capita in automobile dominant countries (such as in North America), it was closer to 6,000 km per capita in transit-based countries (such as in Europe), and 1,500 km per capita in many developing countries.", worksheet.detailed_lever_guides_d8); end
  def test_detailed_lever_guides_g8; assert_equal("Passenger demand is very dependent on mode and occupancy. If more car trips are shifted to walking, cycling, transit, rail and 2-3 wheelers through better city design then number as well as distance of trips will likely be reduced. ", worksheet.detailed_lever_guides_g8); end
  def test_detailed_lever_guides_h8; assert_equal("By 2050, the yearly average distance travelled per person will increase by 180% from 2011.", worksheet.detailed_lever_guides_h8); end
  def test_detailed_lever_guides_i8; assert_equal("Growth in travel demand continues in cities around the world, with global distance travelled per person increasing at a rate of 2.65% annually, or increasing by 180% by 2050. The global average travel per person will be similar to present day UK.", worksheet.detailed_lever_guides_i8); end
  def test_detailed_lever_guides_j8; assert_equal("By 2050, the yearly average distance travelled per person will increase by 125% from 2011.", worksheet.detailed_lever_guides_j8); end
  def test_detailed_lever_guides_k8; assert_equal("Growth in travel demand continues in cities around the world, with global distance travelled per person increasing at a rate of 2.1% annually, or 125% by 2050. The global average travel per person will be similar to present day Netherlands.", worksheet.detailed_lever_guides_k8); end
  def test_detailed_lever_guides_l8; assert_equal("By 2050, the yearly average distance travelled per person will increase by 100% from 2011.", worksheet.detailed_lever_guides_l8); end
  def test_detailed_lever_guides_m8; assert_equal("Cities with established development patterns as well as growing cities pursue initiatives to reduce the need for travel throughout the city. Global distance travelled per person increases at a rate of 1.75% annually, or 100% by 2050. The global average travel per person will be similar to present day Hungary.", worksheet.detailed_lever_guides_m8); end
  def test_detailed_lever_guides_n8; assert_equal("By 2050, the yearly average distance travelled per person will increase by 40% from 2011.", worksheet.detailed_lever_guides_n8); end
  def test_detailed_lever_guides_o8; assert_equal("Cities make a significant effort to develop as transit-oriented, multi-use cities along with significant advances in communication technologies. Total distance travelled per person increases at a rate of 0.9% annually, or 40% by 2050. The global average travel per person will be similar to present day Brazil.", worksheet.detailed_lever_guides_o8); end
  def test_detailed_lever_guides_b9; assert_equal("Freight distance", worksheet.detailed_lever_guides_b9); end
  def test_detailed_lever_guides_d9; assert_equal("Freight demand, expressed in freight tonne-kilometres shipped, depends on the quantity of goods as well as the distance they are shipped. In 2011 this number was 65 trillion tonne-km. Future growth depends on GDP growth, growth in demand for different types of goods, as well as where goods are produced versus where they are consumed. ", worksheet.detailed_lever_guides_d9); end
  def test_detailed_lever_guides_g9; assert_equal("Freight demand’s impact on reducing CO2 emissions is highly dependent on vehicle load factors and the modes by which freight growth is accommodated.", worksheet.detailed_lever_guides_g9); end
  def test_detailed_lever_guides_h9; assert_equal("By 2050, freight tonne-kms increase by 140% from 2011.", worksheet.detailed_lever_guides_h9); end
  def test_detailed_lever_guides_i9; assert_equal("Growth in freight tonne-kms remains closely tied to GDP, increasing by roughly 140% in road, rail, and shipping by 2050, or 2.4% annually. ", worksheet.detailed_lever_guides_i9); end
  def test_detailed_lever_guides_j9; assert_equal("By 2050, freight tonne-kms increase by 100% from 2011.", worksheet.detailed_lever_guides_j9); end
  def test_detailed_lever_guides_k9; assert_equal("Growth in freight tonne-kms is at a slower rate than GDP, increasing by roughly 100% in road, rail, and shipping by 2050, or 1.75% annually. This could be due to producing products closer to the source of consumption and reducing demand for products such as fuels.", worksheet.detailed_lever_guides_k9); end
  def test_detailed_lever_guides_l9; assert_equal("By 2050, freight tonne-kms increase by 80% from 2011.", worksheet.detailed_lever_guides_l9); end
  def test_detailed_lever_guides_m9; assert_equal("Growth in freight tonne-kms is decoupled from GDP and increases by roughly 80% in road, rail, and shipping by 2050, or 1.5% annually. This could be due to producing products closer to the source of consumption and reducing demand for products such as fuels.", worksheet.detailed_lever_guides_m9); end
  def test_detailed_lever_guides_n9; assert_equal("By 2050, freight tonne-kms increase by 40% from 2011.", worksheet.detailed_lever_guides_n9); end
  def test_detailed_lever_guides_o9; assert_equal("Growth in freight tonne-kms is significantly decoupled from GDP and increases by roughly 40% in road, rail, and shipping by 2050, or 0.85% annually. This could be due to significant reduction in demand as well major technological improvements.", worksheet.detailed_lever_guides_o9); end
  def test_detailed_lever_guides_b10; assert_equal("Mode", worksheet.detailed_lever_guides_b10); end
  def test_detailed_lever_guides_d10; assert_equal("In 2011, between 60 and 80% of trips are made by car in developed countries. For developing countries, this number is often less than 20%. The global average is around 40%. Roughly 83% of freight tonne-kms are made by truck or ship. The mode of travel will have a big impact on reducing overall vehicle kilometres travelled and reducing emissions from person and freight travel. This lever includes a switch between all modes including flights.", worksheet.detailed_lever_guides_d10); end
  def test_detailed_lever_guides_g10; assert_equal("The effectiveness of mode shifts will also be impacted by the total quantity of demand. The modes also impact vehicle types, thereby impacting the results from the efficiency and electrification levers. ", worksheet.detailed_lever_guides_g10); end
  def test_detailed_lever_guides_h10; assert_equal("By 2050 cars are the dominant mode of travel in cities around the world (around 65%). Most new ground freight is shipped by road.", worksheet.detailed_lever_guides_h10); end
  def test_detailed_lever_guides_i10; assert_equal("Cities continue to grow in a sprawled pattern of development. Similar to the UK in 2011, 80% of passenger-kms (pkm) globally are by private vehicles. There is no significant effort to use more rail transport for freight or to improve logistics by 2050, and 65% of ground freight is by road, similar to Latin America in 2011.", worksheet.detailed_lever_guides_i10); end
  def test_detailed_lever_guides_j10; assert_equal("By 2050, cars still dominate the mode share for urban areas (50%) but with larger shares of transit and 2-3 wheelers. Focus on rail shipping allows rail to maintain its current share of ground shipping.", worksheet.detailed_lever_guides_j10); end
  def test_detailed_lever_guides_k10; assert_equal("Cities focus on shifting trips to walking, cycling, and transit instead of using private automobiles. Similar to the Middle East in 2011, 75% of pkm globally are by private vehicles. With some effort in logistics and growth in rail infrastructure in developing countries, by 2050 60% of ground freight is by road, similar to the global total in 2011.", worksheet.detailed_lever_guides_k10); end
  def test_detailed_lever_guides_l10; assert_equal("By 2050, car travel accounts for the same mode share for urban areas as in 2011 (around 40%). Transit and 2-3 wheelers take a significant share of travel along with biking and walking, those cars are still significant. Rail and waterborne freight take portions of ground shipping.", worksheet.detailed_lever_guides_l10); end
  def test_detailed_lever_guides_m10; assert_equal("Cities focus on shifting trips to walking, cycling, transit and 2-3 wheelers. Similar to Russia and Eastern Europe in 2011, 63% of pkm globally are by private vehicles. With significant effort in logistics and rail infrastructure, only 45% of ground freight is by road in 2050, similar to combined OECD countries in 2011.", worksheet.detailed_lever_guides_m10); end
  def test_detailed_lever_guides_n10; assert_equal("By 2050, car travel accounts for a lower proportion of the mode share for urban areas than 2011 (at around 30%). Transit, 2-3 wheelers, cycling and walking are the dominant modes of transport. Rail and waterborne freight take larger portions of ground shipping.", worksheet.detailed_lever_guides_n10); end
  def test_detailed_lever_guides_o10; assert_equal("Cities make a robust effort to shift people from private automobiles to walking, cycling, transit, and 2-3 wheelers. Similar to Brazil in 2011, 50% of pkm globally are by private vehicles. With significant effort in logistics and rail infrastructure, only 36% of ground freight is by road in 2050, similar to historical US rates.", worksheet.detailed_lever_guides_o10); end
  def test_detailed_lever_guides_b11; assert_equal("Occupancy, load & ownership", worksheet.detailed_lever_guides_b11); end
  def test_detailed_lever_guides_d11; assert_equal("In 2011, the average car carried 2 people, the average train carried 384 people, and the average international ship carried around 20 000 tonnes of cargo (the dominant mode for freight).", worksheet.detailed_lever_guides_d11); end
  def test_detailed_lever_guides_g11; assert_equal("The impact of changes to occupancy will depend on the other transport levers.", worksheet.detailed_lever_guides_g11); end
  def test_detailed_lever_guides_h11; assert_equal("By 2050, passenger car and train occupancies remain unchanged, and the average freight vehicle carries the same amount of cargo.", worksheet.detailed_lever_guides_h11); end
  def test_detailed_lever_guides_i11; assert_equal("By 2050, passenger car and train occupancies remain unchanged, and the average freight vehicle carries the same amount of cargo.", worksheet.detailed_lever_guides_i11); end
  def test_detailed_lever_guides_j11; assert_equal("By 2050, car and train occupancies increase by 10%, and domestic freight vehicles and international freight ships carry 10% and 5% more cargo respectively.", worksheet.detailed_lever_guides_j11); end
  def test_detailed_lever_guides_k11; assert_equal("By 2050, car and train occupancies increase by 10%, and domestic freight vehicles and international freight ships carry 10% and 5% more cargo respectively.", worksheet.detailed_lever_guides_k11); end
  def test_detailed_lever_guides_l11; assert_equal("By 2050, car and train occupancies increase by 20%, and domestic freight vehicles and international freight ships carry 20% and 10% more cargo respectively.", worksheet.detailed_lever_guides_l11); end
  def test_detailed_lever_guides_m11; assert_equal("By 2050, car and train occupancies increase by 20%, and domestic freight vehicles and international freight ships carry 20% and 10% more cargo respectively.", worksheet.detailed_lever_guides_m11); end
  def test_detailed_lever_guides_n11; assert_equal("By 2050, car and train occupancies increase by 30%, and domestic freight vehicles and international freight ships carry 30% and 15% more cargo respectively.", worksheet.detailed_lever_guides_n11); end
  def test_detailed_lever_guides_o11; assert_equal("By 2050, car and train occupancies increase by 30%, and domestic freight vehicles and international freight ships carry 30% and 15% more cargo respectively.", worksheet.detailed_lever_guides_o11); end
  def test_detailed_lever_guides_b12; assert_equal("Efficiency", worksheet.detailed_lever_guides_b12); end
  def test_detailed_lever_guides_d12; assert_equal("The efficiency of vehicles in 2011 applies to different vehicle types and fuels used in the calculator. In 2011 light-duty vehicles had an efficiency of 10 litres gasoline equivalent (lpe) per 100km and heavy-duty vehicles, 32 lge/100km. The rate of improvement is 1 to 2% globally per year. Though many improvements in efficiency can take place by implementing existing technology globally, additional improvements will depend on the development of new technologies and making attractive, affordable vehicles with these technologies.", worksheet.detailed_lever_guides_d12); end
  def test_detailed_lever_guides_g12; assert_equal("The efficiency lever will depend on the mode and occupancy lever. The more vehicles in the fleet, the more effective efficiency improvements will be in reducing emissions.", worksheet.detailed_lever_guides_g12); end
  def test_detailed_lever_guides_h12; assert_equal("Limited improvement, with most transport modes decreasing their energy intensity by 0.5% annually.", worksheet.detailed_lever_guides_h12); end
  def test_detailed_lever_guides_i12; assert_equal("By 2050 most transport modes decrease their energy intensity by 0.5% annually to roughly 8 lge/100km for LDVs and 26 lge/100km for HDVs.", worksheet.detailed_lever_guides_i12); end
  def test_detailed_lever_guides_j12; assert_equal("The pace of improvement doubles from level 1, with most transport modes decreasing their energy intensity by 1% annually or ~33% over 40 years.", worksheet.detailed_lever_guides_j12); end
  def test_detailed_lever_guides_k12; assert_equal("Up to 2050 most transport modes decrease their energy intensity by 1% annually to roughly 7 lge/100km for LDVs and 22 lge/100km for HDVs.", worksheet.detailed_lever_guides_k12); end
  def test_detailed_lever_guides_l12; assert_equal("The pace of improvement is significant, with most transport modes decreasing their energy intensity by ~2% annually or ~50% over 40 years.", worksheet.detailed_lever_guides_l12); end
  def test_detailed_lever_guides_m12; assert_equal("Most transport modes decrease their energy intensity by 2% annually to roughly 4.5 lge/100km for LDVs and 15 lge/100km for HDVs by 2050.", worksheet.detailed_lever_guides_m12); end
  def test_detailed_lever_guides_n12; assert_equal("The pace of improvement is extreme, with most transport modes decreasing their energy intensity by ~3% annually or ~70% over 40 years.", worksheet.detailed_lever_guides_n12); end
  def test_detailed_lever_guides_o12; assert_equal("Most transport modes decrease their energy intensity by 3% annually to roughly 3 lge/100km for LDVs and 10 lge/100km for HDVs.", worksheet.detailed_lever_guides_o12); end
  def test_detailed_lever_guides_b13; assert_equal("Electric and hydrogen", worksheet.detailed_lever_guides_b13); end
  def test_detailed_lever_guides_d13; assert_equal("In 2011, around 5% of the global fleet used hybrid technology and very little electric, with the exception of 2-3 wheelers which are 50% electric. This lever includes a variety of vehicle types and technologies, including hybrids, electric, and hydrogen vehicles. Moving towards greater vehicle electrification depends both on technological innovation as well as a variety of policies that increase the uptake rate of new technologies. ", worksheet.detailed_lever_guides_d13); end
  def test_detailed_lever_guides_g13; assert_equal("The impact of the electrification lever depends on the distribution of modes as well as the passenger and freight demand. The more vehicles in the fleet, the greater the impact of electrification in reducing emissions.", worksheet.detailed_lever_guides_g13); end
  def test_detailed_lever_guides_h13; assert_equal("Limited electrification occurs by 2050, with 5% hybrids and 2% electric for passenger cars, and 5% hybrids for heavy duty vehicles.", worksheet.detailed_lever_guides_h13); end
  def test_detailed_lever_guides_i13; assert_equal("By 2050 the percentage of hybrid and electric vehicles remains low (5% and 2%) for passenger cars, and heavy duty vehicles (5% hybrid), and decreases for 2-3 wheelers (40% electric). Few new technologies are adopted for ships or airplanes.", worksheet.detailed_lever_guides_i13); end
  def test_detailed_lever_guides_j13; assert_equal("Electrification increases to 2050, with 10% hybrids and 10% electric for passenger cars, and 10% hybrids and 3% electric for heavy duty vehicles.", worksheet.detailed_lever_guides_j13); end
  def test_detailed_lever_guides_k13; assert_equal("By 2050, there is an increased share of new technologies in the vehicle fleet. The percentage of hybrid and electric vehicles increases (10% and 10%) for passenger cars, heavy duty vehicles (10% and 3%), and 2-3 wheelers (60% electric). Some new technologies are adopted for ships or airplanes (20% hydrogen).", worksheet.detailed_lever_guides_k13); end
  def test_detailed_lever_guides_l13; assert_equal("Strong electrification by 2050 with 20% hybrids, 30% electric and 15% hydrogen for passenger cars. For heavy-duty vehicles, by 2050 15% will be hybrids, 6% electric and 10% hydrogen. ", worksheet.detailed_lever_guides_l13); end
  def test_detailed_lever_guides_m13; assert_equal("By 2050 there is significant adoption of low emission vehicles. The percentage of hybrid, electric and hydrogen vehicles increases (20%, 20%, and 15%) for passenger cars, heavy duty vehicles (15%, 6%, and 10%), and 2-3 wheelers (70% electric). Some new technologies are adopted for ships or airplanes (40% hydrogen).", worksheet.detailed_lever_guides_m13); end
  def test_detailed_lever_guides_n13; assert_equal("Massive electrification by 2050 with 33% hybrids, 35% electric and 20% hydrogen for passenger cars.\rFor heavy duty vehicles, 20% hybrids, 10 % electric, and 20% hydrogen.", worksheet.detailed_lever_guides_n13); end
  def test_detailed_lever_guides_o13; assert_equal("By 2050 there is major deployment of low emission vehicles. The percentage of hybrid, electric and hydrogen vehicles increases (33%, 35%, and 20%) for passenger cars, heavy duty vehicles (20% ,10%, and 20%), and 2-3 wheelers (80% electric). Many new technologies are adopted for ships or airplanes (60% hydrogen).", worksheet.detailed_lever_guides_o13); end
  def test_detailed_lever_guides_b14; assert_equal("Building size", worksheet.detailed_lever_guides_b14); end
  def test_detailed_lever_guides_d14; assert_equal("In 2011 the average house floor area for urban buildings is 92 square metres per household and the average non-residential building floor area is 5 metres squared per capita. This masks extreme ranges, for example the US and Austria have an average residential building size of 200 square metres, and Hong Kong has an average size of 45 square metres.", worksheet.detailed_lever_guides_d14); end
  def test_detailed_lever_guides_e14; assert_equal("In 2050 the average house floor area for urban buildings will be 105 square metres per household and the average services building floor area will be 8.3 square metres per capita.", worksheet.detailed_lever_guides_e14); end
  def test_detailed_lever_guides_h14; assert_equal("In 2050 the average urban home will have a floor area of 110 square metres and the average non-residential building floor area will be 11 square metres per capita.", worksheet.detailed_lever_guides_h14); end
  def test_detailed_lever_guides_i14; assert_equal("In 2050 the average urban home will have a floor area of 110 square metres and the average non-residential building floor area will be 11 square metres per capita. This is the same level as in western Europe today.", worksheet.detailed_lever_guides_i14); end
  def test_detailed_lever_guides_j14; assert_equal("In 2050 the average urban home will have a floor area of 105 square metres and the average non-residential building floor area will be 8 square metres per capita.", worksheet.detailed_lever_guides_j14); end
  def test_detailed_lever_guides_k14; assert_equal("In 2050 the average urban home will have a floor area of 105 square metres and the average non-residential building floor area will be 8 square metres per capita.. This is a little lower than the level of western Europe today.", worksheet.detailed_lever_guides_k14); end
  def test_detailed_lever_guides_l14; assert_equal("In 2050 the average urban home will have a floor area of 100 square metres and the average non-residential building floor area will be 6 square metres per capita.", worksheet.detailed_lever_guides_l14); end
  def test_detailed_lever_guides_m14; assert_equal("In 2050 the average urban home will have a floor area of 100 square metres and the average non-residential building floor area will be 6 square metres per capita.. This is the same level as countries in  southern Europe today, such as Spain.", worksheet.detailed_lever_guides_m14); end
  def test_detailed_lever_guides_n14; assert_equal("In 2050 the average urban home will have a floor area of 95 square metres and the average non-residential building floor area will be 5 square metres per capita.", worksheet.detailed_lever_guides_n14); end
  def test_detailed_lever_guides_o14; assert_equal("In 2050 the average urban home will have a floor area of 95 square metres and the average non-residential building floor area will be 5 square metres per capita. This is the current OECD average, and the same as Japan today.", worksheet.detailed_lever_guides_o14); end
  def test_detailed_lever_guides_b15; assert_equal("Temperature & hot water use", worksheet.detailed_lever_guides_b15); end
  def test_detailed_lever_guides_d15; assert_equal("In 2011 the average house inner temperature is 18 ℃ for urban residential, 13 ℃ for rural residential and 20 ℃ for non-residential in winter. In summer the average house inner temperature is 27 ℃, 29 ℃ and 23 ℃ respectively. The hot water demand is about 18263 l per y per capita.", worksheet.detailed_lever_guides_d15); end
  def test_detailed_lever_guides_e15; assert_equal("In 2050 the average house inner temperature will be 19 ℃ and the services will be 21 ℃ in winter and 25 ℃, 24 ℃ in summer. The hot water demand will be 20089 l per y per capita.", worksheet.detailed_lever_guides_e15); end
  def test_detailed_lever_guides_h15; assert_equal("By 2050, the average urban house temperature will be 20 ℃ in the winter and 24 ℃ in the summer. The average non-residential building will be 23 ℃ in winter and 23 ℃ in summer. The hot water demand will be 21915 l per y per capita.", worksheet.detailed_lever_guides_h15); end
  def test_detailed_lever_guides_i15; assert_equal("By 2050, the average urban house temperature will be 20 ℃ in the winter and 24 ℃ in the summer. The average non-residential building will be 23 ℃ in winter and 23 ℃ in summer. The hot water demand will be 21915 l per y per capita.", worksheet.detailed_lever_guides_i15); end
  def test_detailed_lever_guides_j15; assert_equal("By 2050, the average urban house temperature will be 19 ℃ in the winter and 25 ℃ in the summer. The average non-residential building will be 21 ℃ in winter and 24 ℃ in summer. The hot water demand will be 20089 l per y per capita.", worksheet.detailed_lever_guides_j15); end
  def test_detailed_lever_guides_k15; assert_equal("By 2050, the average urban house temperature will be 19 ℃ in the winter and 25 ℃ in the summer. The average non-residential building will be 21 ℃ in winter and 24 ℃ in summer. The hot water demand will be 20089 l per y per capita.", worksheet.detailed_lever_guides_k15); end
  def test_detailed_lever_guides_l15; assert_equal("By 2050, the average urban house temperature will be 18 ℃ in the winter and 26 ℃ in the summer. The average non-residential building will be 20 ℃ in winter and 25 ℃ in summer. The hot water demand will be 18263 l per y per capita.", worksheet.detailed_lever_guides_l15); end
  def test_detailed_lever_guides_m15; assert_equal("By 2050, the average urban house temperature will be 18 ℃ in the winter and 26 ℃ in the summer. The average non-residential building will be 20 ℃ in winter and 25 ℃ in summer. The hot water demand will be 18263 l per y per capita.", worksheet.detailed_lever_guides_m15); end
  def test_detailed_lever_guides_n15; assert_equal("By 2050, the average urban house temperature will be 17 ℃ in the winter and 27 ℃ in the summer. The average non-residential building will be 19 ℃ in winter and 26 ℃ in summer. The hot water demand will be 14610 l per y per capita.", worksheet.detailed_lever_guides_n15); end
  def test_detailed_lever_guides_o15; assert_equal("By 2050, the average urban house temperature will be 17 ℃ in the winter and 27 ℃ in the summer. The average non-residential building will be 19 ℃ in winter and 26 ℃ in summer. The hot water demand will be 14610 l per y per capita.", worksheet.detailed_lever_guides_o15); end
  def test_detailed_lever_guides_b16; assert_equal("Lighting, cooking & appliance use", worksheet.detailed_lever_guides_b16); end
  def test_detailed_lever_guides_d16; assert_equal("In 2011 the average urban household owns 1 refrigerator, 0.3 dishwashers, 0.8 clothes washers, 0.3 clothes dryers, 1.6 TVs and owns 24 light bulbs.", worksheet.detailed_lever_guides_d16); end
  def test_detailed_lever_guides_e16; assert_equal("In 2050 the average urban household will own 1.1 refrigerator, 0.4 dishwasher, 0.9 clothes washers, 0.3 clothes dryers, 2 TV, 2.4 miscellaneous appliances. And will own 35 bulbs.", worksheet.detailed_lever_guides_e16); end
  def test_detailed_lever_guides_h16; assert_equal("In 2050 the average urban household will own 1.4 refrigerators, 0.5 dishwashers, 1.2 clothes washers, 0.4 clothes dryers, 2.4 TVs, 3 miscellaneous appliances and will own 40 light bulbs.", worksheet.detailed_lever_guides_h16); end
  def test_detailed_lever_guides_i16; assert_equal("In 2050 the average urban household will own 1.4 refrigerators, 0.5 dishwashers, 1.2 clothes washers, 0.4 clothes dryers, 2.4 TVs, 3 miscellaneous appliances and will own 40 light bulbs.", worksheet.detailed_lever_guides_i16); end
  def test_detailed_lever_guides_j16; assert_equal("In 2050 the average urban household will own 1.1 refrigerators, 0.4 dishwashers, 0.9 clothes washers, 0.3 clothes dryers, 2 TVs, 2.4 miscellaneous appliances and will own 35 light bulbs.", worksheet.detailed_lever_guides_j16); end
  def test_detailed_lever_guides_k16; assert_equal("In 2050 the average urban household will own 1.1 refrigerators, 0.4 dishwashers, 0.9 clothes washers, 0.3 clothes dryers, 2 TVs, 2.4 miscellaneous appliances and will own 35 light bulbs.", worksheet.detailed_lever_guides_k16); end
  def test_detailed_lever_guides_l16; assert_equal("In 2050 the average urban household will own 1 refrigerator, 0.3 dishwashers, 0.8 clothes washers, 0.3 clothes dryers, 1.6 TVs, 2 miscellaneous appliances and will own 30 bulbs.", worksheet.detailed_lever_guides_l16); end
  def test_detailed_lever_guides_m16; assert_equal("In 2050 the average urban household will own 1 refrigerator, 0.3 dishwashers, 0.8 clothes washers, 0.3 clothes dryers, 1.6 TVs, 2 miscellaneous appliances and will own 30 bulbs.", worksheet.detailed_lever_guides_m16); end
  def test_detailed_lever_guides_n16; assert_equal("In 2050 the average urban household will own 0.8 refrigerators, 0.3 dishwashers, 0.6 clothes washers, 0.2 clothes dryers, 1.3 TVs, 1.6 miscellaneous appliances and will own 25 light bulbs.", worksheet.detailed_lever_guides_n16); end
  def test_detailed_lever_guides_o16; assert_equal("In 2050 the average urban household will own 0.8 refrigerators, 0.3 dishwashers, 0.6 clothes washers, 0.2 clothes dryers, 1.3 TVs, 1.6 miscellaneous appliances and will own 25 light bulbs.", worksheet.detailed_lever_guides_o16); end
  def test_detailed_lever_guides_b17; assert_equal("Building insulation", worksheet.detailed_lever_guides_b17); end
  def test_detailed_lever_guides_d17; assert_equal("In 2011 the average heat loss coefficient of buildings is 15 GW/(M ha*℃).", worksheet.detailed_lever_guides_d17); end
  def test_detailed_lever_guides_e17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 10.2 GW/(M ha*℃), the thermal performance of building will have improved by 32%.", worksheet.detailed_lever_guides_e17); end
  def test_detailed_lever_guides_h17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 12 GW/(M ha*℃): the thermal performance of buildings will have improved by 20%.", worksheet.detailed_lever_guides_h17); end
  def test_detailed_lever_guides_i17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 12 GW/(M ha*℃): the thermal performance of buildings will have improved by 20%.", worksheet.detailed_lever_guides_i17); end
  def test_detailed_lever_guides_j17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 9 GW/(M ha*℃): the thermal performance of buildings will have improved by 40%.", worksheet.detailed_lever_guides_j17); end
  def test_detailed_lever_guides_k17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 9 GW/(M ha*℃): the thermal performance of buildings will have improved by 40%.", worksheet.detailed_lever_guides_k17); end
  def test_detailed_lever_guides_l17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 6 GW/(M ha*℃): the thermal performance of buildings will have improved by 60%.", worksheet.detailed_lever_guides_l17); end
  def test_detailed_lever_guides_m17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 6 GW/(M ha*℃): the thermal performance of buildings will have improved by 60%.", worksheet.detailed_lever_guides_m17); end
  def test_detailed_lever_guides_n17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 4 GW/(M ha*℃): the thermal performance of buildings will be improved by 73%.", worksheet.detailed_lever_guides_n17); end
  def test_detailed_lever_guides_o17; assert_equal("In 2050 the average heat loss coefficient of buildings will be 4 GW/(M ha*℃): the thermal performance of buildings will be improved by 73%.", worksheet.detailed_lever_guides_o17); end
  def test_detailed_lever_guides_b18; assert_equal("Temperature, cooking & lighting technology", worksheet.detailed_lever_guides_b18); end
  def test_detailed_lever_guides_d18; assert_equal("In 2011 the heating technology structure is: 2% solid boiler, 14% liquid boiler, 55% gas boiler, 2% heat pumps, 8% electricity heater, 0% solar heater, 2% micro-CHP, 17% district heating. The cooling structure is 100% air-conditioning, 0% chiller, 0% solar cooling. The cooking technology structure is 8% solid stoves, 15% liquid stoves, 40% gas stoves, 25% electric stoves and 12% traditional biomass stoves. The lighting technology structure is 72% incandescents, 3% halogens, 25% compact fluorescent lamps (CFLs) and 0% light-emitting diodes (LEDs). ", worksheet.detailed_lever_guides_d18); end
  def test_detailed_lever_guides_e18; assert_equal("In 2050 the heating technology structure will be 2% solid boiler, 10% liquid boiler, 38% gas boiler, 3% heat pumps, 8% electricity heater, 0% solar heater, 4% micro-CHP, 36% district heating. The cooling structure will be 89% air-conditioning, 4% chiller, 8% solar cooling. The cooking technology structure will be 7% solid stoves, 12% liquid stoves, 45% gas stoves, 28% electric stoves, 9% traditional biomass stoves. The lighting technology structure will be 60% incandescents, 3% halogens, 35% CFLs, 3% LEDs. ", worksheet.detailed_lever_guides_e18); end
  def test_detailed_lever_guides_h18; assert_equal("Technology mix remains the same in 2050 as today. HEATING: 2% heat pumps, 8% electric heaters, 17% district heating and 0% solar heaters. The rest will be from boilers and micro combined heat and power. COOLING: 93% air conditioners, 2% chillers, 5% solar cooling. COOKING: 25% by electric stoves. LIGHTING: 0% LEDs. ", worksheet.detailed_lever_guides_h18); end
  def test_detailed_lever_guides_i18; assert_equal("Technology mix remains the same in 2050 as today. HEATING: 2% solid boiler, 14% liquid boiler, 55% gas boiler, 2% heat pumps, 8% electricity heater, 0% solar heater, 2% micro-CHP, 17% district heating. COOLING: 93% air-conditioning 2% chiller, 5% solar cooling. COOKING: 8% solid stoves, 15% liquid stoves, 40% gas stoves, 25% electric stoves, 12% traditional biomass stoves. LIGHTING: 72% incandescents, 3% halogens, 25% CFLs, 0% LEDs. ", worksheet.detailed_lever_guides_i18); end
  def test_detailed_lever_guides_j18; assert_equal("By 2050: HEATING: 4% heat pumps, 8% electric heaters, 1% solar heater, 5% micro-CHP, 55% district heating.  COOLING 85% air-conditioning 5% chiller, 10% solar cooling. COOKING: 30% electric stoves.  LIGHTING 48% incandescents, 2% halogens, 45% CFLs, 5% LEDs.", worksheet.detailed_lever_guides_j18); end
  def test_detailed_lever_guides_k18; assert_equal("In 2050 the technology mix will be: HEATING: 2% solid boiler, 6% liquid boiler, 20% gas boiler, 4% heat pumps, 8% electricity heater, 1% solar heater, 5% micro-CHP, 55% district heating. COOLING: 85% air-conditioning 5% chiller, 10% solar cooling. COOKING: 6% solid stoves, 8% liquid stoves, 50% gas stoves, 30% electric stoves, 6% traditional biomass stoves. LIGHTING: 48% incandescents, 2% halogens, 45% CFLs, 5% LEDs.", worksheet.detailed_lever_guides_k18); end
  def test_detailed_lever_guides_l18; assert_equal("By 2050: HEATING 15% heat pumps, 10% electric heater, 1% solar heater, 10% micro-CHP, 10% district heating. COOLING 75% air-conditioning 10% chiller, 15% solar cooling. COOKING: 45% electric stoves. LIGHTING: 18% incandescents, 2% halogens, 45% CFLs, 35% LEDs.", worksheet.detailed_lever_guides_l18); end
  def test_detailed_lever_guides_m18; assert_equal("In 2050 the technology mix will be: HEATING: 1% solid boiler, 3% liquid boiler, 50% gas boiler, 15% heat pumps, 10% electricity heater, 1% solar heater, 10% micro-CHP, 10% district heating. COOLING: 75% air-conditioning 10% chiller, 15% solar cooling. COOKING: 4% solid stoves, 3% liquid stoves, 45% gas stoves, 45% electric stoves, 3% traditional biomass stoves. LIGHTING: 18% incandescents, 2% halogens, 45% CFLs, 35% LEDs.", worksheet.detailed_lever_guides_m18); end
  def test_detailed_lever_guides_n18; assert_equal("By 2050: HEATING:40% heat pumps, 10% electric heater, 10% solar heater, 11% micro-CHP, 8% district heating. COOLING: 65% air-conditioning 15% chiller, 20% solar cooling. COOKING: 57% electric stoves. LIGHTING: 0% incandescents, 1% halogens, 34% CFLs, 65% LEDs.", worksheet.detailed_lever_guides_n18); end
  def test_detailed_lever_guides_o18; assert_equal("In 2050 the technology mix will be: HEATING: 0% solid boiler, 1% liquid boiler, 20% gas boiler, 40% heat pumps, 10% electricity heater, 10% solar heater, 11% micro-CHP, 8% district heating. COOLING: 65% air-conditioning 15% chiller, 20% solar cooling. COOKING: 2% solid stoves, 1% liquid stoves, 40% gas stoves, 57% electric stoves, 1% traditional biomass stoves. LIGHTING: 0% incandescents, 1% halogens, 34% CFLs, 65% LEDs.", worksheet.detailed_lever_guides_o18); end
  def test_detailed_lever_guides_b19; assert_equal("Appliance efficiency", worksheet.detailed_lever_guides_b19); end
  def test_detailed_lever_guides_d19; assert_equal("In 2011, the rate at which appliances used energy is on average: refrigerator 100W, dishwasher 1500W, clothes washer 700W, clothes dryer 1500W, TV 250W, miscellaneous appliances 100W.", worksheet.detailed_lever_guides_d19); end
  def test_detailed_lever_guides_e19; assert_equal("In 2050 the appliance efficiency will be: refrigerator 80W (improved by 20%), dishwasher 1200W (improved by 20%), clothes washer 560W (improved by 20%), clothes dryer 1200W (improved by 20%), TV 200W (improved by 20%), miscellaneous 80W (improved by 20%).", worksheet.detailed_lever_guides_e19); end
  def test_detailed_lever_guides_h19; assert_equal("Minimal improvements in efficiency by 2050. For example, refrigerators will be 80W (an improvement of 20%).", worksheet.detailed_lever_guides_h19); end
  def test_detailed_lever_guides_i19; assert_equal("Minimal improvements in efficiency by 2050. For example, refrigerators will be 80W (an improvement of 20%).", worksheet.detailed_lever_guides_i19); end
  def test_detailed_lever_guides_j19; assert_equal("Ambitious improvements in efficiency by 2050. For example, refrigerators will be 65W (improved by 35%).", worksheet.detailed_lever_guides_j19); end
  def test_detailed_lever_guides_k19; assert_equal("Ambitious improvements in efficiency by 2050. For example, refrigerators will be 65W (improved by 35%).", worksheet.detailed_lever_guides_k19); end
  def test_detailed_lever_guides_l19; assert_equal("Very ambitious improvements in efficiency by 2050. For example, refrigerators will be 50W (improved by 50%).", worksheet.detailed_lever_guides_l19); end
  def test_detailed_lever_guides_m19; assert_equal("Very ambitious improvements in efficiency by 2050. For example, refrigerators will be 50W (improved by 50%).", worksheet.detailed_lever_guides_m19); end
  def test_detailed_lever_guides_n19; assert_equal("Extreme improvements in efficiency by 2050. For example, refrigerators will be 35W (improved by 65%).", worksheet.detailed_lever_guides_n19); end
  def test_detailed_lever_guides_o19; assert_equal("Extreme improvements in efficiency by 2050. For example, refrigerators will be 35W (improved by 65%).", worksheet.detailed_lever_guides_o19); end
  def test_detailed_lever_guides_b20; assert_equal("Product lifespan & demand", worksheet.detailed_lever_guides_b20); end
  def test_detailed_lever_guides_d20; assert_equal("Demand for products leads to the production of 8.7Gt of materials, that is: 1.8Gt of crude steel, 0.1Gt of aluminium, 0.7Gt of chemicals, 0.6Gt of paper, 0.8Gt of timber, 1Gt of other materials, & 3.6Gt of cement.", worksheet.detailed_lever_guides_d20); end
  def test_detailed_lever_guides_e20; assert_equal("Demand for products leads to the production of 15.9Gt of materials, that is: 3.4Gt of crude steel, 0.2Gt of aluminium, 1.5Gt of chemicals, 0.9Gt of paper, 1.3Gt of timber, 2.3Gt of other materials, & 6.5Gt of cement.", worksheet.detailed_lever_guides_e20); end
  def test_detailed_lever_guides_f20; assert_equal("Demand for these products leads to the production of 17.5Gt of materials, that is: 3.1Gt of crude steel, 0.2Gt of aluminium, 1.4Gt of chemicals, 0.9Gt of paper, 1.4Gt of timber, 2.4Gt of other materials, & 1.4Gt of cement", worksheet.detailed_lever_guides_f20); end
  def test_detailed_lever_guides_g20; assert_equal("Product demand is defined by the activity in the other sectors whenever possible (e.g. amount of buildings, infrastructure and transport demand are defined in their respective sectors). Product demand is defined by this lever when there is no link with the activity in the other sectors (e.g. packaging and paper demand are defined by this lever). This lever also specifies the lifetime of all the consumer products (and therefore the need for new products to answer a specified stock requirement at a given time).", worksheet.detailed_lever_guides_g20); end
  def test_detailed_lever_guides_h20; assert_equal("By 2050 the demand for consumer goods per head increases, with product demand correlated to GDP growth projection. Buildings, infrastructure & transport product demand are defined by the other sectors and transport lifespan is unchanged from 2011 levels. There is no development in product reuse or recycling.", worksheet.detailed_lever_guides_h20); end
  def test_detailed_lever_guides_i20; assert_equal("To 2050, product demand is in line with historical trends and  the GDP growth projection. Buildings, infrastructure and transport product demand are defined by the other sectors. Consumer goods increase (paper+10%, metal goods +20% and packaging +10%).There is no development in product reuse nor recycling (product lifetime for cars is 12.5 years, for TVs 5 years, and for appliances 10 years).", worksheet.detailed_lever_guides_i20); end
  def test_detailed_lever_guides_j20; assert_equal("Consumer product demand per head worldwide reaches current EU levels then flattens. Buildings, infrastructure & transport product demand are defined by the other sectors and transport lifespan increases 10% from 2011 levels by 2050. Consumer goods stabilize.\rModerate development in product reuse and recycling.", worksheet.detailed_lever_guides_j20); end
  def test_detailed_lever_guides_k20; assert_equal("Consumer product demand worldwide reaches current EU levels then flattens. Buildings, infrastructure and transport product demand are defined by the other sectors. Consumer goods stabilize (paper+0%, metal goods +10%, packaging +0%). Moderate development in product reuse and recycling (product lifetime for cars is 13.7 years, for TVs 7 years, and for appliances 15 years).", worksheet.detailed_lever_guides_k20); end
  def test_detailed_lever_guides_l20; assert_equal("Consumer product demand remains constant (increases in some parts of the world balance decreases in other). Buildings, infrastructure & transport product demand are defined by the other sectors and transport technology lifespan increases by 20% by 2050 from 2011 levels. Significant development in product reuse and recycling.", worksheet.detailed_lever_guides_l20); end
  def test_detailed_lever_guides_m20; assert_equal("Consumer product demand remains constant (increases in some parts of the world balance decreases in others). Buildings, infrastructure and transport product demand are defined by the other sectors. Consumer goods decrease (paper-10%, metal goods -10% and packaging -10%). Significant development in product reuse and recycling (product lifetime for cars is 15 years, for TV 10 years, and for appliances 20 years).", worksheet.detailed_lever_guides_m20); end
  def test_detailed_lever_guides_n20; assert_equal("Consumers buy fewer goods (e.g. they are higher value but less resource intensive). Buildings, infrastructure & transport product demand are defined by the other sectors and transport technology lifespan increases 30% from 2011 levels by 2050. Consumer goods decrease as product demand is not correlated to GDP increase.", worksheet.detailed_lever_guides_n20); end
  def test_detailed_lever_guides_o20; assert_equal("Consumers buy fewer goods (e.g. they are higher value but less resource intensive). Buildings, infrastructure & transport product demand are defined by the other sectors. Consumer goods decrease (paper-20%, metals goods -20%, packaging -20%).Product demand not correlated to GDP increase (product life time of cars is 16.2 years, of TV 15 years, of appliances 30 years).", worksheet.detailed_lever_guides_o20); end
  def test_detailed_lever_guides_b21; assert_equal("Design, material switch & recycling", worksheet.detailed_lever_guides_b21); end
  def test_detailed_lever_guides_d21; assert_equal("Demand for products leads to the production of 8.4Gt of materials per year.", worksheet.detailed_lever_guides_d21); end
  def test_detailed_lever_guides_e21; assert_equal("Product design leads to the reduction of -1% of materials in 2050.", worksheet.detailed_lever_guides_e21); end
  def test_detailed_lever_guides_h21; assert_equal("No product & material design improvements that would lead to less material needed to make products. No switch to less CO2 intensive materials. Stable level of recycled products & materials (slight increase in chemicals, decrease in aluminium).", worksheet.detailed_lever_guides_h21); end
  def test_detailed_lever_guides_i21; assert_equal("No product & material design improvements (leading to less materials to make products by 2050). No switch to materials which are less CO2 intensive over the product lifetime.Recycling levels the same as today (36% recycled steel, 8% non-recycled chemicals becomes recycled, -88% non-recycled aluminium becomes recycled).", worksheet.detailed_lever_guides_i21); end
  def test_detailed_lever_guides_j21; assert_equal("Ambitious product & material design improvements, resulting in -10% less material to make products. Minor switches to materials which are less CO2 intensive over product lifetimes. Minor increase in recycling (except aluminium which decreases).", worksheet.detailed_lever_guides_j21); end
  def test_detailed_lever_guides_k21; assert_equal("Ambitious product and material design improvements, leading to -10% less materials needed to make products. Minor material switches (5% steel to timber in buildings, 5% cement to timber in buildings, 5% steel to aluminium in cars and trucks, 5% steel to carbon fibres [plastics] in cars and trucks, 1.25% cement to insulation materials [plastics] in buildings and infrastructure). Minor increase by 2050 in recycling (44% steel, 16% chemicals, -77% aluminium, 9% paper).", worksheet.detailed_lever_guides_k21); end
  def test_detailed_lever_guides_l21; assert_equal("Very ambitious product & material design improvements result in -20% less material needed to make products. Significant switches to materials which are less CO2 intensive over product lifetimes. Significant increase in recycling (except aluminium which decreases).", worksheet.detailed_lever_guides_l21); end
  def test_detailed_lever_guides_m21; assert_equal("Very ambitious product and material design improvements, leading to -20% less material needed to make products. Significant material switches (10% steel to timber in buildings, 10% cement to timber in buildings, 10% steel to aluminium in cars and trucks, 10% steel to carbon fibres [plastics] in cars and trucks, 2,5% cement to insulation materials [plastics] in buildings and infrastructure). Significant increase in non recycled which will get recycled (56% steel, 24% chemicals, -67% aluminium, 24% paper).", worksheet.detailed_lever_guides_m21); end
  def test_detailed_lever_guides_n21; assert_equal("Extreme improvements in product & material design, resulting in -30% less material to make products by 2050. which are less CO2 intensive over product lifetimes. Extreme increase in recycling (except aluminium which decreases).", worksheet.detailed_lever_guides_n21); end
  def test_detailed_lever_guides_o21; assert_equal("Extreme improvements in product and material design, leading to -30% less material needed to make products by 2050. Major material switches (20% steel to timber in buildings, 10% cement to timber in buildings, 20% steel to aluminium in cars and trucks, 20% steel to carbon fibres [plastics] in cars and trucks, 5% cement to insulation materials [plastics] in buildings and infrastructure). Major increase in recycling (75% steel, 32% chemicals, -56% aluminium, 39% paper).", worksheet.detailed_lever_guides_o21); end
  def test_detailed_lever_guides_b22; assert_equal("Iron, steel & aluminium", worksheet.detailed_lever_guides_b22); end
  def test_detailed_lever_guides_d22; assert_equal("Current emissions in the production of metals are 2 GtCO2 per Gt of steel and 0.8 GtCO2 per Gt of aluminium.", worksheet.detailed_lever_guides_d22); end
  def test_detailed_lever_guides_e22; assert_equal("Specific emissions for Steel reduce/increase by -3% and for Aluminium by -2%.", worksheet.detailed_lever_guides_e22); end
  def test_detailed_lever_guides_h22; assert_equal("Continued use of current processes & technologies. Continued use of fuels. Minimal improvements in energy efficiency. No change in emissions per tonne of steel and aluminium.", worksheet.detailed_lever_guides_h22); end
  def test_detailed_lever_guides_i22; assert_equal("Continued use of current processes and technologies. Steel: 70% classic blast oxygen furnaces (using 21% scrap), 0% HIsarna, 5% electric arc furnace DRI (using 9% scrap), 25% electric arc furnace scrap (using 70% of scrap). Aluminium: 0% decrease in consumption per tonne for primary aluminium and 0% for secondary aluminium. Continued use of fuels. Minimal improvements in energy efficiency (no additional CHP). Emissions per tonne of steel and aluminium are unchanged by 2050 (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_i22); end
  def test_detailed_lever_guides_j22; assert_equal("Moderate decrease in classic blast oxygen furnaces, increase in electric arc furnaces and new oxygen furnace technologies. Moderate improvements in aluminium. Equivalent to the development of recent programmes for some sectors. Emissions per tonne decrease by 2% for steel and by 3% for aluminium.", worksheet.detailed_lever_guides_j22); end
  def test_detailed_lever_guides_k22; assert_equal("Moderate process and technology change. Steel: 61% classic blast oxygen furnaces (using 19% of scrap), 2% HIsarna (using 0.2% of scrap), 6% EAF DRI (using 10% scrap), 31% EAF scrap (using 71% scrap). Aluminium: 5% decrease in consumption per tonne for primary aluminium and 5% for secondary aluminium. Some fuel switches in blast oxygen furnaces (2% coal to gas, 15% coal to biomass potential), none in the other steel technologies (HIsarna, EAF scrap & EAF DRI), some in primary aluminium (2% coal to biomass potential), none in secondary aluminium. Significant energy efficiency improvements (5% in blast oxygen furnaces, none in other technologies and no additional CHP development) Emissions per tonne decrease by 2% for steel and by 3% for aluminium (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_k22); end
  def test_detailed_lever_guides_l22; assert_equal("Significant technology progress. Fuel switch towards biomass and electrification, and energy efficiency requiring significant financial investments. Emissions per tonne decrease by 1% for steel and by 7% for aluminium.", worksheet.detailed_lever_guides_l22); end
  def test_detailed_lever_guides_m22; assert_equal("Significant technology progress. Steel: 48% classic blast oxygen furnaces (using 18% scrap), 5% HIsarna (using 1% scrap), 8% EAF DRI (using 9% scrap), 40% EAF scrap (using 72% scrap). Aluminium: (10% decrease in consumption per tonne for primary aluminium and 10% for secondary aluminium.Important fuel switches in blast oxygen furnaces (3% coal to gas, 15% coal to biomass potential), none in the other steel technologies (HIsarna, EAF scrap and EAF DRI), some in primary aluminium (3% coal to biomass potential), none in secondary aluminium. Significant energy efficiency increases (7% in blast oxygen furnaces, none in other technologies and no additional CHP development).  Emissions per tonne decrease by 1% for steel and by 7% for aluminium (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_m22); end
  def test_detailed_lever_guides_n22; assert_equal("Very important technology progress, fuel switch (towards biomass & electrification) & energy efficiency close to technical and physical constraints (but limited breakthrough technologies).\rEmissions per tonne decrease by 1% for steel and by 13% for aluminium.", worksheet.detailed_lever_guides_n22); end
  def test_detailed_lever_guides_o22; assert_equal("Extreme technology progress. Steel: 25% classic blast oxygen furnaces (using 13% scrap), 10% HIsarna (using 4% scrap), 10% EAF DRI (using 10% scrap), 55% EAF scrap (using 73% scrap). Aluminium: 20% decrease in consumption per tonne for primary aluminium and 20% for secondary aluminium. Major fuel switches in blast oxygen furnaces (5% coal to gas, 15% coal to biomass potential), none in the other steel technologies (HIsarna, EAF scrap and EAF DRI), some in primary aluminium (5% coal to biomass potential), none in secondary aluminium. Energy efficiency improvements close to technical and physical constraints (10% in blast oxygen furnaces, none in other technologies and no additional CHP development). Emissions per tonne reduce by 1% for steel & by 13% for aluminium (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_o22); end
  def test_detailed_lever_guides_b23; assert_equal("Chemicals", worksheet.detailed_lever_guides_b23); end
  def test_detailed_lever_guides_d23; assert_equal("Specific emissions for chemicals are 1.5GtCO2 per Gt.", worksheet.detailed_lever_guides_d23); end
  def test_detailed_lever_guides_e23; assert_equal("Specific emissions for chemicals reduce/increase by 1%", worksheet.detailed_lever_guides_e23); end
  def test_detailed_lever_guides_h23; assert_equal("Continued use of current processes & technologies. Continued use of fuels. Minimal improvements in energy efficiency. Emissions per ton increase by 1% for chemicals.", worksheet.detailed_lever_guides_h23); end
  def test_detailed_lever_guides_i23; assert_equal("Continued use of current processes and technologies. Continued use of fuels. Minimal improvements in energy efficiency (5% of electricity produced by CHP as now).  Emissions per tonne increase by 1% for chemicals (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_i23); end
  def test_detailed_lever_guides_j23; assert_equal("Moderate technology progress, fuel changes and energy efficiency. Equivalent to the development of recent programmes for some sectors. Emissions per tonne decrease by 3%.", worksheet.detailed_lever_guides_j23); end
  def test_detailed_lever_guides_k23; assert_equal("Moderate process and technology changes: 5% decrease in consumption per ton for high value chemicals (HVC), 0% in ammonia, 0% in methanol, 5% in other chemicals. Some fuel switches in HVC (10% coal to gas,10% oil to gas), some switches across all chemical technologies (5% coal to biomass potential). Significant energy efficiency improvements (5% for HVC, 8% for ammonia, 8% for methanol & 5% for other chemicals. 10% of electricity produced by CHP)  Emissions per tonne decrease by 3% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_k23); end
  def test_detailed_lever_guides_l23; assert_equal("Significant technology progress, fuel switch towards biomass & electrification and energy efficiency requiring significant financial investments. Emissions per tonne decrease by 7%.", worksheet.detailed_lever_guides_l23); end
  def test_detailed_lever_guides_m23; assert_equal("Significant process and technology changes: 10% decrease in consumption per tonne for HVCs, 0% for ammonia, 0% for methanol, 10% for other chemicals. Important fuel switches in HVCs (20% coal to gas,20% oil to gas), some switches across all chemical technologies (10% coal to biomass potential). Significant energy efficiency improvements (10% for HVC, 15% for ammonia, 15% for methanol & 10% for other chemicals & 15% of electricity produced by CHP).  Emissions per tonne decrease by 7% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_m23); end
  def test_detailed_lever_guides_n23; assert_equal("Very important technology progress, fuel switch (towards biomass and electrification) & energy efficiency close to technical and physical constraints (but limited breakthrough technologies). Emissions per tonne decrease by 15%.", worksheet.detailed_lever_guides_n23); end
  def test_detailed_lever_guides_o23; assert_equal("Very important process and technology changes: 20% decrease in consumption per tonne for HVCs, 0% for ammonia, 0% for methanol, 20% for other chemicals.Major fuel switches in HVCs (30% coal to gas,30% oil to gas), some switches across all chemical technologies (20% coal to biomass potential). Energy efficiency improvements close to technical and physical constraints (20% for HVC, 30% for ammonia, 30% for methanol & 20% for other chemicals & 20% of electricity produced by CHP).  Emissions per tonne decrease by 15% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_o23); end
  def test_detailed_lever_guides_b24; assert_equal("Paper and other", worksheet.detailed_lever_guides_b24); end
  def test_detailed_lever_guides_d24; assert_equal("Specific emissions for pulp & paper are 0.5 GtCO2 per Gt and for other materials of are 2.4 GtCO2 per Gt .", worksheet.detailed_lever_guides_d24); end
  def test_detailed_lever_guides_e24; assert_equal("Specific emissions for Pulp & paper reduce/increase by -20% and for other materials by -13%.", worksheet.detailed_lever_guides_e24); end
  def test_detailed_lever_guides_h24; assert_equal("Continued use of current processes & technologies. Continued use of fuels. Minimal improvements in energy efficiency. Emissions per tonne increase by 1% for paper and 2% for other materials.", worksheet.detailed_lever_guides_h24); end
  def test_detailed_lever_guides_i24; assert_equal("Continued use of current processes and technologies. Continued use of fuels. Minimal improvements in energy efficiency (No additional CHP ( 5% of electricity produced by CHP for paper, 5% for timber & 5% for other industries). )Emissions per tonne increase by 1% for paper and 2% for other materials (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_i24); end
  def test_detailed_lever_guides_j24; assert_equal("Moderate technology progress, fuel changes and energy efficiency. Equivalent to the development of recent programs for some sectors. Emissions per tonne decrease by 20% for pulp & paper & by 20 % for other materials.", worksheet.detailed_lever_guides_j24); end
  def test_detailed_lever_guides_k24; assert_equal("Moderate process and technology changes: paper (5% decrease in consumption per tonne for paper pulp, 5% for virgin paper, 5% for recycled paper), 0% for timber & 0% for other industries. Some fuel switches (coal to biomass potential) inpPaper (2%), timber(2%), and other industries (2%) Significant energy efficiency (20% for paper, 20% for timber, 20% for other industries. 10% of electricity produced by CHP for paper, 10% for timber & 10% for other industries). Emissions per tonne decrease by 20% for pulp and paper and by 20% for other materials (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_k24); end
  def test_detailed_lever_guides_l24; assert_equal("Significant technology progress, fuel switch towards biomass & electrification) & energy efficiency requiring significant financial investments. Emissions per tonne decrease by 32% for pulp & paper, and by 31% for other materials.", worksheet.detailed_lever_guides_l24); end
  def test_detailed_lever_guides_m24; assert_equal("Significant process and technology changes: 10% decrease in consumption per tonne for paper pulp, 10% for virgin paper, 10% for recycled paper), 0% for timber & 0% for other industries. Significant fuel switches (coal to biomass potential) in paper (3%), timber (3%), and other industries (3%). Significant energy efficiency (30% for paper, 30% for timber, 30% for other industries. 15% of electricity produced by CHP for paper, 15% for timber & 15% for other industries).  Emissions per tonne decrease by 32% for pulp and paper, and by 31% for other materials (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_m24); end
  def test_detailed_lever_guides_n24; assert_equal("Very important technology progress, fuel switch (towards biomass & electrification) & energy efficiency close to technical and physical constraints (but limited breakthrough technologies). Emissions per tonne reduce by 45% for pulp & paper, and by 42% for other materials.", worksheet.detailed_lever_guides_n24); end
  def test_detailed_lever_guides_o24; assert_equal("Very important process and technology changes: paper (20% decrease in consumption per ton for paper pulp, 20% for virgin paper, 20% for recycled paper), % for timber and % in other industries), 0% for timber and 0% for other industries. Major fuel switches (coal to biomass potential) in paper (5%), timber(5%), and other industries (5%). Energy efficiency close to technical and physical constraints (40% for paper, 40% for timber, 40% for other industries. 20% of electricity produced by CHP for paper, 20% for timber & 20% for other industries).  Emissions per tonne reduce by 45% for pulp and paper, and by 42% for other materials (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_o24); end
  def test_detailed_lever_guides_b25; assert_equal("Cement", worksheet.detailed_lever_guides_b25); end
  def test_detailed_lever_guides_d25; assert_equal("Specific emissions for cement are 0.4GtCO2 per Gt.", worksheet.detailed_lever_guides_d25); end
  def test_detailed_lever_guides_e25; assert_equal("Specific emissions for cement reduce/increase by -5%.", worksheet.detailed_lever_guides_e25); end
  def test_detailed_lever_guides_h25; assert_equal("Continued use of current processes & technologies (28% clinker in cement). Continued use of fuels. Minimal improvements in energy efficiency. Emissions per tonne decrease by 2% for cement.", worksheet.detailed_lever_guides_h25); end
  def test_detailed_lever_guides_i25; assert_equal("Continued use of current processes and technologies (28% clinker in cement). Continued use of fuels. Minimal improvements in energy efficiency (no additional CHP). Emissions per tonne decrease by 2% for cement (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_i25); end
  def test_detailed_lever_guides_j25; assert_equal("Moderate technology progress (31% clinker in cement), fuel changes and energy efficiency. Equivalent to the development of recent programs for some sectors. Emissions per tonne decrease by 4%.", worksheet.detailed_lever_guides_j25); end
  def test_detailed_lever_guides_k25; assert_equal("Moderate process and technology changes: 4% decrease in consumption per tonne (31% clinker in cement). Some fuel switches (6% coal to biomass potential) Significant energy efficiency (9%). No additional CHP developments.  Emissions per tonne decrease by 4% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_k25); end
  def test_detailed_lever_guides_l25; assert_equal("Significant technology progress (34% clinker in cement), fuel switch towards biomass & electrification) & energy efficiency requiring significant financial investments. Emissions per tonne decrease by 8%.", worksheet.detailed_lever_guides_l25); end
  def test_detailed_lever_guides_m25; assert_equal("Significant process and technology changes: 8% decrease in consumption per tonne (34% clinker in cement). Significant fuel switches (46% coal to biomass potential). Significant energy efficiency (18%). No additional CHP developments.  Emissions per tonne decrease by 8% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_m25); end
  def test_detailed_lever_guides_n25; assert_equal("Very important technology progress (90% clinker in cement), fuel switch (towards biomass & electrification) & energy efficiency close to technical and physical constraints (but limited breakthrough technologies).Emissions per tonne reduce by 31%.", worksheet.detailed_lever_guides_n25); end
  def test_detailed_lever_guides_o25; assert_equal("Very important process and technology changes: 86% decrease in consumption per tonne (90% clinker in cement).Major fuel switches (100% coal to biomass potential). Energy efficiency close to technical & physical constraints (30%). No additional CHP developments.  Emissions per tonne reduce by 31% (excluding electricity emissions and counting biomass as fossil fuel).", worksheet.detailed_lever_guides_o25); end
  def test_detailed_lever_guides_b26; assert_equal("Carbon capture and storage (ind.)", worksheet.detailed_lever_guides_b26); end
  def test_detailed_lever_guides_d26; assert_equal("CCS is not implemented in industry in 2011.", worksheet.detailed_lever_guides_d26); end
  def test_detailed_lever_guides_e26; assert_equal("CCS enables a 0% CO2 reduction (excluding electricity emissions & counting biomass as fossil fuel) and an 0 EJ electricity consumption increase.", worksheet.detailed_lever_guides_e26); end
  def test_detailed_lever_guides_h26; assert_equal("No CCS development.", worksheet.detailed_lever_guides_h26); end
  def test_detailed_lever_guides_i26; assert_equal("No CCS development.", worksheet.detailed_lever_guides_i26); end
  def test_detailed_lever_guides_j26; assert_equal("Partial CCS development as of 2030 progressively leading to a reduction of 18% of emissions . It also implies a 1 EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_j26); end
  def test_detailed_lever_guides_k26; assert_equal("Partial CCS development as of 2030 progressively leading to a reduction of 18% of emissions (excluding electricity emissions & counting biomass as fossil fuel). It also implies a 119EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_k26); end
  def test_detailed_lever_guides_l26; assert_equal("Important CCS development as of 2030 progressively leading to a reduction of 39% of emissions. It also implies a 1 EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_l26); end
  def test_detailed_lever_guides_m26; assert_equal("Important CCS development as of 2030 progressively leading to a reduction of 39% of emissions (excluding electricity emissions & counting biomass as fossil fuel). It also implies a 119EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_m26); end
  def test_detailed_lever_guides_n26; assert_equal("Very important CCS development as of 2030 progressively leading to a reduction of 70% of emissions. It also implies a 1 EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_n26); end
  def test_detailed_lever_guides_o26; assert_equal("Very important CCS development as of 2030 progressively leading to a reduction of 70% of emissions (excluding electricity emissions & counting biomass as fossil fuel). It also implies a 119EJ additional electricity consumption per GtCO2 captured.", worksheet.detailed_lever_guides_o26); end
  def test_detailed_lever_guides_b27; assert_equal("Coal (incl. biomass) / oil / gas", worksheet.detailed_lever_guides_b27); end
  def test_detailed_lever_guides_c27; assert_equal("SLG.elec", worksheet.detailed_lever_guides_c27); end
  def test_detailed_lever_guides_d27; assert_equal("In 2011 out of total power supplied by fossil fuels 60% was supplied by solid fuel (coal / biomass), 9% by liquid fuel and 31% by gas fuel.", worksheet.detailed_lever_guides_d27); end
  def test_detailed_lever_guides_e27; assert_equal("In 2050 out of total fossil energy supplied it is 44% of solid, 21% of liquid and 35% of gas power.", worksheet.detailed_lever_guides_e27); end
  def test_detailed_lever_guides_g27; assert_equal("If the user supplies bioenergy from the land and food choices, some of this is allocated to thermal power plants.", worksheet.detailed_lever_guides_g27); end
  def test_detailed_lever_guides_h27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 61% is solid, 29% liquid and 10% is gas-based power.", worksheet.detailed_lever_guides_h27); end
  def test_detailed_lever_guides_i27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 61% is solid, 29% liquid and 10% is gas-based power.. This represents a slight move away from gas to liquid based power.", worksheet.detailed_lever_guides_i27); end
  def test_detailed_lever_guides_j27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 40% is solid, 19% of liquid and 41% of gas-based power", worksheet.detailed_lever_guides_j27); end
  def test_detailed_lever_guides_k27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 61% is solid, 29% liquid and 10% is gas-based power.. This represents a slight move away from solid to gas and liquid based power.", worksheet.detailed_lever_guides_k27); end
  def test_detailed_lever_guides_l27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 32% is solid, 6% is liquid and 62% is gas-based power.", worksheet.detailed_lever_guides_l27); end
  def test_detailed_lever_guides_m27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 61% is solid, 29% liquid and 10% is gas-based power.. This represents a strong move away from solid to gas based power.", worksheet.detailed_lever_guides_m27); end
  def test_detailed_lever_guides_n27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 26% is solid, 2% is liquid and 72% is gas-based power.", worksheet.detailed_lever_guides_n27); end
  def test_detailed_lever_guides_o27; assert_equal("By 2050, out of total electricity from fossil fuel / bioenergy based power, 61% is solid, 29% liquid and 10% is gas-based power.. This represents a significant move away from coal and liquid based power toward gas based power.", worksheet.detailed_lever_guides_o27); end
  def test_detailed_lever_guides_b28; assert_equal("Fossil fuel efficiency", worksheet.detailed_lever_guides_b28); end
  def test_detailed_lever_guides_d28; assert_equal("In 2011:\rSOLID FUELED POWER: 8% by ultrasupercritical, 17% supercritical, 75% sub-critical\rLIQUID FUELED POWER: 30% are efficient plants (over 50% efficient), 70% are inefficient plants (under 50% efficient)\rGAS FUELED POWER: 35% open cycle gas turbines and 65% by combined cycle gas turbines.", worksheet.detailed_lever_guides_d28); end
  def test_detailed_lever_guides_e28; assert_equal("In 2050 out of fossil energy supplied it is 17% by solid USC, 25% by solid SC, 58% by solid Sub-C, 41% by eff. liquid, 59% by ineff. liquid, 53% by OCGT and 47% by CCGT plant.", worksheet.detailed_lever_guides_e28); end
  def test_detailed_lever_guides_h28; assert_equal("By 2050:SOLID FUELED POWER 14% by solid ultrasupercritical, 23% by solid supercritical, 63% by solid subcritical. LIQUID FUELED POWER: 33% by efficient (plants that are over 50% efficient), 67% by inefficient (plants that less than 50% efficient). GAS FUELED POWER: 61% open cycle gas turbine, 39% combined cycle gas turbines.", worksheet.detailed_lever_guides_h28); end
  def test_detailed_lever_guides_i28; assert_equal("By 2050:SOLID FUELED POWER 14% by solid ultrasupercritical, 23% by solid supercritical, 63% by solid subcritical. LIQUID FUELED POWER: 33% by efficient (plants that are over 50% efficient), 67% by inefficient (plants that less than 50% efficient). GAS FUELED POWER: 61% open cycle gas turbine, 39% combined cycle gas turbines.", worksheet.detailed_lever_guides_i28); end
  def test_detailed_lever_guides_j28; assert_equal("By 2050:SOLID FUELED POWER:18% by solid ultrasupercritical, 27% by solid supercritical, 55% by solid subcritical. LIQUID FUELED: 47% by efficient (plants that are over 50% efficient), 53% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 48% open cycle gas turbine 53% combined cycle gas turbines.", worksheet.detailed_lever_guides_j28); end
  def test_detailed_lever_guides_k28; assert_equal("By 2050:SOLID FUELED POWER:18% by solid ultrasupercritical, 27% by solid supercritical, 55% by solid subcritical. LIQUID FUELED: 47% by efficient (plants that are over 50% efficient), 53% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 48% open cycle gas turbine 53% combined cycle gas turbines.", worksheet.detailed_lever_guides_k28); end
  def test_detailed_lever_guides_l28; assert_equal("By 2050:SOLID FUELED POWER: 20% by solid ultrasupercritical, 29% by solid supercritical, 50% by solid subcritical.LIQUID FUELED POWER: 65% by efficient (plants that are over 50% efficient), 35% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 18% open cycle gas turbine 83% combined cycle gas turbines.", worksheet.detailed_lever_guides_l28); end
  def test_detailed_lever_guides_m28; assert_equal("By 2050:SOLID FUELED POWER: 20% by solid ultrasupercritical, 29% by solid supercritical, 50% by solid subcritical.LIQUID FUELED POWER: 65% by efficient (plants that are over 50% efficient), 35% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 18% open cycle gas turbine 83% combined cycle gas turbines.", worksheet.detailed_lever_guides_m28); end
  def test_detailed_lever_guides_n28; assert_equal("By 2050: SOLID FUELED POWER: 23% by solid ultrasupercritical, 32% by solid supercritical, 45% by solid subcritical.LIQUID FUELED POWER: 71% by efficient (plants that are over 50% efficient), 29% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 7% open cycle gas turbine 93% combined cycle gas turbines.", worksheet.detailed_lever_guides_n28); end
  def test_detailed_lever_guides_o28; assert_equal("By 2050: SOLID FUELED POWER: 23% by solid ultrasupercritical, 32% by solid supercritical, 45% by solid subcritical.LIQUID FUELED POWER: 71% by efficient (plants that are over 50% efficient), 29% by inefficient (plants that are less than 50% efficient).GAS FUELED POWER: 7% open cycle gas turbine 93% combined cycle gas turbines.", worksheet.detailed_lever_guides_o28); end
  def test_detailed_lever_guides_b29; assert_equal("Carbon capture and storage (power)", worksheet.detailed_lever_guides_b29); end
  def test_detailed_lever_guides_c29; assert_equal("CCS.elec", worksheet.detailed_lever_guides_c29); end
  def test_detailed_lever_guides_d29; assert_equal("In 2011, most of the CCS projects implemented in the power sector were demonstration projects of kW and MW scale. There was no commercial deployment of CCS in power in 2011. However, there is a pipeline of CCS projects being developed by OECD countries (mainly USA and EU). These are not expected until the early 2020s.", worksheet.detailed_lever_guides_d29); end
  def test_detailed_lever_guides_e29; assert_equal("In 2050 there is 110.8 GW of CCS installed power capacity.", worksheet.detailed_lever_guides_e29); end
  def test_detailed_lever_guides_h29; assert_equal("By 2050 there is 16 GW of CCS installed power capacity.", worksheet.detailed_lever_guides_h29); end
  def test_detailed_lever_guides_i29; assert_equal("By 2050 there will be 16 GW of power plants with CCS. No new CCS plants will be commissioned beyond 2020 and the plants commissioned between 2015-2020 will be operating in 2050.", worksheet.detailed_lever_guides_i29); end
  def test_detailed_lever_guides_j29; assert_equal("By 2050 there is 490 GW of CCS installed power capacity.", worksheet.detailed_lever_guides_j29); end
  def test_detailed_lever_guides_k29; assert_equal("By 2050 there is 490 GW of CCS installed power capacity. This could be interpreted as expansion mostly driven by the US and EU and no/low participation from non-OECD countries. 10% of total fossil fuel plants will have CCS by 2050.", worksheet.detailed_lever_guides_k29); end
  def test_detailed_lever_guides_l29; assert_equal("By 2050 there is 1487 GW of CCS installed power capacity.", worksheet.detailed_lever_guides_l29); end
  def test_detailed_lever_guides_m29; assert_equal("By 2050 there is 1487 GW of CCS installed power capacity. This could be interpreted as moderate penetration of CCS in OECD countries and emerging economies and low expansion in developing countries. 30% of total fossil fuel-based plants have adopted CCS technology by 2050.", worksheet.detailed_lever_guides_m29); end
  def test_detailed_lever_guides_n29; assert_equal("By 2050 there is 3700 GW of CCS installed power capacity.", worksheet.detailed_lever_guides_n29); end
  def test_detailed_lever_guides_o29; assert_equal("By 2050 there is 3700 GW of CCS installed power capacity. High CCS expansion worldwide.", worksheet.detailed_lever_guides_o29); end
  def test_detailed_lever_guides_b30; assert_equal("Nuclear", worksheet.detailed_lever_guides_b30); end
  def test_detailed_lever_guides_c30; assert_equal("nuclear.elec", worksheet.detailed_lever_guides_c30); end
  def test_detailed_lever_guides_d30; assert_equal("In 2011 the total installed nuclear capacity was 364 GW with 429 operational power plants around the world.", worksheet.detailed_lever_guides_d30); end
  def test_detailed_lever_guides_e30; assert_equal("In 2050 there is 502.2 GW of installed nuclear power capacity.", worksheet.detailed_lever_guides_e30); end
  def test_detailed_lever_guides_h30; assert_equal("There is gradual phase out of nuclear power, so that by 2050 there is 0 GW of operational nuclear power capacity.", worksheet.detailed_lever_guides_h30); end
  def test_detailed_lever_guides_i30; assert_equal("There is gradual phase out of nuclear power, so that by 2050 there is 0 GW of operational nuclear power capacity.", worksheet.detailed_lever_guides_i30); end
  def test_detailed_lever_guides_j30; assert_equal("By 2050 there is 558 GW of installed nuclear power capacity.", worksheet.detailed_lever_guides_j30); end
  def test_detailed_lever_guides_k30; assert_equal("By 2050 there is 558 GW of installed nuclear power capacity. This is equivalent to current global build rates continuing up to 2050.", worksheet.detailed_lever_guides_k30); end
  def test_detailed_lever_guides_l30; assert_equal("By 2050 there is 989 GW of installed nuclear power capacity.", worksheet.detailed_lever_guides_l30); end
  def test_detailed_lever_guides_m30; assert_equal("By 2050 there is 989 GW of installed nuclear power capacity. This is equivalent to global planned build rates over the next decade (until 2020) continuing up to 2050.", worksheet.detailed_lever_guides_m30); end
  def test_detailed_lever_guides_n30; assert_equal("By 2050 there is 1870 GW of installed nuclear power capacity.", worksheet.detailed_lever_guides_n30); end
  def test_detailed_lever_guides_o30; assert_equal("By 2050 there is 1870 GW of installed nuclear power capacity. This is equivalent to implementation of all planned projects over the next decade, followed by expansion of the technology at the highest achievable build rate until 2050.", worksheet.detailed_lever_guides_o30); end
  def test_detailed_lever_guides_b31; assert_equal("Wind", worksheet.detailed_lever_guides_b31); end
  def test_detailed_lever_guides_c31; assert_equal("onshore.wind.elec, offshore.wind.elec", worksheet.detailed_lever_guides_c31); end
  def test_detailed_lever_guides_d31; assert_equal("In 2011 there was around 238 GW of onshore wind capacity with 83 countries across globe deploying it. In 2011 there was also 3.8 GW of offshore power installed.", worksheet.detailed_lever_guides_d31); end
  def test_detailed_lever_guides_e31; assert_equal("In 2050 there is 1390.2 GW of installed wind power capacity.", worksheet.detailed_lever_guides_e31); end
  def test_detailed_lever_guides_h31; assert_equal("By 2050 there is 0 GW of installed wind power capacity.", worksheet.detailed_lever_guides_h31); end
  def test_detailed_lever_guides_i31; assert_equal("By 2050 there is 0 GW of onshore wind energy. It builds at a rate of 19.64% till 2013, 8% till 2015, 5% till 2020 with decommissioning in tandem. In 2050 the offshore wind energy is also 0 GW with a build rate of 34.06% by 2015. After this, the rate of build up and decommissioning matches each other until 2020 after which it serves its technical lifespan. ", worksheet.detailed_lever_guides_i31); end
  def test_detailed_lever_guides_j31; assert_equal("By 2050 there is 2317 GW of installed wind power capacity.", worksheet.detailed_lever_guides_j31); end
  def test_detailed_lever_guides_k31; assert_equal("By 2050 there is 1862 GW of onshore wind energy and 455 GW of offshore wind energy. Different build rates were arrived by technical and geographical analysis.", worksheet.detailed_lever_guides_k31); end
  def test_detailed_lever_guides_l31; assert_equal("By 2050 there is 4710 GW of installed wind power capacity.", worksheet.detailed_lever_guides_l31); end
  def test_detailed_lever_guides_m31; assert_equal("In 2050 there is 3800 GW of onshore wind energy and 910 GW of offshore wind energy. Different build rates were arrived by technical and geographical analysis.", worksheet.detailed_lever_guides_m31); end
  def test_detailed_lever_guides_n31; assert_equal("By 2050 there is 6466 GW of installed wind power capacity.", worksheet.detailed_lever_guides_n31); end
  def test_detailed_lever_guides_o31; assert_equal("By 2050 there is 5058 GW of onshore wind energy. It builds at a rate of 21% by 2015, 16% by 2020, 8% by 2030, 6% until 2040 and 2% until 2050. There is 1408 GW of offshore wind energy which builds at a rate of 34.06% until 2020, 20% until 2030, 8% by 2040 and 4% by 2050. ", worksheet.detailed_lever_guides_o31); end
  def test_detailed_lever_guides_b32; assert_equal("Hydroelectric", worksheet.detailed_lever_guides_b32); end
  def test_detailed_lever_guides_c32; assert_equal("hydro.elec", worksheet.detailed_lever_guides_c32); end
  def test_detailed_lever_guides_d32; assert_equal("In 2011 the total installed hydro capacity was 970 GW.", worksheet.detailed_lever_guides_d32); end
  def test_detailed_lever_guides_e32; assert_equal("In 2050 there is 1659.7 GW of installed hydro power capacity.", worksheet.detailed_lever_guides_e32); end
  def test_detailed_lever_guides_h32; assert_equal("By 2050 there is 1324 GW of installed hydro power capacity.", worksheet.detailed_lever_guides_h32); end
  def test_detailed_lever_guides_i32; assert_equal("By 2050 there is 1324 GW of installed hydro power capacity. This is equivalent to all current capacity plus all projects already under construction or that have been commissioned.", worksheet.detailed_lever_guides_i32); end
  def test_detailed_lever_guides_j32; assert_equal("By 2050 there is 1697 GW of installed hydro power capacity.", worksheet.detailed_lever_guides_j32); end
  def test_detailed_lever_guides_k32; assert_equal("By 2050 there is 1697 GW of installed hydro power capacity. This is equivalent to steady growth of 1.5% a year.", worksheet.detailed_lever_guides_k32); end
  def test_detailed_lever_guides_l32; assert_equal("By 2050 there is 1912 GW of installed hydro power capacity.", worksheet.detailed_lever_guides_l32); end
  def test_detailed_lever_guides_m32; assert_equal("By 2050 there is 1912 GW of installed hydro power capacity. This is equivalent to steady growth of 2% a year, with continued investment in large hydro and technology upgrading.", worksheet.detailed_lever_guides_m32); end
  def test_detailed_lever_guides_n32; assert_equal("By 2050 there is 2342 GW of installed hydro power capacity.", worksheet.detailed_lever_guides_n32); end
  def test_detailed_lever_guides_o32; assert_equal("By 2050 there is 2342 GW of installed hydro power capacity. This is equivalent to a growth rate of 3% per year. Considering a limiting build rate of 3.55% to realize the entire hydro potential by 2050.", worksheet.detailed_lever_guides_o32); end
  def test_detailed_lever_guides_b33; assert_equal("Marine", worksheet.detailed_lever_guides_b33); end
  def test_detailed_lever_guides_c33; assert_equal("tidal.elec, wave.elec", worksheet.detailed_lever_guides_c33); end
  def test_detailed_lever_guides_d33; assert_equal("In 2011, there was around 1 GW of tidal power and 0.01 GW of wave energy.", worksheet.detailed_lever_guides_d33); end
  def test_detailed_lever_guides_e33; assert_equal("In 2050 there is 43.6 GW of installed marine power capacity.", worksheet.detailed_lever_guides_e33); end
  def test_detailed_lever_guides_h33; assert_equal("By 2050 there is 8 GW of installed marine power capacity.", worksheet.detailed_lever_guides_h33); end
  def test_detailed_lever_guides_i33; assert_equal("By 2050 there is 0 GW of tidal energy if not harnessed as the present installation would serve its technical lifespan whereas there will be 8 GW of wave energy.", worksheet.detailed_lever_guides_i33); end
  def test_detailed_lever_guides_j33; assert_equal("By 2050 there is 97 GW of installed marine power capacity.", worksheet.detailed_lever_guides_j33); end
  def test_detailed_lever_guides_k33; assert_equal("By 2050, there is 35 GW of tidal electricity and 62 GW of wave. ", worksheet.detailed_lever_guides_k33); end
  def test_detailed_lever_guides_l33; assert_equal("By 2050 there is 237 GW of installed marine power capacity.", worksheet.detailed_lever_guides_l33); end
  def test_detailed_lever_guides_m33; assert_equal("In 2050 there is 49 GW of tidal electricity. Build up rate enhanced considering construction time, global technological and environmental factors whereas there will be 105 GW of wave energy based on similar analysis.", worksheet.detailed_lever_guides_m33); end
  def test_detailed_lever_guides_n33; assert_equal("By 2050 there is 435.6 GW of installed marine power capacity.", worksheet.detailed_lever_guides_n33); end
  def test_detailed_lever_guides_o33; assert_equal("By 2050 there is 64 GW of tidal energy and 143 GW of wave energy. Different build up rate computed considering technical maturity and potential acceptance. ", worksheet.detailed_lever_guides_o33); end
  def test_detailed_lever_guides_b34; assert_equal("Solar", worksheet.detailed_lever_guides_b34); end
  def test_detailed_lever_guides_c34; assert_equal("concentrated.solar.elec, solarpv.elec", worksheet.detailed_lever_guides_c34); end
  def test_detailed_lever_guides_d34; assert_equal("In 2011, there was around 1.59 GW of concentrated solar power and 28 GW of photovoltaic power.", worksheet.detailed_lever_guides_d34); end
  def test_detailed_lever_guides_e34; assert_equal("In 2050 there is 882 GW of installed solar power capacity.", worksheet.detailed_lever_guides_e34); end
  def test_detailed_lever_guides_h34; assert_equal("By 2050 there is 0 GW of installed solar power capacity.", worksheet.detailed_lever_guides_h34); end
  def test_detailed_lever_guides_i34; assert_equal("By 2050 there is 0 GW of concentrated solar power. The average build up rate is 44.45% till 2015, 43.09% by 2020 after which the rate of decommissioning and technical lifespan will exceed build up rate. In 2050 there is 0 GW of photovoltaic which builds by 18.34% by 2015, 16.58% by 2020 post which rate of decommission & technical life span takes over.", worksheet.detailed_lever_guides_i34); end
  def test_detailed_lever_guides_j34; assert_equal("By 2050 there is 2204 GW of installed solar power capacity.", worksheet.detailed_lever_guides_j34); end
  def test_detailed_lever_guides_k34; assert_equal("By 2050 there is 388 GW of concentrated solar power and 811 GW of photovoltaic. Build up rates computed by analysing various technologies, barriers and country specific factors.", worksheet.detailed_lever_guides_k34); end
  def test_detailed_lever_guides_l34; assert_equal("By 2050 there is 4149 GW of installed solar power capacity.", worksheet.detailed_lever_guides_l34); end
  def test_detailed_lever_guides_m34; assert_equal("In 2050 there is 879 GW of concentrated solar power and 1860 GW of photovoltaic. Build up rates computed by analysing various factors.", worksheet.detailed_lever_guides_m34); end
  def test_detailed_lever_guides_n34; assert_equal("By 2050 there is 7547 GW of installed solar power capacity.", worksheet.detailed_lever_guides_n34); end
  def test_detailed_lever_guides_o34; assert_equal("By 2050 there is 1067 GW of concentrated solar energy. The average build rate is 58% up to 2020 where CSP landscape will change to average 8% by 2030 and 6% by 2050. In 2050 there is 3750 GW of photovoltaic with 22.76% till 2020, 15.3% by 2030, 8.75% by 2040 and 6% till 2050. ", worksheet.detailed_lever_guides_o34); end
  def test_detailed_lever_guides_b35; assert_equal("Geothermal", worksheet.detailed_lever_guides_b35); end
  def test_detailed_lever_guides_c35; assert_equal("geothermal.elec", worksheet.detailed_lever_guides_c35); end
  def test_detailed_lever_guides_d35; assert_equal("In 2011, there was around 11.56 GW of geothermal power. Around 24 countries used geothermal electricity and 70 countries geothermal heat. Maximum potential lies in countries on the \"ring of fire\" (in the basin of the Pacific Ocean).", worksheet.detailed_lever_guides_d35); end
  def test_detailed_lever_guides_e35; assert_equal("In 2050 there is 68.8 GW of installed geothermal power capacity.", worksheet.detailed_lever_guides_e35); end
  def test_detailed_lever_guides_h35; assert_equal("By 2050 there is 0 GW of installed geothermal power capacity.", worksheet.detailed_lever_guides_h35); end
  def test_detailed_lever_guides_i35; assert_equal("By 2050 there is 0 GW of geothermal electricity. Technological lifespan and depreciating CAGR was arrived by analysis of various intertwined factors.", worksheet.detailed_lever_guides_i35); end
  def test_detailed_lever_guides_j35; assert_equal("By 2050 there is 172 GW of installed geothermal power capacity.", worksheet.detailed_lever_guides_j35); end
  def test_detailed_lever_guides_k35; assert_equal("By 2050 there is 172 GW of geothermal electricity. Different build up rate were arrived for different timespans with emphasis on ring of fire countries.", worksheet.detailed_lever_guides_k35); end
  def test_detailed_lever_guides_l35; assert_equal("By 2050 there is 289 GW of installed geothermal power capacity.", worksheet.detailed_lever_guides_l35); end
  def test_detailed_lever_guides_m35; assert_equal("In 2050 there is 289 GW of geothermal electricity. Average growth rate is arrived by considering various global factors.", worksheet.detailed_lever_guides_m35); end
  def test_detailed_lever_guides_n35; assert_equal("By 2050 there is 404 GW of installed geothermal power capacity.", worksheet.detailed_lever_guides_n35); end
  def test_detailed_lever_guides_o35; assert_equal("By 2050 there is 404 GW of geothermal electricity. The average built up rate is 9% till 2020, whereas 11.55% till 2040 and 6% up till 2050. For developing the levels different variables were mapped and interdependence of factors was analysed.", worksheet.detailed_lever_guides_o35); end
  def test_detailed_lever_guides_b36; assert_equal("Storage and demand shifting", worksheet.detailed_lever_guides_b36); end
  def test_detailed_lever_guides_c36; assert_equal("storage.elec", worksheet.detailed_lever_guides_c36); end
  def test_detailed_lever_guides_d36; assert_equal("In 2011, there was around 120 GW of electricity storage plants, mainly in OECD countries. Energy storage technologies would include pumped storage, compressed air, sodium-sulphur batteries, advanced lead acid batteries, flow batteries, and lithium ion batteries for utility-scale storage. Many of these storage systems could be used to store off-peak power generated by renewable technology. ", worksheet.detailed_lever_guides_d36); end
  def test_detailed_lever_guides_e36; assert_equal("In 2050 there is 277.5 GW of electricity storage capacity.", worksheet.detailed_lever_guides_e36); end
  def test_detailed_lever_guides_h36; assert_equal("By 2050 there is 152 GW of electricity storage capacity.", worksheet.detailed_lever_guides_h36); end
  def test_detailed_lever_guides_i36; assert_equal("By 2050, around 152 GW of peak demand is met by energy storage. The storage has an annual growth rate of 3%.", worksheet.detailed_lever_guides_i36); end
  def test_detailed_lever_guides_j36; assert_equal("By 2050 there is 403 GW of electricity storage capacity.", worksheet.detailed_lever_guides_j36); end
  def test_detailed_lever_guides_k36; assert_equal("By 2050 there is 600 GW of energy storage by 2050. ", worksheet.detailed_lever_guides_k36); end
  def test_detailed_lever_guides_l36; assert_equal("By 2050 there is 800 GW of electricity storage capacity.", worksheet.detailed_lever_guides_l36); end
  def test_detailed_lever_guides_m36; assert_equal("By 2050 there is 800 GW of energy storage system by 2050.", worksheet.detailed_lever_guides_m36); end
  def test_detailed_lever_guides_n36; assert_equal("By 2050 there is 1200 GW of electricity storage capacity.", worksheet.detailed_lever_guides_n36); end
  def test_detailed_lever_guides_o36; assert_equal("High adoption of storage technologies across the globe, with 1200 GW of energy storage by 2050. ", worksheet.detailed_lever_guides_o36); end
  def test_detailed_lever_guides_b37; assert_equal("Calories consumed", worksheet.detailed_lever_guides_b37); end
  def test_detailed_lever_guides_d37; assert_equal("In 2011, the global average calorie consumption was 2,170 kcal/person/day, with extremes of obesity and undernourishment worldwide in terms of dietary energy intakes. This value is the effective calorie intake by person, i.e., already excluding losses (24% for food in general, in energy content).", worksheet.detailed_lever_guides_d37); end
  def test_detailed_lever_guides_h37; assert_equal("High global average calorie consumption by 2050, based on the current European level (2,560 kcal/person/day).", worksheet.detailed_lever_guides_h37); end
  def test_detailed_lever_guides_i37; assert_equal("Global average calorie consumption increases from 2,170 kcal/person/day to the current European level, i.e. 2,560 kcal/person/day, by 2050. This assumes an extreme situation, in which the whole world would achieve European levels of calories consumed. It represents a high risk of obesity problems and diabetes incidence, and more land allocation for agricultural purposes.", worksheet.detailed_lever_guides_i37); end
  def test_detailed_lever_guides_j37; assert_equal("Global average calorie consumption increases at growth rate of past decade to 2,430 kcal/person/day by 2050.", worksheet.detailed_lever_guides_j37); end
  def test_detailed_lever_guides_k37; assert_equal("Global average calorie consumption increases based on the growth rate of the past decade, i.e. from 2,170 kcal/person/day in 2011 up to 2,430 kcal/person/day by 2050. Therefore, this pathway is equivalent to approximately the same changes in food consumption observed in the last 10 years, in which some developing countries (e.g. China and India) have substantially increased their food consumption.", worksheet.detailed_lever_guides_k37); end
  def test_detailed_lever_guides_l37; assert_equal("Global average calorie consumption rises based on trend predicted by the UN’s Food and Agricultural Organisation (FAO) to 2,330 kcal/person/day by 2050. ", worksheet.detailed_lever_guides_l37); end
  def test_detailed_lever_guides_m37; assert_equal("Means a calorie consumption growth from 2,140 kcal/capita/day in 2011 to approximately 2300 kcal/capita/day by 2050, which is similar to the UN's Food and Agricultural Organisation (FAO) forecast by Alexandratos and Bruinsma (2012), after adjustment to exclude food losses. In this trajectory, there will be still a significant increase of food consumption globally, but the current trend would be slightly reduced due to population and consumption peaks in some countries.", worksheet.detailed_lever_guides_m37); end
  def test_detailed_lever_guides_n37; assert_equal("Global average calorie consumption meets the target for a healthy diet by 2050 (2,100 kcal/person/day).", worksheet.detailed_lever_guides_n37); end
  def test_detailed_lever_guides_o37; assert_equal("Global average calorie consumption reduces slightly from 2,170 kcal/person/day in 2011 to 2,100 kcal/person/day by 2050, which is the target for a healthy diet (2,200 kcal/person/day for men, and 2,000 kcal/person/day for women). However, this could also involve redistribution of food consumption, where some developing countries could increase food consumption (e.g. by reducing poverty) whilst some developed countries could reduce consumption (by tackling obesity issues). Overall, this is an extreme target, given that values below this global average would result in more cases of undernurishment.", worksheet.detailed_lever_guides_o37); end
  def test_detailed_lever_guides_b38; assert_equal("Meat consumed", worksheet.detailed_lever_guides_b38); end
  def test_detailed_lever_guides_d38; assert_equal("The current global average meat consumption is 191 kcal/person/day, but growing income in developing countries tends to stimulate an increase in meat consumption. This value is the effective meat intake by person, i.e., already excluding losses (19% for meat in general, in energy content).", worksheet.detailed_lever_guides_d38); end
  def test_detailed_lever_guides_h38; assert_equal("Very high global average meat consumption by 2050 (278 kcal/person/day), which is the 2011 average meat consumption in Europe, with 75% red meat and 25% white meat by 2050.", worksheet.detailed_lever_guides_h38); end
  def test_detailed_lever_guides_i38; assert_equal("Presents a very high consumption of meat. The total meat consumption per person in Europe in 2011 is assumed as a global target for 2050. Meat consumption would reach 278 kcal/person/day by 2050. This is a very risky and complex pathway, given that a significant amount of land would be necessary to meet this extreme demand for meat. Assumes a share of 75% red meat and 25% white meat by 2050.", worksheet.detailed_lever_guides_i38); end
  def test_detailed_lever_guides_j38; assert_equal("Global average meat consumption stabilises (191 kcal/person/day). Assumes a share of 60% red meat and 40% white meat by 2050.", worksheet.detailed_lever_guides_j38); end
  def test_detailed_lever_guides_k38; assert_equal("Considers that the current world dietary average of 191 kcal/person/day of meat will stabalise and continue until 2050. In this pathway, there would be no significant changes in average calorie consumption, although it presents a gradual change in meat types towards 60% red meat and 40% white meat by 2050.", worksheet.detailed_lever_guides_k38); end
  def test_detailed_lever_guides_l38; assert_equal("Low global average meat consumption by 2050 (162 kcal/person/day), based on the WHO reference for a healthy diet (90g a day). 60% white meat and 40% red meat. ", worksheet.detailed_lever_guides_l38); end
  def test_detailed_lever_guides_m38; assert_equal("Assumes a low meat consumption (162 kcal/person/day) in order to meet the WHO guidance for a healthy diet, which suggest the consumption of 90g /capita/day. This value is then adjusted for energy unit (1.0 g meat = 1.8 kcal, weighted average for 40% red and 60% white meat) and converted to effective meat intake (10% waste in energy terms). It also presents a gradual increase of the share of white meat (60% by 2050), and decrease of red meat (40% by 2050). ", worksheet.detailed_lever_guides_m38); end
  def test_detailed_lever_guides_n38; assert_equal("Extremely low global average meat consumption (14 kcal/person/day) akin to the Indian level in 2011, including vegetarian diets and meat alternatives. Assumes a share of 25% red meat and 75% white meat by 2050.", worksheet.detailed_lever_guides_n38); end
  def test_detailed_lever_guides_o38; assert_equal("Represents diets with very low meat consumption, based on India as a reference for 2050 (14 kcal/person/ay). This lever includes vegetarian diets and meat alternatives (e.g., soy meat substitutes, yeast-based meat and potential stem cell-based technologies). This is a very extreme situation and assumes an unprecedented change in dietary preferences worldwide. It also assumes a gradual shift of meat types towards 25% red meat and 75% white meat by 2050. ", worksheet.detailed_lever_guides_o38); end
  def test_detailed_lever_guides_b39; assert_equal("Crop yields", worksheet.detailed_lever_guides_b39); end
  def test_detailed_lever_guides_d39; assert_equal("Crop yields are substantially increasing, particularly in the developing countries where there is a significant productivity gap compared to developed countries with higher yields.", worksheet.detailed_lever_guides_d39); end
  def test_detailed_lever_guides_h39; assert_equal("Negative crop yields, which could be interpreted as due to climate change impacts on agriculture (yields fall 10% by 2050).", worksheet.detailed_lever_guides_h39); end
  def test_detailed_lever_guides_i39; assert_equal("Represents a severe productivity decrease, -10% overall by 2050. This could be interpreted as due to negative impacts of climate change on agriculture, or scarcity of natural resources, e.g. water and fertilisers.", worksheet.detailed_lever_guides_i39); end
  def test_detailed_lever_guides_j39; assert_equal("Moderate crop yield growth (40% increase from 2011 by 2050).", worksheet.detailed_lever_guides_j39); end
  def test_detailed_lever_guides_k39; assert_equal("Moderate crop yield growth, approximately 40% by 2050, as suggested by the UN's Food and Agriculture Organisation (FAO)  as a likely trend, assuming grains as a reference.", worksheet.detailed_lever_guides_k39); end
  def test_detailed_lever_guides_l39; assert_equal("High crop yield growth (60% increase from 2011 by 2050).", worksheet.detailed_lever_guides_l39); end
  def test_detailed_lever_guides_m39; assert_equal("Global yields increase approximately 60% by 2050. This increase represents a linear extrapolation of past yield growths, taking grains as a reference. This level assumes a significant contribution from better crop varieties, irrigation, higher use of fertilisers, improved farm management and technology transfer in order to reduce the yield gap, as well as capacity development programmes, and low climate change impacts on agriculture.", worksheet.detailed_lever_guides_m39); end
  def test_detailed_lever_guides_n39; assert_equal("High crop yield growth (120% increase from 2011 by 2050).", worksheet.detailed_lever_guides_n39); end
  def test_detailed_lever_guides_o39; assert_equal("Presents extreme yield growth, 120% by 2050. This aggressive level of effort assumes a substantial use of biotechnology, a high increase in photosynthetic efficiencies, technology transfer, mechanisation, irrigation, higher use of fertilisers, and potentially positive climate change impacts on crop productivity, always on global average terms.", worksheet.detailed_lever_guides_o39); end
  def test_detailed_lever_guides_b40; assert_equal("Land-use efficiency ", worksheet.detailed_lever_guides_b40); end
  def test_detailed_lever_guides_d40; assert_equal("The efficiency of land use can be increased by using land for multiple purposes (e.g. co-cropping and integration schemes). These techniques can decrease the land area needed but can also result in negative effects.", worksheet.detailed_lever_guides_d40); end
  def test_detailed_lever_guides_h40; assert_equal("Mismanaged land use. It assumes that 10% more agricultural land would be necessary to attain the selected food/livestock/bioenergy production.", worksheet.detailed_lever_guides_h40); end
  def test_detailed_lever_guides_i40; assert_equal("This level assumes that 10% more agricultural land would be necessary to meet the selected food/livestock/bioenergy production levels by 2050. This would reflect mismanaged land use, which can cause soil degradation or desertification, e.g. through erosion, water scarcity or soil salinisation. ", worksheet.detailed_lever_guides_i40); end
  def test_detailed_lever_guides_j40; assert_equal("Current world pattern of agricultural system stabilised until 2050 (no change from 2011).", worksheet.detailed_lever_guides_j40); end
  def test_detailed_lever_guides_k40; assert_equal("Assumes that the current world pattern of agricultural system stabilises until 2050. This means that either no further benefit or damage would be expected from land multi-use by 2050.", worksheet.detailed_lever_guides_k40); end
  def test_detailed_lever_guides_l40; assert_equal("10% less agricultural land is necessary to attain the selected food/livestock/bioenergy production by 2050. ", worksheet.detailed_lever_guides_l40); end
  def test_detailed_lever_guides_m40; assert_equal("Represents an increase in agro-forestry-pasture synergies and best farming practices, e.g. crop rotation, dual cropping, co-cropping and no tillage technologies. At this level of effort, 10% less agricultural land would be necessary to meet the selected food/livestock/bioenergy production levels by 2050. ", worksheet.detailed_lever_guides_m40); end
  def test_detailed_lever_guides_n40; assert_equal("30% less agricultural land would be necessary to attend the selected food/livestock/bioenergy productions by 2050.", worksheet.detailed_lever_guides_n40); end
  def test_detailed_lever_guides_o40; assert_equal("A substantial increase in agro-forestry-pasture synergies and best farming practices result in 30% less agricultural land would be necessary to meet the selected food/livestock/bioenergy production levels by 2050. This means that climate-smart agriculture and high levels of integrated agricultural land use management (e.g., dual/triple cropping) have been rolled out.", worksheet.detailed_lever_guides_o40); end
  def test_detailed_lever_guides_b41; assert_equal("Livestock yields", worksheet.detailed_lever_guides_b41); end
  def test_detailed_lever_guides_d41; assert_equal("There have been gradual annual increases in livestock yields worldwide, but there are significant yield gaps in developing countries and extensive production systems. ", worksheet.detailed_lever_guides_d41); end
  def test_detailed_lever_guides_h41; assert_equal("Low increase of livestock yields: 10% increase in concentration of grass-fed livestock (animal density), 5% increase of feed conversion ratio, and no increase in feedlot systems by 2050. ", worksheet.detailed_lever_guides_h41); end
  def test_detailed_lever_guides_i41; assert_equal("Means a low increase of livestock yields: 10% increase in concentration of grass-fed livestock (animal density), 5% increase of feed conversion ratio, and no increase in feedlot systems by 2050. ", worksheet.detailed_lever_guides_i41); end
  def test_detailed_lever_guides_j41; assert_equal("Moderate increase of livestock yields: 30% increase in concentration of grass-fed livestock (animal density), 10% increase of feed conversion ratio, and low increase in feedlot systems from 2% in 2011 to 5% in 2050 for cattle and from 4% in 2011 to 6% in 2050 for sheep and goats.", worksheet.detailed_lever_guides_j41); end
  def test_detailed_lever_guides_k41; assert_equal("Assumes a moderate increase of livestock yields: 30% increase in concentration of grass-fed livestock (animal density), 10% increase of feed conversion ratio, and low increase in feedlot systems from 2% in 2011 to 5% in 2050 for cattle, and from 4% in 2011 to 6% in 2050 for sheep and goats.", worksheet.detailed_lever_guides_k41); end
  def test_detailed_lever_guides_l41; assert_equal("High increase of livestock yields: 50% increase in concentration of grass-fed livestock (animal density), 15% increase of feed conversion ratio, and moderate increase in feedlot systems from 2% in 2011 to 15% in 2050 for cattle and from 4% in 2011 to 8% in 2050 for sheep and goats. ", worksheet.detailed_lever_guides_l41); end
  def test_detailed_lever_guides_m41; assert_equal("Means a high increase of livestock yields: 50% increase in concentration of grass-fed livestock (animal density), 15% increase of feed conversion ratio, and moderate increase in feedlot systems from 2% in 2011 to 15% in 2050 for cattle, and from 4% in 2011 to 8% in 2050 for sheep and goats. This means a high use of conventional animal genetic improvements, pasture rotation management, technology transfer to developing countries and capacity development programmes.", worksheet.detailed_lever_guides_m41); end
  def test_detailed_lever_guides_n41; assert_equal("Assumes a high increase of livestock yields: 80% increase in concentration of grass-fed livestock (animal density), 20% increase of feed conversion ratio, and high increase in feedlot systems from 2% in 2011 to 30% in 2050 for cattle and from 4% in 2011 to 10% in 2050 for sheep and goats.", worksheet.detailed_lever_guides_n41); end
  def test_detailed_lever_guides_o41; assert_equal("Assumes a high increase of livestock yields: 80% increase in concentration of grass-fed livestock (animal density), 20% increase of feed conversion ratio, and high increase in feedlot systems from 2% in 2011 to 30% in 2050 for cattle, and from 4% in 2011 to 10% in 2050 for sheep and goats. This means a high use of conventional animal genetic improvements, pasture rotation management, technology transfer to developing countries and capacity development programmes. This also assumes extensive use of biotechnology, and strong technology transfer from developed to developing countries in order to leap-frog the learning curves for higher productivities.", worksheet.detailed_lever_guides_o41); end
  def test_detailed_lever_guides_b42; assert_equal("Bioenergy yields", worksheet.detailed_lever_guides_b42); end
  def test_detailed_lever_guides_d42; assert_equal("Bioenergy represents approximately 60 EJ of the world energy mix (2011). Production is most substantial in the USA, Brazil, Germany, France and China, and others. Bioenergy is mostly produced as a biofuel for the transport sector. Solid biomass is used mainly for cooking and heating, but could have a larger role in displacing coal in thermopower plants. Negative emissions can be possible if bioenergy is used with carbon capture and storage (BECCS). Bioenergy also has a speculative use as a greenhouse gas removal technology in the form of biochar (see the GGR tab).", worksheet.detailed_lever_guides_d42); end
  def test_detailed_lever_guides_h42; assert_equal("Means a low yield increase of energy production per area, without significant changes in the energy crop mix. Total increase: 20% by 2050.", worksheet.detailed_lever_guides_h42); end
  def test_detailed_lever_guides_i42; assert_equal("Means a low yield increase of energy production per area, 20% by 2050. This is below the current crop yield growth trend, and includes the use of crops with low energy balance (e.g., corn-based ethanol, oilseed-rape-based biodiesel), although still using efficient energy crops, either for liquid fuel or solid biomass for power, heating and cooking.", worksheet.detailed_lever_guides_i42); end
  def test_detailed_lever_guides_j42; assert_equal("Assumes a moderate increase in energy crop yields and changes in the mix of energy crops towards a higher share of energy-efficient plants. Total increase: 50% by 2050.", worksheet.detailed_lever_guides_j42); end
  def test_detailed_lever_guides_k42; assert_equal("Assumes a moderate increase in yields and substantial changes in the energy crop mix towards a higher share of energy efficient plants. Total increase: 50% by 2050. This level also requires better farm management and industrial integration with production systems.", worksheet.detailed_lever_guides_k42); end
  def test_detailed_lever_guides_l42; assert_equal("Means a high yield increase, and substantial changes in their mix towards high energy-efficient plants. Total increase: 120% by 2050. ", worksheet.detailed_lever_guides_l42); end
  def test_detailed_lever_guides_m42; assert_equal("Considers a high yield increase and use of more efficient energy crops, with a total increase of 120% by 2050. This yield growth is expected through an expansion of some new biofuel technologies, e.g. lignocellulosic bioethanol and Fischer-Tropsch biodiesel, which may affect further investments on agricultural yields for energy crops. At this level, crops with high energy performance would substantially increase their share in the global market.", worksheet.detailed_lever_guides_m42); end
  def test_detailed_lever_guides_n42; assert_equal("Represents an extreme increase in bioenergy yields, and use of very highly efficient crops. Total increase: 220% by 2050. ", worksheet.detailed_lever_guides_n42); end
  def test_detailed_lever_guides_o42; assert_equal("Represents an extreme increase of bioenergy yields and a focus on very highly efficient energy plants, with a total increase of 220% by 2050. This is based on advanced fuel technologies, biotechnology, state-of-the-art farm management, and further use of irrigation and fertilisers. This level assumesthat highly efficient energy crops (e.g., sugarcane, oil palm, switchgrass, napier grass and miscanthus) would dominate the market and consequently also increase the average yield of bioenergy crops.", worksheet.detailed_lever_guides_o42); end
  def test_detailed_lever_guides_b43; assert_equal("Bioenergy type (biomass and biofuels)", worksheet.detailed_lever_guides_b43); end
  def test_detailed_lever_guides_d43; assert_equal("The global production of bioenergy is consumed by different sectors in two main forms: 92% is solid biomass (e.g. wood logs, pellets and chips) and 8% is liquid fuels (e.g. bioethanol and biodiesel). Traditional biomass (e.g. woody biomass from forests for cooking and heating, mainly in rural areas) represents approximately 79% out of the total bioenergy consumption (2011). This lever's scenarios decrease the use of traditional biomass by 2050, due to environmental concerns, rural development and technology transfer, while modern bioenergy tends to increase its global share. This lever refers to the bioenergy form at the end-use level, hence solid biomass that is converted into liquid fuels (e.g. lingo-cellulosic process, biomass-to-liquids) is here considered as liquid. Bioenergy here includes both traditional and modern bioenergy, but excludes farm residues and food wastes, which are modelled in separate through the ‘wastes and residues’ lever. Biogas is included in 'wastes and residues' too (e.g. slurry gas an anaerobic digestion), although it can be also produced from the conversion of solid biomass through gasification process. ", worksheet.detailed_lever_guides_d43); end
  def test_detailed_lever_guides_h43; assert_equal("Solid biomass will represent 100% of the total bioenergy consumed. ", worksheet.detailed_lever_guides_h43); end
  def test_detailed_lever_guides_i43; assert_equal("Liquid biofuels would be no longer used by 2050, and therefore 100% of the bioenergy produced would be consumed in solid form, such as wood pellets and chips. This level assumes that technology changes, particularly in transport, would lead bioenergy to be consumed in solid form.", worksheet.detailed_lever_guides_i43); end
  def test_detailed_lever_guides_j43; assert_equal("The current share of bioenergy forms remains unchanged to 2050 (92% solid biomass and 8% liquid biofuels). ", worksheet.detailed_lever_guides_j43); end
  def test_detailed_lever_guides_k43; assert_equal("The current share of solid and liquid bioenergy (92% solid biomass and 8% liquid biofuels, in 2011) remains the same from now until 2050, i.e. no changes would be expected regarding bioenergy forms. Therefore, this level assumes no substantial changes in the current pattern of bioenergy production and consumption.", worksheet.detailed_lever_guides_k43); end
  def test_detailed_lever_guides_l43; assert_equal("Liquid biofuels would increase their share in total bioenergy by 2050, from 8% (2011) to 20%, which is similar to the International Energy Agency’s 2050 forecast. Solid biomass would decrease from 92% in 2011 to 80% in 2050. ", worksheet.detailed_lever_guides_l43); end
  def test_detailed_lever_guides_m43; assert_equal("Biofuels would increase their relevance as a renewable energy source, mainly for the transport sector, by 2050. New technologies are expected to increase the competitiveness of biofuels, e.g. lignocellulosic ethanol and biomass-to-liquids (e.g. the Fischer-Tropsch process).  It assumes that liquid biofuels would increase from 8% to 20%, whilst solid biomass would decrease from 92% to 80%, from 2011 to 2050, respectively.", worksheet.detailed_lever_guides_m43); end
  def test_detailed_lever_guides_n43; assert_equal("There is an extreme shift towards liquid biofuels in total bioenergy consumption, which would increase from 8% in 2011 to 50% in 2050, whilst solid biomass decreases its share from 92% to 50%.", worksheet.detailed_lever_guides_n43); end
  def test_detailed_lever_guides_o43; assert_equal("There is an extreme shift towards liquid biofuels in total bioenergy consumption, which would increase from 8% in 2011 to 50% in 2050, whilst solid biomass decreases its share from 92% to 50%. Liquid biofuel would be mainly used in the transport sector, including aviation. To achieve this level, it would be expected that new technologies would substantially increase the competitiveness of biofuels, e.g. lignocellulosic ethanol and biomass-to-liquid conversions like the Fischer-Tropsch process. In contrast, traditional biomass would substantially decrease worldwide.", worksheet.detailed_lever_guides_o43); end
  def test_detailed_lever_guides_b44; assert_equal("Surplus land (forest & bioenergy) ", worksheet.detailed_lever_guides_b44); end
  def test_detailed_lever_guides_d44; assert_equal("In 2011, around 6 million ha of land were deforested, not only due to livestock and agricultural expansions, but also to wood extraction and land tenure issues. This lever allows you to decide how any land your have freed up in your pathway is used. ", worksheet.detailed_lever_guides_d44); end
  def test_detailed_lever_guides_h44; assert_equal("Surplus land is allocated to 80% forests (including natural regeneration and planted forests), and 20% restoration of natural grasslands.", worksheet.detailed_lever_guides_h44); end
  def test_detailed_lever_guides_i44; assert_equal("Assumes that if more land becomes available by 2050 due to a potential reduction of crop/pasture lands, 80% will be dedicated to forests (including natural regeneration and planted forests), and 20% will become restored natural grasslands.", worksheet.detailed_lever_guides_i44); end
  def test_detailed_lever_guides_j44; assert_equal("Surplus land is allocated to 60% forest and restoration of natural grasslands, and 40% to a limited expansion of energy crops.", worksheet.detailed_lever_guides_j44); end
  def test_detailed_lever_guides_k44; assert_equal("Assumes that the remaining land would be allocated to 60% forest and restoration of natural grasslands, and 40% to a limited expansion of energy crops.", worksheet.detailed_lever_guides_k44); end
  def test_detailed_lever_guides_l44; assert_equal("Surplus land would be allocated to 40% forest and restoration of natural grasslands, and 60% to a limited expansion of energy crops.", worksheet.detailed_lever_guides_l44); end
  def test_detailed_lever_guides_m44; assert_equal("Assumes that the remaining land would be allocated to 40% forest and restoration of natural grasslands, and 60% to a limited expansion of energy crops.", worksheet.detailed_lever_guides_m44); end
  def test_detailed_lever_guides_n44; assert_equal("Surplus land would be allocated 80% to a limited expansion of energy crops. The remaining 20% would be allocated to forest and restoration of natural grasslands. ", worksheet.detailed_lever_guides_n44); end
  def test_detailed_lever_guides_o44; assert_equal("Assumes that 80% of the remaining land would be allocated to a limited expansion of energy crops. The remaining 20% would be allocated as forest and restoration of natural grasslands.  This produces a maximum expansion of bioenergy in the Global Calculator based on a linear growth rate for meeting approximately 300 EJ of bioenergy production by 2050, when all levers are in level 4 for example. Such bioenergy production is reported by IPCC as an extreme global bioenergy potential. ", worksheet.detailed_lever_guides_o44); end
  def test_detailed_lever_guides_b45; assert_equal("Biochar", worksheet.detailed_lever_guides_b45); end
  def test_detailed_lever_guides_d45; assert_equal("Biochar is already routinely produced on a large scale for use as charcoal and as a soil improver. What is less well-established is the long-term characterisation of the behaviour of biochar as a means of storing carbon away from the atmosphere. ", worksheet.detailed_lever_guides_d45); end
  def test_detailed_lever_guides_h45; assert_equal("No biochar technologies. This assumes that biochar will not be implemented by 2050 at any scale.", worksheet.detailed_lever_guides_h45); end
  def test_detailed_lever_guides_j45; assert_equal("Low effort on biochar technologies. Such technologies would not require additional technological advances or changes in regulation. The removal rate would reach 0.33 GtCO2/year by 2050 (10% of level 4).", worksheet.detailed_lever_guides_j45); end
  def test_detailed_lever_guides_l45; assert_equal("Substantial contribution of biochar to tackle global warming. It would require technical and regulatory advances. The removal rate would reach 0.825 GtCO2/year by 2050 (25% of level 4).", worksheet.detailed_lever_guides_l45); end
  def test_detailed_lever_guides_n45; assert_equal("Top estimate of how much biochar could contribute by 2050. It is highly unlikely that emissions could be removed at this level in this timeframe, and the pathway carries significant risks. The removal rate would reach 3.3 GtCO2/year by 2050.", worksheet.detailed_lever_guides_n45); end
  def test_detailed_lever_guides_b46; assert_equal("Direct air capture", worksheet.detailed_lever_guides_b46); end
  def test_detailed_lever_guides_d46; assert_equal("There are about a dozen proposed DAC technologies that have been demonstrated at small scales. Technically the process works – in fact, the removal of carbon dioxide from ambient air in submarines and spacecraft has been practised for decades. The real questions are around the carbon balance of the systems and the economics.", worksheet.detailed_lever_guides_d46); end
  def test_detailed_lever_guides_h46; assert_equal("No direct air capture technologies. This assumes that they will not be implemented by 2050 at any scale.", worksheet.detailed_lever_guides_h46); end
  def test_detailed_lever_guides_j46; assert_equal("Low effort on DAC technologies. Such technologies would not require additional technological advances or changes in regulation. The removal rate would reach 1 GtCO2/year by 2050 (10% of level 4).", worksheet.detailed_lever_guides_j46); end
  def test_detailed_lever_guides_l46; assert_equal("Substantial contribution of DAC to tackle global warming. It would require technical and regulatory advances. The removal rate would reach 2.5 GtCO2/year by 2050 (25% of level 4).", worksheet.detailed_lever_guides_l46); end
  def test_detailed_lever_guides_n46; assert_equal("Top estimate of how much DAC could contribute by 2050. It is highly unlikely that emissions could be removed at this level in this timeframe, and the pathway carries significant risks. The removal rate would reach 10 GtCO2/year by 2050.", worksheet.detailed_lever_guides_n46); end
  def test_detailed_lever_guides_b47; assert_equal("Ocean fertilisation", worksheet.detailed_lever_guides_b47); end
  def test_detailed_lever_guides_d47; assert_equal("A small number of OF experiments have been undertaken, most with the approval of national research establishments, but some without such approval. Those experiments that have been undertaken without approval have been highly controversial. The results of the officially approved experiments have indicated, at least in some instances, that there has been net carbon drawdown, but there are still many unanswered questions as to the long-term effects of this technique. ", worksheet.detailed_lever_guides_d47); end
  def test_detailed_lever_guides_h47; assert_equal("No OF technologies. It means that they will not be implemented by 2050 at any scale.", worksheet.detailed_lever_guides_h47); end
  def test_detailed_lever_guides_j47; assert_equal("Low effort on OF technologies. Such technologies would not require additional technological advances or changes in regulation. The removal rate would reach 0.1 GtCO2/year by 2050 (10% of level 4).", worksheet.detailed_lever_guides_j47); end
  def test_detailed_lever_guides_l47; assert_equal("Substantial contribution of OF to tackle global warming. It would also require technical and regulatory advances. The removal rate would reach 0.25 GtCO2/year by 2050 (25% of level 4).", worksheet.detailed_lever_guides_l47); end
  def test_detailed_lever_guides_n47; assert_equal("Top estimate of how much OF could contribute by 2050. It is highly unlikely that emissions could be removed at this level in this timeframe, and the pathway carries significant risks. The removal rate would reach 1 GtCO2/year by 2050.", worksheet.detailed_lever_guides_n47); end
  def test_detailed_lever_guides_b48; assert_equal("Enhanced weathering (oceanic)", worksheet.detailed_lever_guides_b48); end
  def test_detailed_lever_guides_d48; assert_equal("EW-O has been studied in the laboratory and has been modelled, but it has not been researched in the open environment. The processes required to generate alkaline materials are well established at an industrial scale. However, the environmental impacts of adding them into the oceans are not known. ", worksheet.detailed_lever_guides_d48); end
  def test_detailed_lever_guides_h48; assert_equal("No ocean-based EW-O technologies. This assumes that they will not be implemented by 2050 at any scale.", worksheet.detailed_lever_guides_h48); end
  def test_detailed_lever_guides_j48; assert_equal("Low effort on EW-O technologies. Such technologies would not require additional technological advances or changes in regulation. The removal rate would reach 1 GtCO2/year by 2050 (10% of level 4).", worksheet.detailed_lever_guides_j48); end
  def test_detailed_lever_guides_l48; assert_equal("Substantial contribution of EW-O to tackle global warming. This would require technical and regulatory advances. The removal rate would reach 2.5 GtCO2/year by 2050 (25% of level 4).", worksheet.detailed_lever_guides_l48); end
  def test_detailed_lever_guides_n48; assert_equal("Top estimate of how much EW-O could contribute by 2050. It is highly unlikely that emissions could be removed at this level in this timeframe, and the pathway carries significant risks. The removal rate would reach 10 GtCO2/year by 2050.", worksheet.detailed_lever_guides_n48); end
  def test_detailed_lever_guides_b49; assert_equal("Enhanced weathering (terrestial)", worksheet.detailed_lever_guides_b49); end
  def test_detailed_lever_guides_d49; assert_equal("EW-T has been studied in the laboratory and has been modelled, but it has had little research in the open environment (though proponents of EW-T have marketed ground olivine as a soil additive already). Technical and theoretical modelling of the particle sizes indicate that while there would be some carbon dioxide drawdown, it is far less than has been claimed. ", worksheet.detailed_lever_guides_d49); end
  def test_detailed_lever_guides_h49; assert_equal("No land-based EW-T technologies. It means that they will not be implemented by 2050 at any scale.", worksheet.detailed_lever_guides_h49); end
  def test_detailed_lever_guides_j49; assert_equal("Low effort on EW-T technologies. Such technologies would not require additional technological advances or changes in regulation. The removal rate would reach 0.370 GtCO2/year by 2050 (10% of level 4).", worksheet.detailed_lever_guides_j49); end
  def test_detailed_lever_guides_l49; assert_equal("Substantial contribution of EW-T to tackle global warming. It would require technical and regulatory advances. The removal rate would reach 0.925 GtCO2/year by 2050 (25% of level 4).", worksheet.detailed_lever_guides_l49); end
  def test_detailed_lever_guides_n49; assert_equal("Top estimate of how much EW-T could contribute by 2050. It is highly unlikely that emissions could be removed at this level in this timeframe, and the pathway carries significant risks. The removal rate would reach 3.700 GtCO2/year by 2050.", worksheet.detailed_lever_guides_n49); end
  def test_detailed_lever_guides_b50; assert_equal("Wastes and residues", worksheet.detailed_lever_guides_b50); end
  def test_detailed_lever_guides_d50; assert_equal("Substantial production of wastes and residues worldwide with a low collection of them for energy and animal feed purposes. Total on-farm residues are equivalent to 100% of the total food production (1:1), which includes straws, stoves and husks, with approximately 10% currently collected for energy or feed. As for the post-farm residues and wastes, it is estimated that 24% of the total food production, 19% of meat products, 18% of milk products and 10% of egg products become losses, with the collection for energy and feed of only 1% of food and meat, 0.1% of milk (derivates) and 0.2% eggs (mostly derivates) out to this total production. Note that all these values are in energy terms instead of weight.", worksheet.detailed_lever_guides_d50); end
  def test_detailed_lever_guides_h50; assert_equal("Assumes no increase in the production and collection of on-farm residues; and no increase in the production of post-farm wastes and residues, but with a low increase in their collection for energy and feed. ", worksheet.detailed_lever_guides_h50); end
  def test_detailed_lever_guides_i50; assert_equal("Assumes no increase in the production and collection of on-farm residues; and no increase in the production of post-farm wastes and residues, but with a low increase in collection (food from crops and meat from 1% in 2011 to 5% in 2050; eggs from 0.2% in 2011 to 0.5% in 2050; and milk from 0.1% in 2011 to 0.5% in 2050). ", worksheet.detailed_lever_guides_i50); end
  def test_detailed_lever_guides_j50; assert_equal("Moderate increase in the collection of on-farm residues (from 10% in 2011 to 20% in 2050). It also assumes a reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 20%; meat 19% to 15%; eggs 10% to 8%; milk 18% to 15%) and moderate increase in collection for energy and feed.", worksheet.detailed_lever_guides_j50); end
  def test_detailed_lever_guides_k50; assert_equal("Moderate increase in the collection of on-farm residues (from 10% in 2011 to 20% in 2050). It also assumes a reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 20%; meat 19% to 15%; eggs 10% to 8%; milk 18% to 15%), as well as a moderate increase in collection for energy and feed (food from crops and meat from 1% in 2011 to 15% in 2050; eggs from 0.2% in 2011 to 2% in 2050; and milk from 0.1% in 2011 to 2% in 2050).", worksheet.detailed_lever_guides_k50); end
  def test_detailed_lever_guides_l50; assert_equal("High collection of on-farm residues for energy and feed (from 10% in 2011 to 30% in 2050). Reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 16%; meat 19% to 10%; eggs 10% to 6%; milk 18% to 10%). Increase in waste collection for bioenergy.", worksheet.detailed_lever_guides_l50); end
  def test_detailed_lever_guides_m50; assert_equal("High increase in the collection of on-farm residues (from 10% in 2011 to 30% in 2050). It also assumes a reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 16%; meat 19% to 10%; eggs 10% to 6%; milk 18% to 10%), as well as a moderate increase in collection for energy and feed (food from crops and meat from 1% in 2011 to 20% in 2050; eggs from 0.2% in 2011 to 5% in 2050; and milk from 0.1% in 2011 to 5% in 2050).", worksheet.detailed_lever_guides_m50); end
  def test_detailed_lever_guides_n50; assert_equal("Extreme collection of on-farm residues for energy and feed (from 10% in 2011 to 40% in 2050). A substantial reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 10%; meat 19% to 5%; eggs 10% to 5%; milk 18% to 5%). An increase in waste collection for bioenergy.", worksheet.detailed_lever_guides_n50); end
  def test_detailed_lever_guides_o50; assert_equal("Extreme increase in the collection of on-farm residues (from 10% in 2011 to 40% in 2050). It also assumes a reduction in the production of post-farm residues and wastes (from 2011 to 2050: plant-based food 24% to 10%; meat 19% to 5%; eggs 10% to 5%; milk 18% to 5%), as well as a moderate increase in collection for energy and feed (food from crops and meat from 1% in 2011 to 30% in 2050; eggs from 0.2% in 2011 to 10% in 2050; and milk from 0.1% in 2011 to 10% in 2050).", worksheet.detailed_lever_guides_o50); end
  def test_detailed_lever_guides_b51; assert_equal("Emissions trajectory", worksheet.detailed_lever_guides_b51); end
  def test_detailed_lever_guides_h51; assert_equal("After 2050, emissions are flat.", worksheet.detailed_lever_guides_h51); end
  def test_detailed_lever_guides_i51; assert_equal("After 2050, emissions are flat.", worksheet.detailed_lever_guides_i51); end
  def test_detailed_lever_guides_j51; assert_equal("After 2050, emissions change every year by one third of the average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_j51); end
  def test_detailed_lever_guides_k51; assert_equal("After 2050, emissions change every year by one third of the average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_k51); end
  def test_detailed_lever_guides_l51; assert_equal("After 2050, emissions change every year by two thirds the average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_l51); end
  def test_detailed_lever_guides_m51; assert_equal("After 2050, emissions change every year by two thirds the average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_m51); end
  def test_detailed_lever_guides_n51; assert_equal("After 2050, emissions change every year by 1.16 x average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_n51); end
  def test_detailed_lever_guides_o51; assert_equal("After 2050, emissions change every year by 1.16 x average yearly change for the previous 15 year period (unless an absolute lower limit is hit).", worksheet.detailed_lever_guides_o51); end
  def test_detailed_lever_guides_b52; assert_equal("Atmospheric CO2 fraction", worksheet.detailed_lever_guides_b52); end
  def test_detailed_lever_guides_c52; assert_equal("atm.fraction", worksheet.detailed_lever_guides_c52); end
  def test_detailed_lever_guides_d52; assert_equal("Current fraction of CO2 emissions which remain in the atmosphere: measured at 44±6 % (IPCC AR5).", worksheet.detailed_lever_guides_d52); end
  def test_detailed_lever_guides_h52; assert_equal("Land and ocean sinks increase; by 2100, only 30% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_h52); end
  def test_detailed_lever_guides_i52; assert_equal("Land and ocean sinks increase relative to the present day; by 2100, only 30% of emitted CO2 remains in atmosphere. Such a low atmospheric fraction is only expected for trajectories with very low rates of CO2 emissions.", worksheet.detailed_lever_guides_i52); end
  def test_detailed_lever_guides_j52; assert_equal(" Land and ocean sinks remain similar to today; 44% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_j52); end
  def test_detailed_lever_guides_k52; assert_equal(" Land and ocean sinks remain similar to today; 44% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_k52); end
  def test_detailed_lever_guides_l52; assert_equal("Land and ocean sinks decrease slightly; by 2100, 60% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_l52); end
  def test_detailed_lever_guides_m52; assert_equal("Land and ocean sinks decrease slightly; by 2100, 60% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_m52); end
  def test_detailed_lever_guides_n52; assert_equal("Land and ocean sinks decrease significantly: by 2100, 74% of emitted CO2 remains in atmosphere.", worksheet.detailed_lever_guides_n52); end
  def test_detailed_lever_guides_o52; assert_equal("Land and ocean sinks decrease significantly: by 2100, 74% of emitted CO2 remains in atmosphere. Such a high atmospheric fraction is only expected for trajectories with very high rates of CO2 emissions.", worksheet.detailed_lever_guides_o52); end
  def test_detailed_lever_guides_b53; assert_equal("Confidence in climate models", worksheet.detailed_lever_guides_b53); end
  def test_detailed_lever_guides_c53; assert_equal("model.unc", worksheet.detailed_lever_guides_c53); end
  def test_detailed_lever_guides_d53; assert_equal("Various methods are used to account for the fact that numerical models cannot represent the full range of our uncertainty about the future climate.", worksheet.detailed_lever_guides_d53); end
  def test_detailed_lever_guides_h53; assert_equal("Show only the raw range of output from climate models.", worksheet.detailed_lever_guides_h53); end
  def test_detailed_lever_guides_i53; assert_equal("Display only the range of model-generated outputs with no additional range to account for unmodelled phenomena. This level is provided for comparison purposes only.", worksheet.detailed_lever_guides_i53); end
  def test_detailed_lever_guides_j53; assert_equal("Generate an uncertainty range based on model output, using a method similar to the most recent IPCC report, to account for unmodelled phenomena.", worksheet.detailed_lever_guides_j53); end
  def test_detailed_lever_guides_k53; assert_equal("Generate an uncertainty range based on model output, using a method similar to the most recent IPCC report, to account for unmodelled phenomena. This method takes the \"very likely\" range generated by computer models and downgrades that to a \"likely\" range, so that the effect in the Calculator is to widen the range of projected temperatures. See documentation for further details.", worksheet.detailed_lever_guides_k53); end
  def test_detailed_lever_guides_l53; assert_equal("Low confidence in climate models. Show alternative evidence for climate impacts.", worksheet.detailed_lever_guides_l53); end
  def test_detailed_lever_guides_m53; assert_equal("If \"low confidence in climate models\" is selected, no climate model results are shown. Instead, the \"Basic Physics\" page explains why we can have confidence in certain large-scale climate impacts without using computer models.", worksheet.detailed_lever_guides_m53); end
  def test_detailed_lever_guides_b54; assert_equal("Region factor", worksheet.detailed_lever_guides_b54); end
  def test_detailed_lever_guides_h54; assert_equal("US costs", worksheet.detailed_lever_guides_h54); end
  def test_detailed_lever_guides_b55; assert_equal(:ref, worksheet.detailed_lever_guides_b55); end
  def test_detailed_lever_guides_h55; assert_equal("US costs", worksheet.detailed_lever_guides_h55); end
  def test_detailed_lever_guides_b56; assert_equal(:ref, worksheet.detailed_lever_guides_b56); end
  def test_detailed_lever_guides_h56; assert_equal("US costs", worksheet.detailed_lever_guides_h56); end
  def test_detailed_lever_guides_b57; assert_equal("Coal", worksheet.detailed_lever_guides_b57); end
  def test_detailed_lever_guides_b58; assert_equal("Oil", worksheet.detailed_lever_guides_b58); end
  def test_detailed_lever_guides_b59; assert_equal("Gas", worksheet.detailed_lever_guides_b59); end
  def test_detailed_lever_guides_b60; assert_equal("Solid bioenergy", worksheet.detailed_lever_guides_b60); end
  def test_detailed_lever_guides_b61; assert_equal("Liquid bioenergy", worksheet.detailed_lever_guides_b61); end
  def test_detailed_lever_guides_b62; assert_equal("Gaseous bioenergy", worksheet.detailed_lever_guides_b62); end
  def test_detailed_lever_guides_b63; assert_equal("Hydrogen", worksheet.detailed_lever_guides_b63); end
  def test_detailed_lever_guides_b64; assert_equal("Occupancy, load & ownership", worksheet.detailed_lever_guides_b64); end
  def test_detailed_lever_guides_d64; assert_equal("In 2011, the average car carried 2 people, the average train carried 384 people, and the average international ship carried around 20 000 tonnes of cargo (the dominant mode for freight).", worksheet.detailed_lever_guides_d64); end
  def test_detailed_lever_guides_g64; assert_equal("The impact of changes to occupancy will depend on the other transport levers.", worksheet.detailed_lever_guides_g64); end
  def test_detailed_lever_guides_h64; assert_equal("By 2050, passenger car and train occupancies remain unchanged, and the average freight vehicle carries the same amount of cargo.", worksheet.detailed_lever_guides_h64); end
  def test_detailed_lever_guides_i64; assert_equal("By 2050, passenger car and train occupancies remain unchanged, and the average freight vehicle carries the same amount of cargo.", worksheet.detailed_lever_guides_i64); end
  def test_detailed_lever_guides_j64; assert_equal("By 2050, car and train occupancies increase by 10%, and domestic freight vehicles and international freight ships carry 10% and 5% more cargo respectively.", worksheet.detailed_lever_guides_j64); end
  def test_detailed_lever_guides_k64; assert_equal("By 2050, car and train occupancies increase by 10%, and domestic freight vehicles and international freight ships carry 10% and 5% more cargo respectively.", worksheet.detailed_lever_guides_k64); end
  def test_detailed_lever_guides_l64; assert_equal("By 2050, car and train occupancies increase by 20%, and domestic freight vehicles and international freight ships carry 20% and 10% more cargo respectively.", worksheet.detailed_lever_guides_l64); end
  def test_detailed_lever_guides_m64; assert_equal("By 2050, car and train occupancies increase by 20%, and domestic freight vehicles and international freight ships carry 20% and 10% more cargo respectively.", worksheet.detailed_lever_guides_m64); end
  def test_detailed_lever_guides_n64; assert_equal("By 2050, car and train occupancies increase by 30%, and domestic freight vehicles and international freight ships carry 30% and 15% more cargo respectively.", worksheet.detailed_lever_guides_n64); end
  def test_detailed_lever_guides_o64; assert_equal("By 2050, car and train occupancies increase by 30%, and domestic freight vehicles and international freight ships carry 30% and 15% more cargo respectively.", worksheet.detailed_lever_guides_o64); end
  def test_user_inputs_h6; assert_equal("IEA \"2DS\" (approx)", worksheet.user_inputs_h6); end
  def test_user_inputs_i6; assert_equal("IEA \"4DS\" (approx)", worksheet.user_inputs_i6); end
  def test_user_inputs_j6; assert_equal("IEA \"6DS\" (approx)", worksheet.user_inputs_j6); end
  def test_user_inputs_k6; assert_equal("2 degrees with higher \"lifestyle\"", worksheet.user_inputs_k6); end
  def test_user_inputs_l6; assert_equal("Incumbent technology", worksheet.user_inputs_l6); end
  def test_user_inputs_m6; assert_equal("No CCS", worksheet.user_inputs_m6); end
  def test_user_inputs_n6; assert_equal("No nuclear", worksheet.user_inputs_n6); end
  def test_user_inputs_o6; assert_equal("Farming failure", worksheet.user_inputs_o6); end
  def test_user_inputs_p6; assert_equal("Healthy eating", worksheet.user_inputs_p6); end
  def test_user_inputs_q6; assert_equal("UCL TIAM 2DS (approx)", worksheet.user_inputs_q6); end
  def test_user_inputs_r6; assert_equal("UCL TIAM 4DS (approx)", worksheet.user_inputs_r6); end
  def test_user_inputs_h7; assert_in_epsilon(2.0, worksheet.user_inputs_h7, 0.002); end
  def test_user_inputs_i7; assert_in_epsilon(2.0, worksheet.user_inputs_i7, 0.002); end
  def test_user_inputs_j7; assert_in_epsilon(2.0, worksheet.user_inputs_j7, 0.002); end
  def test_user_inputs_k7; assert_in_epsilon(2.0, worksheet.user_inputs_k7, 0.002); end
  def test_user_inputs_l7; assert_in_epsilon(2.0, worksheet.user_inputs_l7, 0.002); end
  def test_user_inputs_m7; assert_in_epsilon(2.0, worksheet.user_inputs_m7, 0.002); end
  def test_user_inputs_n7; assert_in_epsilon(2.0, worksheet.user_inputs_n7, 0.002); end
  def test_user_inputs_o7; assert_in_epsilon(2.0, worksheet.user_inputs_o7, 0.002); end
  def test_user_inputs_p7; assert_in_epsilon(2.0, worksheet.user_inputs_p7, 0.002); end
  def test_user_inputs_q7; assert_in_epsilon(2.1, worksheet.user_inputs_q7, 0.002); end
  def test_user_inputs_r7; assert_in_epsilon(2.1, worksheet.user_inputs_r7, 0.002); end
  def test_user_inputs_h8; assert_in_epsilon(2.0, worksheet.user_inputs_h8, 0.002); end
  def test_user_inputs_i8; assert_in_epsilon(2.0, worksheet.user_inputs_i8, 0.002); end
  def test_user_inputs_j8; assert_in_epsilon(2.0, worksheet.user_inputs_j8, 0.002); end
  def test_user_inputs_k8; assert_in_epsilon(2.0, worksheet.user_inputs_k8, 0.002); end
  def test_user_inputs_l8; assert_in_epsilon(2.0, worksheet.user_inputs_l8, 0.002); end
  def test_user_inputs_m8; assert_in_epsilon(2.0, worksheet.user_inputs_m8, 0.002); end
  def test_user_inputs_n8; assert_in_epsilon(2.0, worksheet.user_inputs_n8, 0.002); end
  def test_user_inputs_o8; assert_in_epsilon(2.0, worksheet.user_inputs_o8, 0.002); end
  def test_user_inputs_p8; assert_in_epsilon(2.0, worksheet.user_inputs_p8, 0.002); end
  def test_user_inputs_q8; assert_in_epsilon(2.0, worksheet.user_inputs_q8, 0.002); end
  def test_user_inputs_r8; assert_in_epsilon(2.0, worksheet.user_inputs_r8, 0.002); end
  def test_user_inputs_h9; assert_in_epsilon(2.0, worksheet.user_inputs_h9, 0.002); end
  def test_user_inputs_i9; assert_in_epsilon(2.0, worksheet.user_inputs_i9, 0.002); end
  def test_user_inputs_j9; assert_in_epsilon(2.0, worksheet.user_inputs_j9, 0.002); end
  def test_user_inputs_k9; assert_in_epsilon(1.5, worksheet.user_inputs_k9, 0.002); end
  def test_user_inputs_l9; assert_in_epsilon(2.0, worksheet.user_inputs_l9, 0.002); end
  def test_user_inputs_m9; assert_in_epsilon(2.0, worksheet.user_inputs_m9, 0.002); end
  def test_user_inputs_n9; assert_in_epsilon(2.0, worksheet.user_inputs_n9, 0.002); end
  def test_user_inputs_o9; assert_in_epsilon(2.0, worksheet.user_inputs_o9, 0.002); end
  def test_user_inputs_p9; assert_in_epsilon(2.0, worksheet.user_inputs_p9, 0.002); end
  def test_user_inputs_q9; assert_in_epsilon(3.2, worksheet.user_inputs_q9, 0.002); end
  def test_user_inputs_r9; assert_in_epsilon(3.0, worksheet.user_inputs_r9, 0.002); end
  def test_user_inputs_h10; assert_in_epsilon(2.0, worksheet.user_inputs_h10, 0.002); end
  def test_user_inputs_i10; assert_in_epsilon(2.0, worksheet.user_inputs_i10, 0.002); end
  def test_user_inputs_j10; assert_in_epsilon(2.0, worksheet.user_inputs_j10, 0.002); end
  def test_user_inputs_k10; assert_in_epsilon(1.5, worksheet.user_inputs_k10, 0.002); end
  def test_user_inputs_l10; assert_in_epsilon(2.0, worksheet.user_inputs_l10, 0.002); end
  def test_user_inputs_m10; assert_in_epsilon(2.0, worksheet.user_inputs_m10, 0.002); end
  def test_user_inputs_n10; assert_in_epsilon(2.0, worksheet.user_inputs_n10, 0.002); end
  def test_user_inputs_o10; assert_in_epsilon(2.0, worksheet.user_inputs_o10, 0.002); end
  def test_user_inputs_p10; assert_in_epsilon(2.0, worksheet.user_inputs_p10, 0.002); end
  def test_user_inputs_q10; assert_in_epsilon(3.5, worksheet.user_inputs_q10, 0.002); end
  def test_user_inputs_r10; assert_in_epsilon(3.3, worksheet.user_inputs_r10, 0.002); end
  def test_user_inputs_h11; assert_in_epsilon(2.8, worksheet.user_inputs_h11, 0.002); end
  def test_user_inputs_i11; assert_in_epsilon(2.0, worksheet.user_inputs_i11, 0.002); end
  def test_user_inputs_j11; assert_in_epsilon(1.9, worksheet.user_inputs_j11, 0.002); end
  def test_user_inputs_k11; assert_in_epsilon(1.5, worksheet.user_inputs_k11, 0.002); end
  def test_user_inputs_l11; assert_in_epsilon(2.8, worksheet.user_inputs_l11, 0.002); end
  def test_user_inputs_m11; assert_in_epsilon(2.8, worksheet.user_inputs_m11, 0.002); end
  def test_user_inputs_n11; assert_in_epsilon(2.8, worksheet.user_inputs_n11, 0.002); end
  def test_user_inputs_o11; assert_in_epsilon(2.8, worksheet.user_inputs_o11, 0.002); end
  def test_user_inputs_p11; assert_in_epsilon(2.8, worksheet.user_inputs_p11, 0.002); end
  def test_user_inputs_q11; assert_in_epsilon(1.2, worksheet.user_inputs_q11, 0.002); end
  def test_user_inputs_r11; assert_in_delta(1.0, worksheet.user_inputs_r11, 0.002); end
  def test_user_inputs_h12; assert_in_epsilon(2.8, worksheet.user_inputs_h12, 0.002); end
  def test_user_inputs_i12; assert_in_epsilon(2.0, worksheet.user_inputs_i12, 0.002); end
  def test_user_inputs_j12; assert_in_epsilon(1.9, worksheet.user_inputs_j12, 0.002); end
  def test_user_inputs_k12; assert_in_epsilon(1.5, worksheet.user_inputs_k12, 0.002); end
  def test_user_inputs_l12; assert_in_epsilon(2.8, worksheet.user_inputs_l12, 0.002); end
  def test_user_inputs_m12; assert_in_epsilon(2.8, worksheet.user_inputs_m12, 0.002); end
  def test_user_inputs_n12; assert_in_epsilon(2.8, worksheet.user_inputs_n12, 0.002); end
  def test_user_inputs_o12; assert_in_epsilon(2.8, worksheet.user_inputs_o12, 0.002); end
  def test_user_inputs_p12; assert_in_epsilon(2.8, worksheet.user_inputs_p12, 0.002); end
  def test_user_inputs_q12; assert_in_epsilon(1.2, worksheet.user_inputs_q12, 0.002); end
  def test_user_inputs_r12; assert_in_delta(1.0, worksheet.user_inputs_r12, 0.002); end
  def test_user_inputs_h13; assert_in_epsilon(2.8, worksheet.user_inputs_h13, 0.002); end
  def test_user_inputs_i13; assert_in_epsilon(2.2, worksheet.user_inputs_i13, 0.002); end
  def test_user_inputs_j13; assert_in_epsilon(2.0, worksheet.user_inputs_j13, 0.002); end
  def test_user_inputs_k13; assert_in_epsilon(3.3, worksheet.user_inputs_k13, 0.002); end
  def test_user_inputs_l13; assert_in_epsilon(2.8, worksheet.user_inputs_l13, 0.002); end
  def test_user_inputs_m13; assert_in_epsilon(3.0, worksheet.user_inputs_m13, 0.002); end
  def test_user_inputs_n13; assert_in_epsilon(3.0, worksheet.user_inputs_n13, 0.002); end
  def test_user_inputs_o13; assert_in_epsilon(3.6, worksheet.user_inputs_o13, 0.002); end
  def test_user_inputs_p13; assert_in_epsilon(2.8, worksheet.user_inputs_p13, 0.002); end
  def test_user_inputs_q13; assert_in_epsilon(3.8, worksheet.user_inputs_q13, 0.002); end
  def test_user_inputs_r13; assert_in_epsilon(2.6, worksheet.user_inputs_r13, 0.002); end
  def test_user_inputs_h14; assert_in_epsilon(2.5, worksheet.user_inputs_h14, 0.002); end
  def test_user_inputs_i14; assert_in_epsilon(1.2, worksheet.user_inputs_i14, 0.002); end
  def test_user_inputs_j14; assert_in_delta(1.0, worksheet.user_inputs_j14, 0.002); end
  def test_user_inputs_k14; assert_in_epsilon(3.3, worksheet.user_inputs_k14, 0.002); end
  def test_user_inputs_l14; assert_in_delta(1.0, worksheet.user_inputs_l14, 0.002); end
  def test_user_inputs_m14; assert_in_epsilon(3.0, worksheet.user_inputs_m14, 0.002); end
  def test_user_inputs_n14; assert_in_epsilon(3.0, worksheet.user_inputs_n14, 0.002); end
  def test_user_inputs_o14; assert_in_epsilon(3.6, worksheet.user_inputs_o14, 0.002); end
  def test_user_inputs_p14; assert_in_epsilon(2.5, worksheet.user_inputs_p14, 0.002); end
  def test_user_inputs_q14; assert_in_epsilon(3.7, worksheet.user_inputs_q14, 0.002); end
  def test_user_inputs_r14; assert_in_epsilon(2.5, worksheet.user_inputs_r14, 0.002); end
  def test_user_inputs_h15; assert_in_epsilon(2.0, worksheet.user_inputs_h15, 0.002); end
  def test_user_inputs_i15; assert_in_epsilon(2.0, worksheet.user_inputs_i15, 0.002); end
  def test_user_inputs_j15; assert_in_epsilon(2.0, worksheet.user_inputs_j15, 0.002); end
  def test_user_inputs_k15; assert_in_epsilon(1.5, worksheet.user_inputs_k15, 0.002); end
  def test_user_inputs_l15; assert_in_epsilon(2.0, worksheet.user_inputs_l15, 0.002); end
  def test_user_inputs_m15; assert_in_epsilon(2.0, worksheet.user_inputs_m15, 0.002); end
  def test_user_inputs_n15; assert_in_epsilon(2.0, worksheet.user_inputs_n15, 0.002); end
  def test_user_inputs_o15; assert_in_epsilon(2.8, worksheet.user_inputs_o15, 0.002); end
  def test_user_inputs_p15; assert_in_epsilon(2.0, worksheet.user_inputs_p15, 0.002); end
  def test_user_inputs_q15; assert_in_epsilon(2.5, worksheet.user_inputs_q15, 0.002); end
  def test_user_inputs_r15; assert_in_epsilon(1.8, worksheet.user_inputs_r15, 0.002); end
  def test_user_inputs_h16; assert_in_epsilon(2.0, worksheet.user_inputs_h16, 0.002); end
  def test_user_inputs_i16; assert_in_epsilon(2.0, worksheet.user_inputs_i16, 0.002); end
  def test_user_inputs_j16; assert_in_epsilon(2.0, worksheet.user_inputs_j16, 0.002); end
  def test_user_inputs_k16; assert_in_epsilon(1.5, worksheet.user_inputs_k16, 0.002); end
  def test_user_inputs_l16; assert_in_epsilon(2.0, worksheet.user_inputs_l16, 0.002); end
  def test_user_inputs_m16; assert_in_epsilon(2.0, worksheet.user_inputs_m16, 0.002); end
  def test_user_inputs_n16; assert_in_epsilon(2.0, worksheet.user_inputs_n16, 0.002); end
  def test_user_inputs_o16; assert_in_epsilon(2.0, worksheet.user_inputs_o16, 0.002); end
  def test_user_inputs_p16; assert_in_epsilon(2.0, worksheet.user_inputs_p16, 0.002); end
  def test_user_inputs_q16; assert_in_epsilon(2.5, worksheet.user_inputs_q16, 0.002); end
  def test_user_inputs_r16; assert_in_epsilon(2.0, worksheet.user_inputs_r16, 0.002); end
  def test_user_inputs_h17; assert_in_epsilon(2.0, worksheet.user_inputs_h17, 0.002); end
  def test_user_inputs_i17; assert_in_epsilon(2.0, worksheet.user_inputs_i17, 0.002); end
  def test_user_inputs_j17; assert_in_epsilon(2.0, worksheet.user_inputs_j17, 0.002); end
  def test_user_inputs_k17; assert_in_epsilon(1.5, worksheet.user_inputs_k17, 0.002); end
  def test_user_inputs_l17; assert_in_epsilon(2.0, worksheet.user_inputs_l17, 0.002); end
  def test_user_inputs_m17; assert_in_epsilon(2.0, worksheet.user_inputs_m17, 0.002); end
  def test_user_inputs_n17; assert_in_epsilon(2.0, worksheet.user_inputs_n17, 0.002); end
  def test_user_inputs_o17; assert_in_epsilon(2.0, worksheet.user_inputs_o17, 0.002); end
  def test_user_inputs_p17; assert_in_epsilon(2.0, worksheet.user_inputs_p17, 0.002); end
  def test_user_inputs_q17; assert_in_epsilon(3.0, worksheet.user_inputs_q17, 0.002); end
  def test_user_inputs_r17; assert_in_epsilon(2.5, worksheet.user_inputs_r17, 0.002); end
  def test_user_inputs_h18; assert_in_epsilon(2.8, worksheet.user_inputs_h18, 0.002); end
  def test_user_inputs_i18; assert_in_epsilon(1.9, worksheet.user_inputs_i18, 0.002); end
  def test_user_inputs_j18; assert_in_epsilon(1.6, worksheet.user_inputs_j18, 0.002); end
  def test_user_inputs_k18; assert_in_epsilon(3.3, worksheet.user_inputs_k18, 0.002); end
  def test_user_inputs_l18; assert_in_epsilon(2.8, worksheet.user_inputs_l18, 0.002); end
  def test_user_inputs_m18; assert_in_epsilon(3.0, worksheet.user_inputs_m18, 0.002); end
  def test_user_inputs_n18; assert_in_epsilon(2.9, worksheet.user_inputs_n18, 0.002); end
  def test_user_inputs_o18; assert_in_epsilon(3.6, worksheet.user_inputs_o18, 0.002); end
  def test_user_inputs_p18; assert_in_epsilon(2.8, worksheet.user_inputs_p18, 0.002); end
  def test_user_inputs_q18; assert_in_epsilon(2.5, worksheet.user_inputs_q18, 0.002); end
  def test_user_inputs_r18; assert_in_epsilon(2.0, worksheet.user_inputs_r18, 0.002); end
  def test_user_inputs_h19; assert_in_epsilon(3.0, worksheet.user_inputs_h19, 0.002); end
  def test_user_inputs_i19; assert_in_epsilon(1.8, worksheet.user_inputs_i19, 0.002); end
  def test_user_inputs_j19; assert_in_epsilon(1.5, worksheet.user_inputs_j19, 0.002); end
  def test_user_inputs_k19; assert_in_epsilon(3.3, worksheet.user_inputs_k19, 0.002); end
  def test_user_inputs_l19; assert_in_epsilon(1.5, worksheet.user_inputs_l19, 0.002); end
  def test_user_inputs_m19; assert_in_epsilon(3.0, worksheet.user_inputs_m19, 0.002); end
  def test_user_inputs_n19; assert_in_epsilon(3.0, worksheet.user_inputs_n19, 0.002); end
  def test_user_inputs_o19; assert_in_epsilon(3.6, worksheet.user_inputs_o19, 0.002); end
  def test_user_inputs_p19; assert_in_epsilon(3.0, worksheet.user_inputs_p19, 0.002); end
  def test_user_inputs_q19; assert_in_epsilon(3.8, worksheet.user_inputs_q19, 0.002); end
  def test_user_inputs_r19; assert_in_epsilon(1.5, worksheet.user_inputs_r19, 0.002); end
  def test_user_inputs_h20; assert_in_epsilon(3.0, worksheet.user_inputs_h20, 0.002); end
  def test_user_inputs_i20; assert_in_epsilon(2.5, worksheet.user_inputs_i20, 0.002); end
  def test_user_inputs_j20; assert_in_epsilon(1.6, worksheet.user_inputs_j20, 0.002); end
  def test_user_inputs_k20; assert_in_epsilon(3.3, worksheet.user_inputs_k20, 0.002); end
  def test_user_inputs_l20; assert_in_epsilon(3.0, worksheet.user_inputs_l20, 0.002); end
  def test_user_inputs_m20; assert_in_epsilon(3.0, worksheet.user_inputs_m20, 0.002); end
  def test_user_inputs_n20; assert_in_epsilon(3.0, worksheet.user_inputs_n20, 0.002); end
  def test_user_inputs_o20; assert_in_epsilon(3.6, worksheet.user_inputs_o20, 0.002); end
  def test_user_inputs_p20; assert_in_epsilon(3.0, worksheet.user_inputs_p20, 0.002); end
  def test_user_inputs_q20; assert_in_epsilon(3.0, worksheet.user_inputs_q20, 0.002); end
  def test_user_inputs_r20; assert_in_delta(1.0, worksheet.user_inputs_r20, 0.002); end
  def test_user_inputs_h21; assert_in_epsilon(1.7, worksheet.user_inputs_h21, 0.002); end
  def test_user_inputs_i21; assert_in_epsilon(1.5, worksheet.user_inputs_i21, 0.002); end
  def test_user_inputs_j21; assert_in_epsilon(1.4, worksheet.user_inputs_j21, 0.002); end
  def test_user_inputs_k21; assert_in_epsilon(1.5, worksheet.user_inputs_k21, 0.002); end
  def test_user_inputs_l21; assert_in_epsilon(1.7, worksheet.user_inputs_l21, 0.002); end
  def test_user_inputs_m21; assert_in_epsilon(1.7, worksheet.user_inputs_m21, 0.002); end
  def test_user_inputs_n21; assert_in_epsilon(1.7, worksheet.user_inputs_n21, 0.002); end
  def test_user_inputs_o21; assert_in_epsilon(2.6, worksheet.user_inputs_o21, 0.002); end
  def test_user_inputs_p21; assert_in_epsilon(1.7, worksheet.user_inputs_p21, 0.002); end
  def test_user_inputs_q21; assert_in_epsilon(1.5, worksheet.user_inputs_q21, 0.002); end
  def test_user_inputs_r21; assert_in_epsilon(1.2, worksheet.user_inputs_r21, 0.002); end
  def test_user_inputs_h22; assert_in_epsilon(2.0, worksheet.user_inputs_h22, 0.002); end
  def test_user_inputs_i22; assert_in_epsilon(1.5, worksheet.user_inputs_i22, 0.002); end
  def test_user_inputs_j22; assert_in_epsilon(1.1, worksheet.user_inputs_j22, 0.002); end
  def test_user_inputs_k22; assert_in_epsilon(1.9, worksheet.user_inputs_k22, 0.002); end
  def test_user_inputs_l22; assert_in_epsilon(2.6, worksheet.user_inputs_l22, 0.002); end
  def test_user_inputs_m22; assert_in_epsilon(3.0, worksheet.user_inputs_m22, 0.002); end
  def test_user_inputs_n22; assert_in_epsilon(1.8, worksheet.user_inputs_n22, 0.002); end
  def test_user_inputs_o22; assert_in_epsilon(3.3, worksheet.user_inputs_o22, 0.002); end
  def test_user_inputs_p22; assert_in_epsilon(1.7, worksheet.user_inputs_p22, 0.002); end
  def test_user_inputs_q22; assert_in_epsilon(1.5, worksheet.user_inputs_q22, 0.002); end
  def test_user_inputs_r22; assert_in_delta(1.0, worksheet.user_inputs_r22, 0.002); end
  def test_user_inputs_h23; assert_in_epsilon(3.9, worksheet.user_inputs_h23, 0.002); end
  def test_user_inputs_i23; assert_in_epsilon(2.5, worksheet.user_inputs_i23, 0.002); end
  def test_user_inputs_j23; assert_in_epsilon(1.5, worksheet.user_inputs_j23, 0.002); end
  def test_user_inputs_k23; assert_in_epsilon(3.0, worksheet.user_inputs_k23, 0.002); end
  def test_user_inputs_l23; assert_in_epsilon(2.0, worksheet.user_inputs_l23, 0.002); end
  def test_user_inputs_m23; assert_in_epsilon(3.0, worksheet.user_inputs_m23, 0.002); end
  def test_user_inputs_n23; assert_in_epsilon(2.9, worksheet.user_inputs_n23, 0.002); end
  def test_user_inputs_o23; assert_in_epsilon(3.6, worksheet.user_inputs_o23, 0.002); end
  def test_user_inputs_p23; assert_in_epsilon(2.9, worksheet.user_inputs_p23, 0.002); end
  def test_user_inputs_q23; assert_in_epsilon(3.9, worksheet.user_inputs_q23, 0.002); end
  def test_user_inputs_r23; assert_in_epsilon(1.5, worksheet.user_inputs_r23, 0.002); end
  def test_user_inputs_h24; assert_in_epsilon(2.2, worksheet.user_inputs_h24, 0.002); end
  def test_user_inputs_i24; assert_in_delta(1.0, worksheet.user_inputs_i24, 0.002); end
  def test_user_inputs_j24; assert_in_delta(1.0, worksheet.user_inputs_j24, 0.002); end
  def test_user_inputs_k24; assert_in_epsilon(3.0, worksheet.user_inputs_k24, 0.002); end
  def test_user_inputs_l24; assert_in_epsilon(2.0, worksheet.user_inputs_l24, 0.002); end
  def test_user_inputs_m24; assert_in_epsilon(3.0, worksheet.user_inputs_m24, 0.002); end
  def test_user_inputs_n24; assert_in_epsilon(3.0, worksheet.user_inputs_n24, 0.002); end
  def test_user_inputs_o24; assert_in_epsilon(3.6, worksheet.user_inputs_o24, 0.002); end
  def test_user_inputs_p24; assert_in_epsilon(2.4, worksheet.user_inputs_p24, 0.002); end
  def test_user_inputs_q24; assert_in_epsilon(3.2, worksheet.user_inputs_q24, 0.002); end
  def test_user_inputs_r24; assert_in_epsilon(2.5, worksheet.user_inputs_r24, 0.002); end
  def test_user_inputs_h25; assert_in_epsilon(3.9, worksheet.user_inputs_h25, 0.002); end
  def test_user_inputs_i25; assert_in_epsilon(2.9, worksheet.user_inputs_i25, 0.002); end
  def test_user_inputs_j25; assert_in_epsilon(1.9, worksheet.user_inputs_j25, 0.002); end
  def test_user_inputs_k25; assert_in_epsilon(3.0, worksheet.user_inputs_k25, 0.002); end
  def test_user_inputs_l25; assert_in_epsilon(2.0, worksheet.user_inputs_l25, 0.002); end
  def test_user_inputs_m25; assert_in_epsilon(3.0, worksheet.user_inputs_m25, 0.002); end
  def test_user_inputs_n25; assert_in_epsilon(2.9, worksheet.user_inputs_n25, 0.002); end
  def test_user_inputs_o25; assert_in_epsilon(3.6, worksheet.user_inputs_o25, 0.002); end
  def test_user_inputs_p25; assert_in_epsilon(2.9, worksheet.user_inputs_p25, 0.002); end
  def test_user_inputs_q25; assert_in_epsilon(2.8, worksheet.user_inputs_q25, 0.002); end
  def test_user_inputs_r25; assert_in_epsilon(2.2, worksheet.user_inputs_r25, 0.002); end
  def test_user_inputs_h26; assert_in_epsilon(3.2, worksheet.user_inputs_h26, 0.002); end
  def test_user_inputs_i26; assert_in_epsilon(2.9, worksheet.user_inputs_i26, 0.002); end
  def test_user_inputs_j26; assert_in_epsilon(1.6, worksheet.user_inputs_j26, 0.002); end
  def test_user_inputs_k26; assert_in_epsilon(3.0, worksheet.user_inputs_k26, 0.002); end
  def test_user_inputs_l26; assert_in_epsilon(2.0, worksheet.user_inputs_l26, 0.002); end
  def test_user_inputs_m26; assert_in_epsilon(3.0, worksheet.user_inputs_m26, 0.002); end
  def test_user_inputs_n26; assert_in_epsilon(3.0, worksheet.user_inputs_n26, 0.002); end
  def test_user_inputs_o26; assert_in_epsilon(3.6, worksheet.user_inputs_o26, 0.002); end
  def test_user_inputs_p26; assert_in_epsilon(3.0, worksheet.user_inputs_p26, 0.002); end
  def test_user_inputs_q26; assert_in_epsilon(4.0, worksheet.user_inputs_q26, 0.002); end
  def test_user_inputs_r26; assert_in_epsilon(2.0, worksheet.user_inputs_r26, 0.002); end
  def test_user_inputs_h27; assert_in_epsilon(2.7, worksheet.user_inputs_h27, 0.002); end
  def test_user_inputs_i27; assert_in_epsilon(1.1, worksheet.user_inputs_i27, 0.002); end
  def test_user_inputs_j27; assert_in_delta(1.0, worksheet.user_inputs_j27, 0.002); end
  def test_user_inputs_k27; assert_in_epsilon(2.7, worksheet.user_inputs_k27, 0.002); end
  def test_user_inputs_l27; assert_in_epsilon(3.0, worksheet.user_inputs_l27, 0.002); end
  def test_user_inputs_m27; assert_in_delta(1.0, worksheet.user_inputs_m27, 0.002); end
  def test_user_inputs_n27; assert_in_epsilon(3.0, worksheet.user_inputs_n27, 0.002); end
  def test_user_inputs_o27; assert_in_epsilon(3.2, worksheet.user_inputs_o27, 0.002); end
  def test_user_inputs_p27; assert_in_epsilon(2.7, worksheet.user_inputs_p27, 0.002); end
  def test_user_inputs_q27; assert_in_epsilon(3.8, worksheet.user_inputs_q27, 0.002); end
  def test_user_inputs_r27; assert_in_delta(1.0, worksheet.user_inputs_r27, 0.002); end
  def test_user_inputs_h28; assert_in_epsilon(1.8, worksheet.user_inputs_h28, 0.002); end
  def test_user_inputs_i28; assert_in_epsilon(1.8, worksheet.user_inputs_i28, 0.002); end
  def test_user_inputs_j28; assert_in_epsilon(1.8, worksheet.user_inputs_j28, 0.002); end
  def test_user_inputs_k28; assert_in_epsilon(3.3, worksheet.user_inputs_k28, 0.002); end
  def test_user_inputs_l28; assert_in_epsilon(2.1, worksheet.user_inputs_l28, 0.002); end
  def test_user_inputs_m28; assert_in_epsilon(3.0, worksheet.user_inputs_m28, 0.002); end
  def test_user_inputs_n28; assert_in_epsilon(3.0, worksheet.user_inputs_n28, 0.002); end
  def test_user_inputs_o28; assert_in_epsilon(3.6, worksheet.user_inputs_o28, 0.002); end
  def test_user_inputs_p28; assert_in_epsilon(2.1, worksheet.user_inputs_p28, 0.002); end
  def test_user_inputs_q28; assert_in_epsilon(3.1, worksheet.user_inputs_q28, 0.002); end
  def test_user_inputs_r28; assert_in_delta(1.0, worksheet.user_inputs_r28, 0.002); end
  def test_user_inputs_h29; assert_in_epsilon(3.6, worksheet.user_inputs_h29, 0.002); end
  def test_user_inputs_i29; assert_in_epsilon(2.0, worksheet.user_inputs_i29, 0.002); end
  def test_user_inputs_j29; assert_in_epsilon(1.6, worksheet.user_inputs_j29, 0.002); end
  def test_user_inputs_k29; assert_in_epsilon(3.3, worksheet.user_inputs_k29, 0.002); end
  def test_user_inputs_l29; assert_in_epsilon(3.3, worksheet.user_inputs_l29, 0.002); end
  def test_user_inputs_m29; assert_in_epsilon(3.0, worksheet.user_inputs_m29, 0.002); end
  def test_user_inputs_n29; assert_in_epsilon(3.3, worksheet.user_inputs_n29, 0.002); end
  def test_user_inputs_o29; assert_in_epsilon(3.6, worksheet.user_inputs_o29, 0.002); end
  def test_user_inputs_p29; assert_in_epsilon(3.3, worksheet.user_inputs_p29, 0.002); end
  def test_user_inputs_q29; assert_in_delta(1.0, worksheet.user_inputs_q29, 0.002); end
  def test_user_inputs_r29; assert_in_epsilon(2.1, worksheet.user_inputs_r29, 0.002); end
  def test_user_inputs_h30; assert_in_epsilon(2.5, worksheet.user_inputs_h30, 0.002); end
  def test_user_inputs_i30; assert_in_epsilon(1.2, worksheet.user_inputs_i30, 0.002); end
  def test_user_inputs_j30; assert_in_epsilon(1.2, worksheet.user_inputs_j30, 0.002); end
  def test_user_inputs_k30; assert_in_epsilon(2.7, worksheet.user_inputs_k30, 0.002); end
  def test_user_inputs_l30; assert_in_epsilon(3.0, worksheet.user_inputs_l30, 0.002); end
  def test_user_inputs_m30; assert_in_delta(1.0, worksheet.user_inputs_m30, 0.002); end
  def test_user_inputs_n30; assert_in_epsilon(3.0, worksheet.user_inputs_n30, 0.002); end
  def test_user_inputs_o30; assert_in_epsilon(3.0, worksheet.user_inputs_o30, 0.002); end
  def test_user_inputs_p30; assert_in_epsilon(2.7, worksheet.user_inputs_p30, 0.002); end
  def test_user_inputs_q30; assert_in_epsilon(2.1, worksheet.user_inputs_q30, 0.002); end
  def test_user_inputs_r30; assert_in_delta(1.0, worksheet.user_inputs_r30, 0.002); end
  def test_user_inputs_h31; assert_in_epsilon(3.1, worksheet.user_inputs_h31, 0.002); end
  def test_user_inputs_i31; assert_in_epsilon(2.3, worksheet.user_inputs_i31, 0.002); end
  def test_user_inputs_j31; assert_in_epsilon(1.9, worksheet.user_inputs_j31, 0.002); end
  def test_user_inputs_k31; assert_in_epsilon(3.3, worksheet.user_inputs_k31, 0.002); end
  def test_user_inputs_l31; assert_in_epsilon(2.0, worksheet.user_inputs_l31, 0.002); end
  def test_user_inputs_m31; assert_in_epsilon(3.0, worksheet.user_inputs_m31, 0.002); end
  def test_user_inputs_n31; assert_in_delta(1.0, worksheet.user_inputs_n31, 0.002); end
  def test_user_inputs_o31; assert_in_epsilon(2.6, worksheet.user_inputs_o31, 0.002); end
  def test_user_inputs_p31; assert_in_epsilon(3.1, worksheet.user_inputs_p31, 0.002); end
  def test_user_inputs_q31; assert_in_epsilon(3.2, worksheet.user_inputs_q31, 0.002); end
  def test_user_inputs_r31; assert_in_epsilon(2.2, worksheet.user_inputs_r31, 0.002); end
  def test_user_inputs_h32; assert_in_epsilon(2.4, worksheet.user_inputs_h32, 0.002); end
  def test_user_inputs_i32; assert_in_epsilon(2.0, worksheet.user_inputs_i32, 0.002); end
  def test_user_inputs_j32; assert_in_epsilon(1.6, worksheet.user_inputs_j32, 0.002); end
  def test_user_inputs_k32; assert_in_epsilon(3.3, worksheet.user_inputs_k32, 0.002); end
  def test_user_inputs_l32; assert_in_epsilon(2.0, worksheet.user_inputs_l32, 0.002); end
  def test_user_inputs_m32; assert_in_epsilon(3.0, worksheet.user_inputs_m32, 0.002); end
  def test_user_inputs_n32; assert_in_epsilon(3.0, worksheet.user_inputs_n32, 0.002); end
  def test_user_inputs_o32; assert_in_epsilon(2.6, worksheet.user_inputs_o32, 0.002); end
  def test_user_inputs_p32; assert_in_epsilon(2.4, worksheet.user_inputs_p32, 0.002); end
  def test_user_inputs_q32; assert_in_epsilon(1.8, worksheet.user_inputs_q32, 0.002); end
  def test_user_inputs_r32; assert_in_epsilon(1.2, worksheet.user_inputs_r32, 0.002); end
  def test_user_inputs_h33; assert_in_epsilon(2.8, worksheet.user_inputs_h33, 0.002); end
  def test_user_inputs_i33; assert_in_epsilon(2.2, worksheet.user_inputs_i33, 0.002); end
  def test_user_inputs_j33; assert_in_epsilon(1.9, worksheet.user_inputs_j33, 0.002); end
  def test_user_inputs_k33; assert_in_epsilon(3.0, worksheet.user_inputs_k33, 0.002); end
  def test_user_inputs_l33; assert_in_delta(1.0, worksheet.user_inputs_l33, 0.002); end
  def test_user_inputs_m33; assert_in_epsilon(2.6, worksheet.user_inputs_m33, 0.002); end
  def test_user_inputs_n33; assert_in_epsilon(3.0, worksheet.user_inputs_n33, 0.002); end
  def test_user_inputs_o33; assert_in_epsilon(2.6, worksheet.user_inputs_o33, 0.002); end
  def test_user_inputs_p33; assert_in_epsilon(2.8, worksheet.user_inputs_p33, 0.002); end
  def test_user_inputs_q33; assert_in_epsilon(2.5, worksheet.user_inputs_q33, 0.002); end
  def test_user_inputs_r33; assert_in_delta(1.0, worksheet.user_inputs_r33, 0.002); end
  def test_user_inputs_h34; assert_in_epsilon(2.6, worksheet.user_inputs_h34, 0.002); end
  def test_user_inputs_i34; assert_in_epsilon(1.9, worksheet.user_inputs_i34, 0.002); end
  def test_user_inputs_j34; assert_in_epsilon(1.4, worksheet.user_inputs_j34, 0.002); end
  def test_user_inputs_k34; assert_in_epsilon(3.0, worksheet.user_inputs_k34, 0.002); end
  def test_user_inputs_l34; assert_in_delta(1.0, worksheet.user_inputs_l34, 0.002); end
  def test_user_inputs_m34; assert_in_epsilon(2.5, worksheet.user_inputs_m34, 0.002); end
  def test_user_inputs_n34; assert_in_epsilon(3.0, worksheet.user_inputs_n34, 0.002); end
  def test_user_inputs_o34; assert_in_epsilon(2.6, worksheet.user_inputs_o34, 0.002); end
  def test_user_inputs_p34; assert_in_epsilon(2.6, worksheet.user_inputs_p34, 0.002); end
  def test_user_inputs_q34; assert_in_delta(1.0, worksheet.user_inputs_q34, 0.002); end
  def test_user_inputs_r34; assert_in_delta(1.0, worksheet.user_inputs_r34, 0.002); end
  def test_user_inputs_h35; assert_in_epsilon(2.7, worksheet.user_inputs_h35, 0.002); end
  def test_user_inputs_i35; assert_in_epsilon(1.9, worksheet.user_inputs_i35, 0.002); end
  def test_user_inputs_j35; assert_in_epsilon(1.4, worksheet.user_inputs_j35, 0.002); end
  def test_user_inputs_k35; assert_in_epsilon(3.3, worksheet.user_inputs_k35, 0.002); end
  def test_user_inputs_l35; assert_in_delta(1.0, worksheet.user_inputs_l35, 0.002); end
  def test_user_inputs_m35; assert_in_epsilon(3.0, worksheet.user_inputs_m35, 0.002); end
  def test_user_inputs_n35; assert_in_epsilon(3.0, worksheet.user_inputs_n35, 0.002); end
  def test_user_inputs_o35; assert_in_epsilon(2.6, worksheet.user_inputs_o35, 0.002); end
  def test_user_inputs_p35; assert_in_epsilon(2.7, worksheet.user_inputs_p35, 0.002); end
  def test_user_inputs_q35; assert_in_epsilon(3.5, worksheet.user_inputs_q35, 0.002); end
  def test_user_inputs_r35; assert_in_epsilon(2.5, worksheet.user_inputs_r35, 0.002); end
  def test_user_inputs_h36; assert_in_epsilon(2.0, worksheet.user_inputs_h36, 0.002); end
  def test_user_inputs_i36; assert_in_epsilon(1.6, worksheet.user_inputs_i36, 0.002); end
  def test_user_inputs_j36; assert_in_epsilon(1.4, worksheet.user_inputs_j36, 0.002); end
  def test_user_inputs_k36; assert_in_epsilon(3.0, worksheet.user_inputs_k36, 0.002); end
  def test_user_inputs_l36; assert_in_delta(1.0, worksheet.user_inputs_l36, 0.002); end
  def test_user_inputs_m36; assert_in_epsilon(2.8, worksheet.user_inputs_m36, 0.002); end
  def test_user_inputs_n36; assert_in_epsilon(3.0, worksheet.user_inputs_n36, 0.002); end
  def test_user_inputs_o36; assert_in_epsilon(2.6, worksheet.user_inputs_o36, 0.002); end
  def test_user_inputs_p36; assert_in_epsilon(2.0, worksheet.user_inputs_p36, 0.002); end
  def test_user_inputs_q36; assert_in_epsilon(4.0, worksheet.user_inputs_q36, 0.002); end
  def test_user_inputs_r36; assert_in_epsilon(1.6, worksheet.user_inputs_r36, 0.002); end
  def test_user_inputs_h37; assert_in_epsilon(2.5, worksheet.user_inputs_h37, 0.002); end
  def test_user_inputs_i37; assert_in_epsilon(1.8, worksheet.user_inputs_i37, 0.002); end
  def test_user_inputs_j37; assert_in_epsilon(1.5, worksheet.user_inputs_j37, 0.002); end
  def test_user_inputs_k37; assert_in_epsilon(2.5, worksheet.user_inputs_k37, 0.002); end
  def test_user_inputs_l37; assert_in_delta(1.0, worksheet.user_inputs_l37, 0.002); end
  def test_user_inputs_m37; assert_in_epsilon(2.9, worksheet.user_inputs_m37, 0.002); end
  def test_user_inputs_n37; assert_in_epsilon(3.0, worksheet.user_inputs_n37, 0.002); end
  def test_user_inputs_o37; assert_in_epsilon(2.6, worksheet.user_inputs_o37, 0.002); end
  def test_user_inputs_p37; assert_in_epsilon(2.5, worksheet.user_inputs_p37, 0.002); end
  def test_user_inputs_q37; assert_in_delta(1.0, worksheet.user_inputs_q37, 0.002); end
  def test_user_inputs_r37; assert_in_delta(1.0, worksheet.user_inputs_r37, 0.002); end
  def test_user_inputs_h38; assert_in_epsilon(2.9, worksheet.user_inputs_h38, 0.002); end
  def test_user_inputs_i38; assert_in_epsilon(2.9, worksheet.user_inputs_i38, 0.002); end
  def test_user_inputs_j38; assert_in_epsilon(2.9, worksheet.user_inputs_j38, 0.002); end
  def test_user_inputs_k38; assert_in_epsilon(1.9, worksheet.user_inputs_k38, 0.002); end
  def test_user_inputs_l38; assert_in_epsilon(2.5, worksheet.user_inputs_l38, 0.002); end
  def test_user_inputs_m38; assert_in_epsilon(2.5, worksheet.user_inputs_m38, 0.002); end
  def test_user_inputs_n38; assert_in_epsilon(2.5, worksheet.user_inputs_n38, 0.002); end
  def test_user_inputs_o38; assert_in_epsilon(2.5, worksheet.user_inputs_o38, 0.002); end
  def test_user_inputs_p38; assert_in_epsilon(3.9, worksheet.user_inputs_p38, 0.002); end
  def test_user_inputs_q38; assert_in_epsilon(3.0, worksheet.user_inputs_q38, 0.002); end
  def test_user_inputs_r38; assert_in_epsilon(2.5, worksheet.user_inputs_r38, 0.002); end
  def test_user_inputs_h39; assert_in_epsilon(1.9, worksheet.user_inputs_h39, 0.002); end
  def test_user_inputs_i39; assert_in_epsilon(1.9, worksheet.user_inputs_i39, 0.002); end
  def test_user_inputs_j39; assert_in_epsilon(1.8, worksheet.user_inputs_j39, 0.002); end
  def test_user_inputs_k39; assert_in_epsilon(1.9, worksheet.user_inputs_k39, 0.002); end
  def test_user_inputs_l39; assert_in_epsilon(1.9, worksheet.user_inputs_l39, 0.002); end
  def test_user_inputs_m39; assert_in_epsilon(1.9, worksheet.user_inputs_m39, 0.002); end
  def test_user_inputs_n39; assert_in_epsilon(1.9, worksheet.user_inputs_n39, 0.002); end
  def test_user_inputs_o39; assert_in_epsilon(1.9, worksheet.user_inputs_o39, 0.002); end
  def test_user_inputs_p39; assert_in_epsilon(3.0, worksheet.user_inputs_p39, 0.002); end
  def test_user_inputs_q39; assert_in_epsilon(2.5, worksheet.user_inputs_q39, 0.002); end
  def test_user_inputs_r39; assert_in_epsilon(2.5, worksheet.user_inputs_r39, 0.002); end
  def test_user_inputs_h40; assert_in_epsilon(2.2, worksheet.user_inputs_h40, 0.002); end
  def test_user_inputs_i40; assert_in_epsilon(2.1, worksheet.user_inputs_i40, 0.002); end
  def test_user_inputs_j40; assert_in_epsilon(2.0, worksheet.user_inputs_j40, 0.002); end
  def test_user_inputs_k40; assert_in_epsilon(2.4, worksheet.user_inputs_k40, 0.002); end
  def test_user_inputs_l40; assert_in_epsilon(3.0, worksheet.user_inputs_l40, 0.002); end
  def test_user_inputs_m40; assert_in_epsilon(2.4, worksheet.user_inputs_m40, 0.002); end
  def test_user_inputs_n40; assert_in_epsilon(2.4, worksheet.user_inputs_n40, 0.002); end
  def test_user_inputs_o40; assert_in_epsilon(1.6, worksheet.user_inputs_o40, 0.002); end
  def test_user_inputs_p40; assert_in_epsilon(2.0, worksheet.user_inputs_p40, 0.002); end
  def test_user_inputs_q40; assert_in_epsilon(2.0, worksheet.user_inputs_q40, 0.002); end
  def test_user_inputs_r40; assert_in_epsilon(2.0, worksheet.user_inputs_r40, 0.002); end
  def test_user_inputs_h41; assert_in_epsilon(2.2, worksheet.user_inputs_h41, 0.002); end
  def test_user_inputs_i41; assert_in_epsilon(2.0, worksheet.user_inputs_i41, 0.002); end
  def test_user_inputs_j41; assert_in_epsilon(2.0, worksheet.user_inputs_j41, 0.002); end
  def test_user_inputs_k41; assert_in_epsilon(3.0, worksheet.user_inputs_k41, 0.002); end
  def test_user_inputs_l41; assert_in_epsilon(3.0, worksheet.user_inputs_l41, 0.002); end
  def test_user_inputs_m41; assert_in_epsilon(2.4, worksheet.user_inputs_m41, 0.002); end
  def test_user_inputs_n41; assert_in_epsilon(2.5, worksheet.user_inputs_n41, 0.002); end
  def test_user_inputs_o41; assert_in_epsilon(1.9, worksheet.user_inputs_o41, 0.002); end
  def test_user_inputs_p41; assert_in_epsilon(2.0, worksheet.user_inputs_p41, 0.002); end
  def test_user_inputs_q41; assert_in_epsilon(2.0, worksheet.user_inputs_q41, 0.002); end
  def test_user_inputs_r41; assert_in_delta(1.0, worksheet.user_inputs_r41, 0.002); end
  def test_user_inputs_h42; assert_in_epsilon(2.2, worksheet.user_inputs_h42, 0.002); end
  def test_user_inputs_i42; assert_in_epsilon(2.0, worksheet.user_inputs_i42, 0.002); end
  def test_user_inputs_j42; assert_in_epsilon(2.0, worksheet.user_inputs_j42, 0.002); end
  def test_user_inputs_k42; assert_in_epsilon(2.4, worksheet.user_inputs_k42, 0.002); end
  def test_user_inputs_l42; assert_in_epsilon(2.2, worksheet.user_inputs_l42, 0.002); end
  def test_user_inputs_m42; assert_in_epsilon(2.4, worksheet.user_inputs_m42, 0.002); end
  def test_user_inputs_n42; assert_in_epsilon(2.4, worksheet.user_inputs_n42, 0.002); end
  def test_user_inputs_o42; assert_in_epsilon(1.3, worksheet.user_inputs_o42, 0.002); end
  def test_user_inputs_p42; assert_in_epsilon(2.0, worksheet.user_inputs_p42, 0.002); end
  def test_user_inputs_q42; assert_in_epsilon(2.0, worksheet.user_inputs_q42, 0.002); end
  def test_user_inputs_r42; assert_in_epsilon(2.0, worksheet.user_inputs_r42, 0.002); end
  def test_user_inputs_h43; assert_in_epsilon(2.6, worksheet.user_inputs_h43, 0.002); end
  def test_user_inputs_i43; assert_in_epsilon(2.3, worksheet.user_inputs_i43, 0.002); end
  def test_user_inputs_j43; assert_in_epsilon(2.3, worksheet.user_inputs_j43, 0.002); end
  def test_user_inputs_k43; assert_in_epsilon(3.0, worksheet.user_inputs_k43, 0.002); end
  def test_user_inputs_l43; assert_in_epsilon(2.5, worksheet.user_inputs_l43, 0.002); end
  def test_user_inputs_m43; assert_in_epsilon(2.4, worksheet.user_inputs_m43, 0.002); end
  def test_user_inputs_n43; assert_in_epsilon(1.8, worksheet.user_inputs_n43, 0.002); end
  def test_user_inputs_o43; assert_in_epsilon(1.2, worksheet.user_inputs_o43, 0.002); end
  def test_user_inputs_p43; assert_in_epsilon(1.8, worksheet.user_inputs_p43, 0.002); end
  def test_user_inputs_q43; assert_in_epsilon(2.9, worksheet.user_inputs_q43, 0.002); end
  def test_user_inputs_r43; assert_in_delta(1.0, worksheet.user_inputs_r43, 0.002); end
  def test_user_inputs_h44; assert_in_epsilon(2.7, worksheet.user_inputs_h44, 0.002); end
  def test_user_inputs_i44; assert_in_epsilon(2.1, worksheet.user_inputs_i44, 0.002); end
  def test_user_inputs_j44; assert_in_epsilon(2.0, worksheet.user_inputs_j44, 0.002); end
  def test_user_inputs_k44; assert_in_epsilon(2.0, worksheet.user_inputs_k44, 0.002); end
  def test_user_inputs_l44; assert_in_epsilon(2.0, worksheet.user_inputs_l44, 0.002); end
  def test_user_inputs_m44; assert_in_epsilon(2.0, worksheet.user_inputs_m44, 0.002); end
  def test_user_inputs_n44; assert_in_epsilon(2.0, worksheet.user_inputs_n44, 0.002); end
  def test_user_inputs_o44; assert_in_epsilon(2.0, worksheet.user_inputs_o44, 0.002); end
  def test_user_inputs_p44; assert_in_epsilon(2.0, worksheet.user_inputs_p44, 0.002); end
  def test_user_inputs_q44; assert_in_epsilon(2.0, worksheet.user_inputs_q44, 0.002); end
  def test_user_inputs_r44; assert_in_epsilon(2.0, worksheet.user_inputs_r44, 0.002); end
  def test_user_inputs_h45; assert_in_epsilon(2.6, worksheet.user_inputs_h45, 0.002); end
  def test_user_inputs_i45; assert_in_epsilon(1.6, worksheet.user_inputs_i45, 0.002); end
  def test_user_inputs_j45; assert_in_epsilon(3.9, worksheet.user_inputs_j45, 0.002); end
  def test_user_inputs_k45; assert_in_epsilon(1.4, worksheet.user_inputs_k45, 0.002); end
  def test_user_inputs_l45; assert_in_epsilon(1.9, worksheet.user_inputs_l45, 0.002); end
  def test_user_inputs_m45; assert_in_epsilon(1.2, worksheet.user_inputs_m45, 0.002); end
  def test_user_inputs_n45; assert_in_epsilon(2.1, worksheet.user_inputs_n45, 0.002); end
  def test_user_inputs_o45; assert_in_epsilon(3.6, worksheet.user_inputs_o45, 0.002); end
  def test_user_inputs_p45; assert_in_epsilon(1.2, worksheet.user_inputs_p45, 0.002); end
  def test_user_inputs_q45; assert_in_delta(1.0, worksheet.user_inputs_q45, 0.002); end
  def test_user_inputs_r45; assert_in_delta(1.0, worksheet.user_inputs_r45, 0.002); end
  def test_user_inputs_h46; assert_in_delta(1.0, worksheet.user_inputs_h46, 0.002); end
  def test_user_inputs_i46; assert_in_delta(1.0, worksheet.user_inputs_i46, 0.002); end
  def test_user_inputs_j46; assert_in_delta(1.0, worksheet.user_inputs_j46, 0.002); end
  def test_user_inputs_k46; assert_in_delta(1.0, worksheet.user_inputs_k46, 0.002); end
  def test_user_inputs_l46; assert_in_delta(1.0, worksheet.user_inputs_l46, 0.002); end
  def test_user_inputs_m46; assert_in_delta(1.0, worksheet.user_inputs_m46, 0.002); end
  def test_user_inputs_n46; assert_in_delta(1.0, worksheet.user_inputs_n46, 0.002); end
  def test_user_inputs_o46; assert_in_delta(1.0, worksheet.user_inputs_o46, 0.002); end
  def test_user_inputs_p46; assert_in_delta(1.0, worksheet.user_inputs_p46, 0.002); end
  def test_user_inputs_q46; assert_in_delta(1.0, worksheet.user_inputs_q46, 0.002); end
  def test_user_inputs_r46; assert_in_delta(1.0, worksheet.user_inputs_r46, 0.002); end
  def test_user_inputs_h47; assert_in_delta(1.0, worksheet.user_inputs_h47, 0.002); end
  def test_user_inputs_i47; assert_in_delta(1.0, worksheet.user_inputs_i47, 0.002); end
  def test_user_inputs_j47; assert_in_delta(1.0, worksheet.user_inputs_j47, 0.002); end
  def test_user_inputs_k47; assert_in_delta(1.0, worksheet.user_inputs_k47, 0.002); end
  def test_user_inputs_l47; assert_in_delta(1.0, worksheet.user_inputs_l47, 0.002); end
  def test_user_inputs_m47; assert_in_delta(1.0, worksheet.user_inputs_m47, 0.002); end
  def test_user_inputs_n47; assert_in_delta(1.0, worksheet.user_inputs_n47, 0.002); end
  def test_user_inputs_o47; assert_in_delta(1.0, worksheet.user_inputs_o47, 0.002); end
  def test_user_inputs_p47; assert_in_delta(1.0, worksheet.user_inputs_p47, 0.002); end
  def test_user_inputs_q47; assert_in_delta(1.0, worksheet.user_inputs_q47, 0.002); end
  def test_user_inputs_r47; assert_in_delta(1.0, worksheet.user_inputs_r47, 0.002); end
  def test_user_inputs_h48; assert_in_delta(1.0, worksheet.user_inputs_h48, 0.002); end
  def test_user_inputs_i48; assert_in_delta(1.0, worksheet.user_inputs_i48, 0.002); end
  def test_user_inputs_j48; assert_in_delta(1.0, worksheet.user_inputs_j48, 0.002); end
  def test_user_inputs_k48; assert_in_delta(1.0, worksheet.user_inputs_k48, 0.002); end
  def test_user_inputs_l48; assert_in_delta(1.0, worksheet.user_inputs_l48, 0.002); end
  def test_user_inputs_m48; assert_in_delta(1.0, worksheet.user_inputs_m48, 0.002); end
  def test_user_inputs_n48; assert_in_delta(1.0, worksheet.user_inputs_n48, 0.002); end
  def test_user_inputs_o48; assert_in_delta(1.0, worksheet.user_inputs_o48, 0.002); end
  def test_user_inputs_p48; assert_in_delta(1.0, worksheet.user_inputs_p48, 0.002); end
  def test_user_inputs_q48; assert_in_delta(1.0, worksheet.user_inputs_q48, 0.002); end
  def test_user_inputs_r48; assert_in_delta(1.0, worksheet.user_inputs_r48, 0.002); end
  def test_user_inputs_h49; assert_in_delta(1.0, worksheet.user_inputs_h49, 0.002); end
  def test_user_inputs_i49; assert_in_delta(1.0, worksheet.user_inputs_i49, 0.002); end
  def test_user_inputs_j49; assert_in_delta(1.0, worksheet.user_inputs_j49, 0.002); end
  def test_user_inputs_k49; assert_in_delta(1.0, worksheet.user_inputs_k49, 0.002); end
  def test_user_inputs_l49; assert_in_delta(1.0, worksheet.user_inputs_l49, 0.002); end
  def test_user_inputs_m49; assert_in_delta(1.0, worksheet.user_inputs_m49, 0.002); end
  def test_user_inputs_n49; assert_in_delta(1.0, worksheet.user_inputs_n49, 0.002); end
  def test_user_inputs_o49; assert_in_delta(1.0, worksheet.user_inputs_o49, 0.002); end
  def test_user_inputs_p49; assert_in_delta(1.0, worksheet.user_inputs_p49, 0.002); end
  def test_user_inputs_q49; assert_in_delta(1.0, worksheet.user_inputs_q49, 0.002); end
  def test_user_inputs_r49; assert_in_delta(1.0, worksheet.user_inputs_r49, 0.002); end
  def test_user_inputs_h50; assert_in_delta(1.0, worksheet.user_inputs_h50, 0.002); end
  def test_user_inputs_i50; assert_in_delta(1.0, worksheet.user_inputs_i50, 0.002); end
  def test_user_inputs_j50; assert_in_delta(1.0, worksheet.user_inputs_j50, 0.002); end
  def test_user_inputs_k50; assert_in_delta(1.0, worksheet.user_inputs_k50, 0.002); end
  def test_user_inputs_l50; assert_in_delta(1.0, worksheet.user_inputs_l50, 0.002); end
  def test_user_inputs_m50; assert_in_delta(1.0, worksheet.user_inputs_m50, 0.002); end
  def test_user_inputs_n50; assert_in_delta(1.0, worksheet.user_inputs_n50, 0.002); end
  def test_user_inputs_o50; assert_in_delta(1.0, worksheet.user_inputs_o50, 0.002); end
  def test_user_inputs_p50; assert_in_delta(1.0, worksheet.user_inputs_p50, 0.002); end
  def test_user_inputs_q50; assert_in_delta(1.0, worksheet.user_inputs_q50, 0.002); end
  def test_user_inputs_r50; assert_in_delta(1.0, worksheet.user_inputs_r50, 0.002); end
  def test_user_inputs_h51; assert_in_epsilon(2.3, worksheet.user_inputs_h51, 0.002); end
  def test_user_inputs_i51; assert_in_epsilon(1.5, worksheet.user_inputs_i51, 0.002); end
  def test_user_inputs_j51; assert_in_epsilon(1.3, worksheet.user_inputs_j51, 0.002); end
  def test_user_inputs_k51; assert_in_epsilon(3.3, worksheet.user_inputs_k51, 0.002); end
  def test_user_inputs_l51; assert_in_epsilon(2.5, worksheet.user_inputs_l51, 0.002); end
  def test_user_inputs_m51; assert_in_epsilon(3.0, worksheet.user_inputs_m51, 0.002); end
  def test_user_inputs_n51; assert_in_epsilon(2.5, worksheet.user_inputs_n51, 0.002); end
  def test_user_inputs_o51; assert_in_epsilon(1.4, worksheet.user_inputs_o51, 0.002); end
  def test_user_inputs_p51; assert_in_epsilon(1.3, worksheet.user_inputs_p51, 0.002); end
  def test_user_inputs_q51; assert_in_epsilon(2.3, worksheet.user_inputs_q51, 0.002); end
  def test_user_inputs_r51; assert_in_delta(1.0, worksheet.user_inputs_r51, 0.002); end
  def test_user_inputs_h52; assert_in_epsilon(2.6, worksheet.user_inputs_h52, 0.002); end
  def test_user_inputs_i52; assert_in_epsilon(2.0, worksheet.user_inputs_i52, 0.002); end
  def test_user_inputs_j52; assert_in_epsilon(3.8, worksheet.user_inputs_j52, 0.002); end
  def test_user_inputs_k52; assert_in_epsilon(3.2, worksheet.user_inputs_k52, 0.002); end
  def test_user_inputs_l52; assert_in_epsilon(2.5, worksheet.user_inputs_l52, 0.002); end
  def test_user_inputs_m52; assert_in_epsilon(3.0, worksheet.user_inputs_m52, 0.002); end
  def test_user_inputs_n52; assert_in_epsilon(2.4, worksheet.user_inputs_n52, 0.002); end
  def test_user_inputs_o52; assert_in_epsilon(2.9, worksheet.user_inputs_o52, 0.002); end
  def test_user_inputs_p52; assert_in_epsilon(2.2, worksheet.user_inputs_p52, 0.002); end
  def test_user_inputs_q52; assert_in_epsilon(2.5, worksheet.user_inputs_q52, 0.002); end
  def test_user_inputs_r52; assert_in_epsilon(1.9, worksheet.user_inputs_r52, 0.002); end
  def test_user_inputs_h53; assert_in_epsilon(2.0, worksheet.user_inputs_h53, 0.002); end
  def test_user_inputs_i53; assert_in_epsilon(2.0, worksheet.user_inputs_i53, 0.002); end
  def test_user_inputs_j53; assert_in_epsilon(2.0, worksheet.user_inputs_j53, 0.002); end
  def test_user_inputs_k53; assert_in_epsilon(2.0, worksheet.user_inputs_k53, 0.002); end
  def test_user_inputs_l53; assert_in_epsilon(2.0, worksheet.user_inputs_l53, 0.002); end
  def test_user_inputs_m53; assert_in_epsilon(2.0, worksheet.user_inputs_m53, 0.002); end
  def test_user_inputs_n53; assert_in_epsilon(2.0, worksheet.user_inputs_n53, 0.002); end
  def test_user_inputs_o53; assert_in_epsilon(2.0, worksheet.user_inputs_o53, 0.002); end
  def test_user_inputs_p53; assert_in_epsilon(2.0, worksheet.user_inputs_p53, 0.002); end
  def test_user_inputs_q53; assert_in_epsilon(2.0, worksheet.user_inputs_q53, 0.002); end
  def test_user_inputs_r53; assert_in_epsilon(2.0, worksheet.user_inputs_r53, 0.002); end
  def test_user_inputs_h54; assert_equal("B", worksheet.user_inputs_h54); end
  def test_user_inputs_i54; assert_equal("B", worksheet.user_inputs_i54); end
  def test_user_inputs_j54; assert_equal("B", worksheet.user_inputs_j54); end
  def test_user_inputs_k54; assert_equal("B", worksheet.user_inputs_k54); end
  def test_user_inputs_l54; assert_equal("B", worksheet.user_inputs_l54); end
  def test_user_inputs_m54; assert_equal("B", worksheet.user_inputs_m54); end
  def test_user_inputs_n54; assert_equal("B", worksheet.user_inputs_n54); end
  def test_user_inputs_o54; assert_equal("B", worksheet.user_inputs_o54); end
  def test_user_inputs_p54; assert_equal("B", worksheet.user_inputs_p54); end
  def test_user_inputs_q54; assert_equal("B", worksheet.user_inputs_q54); end
  def test_user_inputs_r54; assert_equal("B", worksheet.user_inputs_r54); end
  def test_user_inputs_h55; assert_equal("US", worksheet.user_inputs_h55); end
  def test_user_inputs_i55; assert_equal("US", worksheet.user_inputs_i55); end
  def test_user_inputs_j55; assert_equal("US", worksheet.user_inputs_j55); end
  def test_user_inputs_k55; assert_equal("US", worksheet.user_inputs_k55); end
  def test_user_inputs_l55; assert_equal("US", worksheet.user_inputs_l55); end
  def test_user_inputs_m55; assert_equal("US", worksheet.user_inputs_m55); end
  def test_user_inputs_n55; assert_equal("US", worksheet.user_inputs_n55); end
  def test_user_inputs_o55; assert_equal("US", worksheet.user_inputs_o55); end
  def test_user_inputs_p55; assert_equal("US", worksheet.user_inputs_p55); end
  def test_user_inputs_q55; assert_equal("US", worksheet.user_inputs_q55); end
  def test_user_inputs_r55; assert_equal("US", worksheet.user_inputs_r55); end
  def test_user_inputs_h56; assert_equal("Point", worksheet.user_inputs_h56); end
  def test_user_inputs_i56; assert_equal("Point", worksheet.user_inputs_i56); end
  def test_user_inputs_j56; assert_equal("Point", worksheet.user_inputs_j56); end
  def test_user_inputs_k56; assert_equal("Point", worksheet.user_inputs_k56); end
  def test_user_inputs_l56; assert_equal("Point", worksheet.user_inputs_l56); end
  def test_user_inputs_m56; assert_equal("Point", worksheet.user_inputs_m56); end
  def test_user_inputs_n56; assert_equal("Point", worksheet.user_inputs_n56); end
  def test_user_inputs_o56; assert_equal("Point", worksheet.user_inputs_o56); end
  def test_user_inputs_p56; assert_equal("Point", worksheet.user_inputs_p56); end
  def test_user_inputs_q56; assert_equal("Point", worksheet.user_inputs_q56); end
  def test_user_inputs_r56; assert_equal("Point", worksheet.user_inputs_r56); end
  def test_user_inputs_h57; assert_equal("Point", worksheet.user_inputs_h57); end
  def test_user_inputs_i57; assert_equal("Point", worksheet.user_inputs_i57); end
  def test_user_inputs_j57; assert_equal("Point", worksheet.user_inputs_j57); end
  def test_user_inputs_k57; assert_equal("Point", worksheet.user_inputs_k57); end
  def test_user_inputs_l57; assert_equal("Point", worksheet.user_inputs_l57); end
  def test_user_inputs_m57; assert_equal("Point", worksheet.user_inputs_m57); end
  def test_user_inputs_n57; assert_equal("Point", worksheet.user_inputs_n57); end
  def test_user_inputs_o57; assert_equal("Point", worksheet.user_inputs_o57); end
  def test_user_inputs_p57; assert_equal("Point", worksheet.user_inputs_p57); end
  def test_user_inputs_q57; assert_equal("Point", worksheet.user_inputs_q57); end
  def test_user_inputs_r57; assert_equal("Point", worksheet.user_inputs_r57); end
  def test_user_inputs_h58; assert_equal("Point", worksheet.user_inputs_h58); end
  def test_user_inputs_i58; assert_equal("Point", worksheet.user_inputs_i58); end
  def test_user_inputs_j58; assert_equal("Point", worksheet.user_inputs_j58); end
  def test_user_inputs_k58; assert_equal("Point", worksheet.user_inputs_k58); end
  def test_user_inputs_l58; assert_equal("Point", worksheet.user_inputs_l58); end
  def test_user_inputs_m58; assert_equal("Point", worksheet.user_inputs_m58); end
  def test_user_inputs_n58; assert_equal("Point", worksheet.user_inputs_n58); end
  def test_user_inputs_o58; assert_equal("Point", worksheet.user_inputs_o58); end
  def test_user_inputs_p58; assert_equal("Point", worksheet.user_inputs_p58); end
  def test_user_inputs_q58; assert_equal("Point", worksheet.user_inputs_q58); end
  def test_user_inputs_r58; assert_equal("Point", worksheet.user_inputs_r58); end
  def test_user_inputs_h59; assert_equal("Point", worksheet.user_inputs_h59); end
  def test_user_inputs_i59; assert_equal("Point", worksheet.user_inputs_i59); end
  def test_user_inputs_j59; assert_equal("Point", worksheet.user_inputs_j59); end
  def test_user_inputs_k59; assert_equal("Point", worksheet.user_inputs_k59); end
  def test_user_inputs_l59; assert_equal("Point", worksheet.user_inputs_l59); end
  def test_user_inputs_m59; assert_equal("Point", worksheet.user_inputs_m59); end
  def test_user_inputs_n59; assert_equal("Point", worksheet.user_inputs_n59); end
  def test_user_inputs_o59; assert_equal("Point", worksheet.user_inputs_o59); end
  def test_user_inputs_p59; assert_equal("Point", worksheet.user_inputs_p59); end
  def test_user_inputs_q59; assert_equal("Point", worksheet.user_inputs_q59); end
  def test_user_inputs_r59; assert_equal("Point", worksheet.user_inputs_r59); end
  def test_user_inputs_h60; assert_equal("Point", worksheet.user_inputs_h60); end
  def test_user_inputs_i60; assert_equal("Point", worksheet.user_inputs_i60); end
  def test_user_inputs_j60; assert_equal("Point", worksheet.user_inputs_j60); end
  def test_user_inputs_k60; assert_equal("Point", worksheet.user_inputs_k60); end
  def test_user_inputs_l60; assert_equal("Point", worksheet.user_inputs_l60); end
  def test_user_inputs_m60; assert_equal("Point", worksheet.user_inputs_m60); end
  def test_user_inputs_n60; assert_equal("Point", worksheet.user_inputs_n60); end
  def test_user_inputs_o60; assert_equal("Point", worksheet.user_inputs_o60); end
  def test_user_inputs_p60; assert_equal("Point", worksheet.user_inputs_p60); end
  def test_user_inputs_q60; assert_equal("Point", worksheet.user_inputs_q60); end
  def test_user_inputs_r60; assert_equal("Point", worksheet.user_inputs_r60); end
  def test_user_inputs_h61; assert_equal("Point", worksheet.user_inputs_h61); end
  def test_user_inputs_i61; assert_equal("Point", worksheet.user_inputs_i61); end
  def test_user_inputs_j61; assert_equal("Point", worksheet.user_inputs_j61); end
  def test_user_inputs_k61; assert_equal("Point", worksheet.user_inputs_k61); end
  def test_user_inputs_l61; assert_equal("Point", worksheet.user_inputs_l61); end
  def test_user_inputs_m61; assert_equal("Point", worksheet.user_inputs_m61); end
  def test_user_inputs_n61; assert_equal("Point", worksheet.user_inputs_n61); end
  def test_user_inputs_o61; assert_equal("Point", worksheet.user_inputs_o61); end
  def test_user_inputs_p61; assert_equal("Point", worksheet.user_inputs_p61); end
  def test_user_inputs_q61; assert_equal("Point", worksheet.user_inputs_q61); end
  def test_user_inputs_r61; assert_equal("Point", worksheet.user_inputs_r61); end
  def test_user_inputs_h62; assert_equal("Point", worksheet.user_inputs_h62); end
  def test_user_inputs_i62; assert_equal("Point", worksheet.user_inputs_i62); end
  def test_user_inputs_j62; assert_equal("Point", worksheet.user_inputs_j62); end
  def test_user_inputs_k62; assert_equal("Point", worksheet.user_inputs_k62); end
  def test_user_inputs_l62; assert_equal("Point", worksheet.user_inputs_l62); end
  def test_user_inputs_m62; assert_equal("Point", worksheet.user_inputs_m62); end
  def test_user_inputs_n62; assert_equal("Point", worksheet.user_inputs_n62); end
  def test_user_inputs_o62; assert_equal("Point", worksheet.user_inputs_o62); end
  def test_user_inputs_p62; assert_equal("Point", worksheet.user_inputs_p62); end
  def test_user_inputs_q62; assert_equal("Point", worksheet.user_inputs_q62); end
  def test_user_inputs_r62; assert_equal("Point", worksheet.user_inputs_r62); end
  def test_user_inputs_g7; assert_in_delta(0.0, (worksheet.user_inputs_g7||0), 0.002); end
  def test_user_inputs_g8; assert_in_delta(0.0, (worksheet.user_inputs_g8||0), 0.002); end
  def test_user_inputs_g9; assert_equal("Growth in travel demand continues in cities around the world, with global distance travelled per person increasing at a rate of 2.65% annually, or increasing by 180% by 2050. The global average travel per person will be similar to present day UK.", worksheet.user_inputs_g9); end
  def test_user_inputs_g10; assert_equal("Growth in freight tonne-kms remains closely tied to GDP, increasing by roughly 140% in road, rail, and shipping by 2050, or 2.4% annually. ", worksheet.user_inputs_g10); end
  def test_user_inputs_g11; assert_equal("Cities continue to grow in a sprawled pattern of development. Similar to the UK in 2011, 80% of passenger-kms (pkm) globally are by private vehicles. There is no significant effort to use more rail transport for freight or to improve logistics by 2050, and 65% of ground freight is by road, similar to Latin America in 2011.", worksheet.user_inputs_g11); end
  def test_user_inputs_g12; assert_equal("By 2050, passenger car and train occupancies remain unchanged, and the average freight vehicle carries the same amount of cargo.", worksheet.user_inputs_g12); end
  def test_user_inputs_g13; assert_equal("By 2050 most transport modes decrease their energy intensity by 0.5% annually to roughly 8 lge/100km for LDVs and 26 lge/100km for HDVs.", worksheet.user_inputs_g13); end
  def test_user_inputs_g14; assert_equal("By 2050 the percentage of hybrid and electric vehicles remains low (5% and 2%) for passenger cars, and heavy duty vehicles (5% hybrid), and decreases for 2-3 wheelers (40% electric). Few new technologies are adopted for ships or airplanes.", worksheet.user_inputs_g14); end
  def test_user_inputs_g15; assert_equal("In 2050 the average house floor area for urban buildings will be 105 square metres per household and the average services building floor area will be 8.3 square metres per capita.", worksheet.user_inputs_g15); end
  def test_user_inputs_g16; assert_equal("In 2050 the average house inner temperature will be 19 ℃ and the services will be 21 ℃ in winter and 25 ℃, 24 ℃ in summer. The hot water demand will be 20089 l per y per capita.", worksheet.user_inputs_g16); end
  def test_user_inputs_g17; assert_equal("In 2050 the average urban household will own 1.1 refrigerator, 0.4 dishwasher, 0.9 clothes washers, 0.3 clothes dryers, 2 TV, 2.4 miscellaneous appliances. And will own 35 bulbs.", worksheet.user_inputs_g17); end
  def test_user_inputs_g18; assert_equal("In 2050 the average heat loss coefficient of buildings will be 10.2 GW/(M ha*℃), the thermal performance of building will have improved by 32%.", worksheet.user_inputs_g18); end
  def test_user_inputs_g19; assert_equal("In 2050 the heating technology structure will be 2% solid boiler, 10% liquid boiler, 38% gas boiler, 3% heat pumps, 8% electricity heater, 0% solar heater, 4% micro-CHP, 36% district heating. The cooling structure will be 89% air-conditioning, 4% chiller, 8% solar cooling. The cooking technology structure will be 7% solid stoves, 12% liquid stoves, 45% gas stoves, 28% electric stoves, 9% traditional biomass stoves. The lighting technology structure will be 60% incandescents, 3% halogens, 35% CFLs, 3% LEDs. ", worksheet.user_inputs_g19); end
  def test_user_inputs_g20; assert_equal("In 2050 the appliance efficiency will be: refrigerator 80W (improved by 20%), dishwasher 1200W (improved by 20%), clothes washer 560W (improved by 20%), clothes dryer 1200W (improved by 20%), TV 200W (improved by 20%), miscellaneous 80W (improved by 20%).", worksheet.user_inputs_g20); end
  def test_user_inputs_g21; assert_equal("Demand for products leads to the production of 15.9Gt of materials, that is: 3.4Gt of crude steel, 0.2Gt of aluminium, 1.5Gt of chemicals, 0.9Gt of paper, 1.3Gt of timber, 2.3Gt of other materials, & 6.5Gt of cement.", worksheet.user_inputs_g21); end
  def test_user_inputs_g22; assert_equal("Product design leads to the reduction of -1% of materials in 2050.", worksheet.user_inputs_g22); end
  def test_user_inputs_g23; assert_equal("Specific emissions for Steel reduce/increase by -3% and for Aluminium by -2%.", worksheet.user_inputs_g23); end
  def test_user_inputs_g24; assert_equal("Specific emissions for chemicals reduce/increase by 1%", worksheet.user_inputs_g24); end
  def test_user_inputs_g25; assert_equal("Specific emissions for Pulp & paper reduce/increase by -20% and for other materials by -13%.", worksheet.user_inputs_g25); end
  def test_user_inputs_g26; assert_equal("Specific emissions for Steel reduce/increase by -3% and for Aluminium by -2%.", worksheet.user_inputs_g26); end
  def test_user_inputs_g27; assert_equal("CCS enables a 0% CO2 reduction (excluding electricity emissions & counting biomass as fossil fuel) and an 0 EJ electricity consumption increase.", worksheet.user_inputs_g27); end
  def test_user_inputs_g28; assert_equal("In 2050 out of total fossil energy supplied it is 44% of solid, 21% of liquid and 35% of gas power.", worksheet.user_inputs_g28); end
  def test_user_inputs_g29; assert_equal("In 2050 out of fossil energy supplied it is 17% by solid USC, 25% by solid SC, 58% by solid Sub-C, 41% by eff. liquid, 59% by ineff. liquid, 53% by OCGT and 47% by CCGT plant.", worksheet.user_inputs_g29); end
  def test_user_inputs_g30; assert_equal("In 2050 there is 110.8 GW of CCS installed power capacity.", worksheet.user_inputs_g30); end
  def test_user_inputs_g31; assert_equal("In 2050 there is 502.2 GW of installed nuclear power capacity.", worksheet.user_inputs_g31); end
  def test_user_inputs_g32; assert_equal("In 2050 there is 1390.2 GW of installed wind power capacity.", worksheet.user_inputs_g32); end
  def test_user_inputs_g33; assert_equal("In 2050 there is 1659.7 GW of installed hydro power capacity.", worksheet.user_inputs_g33); end
  def test_user_inputs_g34; assert_equal("In 2050 there is 43.6 GW of installed marine power capacity.", worksheet.user_inputs_g34); end
  def test_user_inputs_g35; assert_equal("In 2050 there is 882 GW of installed solar power capacity.", worksheet.user_inputs_g35); end
  def test_user_inputs_g36; assert_equal("In 2050 there is 68.8 GW of installed geothermal power capacity.", worksheet.user_inputs_g36); end
  def test_user_inputs_g37; assert_equal("In 2050 there is 277.5 GW of electricity storage capacity.", worksheet.user_inputs_g37); end
  def test_user_inputs_g38; assert_in_delta(0.0, (worksheet.user_inputs_g38||0), 0.002); end
  def test_user_inputs_g39; assert_in_delta(0.0, (worksheet.user_inputs_g39||0), 0.002); end
  def test_user_inputs_g40; assert_in_delta(0.0, (worksheet.user_inputs_g40||0), 0.002); end
  def test_user_inputs_g41; assert_in_delta(0.0, (worksheet.user_inputs_g41||0), 0.002); end
  def test_user_inputs_g42; assert_in_delta(0.0, (worksheet.user_inputs_g42||0), 0.002); end
  def test_user_inputs_g43; assert_in_delta(0.0, (worksheet.user_inputs_g43||0), 0.002); end
  def test_user_inputs_g44; assert_in_delta(0.0, (worksheet.user_inputs_g44||0), 0.002); end
  def test_user_inputs_g45; assert_in_delta(0.0, (worksheet.user_inputs_g45||0), 0.002); end
  def test_user_inputs_g46; assert_in_delta(0.0, (worksheet.user_inputs_g46||0), 0.002); end
  def test_user_inputs_g47; assert_in_delta(0.0, (worksheet.user_inputs_g47||0), 0.002); end
  def test_user_inputs_g48; assert_in_delta(0.0, (worksheet.user_inputs_g48||0), 0.002); end
  def test_user_inputs_g49; assert_in_delta(0.0, (worksheet.user_inputs_g49||0), 0.002); end
  def test_user_inputs_g50; assert_in_delta(0.0, (worksheet.user_inputs_g50||0), 0.002); end
  def test_user_inputs_g51; assert_in_delta(0.0, (worksheet.user_inputs_g51||0), 0.002); end
  def test_user_inputs_g52; assert_in_delta(0.0, (worksheet.user_inputs_g52||0), 0.002); end
  def test_user_inputs_g53; assert_in_delta(0.0, (worksheet.user_inputs_g53||0), 0.002); end
  def test_user_inputs_g54; assert_in_delta(0.0, (worksheet.user_inputs_g54||0), 0.002); end
  def test_user_inputs_f7; assert_in_epsilon(3.0, worksheet.user_inputs_f7, 0.002); end
  def test_user_inputs_f8; assert_in_epsilon(3.0, worksheet.user_inputs_f8, 0.002); end
  def test_user_inputs_f9; assert_in_epsilon(4.0, worksheet.user_inputs_f9, 0.002); end
  def test_user_inputs_f10; assert_in_epsilon(4.0, worksheet.user_inputs_f10, 0.002); end
  def test_user_inputs_f11; assert_in_epsilon(4.0, worksheet.user_inputs_f11, 0.002); end
  def test_user_inputs_f12; assert_in_epsilon(4.0, worksheet.user_inputs_f12, 0.002); end
  def test_user_inputs_f13; assert_in_epsilon(4.0, worksheet.user_inputs_f13, 0.002); end
  def test_user_inputs_f14; assert_in_epsilon(4.0, worksheet.user_inputs_f14, 0.002); end
  def test_user_inputs_f15; assert_in_epsilon(4.0, worksheet.user_inputs_f15, 0.002); end
  def test_user_inputs_f16; assert_in_epsilon(4.0, worksheet.user_inputs_f16, 0.002); end
  def test_user_inputs_f17; assert_in_epsilon(4.0, worksheet.user_inputs_f17, 0.002); end
  def test_user_inputs_f18; assert_in_epsilon(4.0, worksheet.user_inputs_f18, 0.002); end
  def test_user_inputs_f19; assert_in_epsilon(4.0, worksheet.user_inputs_f19, 0.002); end
  def test_user_inputs_f20; assert_in_epsilon(4.0, worksheet.user_inputs_f20, 0.002); end
  def test_user_inputs_f21; assert_in_epsilon(4.0, worksheet.user_inputs_f21, 0.002); end
  def test_user_inputs_f22; assert_in_epsilon(4.0, worksheet.user_inputs_f22, 0.002); end
  def test_user_inputs_f23; assert_in_epsilon(4.0, worksheet.user_inputs_f23, 0.002); end
  def test_user_inputs_f24; assert_in_epsilon(4.0, worksheet.user_inputs_f24, 0.002); end
  def test_user_inputs_f25; assert_in_epsilon(4.0, worksheet.user_inputs_f25, 0.002); end
  def test_user_inputs_f26; assert_in_epsilon(4.0, worksheet.user_inputs_f26, 0.002); end
  def test_user_inputs_f27; assert_in_epsilon(4.0, worksheet.user_inputs_f27, 0.002); end
  def test_user_inputs_f28; assert_in_epsilon(4.0, worksheet.user_inputs_f28, 0.002); end
  def test_user_inputs_f29; assert_in_epsilon(4.0, worksheet.user_inputs_f29, 0.002); end
  def test_user_inputs_f30; assert_in_epsilon(4.0, worksheet.user_inputs_f30, 0.002); end
  def test_user_inputs_f31; assert_in_epsilon(4.0, worksheet.user_inputs_f31, 0.002); end
  def test_user_inputs_f32; assert_in_epsilon(4.0, worksheet.user_inputs_f32, 0.002); end
  def test_user_inputs_f33; assert_in_epsilon(4.0, worksheet.user_inputs_f33, 0.002); end
  def test_user_inputs_f34; assert_in_epsilon(4.0, worksheet.user_inputs_f34, 0.002); end
  def test_user_inputs_f35; assert_in_epsilon(4.0, worksheet.user_inputs_f35, 0.002); end
  def test_user_inputs_f36; assert_in_epsilon(4.0, worksheet.user_inputs_f36, 0.002); end
  def test_user_inputs_f37; assert_in_epsilon(4.0, worksheet.user_inputs_f37, 0.002); end
  def test_user_inputs_f38; assert_in_epsilon(4.0, worksheet.user_inputs_f38, 0.002); end
  def test_user_inputs_f39; assert_in_epsilon(4.0, worksheet.user_inputs_f39, 0.002); end
  def test_user_inputs_f40; assert_in_epsilon(4.0, worksheet.user_inputs_f40, 0.002); end
  def test_user_inputs_f41; assert_in_epsilon(4.0, worksheet.user_inputs_f41, 0.002); end
  def test_user_inputs_f42; assert_in_epsilon(4.0, worksheet.user_inputs_f42, 0.002); end
  def test_user_inputs_f43; assert_in_epsilon(4.0, worksheet.user_inputs_f43, 0.002); end
  def test_user_inputs_f44; assert_in_epsilon(4.0, worksheet.user_inputs_f44, 0.002); end
  def test_user_inputs_f45; assert_in_epsilon(4.0, worksheet.user_inputs_f45, 0.002); end
  def test_user_inputs_f46; assert_in_epsilon(4.0, worksheet.user_inputs_f46, 0.002); end
  def test_user_inputs_f47; assert_in_epsilon(4.0, worksheet.user_inputs_f47, 0.002); end
  def test_user_inputs_f48; assert_in_epsilon(4.0, worksheet.user_inputs_f48, 0.002); end
  def test_user_inputs_f49; assert_in_epsilon(4.0, worksheet.user_inputs_f49, 0.002); end
  def test_user_inputs_f50; assert_in_epsilon(4.0, worksheet.user_inputs_f50, 0.002); end
  def test_user_inputs_f51; assert_in_epsilon(4.0, worksheet.user_inputs_f51, 0.002); end
  def test_user_inputs_f52; assert_in_epsilon(4.0, worksheet.user_inputs_f52, 0.002); end
  def test_user_inputs_f53; assert_in_epsilon(4.0, worksheet.user_inputs_f53, 0.002); end
  def test_user_inputs_f54; assert_equal("B", worksheet.user_inputs_f54); end
  def test_user_inputs_d7; assert_equal("Global population", worksheet.user_inputs_d7); end
  def test_user_inputs_d8; assert_equal("Urbanisation", worksheet.user_inputs_d8); end
  def test_user_inputs_d9; assert_equal("Passenger distance", worksheet.user_inputs_d9); end
  def test_user_inputs_d10; assert_equal("Freight distance", worksheet.user_inputs_d10); end
  def test_user_inputs_d11; assert_equal("Mode", worksheet.user_inputs_d11); end
  def test_user_inputs_d12; assert_equal("Occupancy, load & ownership", worksheet.user_inputs_d12); end
  def test_user_inputs_d13; assert_equal("Efficiency", worksheet.user_inputs_d13); end
  def test_user_inputs_d14; assert_equal("Electric and hydrogen", worksheet.user_inputs_d14); end
  def test_user_inputs_d15; assert_equal("Building size", worksheet.user_inputs_d15); end
  def test_user_inputs_d16; assert_equal("Temperature & hot water use", worksheet.user_inputs_d16); end
  def test_user_inputs_d17; assert_equal("Lighting, cooking & appliance use", worksheet.user_inputs_d17); end
  def test_user_inputs_d18; assert_equal("Building insulation", worksheet.user_inputs_d18); end
  def test_user_inputs_d19; assert_equal("Temperature, cooking & lighting technology", worksheet.user_inputs_d19); end
  def test_user_inputs_d20; assert_equal("Appliance efficiency", worksheet.user_inputs_d20); end
  def test_user_inputs_d21; assert_equal("Product lifespan & demand", worksheet.user_inputs_d21); end
  def test_user_inputs_d22; assert_equal("Design, material switch & recycling", worksheet.user_inputs_d22); end
  def test_user_inputs_d23; assert_equal("Iron, steel & aluminium", worksheet.user_inputs_d23); end
  def test_user_inputs_d24; assert_equal("Chemicals", worksheet.user_inputs_d24); end
  def test_user_inputs_d25; assert_equal("Paper and other", worksheet.user_inputs_d25); end
  def test_user_inputs_d26; assert_equal("Cement", worksheet.user_inputs_d26); end
  def test_user_inputs_d27; assert_equal("Carbon capture and storage (ind.)", worksheet.user_inputs_d27); end
  def test_user_inputs_d28; assert_equal("Coal (incl. biomass) / oil / gas", worksheet.user_inputs_d28); end
  def test_user_inputs_d29; assert_equal("Fossil fuel efficiency", worksheet.user_inputs_d29); end
  def test_user_inputs_d30; assert_equal("Carbon capture and storage (power)", worksheet.user_inputs_d30); end
  def test_user_inputs_d31; assert_equal("Nuclear", worksheet.user_inputs_d31); end
  def test_user_inputs_d32; assert_equal("Wind", worksheet.user_inputs_d32); end
  def test_user_inputs_d33; assert_equal("Hydroelectric", worksheet.user_inputs_d33); end
  def test_user_inputs_d34; assert_equal("Marine", worksheet.user_inputs_d34); end
  def test_user_inputs_d35; assert_equal("Solar", worksheet.user_inputs_d35); end
  def test_user_inputs_d36; assert_equal("Geothermal", worksheet.user_inputs_d36); end
  def test_user_inputs_d37; assert_equal("Storage and demand shifting", worksheet.user_inputs_d37); end
  def test_user_inputs_d38; assert_equal("Calories consumed", worksheet.user_inputs_d38); end
  def test_user_inputs_d39; assert_equal("Meat consumed", worksheet.user_inputs_d39); end
  def test_user_inputs_d40; assert_equal("Crop yields", worksheet.user_inputs_d40); end
  def test_user_inputs_d41; assert_equal("Land-use efficiency ", worksheet.user_inputs_d41); end
  def test_user_inputs_d42; assert_equal("Livestock yields", worksheet.user_inputs_d42); end
  def test_user_inputs_d43; assert_equal("Bioenergy yields", worksheet.user_inputs_d43); end
  def test_user_inputs_d44; assert_equal("Type of biocrop (solid / liquid)", worksheet.user_inputs_d44); end
  def test_user_inputs_d45; assert_equal("Surplus land (forest & bioenergy) ", worksheet.user_inputs_d45); end
  def test_user_inputs_d46; assert_equal("Biochar", worksheet.user_inputs_d46); end
  def test_user_inputs_d47; assert_equal("Direct air capture", worksheet.user_inputs_d47); end
  def test_user_inputs_d48; assert_equal("Ocean fertilisation", worksheet.user_inputs_d48); end
  def test_user_inputs_d49; assert_equal("Enhanced weathering (oceanic)", worksheet.user_inputs_d49); end
  def test_user_inputs_d50; assert_equal("Enhanced weathering (terrestial)", worksheet.user_inputs_d50); end
  def test_user_inputs_d51; assert_equal("Wastes and residues", worksheet.user_inputs_d51); end
  def test_user_inputs_d52; assert_equal("Emissions trajectory", worksheet.user_inputs_d52); end
  def test_user_inputs_d53; assert_equal("Atmospheric CO2 fraction", worksheet.user_inputs_d53); end
  def test_user_inputs_d54; assert_equal("Confidence in climate models", worksheet.user_inputs_d54); end
  def test_user_inputs_d55; assert_equal("Region factor", worksheet.user_inputs_d55); end
  def test_user_inputs_d56; assert_equal("Coal", worksheet.user_inputs_d56); end
  def test_user_inputs_d57; assert_equal("Oil", worksheet.user_inputs_d57); end
  def test_user_inputs_d58; assert_equal("Gas", worksheet.user_inputs_d58); end
  def test_user_inputs_d59; assert_equal("Solid bioenergy", worksheet.user_inputs_d59); end
  def test_user_inputs_d60; assert_equal("Liquid bioenergy", worksheet.user_inputs_d60); end
  def test_user_inputs_d61; assert_equal("Gaseous bioenergy", worksheet.user_inputs_d61); end
  def test_user_inputs_d62; assert_equal("Hydrogen", worksheet.user_inputs_d62); end
  def test_outputs_lifestyle_e8; assert_equal("2011", worksheet.outputs_lifestyle_e8); end
  def test_outputs_lifestyle_f8; assert_equal("2011", worksheet.outputs_lifestyle_f8); end
  def test_outputs_lifestyle_g8; assert_in_epsilon(2011.0, worksheet.outputs_lifestyle_g8, 0.002); end
  def test_outputs_lifestyle_h8; assert_equal("2050", worksheet.outputs_lifestyle_h8); end
  def test_outputs_lifestyle_i8; assert_equal("2050", worksheet.outputs_lifestyle_i8); end
  def test_outputs_lifestyle_j8; assert_in_epsilon(2050.0, worksheet.outputs_lifestyle_j8, 0.002); end
  def test_outputs_lifestyle_e9; assert_equal("Urban", worksheet.outputs_lifestyle_e9); end
  def test_outputs_lifestyle_f9; assert_equal("Rural", worksheet.outputs_lifestyle_f9); end
  def test_outputs_lifestyle_g9; assert_equal("2011 weighted average", worksheet.outputs_lifestyle_g9); end
  def test_outputs_lifestyle_h9; assert_equal("Urban", worksheet.outputs_lifestyle_h9); end
  def test_outputs_lifestyle_i9; assert_equal("Rural", worksheet.outputs_lifestyle_i9); end
  def test_outputs_lifestyle_j9; assert_equal("2050 weighted average", worksheet.outputs_lifestyle_j9); end
  def test_outputs_lifestyle_d10; assert_equal("Passenger km/head", worksheet.outputs_lifestyle_d10); end
  def test_outputs_lifestyle_e10; assert_in_epsilon(9018.0, worksheet.outputs_lifestyle_e10, 0.002); end
  def test_outputs_lifestyle_f10; assert_in_epsilon(5728.0, worksheet.outputs_lifestyle_f10, 0.002); end
  def test_outputs_lifestyle_g10; assert_in_epsilon(7443.0, worksheet.outputs_lifestyle_g10, 0.002); end
  def test_outputs_lifestyle_h10; assert_in_epsilon(11823.0, worksheet.outputs_lifestyle_h10, 0.002); end
  def test_outputs_lifestyle_i10; assert_in_epsilon(8653.0, worksheet.outputs_lifestyle_i10, 0.002); end
  def test_outputs_lifestyle_j10; assert_in_epsilon(10757.0, worksheet.outputs_lifestyle_j10, 0.002); end
  def test_outputs_lifestyle_d11; assert_equal("% of total passenger km using private transport", worksheet.outputs_lifestyle_d11); end
  def test_outputs_lifestyle_e11; assert_in_delta(0.6481179537105122, worksheet.outputs_lifestyle_e11, 0.002); end
  def test_outputs_lifestyle_f11; assert_in_delta(0.792611125960081, worksheet.outputs_lifestyle_f11, 0.002); end
  def test_outputs_lifestyle_g11; assert_in_delta(0.7172827982855858, worksheet.outputs_lifestyle_g11, 0.002); end
  def test_outputs_lifestyle_h11; assert_in_delta(0.7387528660057999, worksheet.outputs_lifestyle_h11, 0.002); end
  def test_outputs_lifestyle_i11; assert_in_delta(0.8293352567448099, worksheet.outputs_lifestyle_i11, 0.002); end
  def test_outputs_lifestyle_j11; assert_in_delta(0.7692190494518363, worksheet.outputs_lifestyle_j11, 0.002); end
  def test_outputs_lifestyle_d13; assert_equal("Number of appliances per household", worksheet.outputs_lifestyle_d13); end
  def test_outputs_lifestyle_e13; assert_in_epsilon(5.958364024436915, worksheet.outputs_lifestyle_e13, 0.002); end
  def test_outputs_lifestyle_f13; assert_in_epsilon(3.4791820122184576, worksheet.outputs_lifestyle_f13, 0.002); end
  def test_outputs_lifestyle_g13; assert_in_epsilon(5.054404480386185, worksheet.outputs_lifestyle_g13, 0.002); end
  def test_outputs_lifestyle_h13; assert_in_epsilon(7.150036829324298, worksheet.outputs_lifestyle_h13, 0.002); end
  def test_outputs_lifestyle_i13; assert_in_epsilon(7.150036829324298, worksheet.outputs_lifestyle_i13, 0.002); end
  def test_outputs_lifestyle_j13; assert_in_epsilon(7.150036829324298, worksheet.outputs_lifestyle_j13, 0.002); end
  def test_outputs_lifestyle_d14; assert_equal("Building temperature in warm months", worksheet.outputs_lifestyle_d14); end
  def test_outputs_lifestyle_e14; assert_in_epsilon(26.5, worksheet.outputs_lifestyle_e14, 0.002); end
  def test_outputs_lifestyle_f14; assert_in_epsilon(29.0, worksheet.outputs_lifestyle_f14, 0.002); end
  def test_outputs_lifestyle_g14; assert_in_epsilon(27.411550200424607, worksheet.outputs_lifestyle_g14, 0.002); end
  def test_outputs_lifestyle_h14; assert_in_epsilon(25.0, worksheet.outputs_lifestyle_h14, 0.002); end
  def test_outputs_lifestyle_i14; assert_in_epsilon(25.0, worksheet.outputs_lifestyle_i14, 0.002); end
  def test_outputs_lifestyle_j14; assert_in_epsilon(25.0, worksheet.outputs_lifestyle_j14, 0.002); end
  def test_outputs_lifestyle_d15; assert_equal("Building temp in cold months", worksheet.outputs_lifestyle_d15); end
  def test_outputs_lifestyle_e15; assert_in_epsilon(17.5, worksheet.outputs_lifestyle_e15, 0.002); end
  def test_outputs_lifestyle_f15; assert_in_epsilon(13.0, worksheet.outputs_lifestyle_f15, 0.002); end
  def test_outputs_lifestyle_g15; assert_in_epsilon(15.8592096392357, worksheet.outputs_lifestyle_g15, 0.002); end
  def test_outputs_lifestyle_h15; assert_in_epsilon(19.0, worksheet.outputs_lifestyle_h15, 0.002); end
  def test_outputs_lifestyle_i15; assert_in_epsilon(16.0, worksheet.outputs_lifestyle_i15, 0.002); end
  def test_outputs_lifestyle_j15; assert_in_epsilon(18.275222136543015, worksheet.outputs_lifestyle_j15, 0.002); end
  def test_outputs_lifestyle_d17; assert_equal("Building insulation (GW / (M ha*℃)", worksheet.outputs_lifestyle_d17); end
  def test_outputs_lifestyle_e17; assert_in_epsilon(15.0, worksheet.outputs_lifestyle_e17, 0.002); end
  def test_outputs_lifestyle_f17; assert_in_epsilon(18.0, worksheet.outputs_lifestyle_f17, 0.002); end
  def test_outputs_lifestyle_g17; assert_in_epsilon(16.09386024050953, worksheet.outputs_lifestyle_g17, 0.002); end
  def test_outputs_lifestyle_h17; assert_in_epsilon(10.2, worksheet.outputs_lifestyle_h17, 0.002); end
  def test_outputs_lifestyle_i17; assert_in_epsilon(10.2, worksheet.outputs_lifestyle_i17, 0.002); end
  def test_outputs_lifestyle_j17; assert_in_epsilon(10.2, worksheet.outputs_lifestyle_j17, 0.002); end
  def test_outputs_lifestyle_d18; assert_equal("Building size (in metres squared)", worksheet.outputs_lifestyle_d18); end
  def test_outputs_lifestyle_e18; assert_in_epsilon(92.0, worksheet.outputs_lifestyle_e18, 0.002); end
  def test_outputs_lifestyle_f18; assert_in_epsilon(78.0, worksheet.outputs_lifestyle_f18, 0.002); end
  def test_outputs_lifestyle_g18; assert_in_epsilon(86.89531887762217, worksheet.outputs_lifestyle_g18, 0.002); end
  def test_outputs_lifestyle_h18; assert_in_epsilon(105.0, worksheet.outputs_lifestyle_h18, 0.002); end
  def test_outputs_lifestyle_i18; assert_in_epsilon(95.0, worksheet.outputs_lifestyle_i18, 0.002); end
  def test_outputs_lifestyle_j18; assert_in_epsilon(102.58407378847672, worksheet.outputs_lifestyle_j18, 0.002); end
  def test_outputs_lifestyle_e23; assert_equal("webtool.lifestyle", worksheet.outputs_lifestyle_e23); end
  def test_outputs_lifestyle_h23; assert_equal("User’s pathway", worksheet.outputs_lifestyle_h23); end
  def test_outputs_lifestyle_e25; assert_equal("2011", worksheet.outputs_lifestyle_e25); end
  def test_outputs_lifestyle_f25; assert_equal("2011", worksheet.outputs_lifestyle_f25); end
  def test_outputs_lifestyle_g25; assert_equal("Total urban & rural", worksheet.outputs_lifestyle_g25); end
  def test_outputs_lifestyle_h25; assert_equal("2050", worksheet.outputs_lifestyle_h25); end
  def test_outputs_lifestyle_i25; assert_equal("2050", worksheet.outputs_lifestyle_i25); end
  def test_outputs_lifestyle_e26; assert_equal("Urban", worksheet.outputs_lifestyle_e26); end
  def test_outputs_lifestyle_f26; assert_equal("Rural", worksheet.outputs_lifestyle_f26); end
  def test_outputs_lifestyle_h26; assert_equal("Urban", worksheet.outputs_lifestyle_h26); end
  def test_outputs_lifestyle_i26; assert_equal("Rural", worksheet.outputs_lifestyle_i26); end
  def test_outputs_lifestyle_j26; assert_equal("Total urban & rural", worksheet.outputs_lifestyle_j26); end
  def test_outputs_lifestyle_d27; assert_equal("Passenger km (millions)", worksheet.outputs_lifestyle_d27); end
  def test_outputs_lifestyle_e27; assert_in_epsilon(32750947.9790936, worksheet.outputs_lifestyle_e27, 0.002); end
  def test_outputs_lifestyle_f27; assert_in_epsilon(19099433.934785195, worksheet.outputs_lifestyle_f27, 0.002); end
  def test_outputs_lifestyle_g27; assert_in_epsilon(51850381.9138788, worksheet.outputs_lifestyle_g27, 0.002); end
  def test_outputs_lifestyle_h27; assert_in_epsilon(74938435.46745251, worksheet.outputs_lifestyle_h27, 0.002); end
  def test_outputs_lifestyle_i27; assert_in_epsilon(27796304.137090776, worksheet.outputs_lifestyle_i27, 0.002); end
  def test_outputs_lifestyle_j27; assert_in_epsilon(102734739.60454328, worksheet.outputs_lifestyle_j27, 0.002); end
  def test_outputs_lifestyle_d28; assert_equal("Total households", worksheet.outputs_lifestyle_d28); end
  def test_outputs_lifestyle_e28; assert_in_epsilon(1452719862.6209612, worksheet.outputs_lifestyle_e28, 0.002); end
  def test_outputs_lifestyle_f28; assert_in_epsilon(833660013.8618993, worksheet.outputs_lifestyle_f28, 0.002); end
  def test_outputs_lifestyle_g28; assert_in_epsilon(2286379876.4828606, worksheet.outputs_lifestyle_g28, 0.002); end
  def test_outputs_lifestyle_h28; assert_in_epsilon(2881187074.6996784, worksheet.outputs_lifestyle_h28, 0.002); end
  def test_outputs_lifestyle_i28; assert_in_epsilon(917809553.0459162, worksheet.outputs_lifestyle_i28, 0.002); end
  def test_outputs_lifestyle_j28; assert_in_epsilon(3798996627.7455945, worksheet.outputs_lifestyle_j28, 0.002); end
  def test_outputs_lifestyle_d29; assert_equal("% of households in urban/rural areas", worksheet.outputs_lifestyle_d29); end
  def test_outputs_lifestyle_e29; assert_in_delta(0.6353799198301556, worksheet.outputs_lifestyle_e29, 0.002); end
  def test_outputs_lifestyle_f29; assert_in_delta(0.36462008016984426, worksheet.outputs_lifestyle_f29, 0.002); end
  def test_outputs_lifestyle_g29; assert_in_delta(0.9999999999999999, worksheet.outputs_lifestyle_g29, 0.002); end
  def test_outputs_lifestyle_h29; assert_in_delta(0.7584073788476712, worksheet.outputs_lifestyle_h29, 0.002); end
  def test_outputs_lifestyle_i29; assert_in_delta(0.24159262115232882, worksheet.outputs_lifestyle_i29, 0.002); end
  def test_outputs_lifestyle_j29; assert_in_delta(1.0, worksheet.outputs_lifestyle_j29, 0.002); end
  def test_outputs_lifestyle_d30; assert_equal("Total population", worksheet.outputs_lifestyle_d30); end
  def test_outputs_lifestyle_e30; assert_in_epsilon(3631799656.552403, worksheet.outputs_lifestyle_e30, 0.002); end
  def test_outputs_lifestyle_f30; assert_in_epsilon(3334640055.447597, worksheet.outputs_lifestyle_f30, 0.002); end
  def test_outputs_lifestyle_g30; assert_in_epsilon(6966439712.0, worksheet.outputs_lifestyle_g30, 0.002); end
  def test_outputs_lifestyle_h30; assert_in_epsilon(6338611564.3392935, worksheet.outputs_lifestyle_h30, 0.002); end
  def test_outputs_lifestyle_i30; assert_in_epsilon(3212333435.6607065, worksheet.outputs_lifestyle_i30, 0.002); end
  def test_outputs_lifestyle_j30; assert_in_epsilon(9550945000.0, worksheet.outputs_lifestyle_j30, 0.002); end
  def test_outputs_lifestyle_d31; assert_equal("% of population in urban/rural areas", worksheet.outputs_lifestyle_d31); end
  def test_outputs_lifestyle_e31; assert_in_delta(0.5213279389034929, worksheet.outputs_lifestyle_e31, 0.002); end
  def test_outputs_lifestyle_f31; assert_in_delta(0.47867206109650706, worksheet.outputs_lifestyle_f31, 0.002); end
  def test_outputs_lifestyle_g31; assert_in_delta(1.0, worksheet.outputs_lifestyle_g31, 0.002); end
  def test_outputs_lifestyle_h31; assert_in_delta(0.663663288223238, worksheet.outputs_lifestyle_h31, 0.002); end
  def test_outputs_lifestyle_i31; assert_in_delta(0.33633671177676205, worksheet.outputs_lifestyle_i31, 0.002); end
  def test_outputs_lifestyle_j31; assert_in_delta(1.0, worksheet.outputs_lifestyle_j31, 0.002); end
  def test_outputs_energy_flows_c8; assert_equal("Vector code energy is taken from", worksheet.outputs_energy_flows_c8); end
  def test_outputs_energy_flows_d8; assert_equal("TAKEN FROM", worksheet.outputs_energy_flows_d8); end
  def test_outputs_energy_flows_e8; assert_equal("Vector code energy is taken to", worksheet.outputs_energy_flows_e8); end
  def test_outputs_energy_flows_f8; assert_equal("TAKEN TO", worksheet.outputs_energy_flows_f8); end
  def test_outputs_energy_flows_g8; assert_equal("Technology code", worksheet.outputs_energy_flows_g8); end
  def test_outputs_energy_flows_h8; assert_equal("Technology description", worksheet.outputs_energy_flows_h8); end
  def test_outputs_energy_flows_i8; assert_equal("Energy code", worksheet.outputs_energy_flows_i8); end
  def test_outputs_energy_flows_j8; assert_equal("Description", worksheet.outputs_energy_flows_j8); end
  def test_outputs_energy_flows_k8; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_k8); end
  def test_outputs_energy_flows_l8; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_l8); end
  def test_outputs_energy_flows_m8; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_m8); end
  def test_outputs_energy_flows_v8; assert_in_epsilon(2011.0, worksheet.outputs_energy_flows_v8, 0.002); end
  def test_outputs_energy_flows_w8; assert_in_epsilon(2015.0, worksheet.outputs_energy_flows_w8, 0.002); end
  def test_outputs_energy_flows_x8; assert_in_epsilon(2020.0, worksheet.outputs_energy_flows_x8, 0.002); end
  def test_outputs_energy_flows_y8; assert_in_epsilon(2025.0, worksheet.outputs_energy_flows_y8, 0.002); end
  def test_outputs_energy_flows_z8; assert_in_epsilon(2030.0, worksheet.outputs_energy_flows_z8, 0.002); end
  def test_outputs_energy_flows_aa8; assert_in_epsilon(2035.0, worksheet.outputs_energy_flows_aa8, 0.002); end
  def test_outputs_energy_flows_ab8; assert_in_epsilon(2040.0, worksheet.outputs_energy_flows_ab8, 0.002); end
  def test_outputs_energy_flows_ac8; assert_in_epsilon(2045.0, worksheet.outputs_energy_flows_ac8, 0.002); end
  def test_outputs_energy_flows_ad8; assert_in_epsilon(2050.0, worksheet.outputs_energy_flows_ad8, 0.002); end
  def test_outputs_energy_flows_c10; assert_equal("R.01", worksheet.outputs_energy_flows_c10); end
  def test_outputs_energy_flows_d10; assert_equal("Global Solar", worksheet.outputs_energy_flows_d10); end
  def test_outputs_energy_flows_e10; assert_equal("n/a", worksheet.outputs_energy_flows_e10); end
  def test_outputs_energy_flows_f10; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f10); end
  def test_outputs_energy_flows_g10; assert_equal("n/a", worksheet.outputs_energy_flows_g10); end
  def test_outputs_energy_flows_h10; assert_equal("solar", worksheet.outputs_energy_flows_h10); end
  def test_outputs_energy_flows_i10; assert_equal("E.02", worksheet.outputs_energy_flows_i10); end
  def test_outputs_energy_flows_j10; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j10); end
  def test_outputs_energy_flows_v10; assert_in_delta(0.23021801616127766, worksheet.outputs_energy_flows_v10, 0.002); end
  def test_outputs_energy_flows_w10; assert_in_delta(0.5097629163990014, worksheet.outputs_energy_flows_w10, 0.002); end
  def test_outputs_energy_flows_x10; assert_in_delta(0.7712380782227164, worksheet.outputs_energy_flows_x10, 0.002); end
  def test_outputs_energy_flows_y10; assert_in_delta(0.8937961283568197, worksheet.outputs_energy_flows_y10, 0.002); end
  def test_outputs_energy_flows_z10; assert_in_epsilon(1.0900911465836793, worksheet.outputs_energy_flows_z10, 0.002); end
  def test_outputs_energy_flows_aa10; assert_in_epsilon(1.354087549079202, worksheet.outputs_energy_flows_aa10, 0.002); end
  def test_outputs_energy_flows_ab10; assert_in_epsilon(1.6162192917347622, worksheet.outputs_energy_flows_ab10, 0.002); end
  def test_outputs_energy_flows_ac10; assert_in_epsilon(2.1897541469038524, worksheet.outputs_energy_flows_ac10, 0.002); end
  def test_outputs_energy_flows_ad10; assert_in_epsilon(3.0339846530067898, worksheet.outputs_energy_flows_ad10, 0.002); end
  def test_outputs_energy_flows_c12; assert_equal("R.01", worksheet.outputs_energy_flows_c12); end
  def test_outputs_energy_flows_d12; assert_equal("Global Solar", worksheet.outputs_energy_flows_d12); end
  def test_outputs_energy_flows_e12; assert_equal("L.01", worksheet.outputs_energy_flows_e12); end
  def test_outputs_energy_flows_f12; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f12); end
  def test_outputs_energy_flows_g12; assert_equal("n/a", worksheet.outputs_energy_flows_g12); end
  def test_outputs_energy_flows_h12; assert_equal("solar", worksheet.outputs_energy_flows_h12); end
  def test_outputs_energy_flows_i12; assert_equal("L.01", worksheet.outputs_energy_flows_i12); end
  def test_outputs_energy_flows_j12; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j12); end
  def test_outputs_energy_flows_v12; assert_in_delta(0.019797808108029794, worksheet.outputs_energy_flows_v12, 0.002); end
  def test_outputs_energy_flows_w12; assert_in_delta(0.12830688473439594, worksheet.outputs_energy_flows_w12, 0.002); end
  def test_outputs_energy_flows_x12; assert_in_delta(0.7915972687396615, worksheet.outputs_energy_flows_x12, 0.002); end
  def test_outputs_energy_flows_y12; assert_in_delta(0.9356561194130046, worksheet.outputs_energy_flows_y12, 0.002); end
  def test_outputs_energy_flows_z12; assert_in_epsilon(1.166508608394058, worksheet.outputs_energy_flows_z12, 0.002); end
  def test_outputs_energy_flows_aa12; assert_in_epsilon(1.3324484397944203, worksheet.outputs_energy_flows_aa12, 0.002); end
  def test_outputs_energy_flows_ab12; assert_in_epsilon(1.2936701198333926, worksheet.outputs_energy_flows_ab12, 0.002); end
  def test_outputs_energy_flows_ac12; assert_in_epsilon(1.5061975342985314, worksheet.outputs_energy_flows_ac12, 0.002); end
  def test_outputs_energy_flows_ad12; assert_in_epsilon(1.866279628685621, worksheet.outputs_energy_flows_ad12, 0.002); end
  def test_outputs_energy_flows_c14; assert_equal("R.01", worksheet.outputs_energy_flows_c14); end
  def test_outputs_energy_flows_d14; assert_equal("Global Solar", worksheet.outputs_energy_flows_d14); end
  def test_outputs_energy_flows_e14; assert_equal("N/A", worksheet.outputs_energy_flows_e14); end
  def test_outputs_energy_flows_f14; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f14); end
  def test_outputs_energy_flows_g14; assert_equal("n/a", worksheet.outputs_energy_flows_g14); end
  def test_outputs_energy_flows_h14; assert_equal("Global buildings", worksheet.outputs_energy_flows_h14); end
  def test_outputs_energy_flows_i14; assert_equal("N/A", worksheet.outputs_energy_flows_i14); end
  def test_outputs_energy_flows_j14; assert_equal("Heating, cooling and hot water", worksheet.outputs_energy_flows_j14); end
  def test_outputs_energy_flows_v14; assert_in_delta(0.511506599156096, worksheet.outputs_energy_flows_v14, 0.002); end
  def test_outputs_energy_flows_w14; assert_in_delta(0.5955564754230901, worksheet.outputs_energy_flows_w14, 0.002); end
  def test_outputs_energy_flows_x14; assert_in_delta(0.7153585733429066, worksheet.outputs_energy_flows_x14, 0.002); end
  def test_outputs_energy_flows_y14; assert_in_delta(0.8556095317854139, worksheet.outputs_energy_flows_y14, 0.002); end
  def test_outputs_energy_flows_z14; assert_in_epsilon(1.0172911726649858, worksheet.outputs_energy_flows_z14, 0.002); end
  def test_outputs_energy_flows_aa14; assert_in_epsilon(1.1963032241731142, worksheet.outputs_energy_flows_aa14, 0.002); end
  def test_outputs_energy_flows_ab14; assert_in_epsilon(1.3959044090652404, worksheet.outputs_energy_flows_ab14, 0.002); end
  def test_outputs_energy_flows_ac14; assert_in_epsilon(1.6093570961705288, worksheet.outputs_energy_flows_ac14, 0.002); end
  def test_outputs_energy_flows_ad14; assert_in_epsilon(1.8392239736104328, worksheet.outputs_energy_flows_ad14, 0.002); end
  def test_outputs_energy_flows_c16; assert_equal("R.02", worksheet.outputs_energy_flows_c16); end
  def test_outputs_energy_flows_d16; assert_equal("Global Wind", worksheet.outputs_energy_flows_d16); end
  def test_outputs_energy_flows_e16; assert_equal("n/a", worksheet.outputs_energy_flows_e16); end
  def test_outputs_energy_flows_f16; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f16); end
  def test_outputs_energy_flows_h16; assert_equal("wind", worksheet.outputs_energy_flows_h16); end
  def test_outputs_energy_flows_i16; assert_equal("E.02", worksheet.outputs_energy_flows_i16); end
  def test_outputs_energy_flows_j16; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j16); end
  def test_outputs_energy_flows_v16; assert_in_epsilon(1.5851747906781677, worksheet.outputs_energy_flows_v16, 0.002); end
  def test_outputs_energy_flows_w16; assert_in_epsilon(2.8982098477289893, worksheet.outputs_energy_flows_w16, 0.002); end
  def test_outputs_energy_flows_x16; assert_in_epsilon(3.4812156988700655, worksheet.outputs_energy_flows_x16, 0.002); end
  def test_outputs_energy_flows_y16; assert_in_epsilon(3.621715818450613, worksheet.outputs_energy_flows_y16, 0.002); end
  def test_outputs_energy_flows_z16; assert_in_epsilon(3.995067306846458, worksheet.outputs_energy_flows_z16, 0.002); end
  def test_outputs_energy_flows_aa16; assert_in_epsilon(4.29321438155864, worksheet.outputs_energy_flows_aa16, 0.002); end
  def test_outputs_energy_flows_ab16; assert_in_epsilon(5.4470053339898, worksheet.outputs_energy_flows_ab16, 0.002); end
  def test_outputs_energy_flows_ac16; assert_in_epsilon(8.011938295415295, worksheet.outputs_energy_flows_ac16, 0.002); end
  def test_outputs_energy_flows_ad16; assert_in_epsilon(9.886358964024362, worksheet.outputs_energy_flows_ad16, 0.002); end
  def test_outputs_energy_flows_c18; assert_equal("R.03", worksheet.outputs_energy_flows_c18); end
  def test_outputs_energy_flows_d18; assert_equal("Global Tidal", worksheet.outputs_energy_flows_d18); end
  def test_outputs_energy_flows_e18; assert_equal("n/a", worksheet.outputs_energy_flows_e18); end
  def test_outputs_energy_flows_f18; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f18); end
  def test_outputs_energy_flows_g18; assert_equal("tidal.elec", worksheet.outputs_energy_flows_g18); end
  def test_outputs_energy_flows_h18; assert_equal("Global Tidal", worksheet.outputs_energy_flows_h18); end
  def test_outputs_energy_flows_i18; assert_equal("E.02", worksheet.outputs_energy_flows_i18); end
  def test_outputs_energy_flows_j18; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j18); end
  def test_outputs_energy_flows_v18; assert_in_delta(0.0020659460038178223, worksheet.outputs_energy_flows_v18, 0.002); end
  def test_outputs_energy_flows_w18; assert_in_delta(0.0034497770082726445, worksheet.outputs_energy_flows_w18, 0.002); end
  def test_outputs_energy_flows_x18; assert_in_delta(0.005488281604070115, worksheet.outputs_energy_flows_x18, 0.002); end
  def test_outputs_energy_flows_y18; assert_in_delta(0.00862444252068161, worksheet.outputs_energy_flows_y18, 0.002); end
  def test_outputs_energy_flows_z18; assert_in_delta(0.014896764353904598, worksheet.outputs_energy_flows_z18, 0.002); end
  def test_outputs_energy_flows_aa18; assert_in_delta(0.02273716664543333, worksheet.outputs_energy_flows_aa18, 0.002); end
  def test_outputs_energy_flows_ab18; assert_in_delta(0.03528181031187931, worksheet.outputs_energy_flows_ab18, 0.002); end
  def test_outputs_energy_flows_ac18; assert_in_delta(0.043906252832560916, worksheet.outputs_energy_flows_ac18, 0.002); end
  def test_outputs_energy_flows_ad18; assert_in_delta(0.054882816040701145, worksheet.outputs_energy_flows_ad18, 0.002); end
  def test_outputs_energy_flows_c20; assert_equal("R.04", worksheet.outputs_energy_flows_c20); end
  def test_outputs_energy_flows_d20; assert_equal("Global Wave", worksheet.outputs_energy_flows_d20); end
  def test_outputs_energy_flows_e20; assert_equal("n/a", worksheet.outputs_energy_flows_e20); end
  def test_outputs_energy_flows_f20; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f20); end
  def test_outputs_energy_flows_g20; assert_equal("wave.elec", worksheet.outputs_energy_flows_g20); end
  def test_outputs_energy_flows_h20; assert_equal("Global Wave", worksheet.outputs_energy_flows_h20); end
  def test_outputs_energy_flows_i20; assert_equal("E.02", worksheet.outputs_energy_flows_i20); end
  def test_outputs_energy_flows_j20; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j20); end
  def test_outputs_energy_flows_v20; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v20||0), 0.002); end
  def test_outputs_energy_flows_w20; assert_in_delta(0.0018032925270516091, worksheet.outputs_energy_flows_w20, 0.002); end
  def test_outputs_energy_flows_x20; assert_in_delta(0.0018032925270516091, worksheet.outputs_energy_flows_x20, 0.002); end
  def test_outputs_energy_flows_y20; assert_in_delta(0.009643694818580344, worksheet.outputs_energy_flows_y20, 0.002); end
  def test_outputs_energy_flows_z20; assert_in_delta(0.027441408020350572, worksheet.outputs_energy_flows_z20, 0.002); end
  def test_outputs_energy_flows_aa20; assert_in_delta(0.0470424137491724, worksheet.outputs_energy_flows_aa20, 0.002); end
  def test_outputs_energy_flows_ab20; assert_in_delta(0.06899554016545287, worksheet.outputs_energy_flows_ab20, 0.002); end
  def test_outputs_energy_flows_ac20; assert_in_delta(0.09643694818580344, worksheet.outputs_energy_flows_ac20, 0.002); end
  def test_outputs_energy_flows_ad20; assert_in_delta(0.11603795391462528, worksheet.outputs_energy_flows_ad20, 0.002); end
  def test_outputs_energy_flows_c22; assert_equal("R.05", worksheet.outputs_energy_flows_c22); end
  def test_outputs_energy_flows_d22; assert_equal("Global Geothermal", worksheet.outputs_energy_flows_d22); end
  def test_outputs_energy_flows_e22; assert_equal("n/a", worksheet.outputs_energy_flows_e22); end
  def test_outputs_energy_flows_f22; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f22); end
  def test_outputs_energy_flows_g22; assert_equal("geothermal.elec", worksheet.outputs_energy_flows_g22); end
  def test_outputs_energy_flows_h22; assert_equal("Global Geothermal", worksheet.outputs_energy_flows_h22); end
  def test_outputs_energy_flows_i22; assert_equal("E.02", worksheet.outputs_energy_flows_i22); end
  def test_outputs_energy_flows_j22; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j22); end
  def test_outputs_energy_flows_v22; assert_in_delta(0.26219832339716753, worksheet.outputs_energy_flows_v22, 0.002); end
  def test_outputs_energy_flows_w22; assert_in_delta(0.33032859640588036, worksheet.outputs_energy_flows_w22, 0.002); end
  def test_outputs_energy_flows_x22; assert_in_delta(0.4083228483350464, worksheet.outputs_energy_flows_x22, 0.002); end
  def test_outputs_energy_flows_y22; assert_in_delta(0.4633776144026932, worksheet.outputs_energy_flows_y22, 0.002); end
  def test_outputs_energy_flows_z22; assert_in_delta(0.49549289460882034, worksheet.outputs_energy_flows_z22, 0.002); end
  def test_outputs_energy_flows_aa22; assert_in_delta(0.7661788277747499, worksheet.outputs_energy_flows_aa22, 0.002); end
  def test_outputs_energy_flows_ab22; assert_in_delta(0.9542826118392096, worksheet.outputs_energy_flows_ab22, 0.002); end
  def test_outputs_energy_flows_ac22; assert_in_epsilon(1.2570838252112664, worksheet.outputs_energy_flows_ac22, 0.002); end
  def test_outputs_energy_flows_ad22; assert_in_epsilon(1.578236627272539, worksheet.outputs_energy_flows_ad22, 0.002); end
  def test_outputs_energy_flows_c24; assert_equal("R.05", worksheet.outputs_energy_flows_c24); end
  def test_outputs_energy_flows_d24; assert_equal("Global Geothermal", worksheet.outputs_energy_flows_d24); end
  def test_outputs_energy_flows_e24; assert_equal("L.01", worksheet.outputs_energy_flows_e24); end
  def test_outputs_energy_flows_f24; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f24); end
  def test_outputs_energy_flows_g24; assert_equal("geothermal.elec", worksheet.outputs_energy_flows_g24); end
  def test_outputs_energy_flows_h24; assert_equal("Global Geothermal", worksheet.outputs_energy_flows_h24); end
  def test_outputs_energy_flows_i24; assert_equal("L.01", worksheet.outputs_energy_flows_i24); end
  def test_outputs_energy_flows_j24; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j24); end
  def test_outputs_energy_flows_v24; assert_in_epsilon(2.3597849105745077, worksheet.outputs_energy_flows_v24, 0.002); end
  def test_outputs_energy_flows_w24; assert_in_epsilon(2.9658578890688236, worksheet.outputs_energy_flows_w24, 0.002); end
  def test_outputs_energy_flows_x24; assert_in_epsilon(3.655213114579753, worksheet.outputs_energy_flows_x24, 0.002); end
  def test_outputs_energy_flows_y24; assert_in_epsilon(4.13572834622871, worksheet.outputs_energy_flows_y24, 0.002); end
  def test_outputs_energy_flows_z24; assert_in_epsilon(4.409256690341049, worksheet.outputs_energy_flows_z24, 0.002); end
  def test_outputs_energy_flows_aa24; assert_in_epsilon(6.797858809734171, worksheet.outputs_energy_flows_aa24, 0.002); end
  def test_outputs_energy_flows_ab24; assert_in_epsilon(8.441819754221326, worksheet.outputs_energy_flows_ab24, 0.002); end
  def test_outputs_energy_flows_ac24; assert_in_epsilon(11.08774902548103, worksheet.outputs_energy_flows_ac24, 0.002); end
  def test_outputs_energy_flows_ad24; assert_in_epsilon(13.879516822997187, worksheet.outputs_energy_flows_ad24, 0.002); end
  def test_outputs_energy_flows_c26; assert_equal("R.06", worksheet.outputs_energy_flows_c26); end
  def test_outputs_energy_flows_d26; assert_equal("Global Hydro", worksheet.outputs_energy_flows_d26); end
  def test_outputs_energy_flows_e26; assert_equal("n/a", worksheet.outputs_energy_flows_e26); end
  def test_outputs_energy_flows_f26; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f26); end
  def test_outputs_energy_flows_g26; assert_equal("hydro.elec", worksheet.outputs_energy_flows_g26); end
  def test_outputs_energy_flows_h26; assert_equal("Global Hydroelectric dam", worksheet.outputs_energy_flows_h26); end
  def test_outputs_energy_flows_i26; assert_equal("E.02", worksheet.outputs_energy_flows_i26); end
  def test_outputs_energy_flows_j26; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j26); end
  def test_outputs_energy_flows_v26; assert_in_epsilon(13.179648636705306, worksheet.outputs_energy_flows_v26, 0.002); end
  def test_outputs_energy_flows_w26; assert_in_epsilon(13.676942595574804, worksheet.outputs_energy_flows_w26, 0.002); end
  def test_outputs_energy_flows_x26; assert_in_epsilon(14.712292313221141, worksheet.outputs_energy_flows_x26, 0.002); end
  def test_outputs_energy_flows_y26; assert_in_epsilon(15.829165630682146, worksheet.outputs_energy_flows_y26, 0.002); end
  def test_outputs_energy_flows_z26; assert_in_epsilon(17.03435618127571, worksheet.outputs_energy_flows_z26, 0.002); end
  def test_outputs_energy_flows_aa26; assert_in_epsilon(18.319711605020377, worksheet.outputs_energy_flows_aa26, 0.002); end
  def test_outputs_energy_flows_ab26; assert_in_epsilon(19.689308081906866, worksheet.outputs_energy_flows_ab26, 0.002); end
  def test_outputs_energy_flows_ac26; assert_in_epsilon(21.071133098765557, worksheet.outputs_energy_flows_ac26, 0.002); end
  def test_outputs_energy_flows_ad26; assert_in_epsilon(22.550786435401854, worksheet.outputs_energy_flows_ad26, 0.002); end
  def test_outputs_energy_flows_c28; assert_equal("R.06", worksheet.outputs_energy_flows_c28); end
  def test_outputs_energy_flows_d28; assert_equal("Global Hydro", worksheet.outputs_energy_flows_d28); end
  def test_outputs_energy_flows_e28; assert_equal("E.02", worksheet.outputs_energy_flows_e28); end
  def test_outputs_energy_flows_f28; assert_equal("Storage", worksheet.outputs_energy_flows_f28); end
  def test_outputs_energy_flows_g28; assert_equal("storage.elec", worksheet.outputs_energy_flows_g28); end
  def test_outputs_energy_flows_h28; assert_equal("Global Storage unit", worksheet.outputs_energy_flows_h28); end
  def test_outputs_energy_flows_i28; assert_equal("E.02", worksheet.outputs_energy_flows_i28); end
  def test_outputs_energy_flows_j28; assert_equal("Storage", worksheet.outputs_energy_flows_j28); end
  def test_outputs_energy_flows_v28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v28||0), 0.002); end
  def test_outputs_energy_flows_w28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w28||0), 0.002); end
  def test_outputs_energy_flows_x28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x28||0), 0.002); end
  def test_outputs_energy_flows_y28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y28||0), 0.002); end
  def test_outputs_energy_flows_z28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z28||0), 0.002); end
  def test_outputs_energy_flows_aa28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa28||0), 0.002); end
  def test_outputs_energy_flows_ab28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab28||0), 0.002); end
  def test_outputs_energy_flows_ac28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac28||0), 0.002); end
  def test_outputs_energy_flows_ad28; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad28||0), 0.002); end
  def test_outputs_energy_flows_c30; assert_equal("R.07", worksheet.outputs_energy_flows_c30); end
  def test_outputs_energy_flows_d30; assert_equal("Global Environmental heat", worksheet.outputs_energy_flows_d30); end
  def test_outputs_energy_flows_e30; assert_equal("n/a", worksheet.outputs_energy_flows_e30); end
  def test_outputs_energy_flows_f30; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f30); end
  def test_outputs_energy_flows_g30; assert_equal("n/a", worksheet.outputs_energy_flows_g30); end
  def test_outputs_energy_flows_h30; assert_equal("Global buildings", worksheet.outputs_energy_flows_h30); end
  def test_outputs_energy_flows_v30; assert_in_epsilon(6.008758564052467, worksheet.outputs_energy_flows_v30, 0.002); end
  def test_outputs_energy_flows_w30; assert_in_epsilon(6.643533902890745, worksheet.outputs_energy_flows_w30, 0.002); end
  def test_outputs_energy_flows_x30; assert_in_epsilon(7.402973664633505, worksheet.outputs_energy_flows_x30, 0.002); end
  def test_outputs_energy_flows_y30; assert_in_epsilon(8.14464813631486, worksheet.outputs_energy_flows_y30, 0.002); end
  def test_outputs_energy_flows_z30; assert_in_epsilon(8.856211604468617, worksheet.outputs_energy_flows_z30, 0.002); end
  def test_outputs_energy_flows_aa30; assert_in_epsilon(9.508329155209477, worksheet.outputs_energy_flows_aa30, 0.002); end
  def test_outputs_energy_flows_ab30; assert_in_epsilon(10.106235518611253, worksheet.outputs_energy_flows_ab30, 0.002); end
  def test_outputs_energy_flows_ac30; assert_in_epsilon(10.616916176452603, worksheet.outputs_energy_flows_ac30, 0.002); end
  def test_outputs_energy_flows_ad30; assert_in_epsilon(11.049633726544767, worksheet.outputs_energy_flows_ad30, 0.002); end
  def test_outputs_energy_flows_d32; assert_equal("Forest residues", worksheet.outputs_energy_flows_d32); end
  def test_outputs_energy_flows_e32; assert_equal("Forest", worksheet.outputs_energy_flows_e32); end
  def test_outputs_energy_flows_f32; assert_equal("Solid", worksheet.outputs_energy_flows_f32); end
  def test_outputs_energy_flows_g32; assert_equal("Forest", worksheet.outputs_energy_flows_g32); end
  def test_outputs_energy_flows_h32; assert_equal("Global Native forest", worksheet.outputs_energy_flows_h32); end
  def test_outputs_energy_flows_i32; assert_equal("C.01", worksheet.outputs_energy_flows_i32); end
  def test_outputs_energy_flows_j32; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j32); end
  def test_outputs_energy_flows_v32; assert_in_epsilon(19.75172898823776, worksheet.outputs_energy_flows_v32, 0.002); end
  def test_outputs_energy_flows_w32; assert_in_epsilon(19.441261993292432, worksheet.outputs_energy_flows_w32, 0.002); end
  def test_outputs_energy_flows_x32; assert_in_epsilon(19.317365498063104, worksheet.outputs_energy_flows_x32, 0.002); end
  def test_outputs_energy_flows_y32; assert_in_epsilon(19.225884667709025, worksheet.outputs_energy_flows_y32, 0.002); end
  def test_outputs_energy_flows_z32; assert_in_epsilon(19.04198534327535, worksheet.outputs_energy_flows_z32, 0.002); end
  def test_outputs_energy_flows_aa32; assert_in_epsilon(18.6652325006383, worksheet.outputs_energy_flows_aa32, 0.002); end
  def test_outputs_energy_flows_ab32; assert_in_epsilon(18.39006034051878, worksheet.outputs_energy_flows_ab32, 0.002); end
  def test_outputs_energy_flows_ac32; assert_in_epsilon(18.493625804515833, worksheet.outputs_energy_flows_ac32, 0.002); end
  def test_outputs_energy_flows_ad32; assert_in_epsilon(18.83514402034971, worksheet.outputs_energy_flows_ad32, 0.002); end
  def test_outputs_energy_flows_d34; assert_equal("Traditional biomass", worksheet.outputs_energy_flows_d34); end
  def test_outputs_energy_flows_e34; assert_equal("Forest", worksheet.outputs_energy_flows_e34); end
  def test_outputs_energy_flows_f34; assert_equal("Solid", worksheet.outputs_energy_flows_f34); end
  def test_outputs_energy_flows_g34; assert_equal("Forest", worksheet.outputs_energy_flows_g34); end
  def test_outputs_energy_flows_h34; assert_equal("Global Native forest", worksheet.outputs_energy_flows_h34); end
  def test_outputs_energy_flows_i34; assert_equal("BM.13", worksheet.outputs_energy_flows_i34); end
  def test_outputs_energy_flows_j34; assert_equal("Global Traditional biomass", worksheet.outputs_energy_flows_j34); end
  def test_outputs_energy_flows_v34; assert_in_epsilon(21.048271011762246, worksheet.outputs_energy_flows_v34, 0.002); end
  def test_outputs_energy_flows_w34; assert_in_epsilon(21.048116567478733, worksheet.outputs_energy_flows_w34, 0.002); end
  def test_outputs_energy_flows_x34; assert_in_epsilon(20.73177954514278, worksheet.outputs_energy_flows_x34, 0.002); end
  def test_outputs_energy_flows_y34; assert_in_epsilon(20.19748237315084, worksheet.outputs_energy_flows_y34, 0.002); end
  def test_outputs_energy_flows_z34; assert_in_epsilon(19.469395033528432, worksheet.outputs_energy_flows_z34, 0.002); end
  def test_outputs_energy_flows_aa34; assert_in_epsilon(18.96178724134996, worksheet.outputs_energy_flows_aa34, 0.002); end
  def test_outputs_energy_flows_ab34; assert_in_epsilon(18.331240302012638, worksheet.outputs_energy_flows_ab34, 0.002); end
  def test_outputs_energy_flows_ac34; assert_in_epsilon(18.040872973567566, worksheet.outputs_energy_flows_ac34, 0.002); end
  def test_outputs_energy_flows_ad34; assert_in_epsilon(17.648277503687133, worksheet.outputs_energy_flows_ad34, 0.002); end
  def test_outputs_energy_flows_d36; assert_equal("Biocrops", worksheet.outputs_energy_flows_d36); end
  def test_outputs_energy_flows_f36; assert_equal("Solid", worksheet.outputs_energy_flows_f36); end
  def test_outputs_energy_flows_g36; assert_equal("arable.bio", worksheet.outputs_energy_flows_g36); end
  def test_outputs_energy_flows_h36; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_h36); end
  def test_outputs_energy_flows_i36; assert_equal("C.01", worksheet.outputs_energy_flows_i36); end
  def test_outputs_energy_flows_j36; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j36); end
  def test_outputs_energy_flows_v36; assert_in_epsilon(8.74, worksheet.outputs_energy_flows_v36, 0.002); end
  def test_outputs_energy_flows_w36; assert_in_epsilon(9.449215186218243, worksheet.outputs_energy_flows_w36, 0.002); end
  def test_outputs_energy_flows_x36; assert_in_epsilon(10.25095309040263, worksheet.outputs_energy_flows_x36, 0.002); end
  def test_outputs_energy_flows_y36; assert_in_epsilon(11.03850574335243, worksheet.outputs_energy_flows_y36, 0.002); end
  def test_outputs_energy_flows_z36; assert_in_epsilon(11.824000462428797, worksheet.outputs_energy_flows_z36, 0.002); end
  def test_outputs_energy_flows_aa36; assert_in_epsilon(12.607437247631744, worksheet.outputs_energy_flows_aa36, 0.002); end
  def test_outputs_energy_flows_ab36; assert_in_epsilon(13.388816098961257, worksheet.outputs_energy_flows_ab36, 0.002); end
  def test_outputs_energy_flows_ac36; assert_in_epsilon(14.16813701641734, worksheet.outputs_energy_flows_ac36, 0.002); end
  def test_outputs_energy_flows_ad36; assert_in_epsilon(14.945400000000001, worksheet.outputs_energy_flows_ad36, 0.002); end
  def test_outputs_energy_flows_d38; assert_equal("Biocrops", worksheet.outputs_energy_flows_d38); end
  def test_outputs_energy_flows_f38; assert_equal("Liquid", worksheet.outputs_energy_flows_f38); end
  def test_outputs_energy_flows_g38; assert_equal("arable.bio", worksheet.outputs_energy_flows_g38); end
  def test_outputs_energy_flows_h38; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_h38); end
  def test_outputs_energy_flows_i38; assert_equal("C.02", worksheet.outputs_energy_flows_i38); end
  def test_outputs_energy_flows_j38; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j38); end
  def test_outputs_energy_flows_v38; assert_in_delta(0.76, worksheet.outputs_energy_flows_v38, 0.002); end
  def test_outputs_energy_flows_w38; assert_in_delta(0.7425796855766272, worksheet.outputs_energy_flows_w38, 0.002); end
  def test_outputs_energy_flows_x38; assert_in_delta(0.8055853711358296, worksheet.outputs_energy_flows_x38, 0.002); end
  def test_outputs_energy_flows_y38; assert_in_delta(0.8827763079296206, worksheet.outputs_energy_flows_y38, 0.002); end
  def test_outputs_energy_flows_z38; assert_in_delta(0.9620251785968399, worksheet.outputs_energy_flows_z38, 0.002); end
  def test_outputs_energy_flows_aa38; assert_in_epsilon(1.0433319831374877, worksheet.outputs_energy_flows_aa38, 0.002); end
  def test_outputs_energy_flows_ab38; assert_in_epsilon(1.1266967215515633, worksheet.outputs_energy_flows_ab38, 0.002); end
  def test_outputs_energy_flows_ac38; assert_in_epsilon(1.2121193938390675, worksheet.outputs_energy_flows_ac38, 0.002); end
  def test_outputs_energy_flows_ad38; assert_in_epsilon(1.2996, worksheet.outputs_energy_flows_ad38, 0.002); end
  def test_outputs_energy_flows_d40; assert_equal("Biocrops", worksheet.outputs_energy_flows_d40); end
  def test_outputs_energy_flows_f40; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f40); end
  def test_outputs_energy_flows_g40; assert_equal("arable.bio", worksheet.outputs_energy_flows_g40); end
  def test_outputs_energy_flows_h40; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_h40); end
  def test_outputs_energy_flows_i40; assert_equal("L.01", worksheet.outputs_energy_flows_i40); end
  def test_outputs_energy_flows_j40; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j40); end
  def test_outputs_energy_flows_v40; assert_in_epsilon(2.375, worksheet.outputs_energy_flows_v40, 0.002); end
  def test_outputs_energy_flows_w40; assert_in_epsilon(2.3866861408633557, worksheet.outputs_energy_flows_w40, 0.002); end
  def test_outputs_energy_flows_x40; assert_in_epsilon(2.376639108554995, worksheet.outputs_energy_flows_x40, 0.002); end
  def test_outputs_energy_flows_y40; assert_in_epsilon(2.3403743904357395, worksheet.outputs_energy_flows_y40, 0.002); end
  def test_outputs_energy_flows_z40; assert_in_epsilon(2.2790800991556246, worksheet.outputs_energy_flows_z40, 0.002); end
  def test_outputs_energy_flows_aa40; assert_in_epsilon(2.193873626373625, worksheet.outputs_energy_flows_aa40, 0.002); end
  def test_outputs_energy_flows_ab40; assert_in_epsilon(2.0858068275810204, worksheet.outputs_energy_flows_ab40, 0.002); end
  def test_outputs_energy_flows_ac40; assert_in_epsilon(1.9558707573736456, worksheet.outputs_energy_flows_ac40, 0.002); end
  def test_outputs_energy_flows_ad40; assert_in_epsilon(1.8049999999999997, worksheet.outputs_energy_flows_ad40, 0.002); end
  def test_outputs_energy_flows_d42; assert_equal("Biocrops", worksheet.outputs_energy_flows_d42); end
  def test_outputs_energy_flows_f42; assert_equal("Global oversupply", worksheet.outputs_energy_flows_f42); end
  def test_outputs_energy_flows_g42; assert_equal("arable.bio", worksheet.outputs_energy_flows_g42); end
  def test_outputs_energy_flows_h42; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_h42); end
  def test_outputs_energy_flows_i42; assert_equal("O.01", worksheet.outputs_energy_flows_i42); end
  def test_outputs_energy_flows_j42; assert_equal("Global Oversupply", worksheet.outputs_energy_flows_j42); end
  def test_outputs_energy_flows_v42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v42||0), 0.002); end
  def test_outputs_energy_flows_w42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w42||0), 0.002); end
  def test_outputs_energy_flows_x42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x42||0), 0.002); end
  def test_outputs_energy_flows_y42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y42||0), 0.002); end
  def test_outputs_energy_flows_z42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z42||0), 0.002); end
  def test_outputs_energy_flows_aa42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa42||0), 0.002); end
  def test_outputs_energy_flows_ab42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab42||0), 0.002); end
  def test_outputs_energy_flows_ac42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac42||0), 0.002); end
  def test_outputs_energy_flows_ad42; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad42||0), 0.002); end
  def test_outputs_energy_flows_c44; assert_equal("n/a", worksheet.outputs_energy_flows_c44); end
  def test_outputs_energy_flows_d44; assert_equal("Food waste", worksheet.outputs_energy_flows_d44); end
  def test_outputs_energy_flows_e44; assert_equal("n/a", worksheet.outputs_energy_flows_e44); end
  def test_outputs_energy_flows_f44; assert_equal("Bio conversion", worksheet.outputs_energy_flows_f44); end
  def test_outputs_energy_flows_g44; assert_equal("Arable.food", worksheet.outputs_energy_flows_g44); end
  def test_outputs_energy_flows_h44; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_h44); end
  def test_outputs_energy_flows_i44; assert_equal("BM.09", worksheet.outputs_energy_flows_i44); end
  def test_outputs_energy_flows_j44; assert_equal("Global Dry biomass and waste", worksheet.outputs_energy_flows_j44); end
  def test_outputs_energy_flows_v44; assert_in_epsilon(4.539903114211106, worksheet.outputs_energy_flows_v44, 0.002); end
  def test_outputs_energy_flows_w44; assert_in_epsilon(4.770137210154907, worksheet.outputs_energy_flows_w44, 0.002); end
  def test_outputs_energy_flows_x44; assert_in_epsilon(5.047772353566085, worksheet.outputs_energy_flows_x44, 0.002); end
  def test_outputs_energy_flows_y44; assert_in_epsilon(5.32246443278401, worksheet.outputs_energy_flows_y44, 0.002); end
  def test_outputs_energy_flows_z44; assert_in_epsilon(5.624201104634216, worksheet.outputs_energy_flows_z44, 0.002); end
  def test_outputs_energy_flows_aa44; assert_in_epsilon(5.977978982402824, worksheet.outputs_energy_flows_aa44, 0.002); end
  def test_outputs_energy_flows_ab44; assert_in_epsilon(6.325287769661438, worksheet.outputs_energy_flows_ab44, 0.002); end
  def test_outputs_energy_flows_ac44; assert_in_epsilon(6.596995595536725, worksheet.outputs_energy_flows_ac44, 0.002); end
  def test_outputs_energy_flows_ad44; assert_in_epsilon(6.81627043969819, worksheet.outputs_energy_flows_ad44, 0.002); end
  def test_outputs_energy_flows_c46; assert_equal("n/a ", worksheet.outputs_energy_flows_c46); end
  def test_outputs_energy_flows_d46; assert_equal("Waste from animals", worksheet.outputs_energy_flows_d46); end
  def test_outputs_energy_flows_e46; assert_equal("n/a", worksheet.outputs_energy_flows_e46); end
  def test_outputs_energy_flows_f46; assert_equal("Bio conversion", worksheet.outputs_energy_flows_f46); end
  def test_outputs_energy_flows_g46; assert_equal("Pasture.food", worksheet.outputs_energy_flows_g46); end
  def test_outputs_energy_flows_h46; assert_equal("Global Pasture for animals", worksheet.outputs_energy_flows_h46); end
  def test_outputs_energy_flows_i46; assert_equal("BM.09", worksheet.outputs_energy_flows_i46); end
  def test_outputs_energy_flows_j46; assert_equal("Global Dry biomass and waste", worksheet.outputs_energy_flows_j46); end
  def test_outputs_energy_flows_v46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v46||0), 0.002); end
  def test_outputs_energy_flows_w46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w46||0), 0.002); end
  def test_outputs_energy_flows_x46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x46||0), 0.002); end
  def test_outputs_energy_flows_y46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y46||0), 0.002); end
  def test_outputs_energy_flows_z46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z46||0), 0.002); end
  def test_outputs_energy_flows_aa46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa46||0), 0.002); end
  def test_outputs_energy_flows_ab46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab46||0), 0.002); end
  def test_outputs_energy_flows_ac46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac46||0), 0.002); end
  def test_outputs_energy_flows_ad46; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad46||0), 0.002); end
  def test_outputs_energy_flows_c48; assert_equal("Q.01", worksheet.outputs_energy_flows_c48); end
  def test_outputs_energy_flows_d48; assert_equal("Global Coal reserves ", worksheet.outputs_energy_flows_d48); end
  def test_outputs_energy_flows_e48; assert_equal("CFF.01", worksheet.outputs_energy_flows_e48); end
  def test_outputs_energy_flows_f48; assert_equal("Global Crude coal", worksheet.outputs_energy_flows_f48); end
  def test_outputs_energy_flows_g48; assert_equal("Coal.extract", worksheet.outputs_energy_flows_g48); end
  def test_outputs_energy_flows_h48; assert_equal("Global Coal Extraction", worksheet.outputs_energy_flows_h48); end
  def test_outputs_energy_flows_v48; assert_in_epsilon(138.74525581361016, worksheet.outputs_energy_flows_v48, 0.002); end
  def test_outputs_energy_flows_w48; assert_in_epsilon(157.83056746648487, worksheet.outputs_energy_flows_w48, 0.002); end
  def test_outputs_energy_flows_x48; assert_in_epsilon(168.6110628439149, worksheet.outputs_energy_flows_x48, 0.002); end
  def test_outputs_energy_flows_y48; assert_in_epsilon(186.8950473522231, worksheet.outputs_energy_flows_y48, 0.002); end
  def test_outputs_energy_flows_z48; assert_in_epsilon(202.3761891000003, worksheet.outputs_energy_flows_z48, 0.002); end
  def test_outputs_energy_flows_aa48; assert_in_epsilon(215.07641590244398, worksheet.outputs_energy_flows_aa48, 0.002); end
  def test_outputs_energy_flows_ab48; assert_in_epsilon(224.05108838070012, worksheet.outputs_energy_flows_ab48, 0.002); end
  def test_outputs_energy_flows_ac48; assert_in_epsilon(225.5791461673485, worksheet.outputs_energy_flows_ac48, 0.002); end
  def test_outputs_energy_flows_ad48; assert_in_epsilon(227.58722950888827, worksheet.outputs_energy_flows_ad48, 0.002); end
  def test_outputs_energy_flows_c50; assert_equal("Q.01", worksheet.outputs_energy_flows_c50); end
  def test_outputs_energy_flows_d50; assert_equal("Global Coal reserves ", worksheet.outputs_energy_flows_d50); end
  def test_outputs_energy_flows_e50; assert_equal("L.02", worksheet.outputs_energy_flows_e50); end
  def test_outputs_energy_flows_f50; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f50); end
  def test_outputs_energy_flows_g50; assert_equal("Coal.extract", worksheet.outputs_energy_flows_g50); end
  def test_outputs_energy_flows_h50; assert_equal("Global Coal Extraction", worksheet.outputs_energy_flows_h50); end
  def test_outputs_energy_flows_v50; assert_in_epsilon(34.68631395340253, worksheet.outputs_energy_flows_v50, 0.002); end
  def test_outputs_energy_flows_w50; assert_in_epsilon(40.449039903470975, worksheet.outputs_energy_flows_w50, 0.002); end
  def test_outputs_energy_flows_x50; assert_in_epsilon(44.28169327213925, worksheet.outputs_energy_flows_x50, 0.002); end
  def test_outputs_energy_flows_y50; assert_in_epsilon(51.49149263785736, worksheet.outputs_energy_flows_y50, 0.002); end
  def test_outputs_energy_flows_z50; assert_in_epsilon(48.71089415062045, worksheet.outputs_energy_flows_z50, 0.002); end
  def test_outputs_energy_flows_aa50; assert_in_epsilon(54.442902271044744, worksheet.outputs_energy_flows_aa50, 0.002); end
  def test_outputs_energy_flows_ab50; assert_in_epsilon(59.55788425309751, worksheet.outputs_energy_flows_ab50, 0.002); end
  def test_outputs_energy_flows_ac50; assert_in_epsilon(62.88523512082091, worksheet.outputs_energy_flows_ac50, 0.002); end
  def test_outputs_energy_flows_ad50; assert_in_epsilon(66.45311869380973, worksheet.outputs_energy_flows_ad50, 0.002); end
  def test_outputs_energy_flows_c52; assert_equal("Q.02", worksheet.outputs_energy_flows_c52); end
  def test_outputs_energy_flows_d52; assert_equal("Global Oil reserves ", worksheet.outputs_energy_flows_d52); end
  def test_outputs_energy_flows_e52; assert_equal("CFF.02", worksheet.outputs_energy_flows_e52); end
  def test_outputs_energy_flows_f52; assert_equal("Global Crude oil", worksheet.outputs_energy_flows_f52); end
  def test_outputs_energy_flows_g52; assert_equal("Oil.extract", worksheet.outputs_energy_flows_g52); end
  def test_outputs_energy_flows_h52; assert_equal("Global Oil Extraction", worksheet.outputs_energy_flows_h52); end
  def test_outputs_energy_flows_v52; assert_in_epsilon(168.04132110238174, worksheet.outputs_energy_flows_v52, 0.002); end
  def test_outputs_energy_flows_w52; assert_in_epsilon(184.31166300031228, worksheet.outputs_energy_flows_w52, 0.002); end
  def test_outputs_energy_flows_x52; assert_in_epsilon(210.73300894920055, worksheet.outputs_energy_flows_x52, 0.002); end
  def test_outputs_energy_flows_y52; assert_in_epsilon(226.86733848204256, worksheet.outputs_energy_flows_y52, 0.002); end
  def test_outputs_energy_flows_z52; assert_in_epsilon(247.38503413928635, worksheet.outputs_energy_flows_z52, 0.002); end
  def test_outputs_energy_flows_aa52; assert_in_epsilon(264.2324748276299, worksheet.outputs_energy_flows_aa52, 0.002); end
  def test_outputs_energy_flows_ab52; assert_in_epsilon(284.2506295081791, worksheet.outputs_energy_flows_ab52, 0.002); end
  def test_outputs_energy_flows_ac52; assert_in_epsilon(306.1479592921631, worksheet.outputs_energy_flows_ac52, 0.002); end
  def test_outputs_energy_flows_ad52; assert_in_epsilon(324.66836714597946, worksheet.outputs_energy_flows_ad52, 0.002); end
  def test_outputs_energy_flows_c54; assert_equal("Q.02", worksheet.outputs_energy_flows_c54); end
  def test_outputs_energy_flows_d54; assert_equal("Global Oil reserves ", worksheet.outputs_energy_flows_d54); end
  def test_outputs_energy_flows_e54; assert_equal("L.02", worksheet.outputs_energy_flows_e54); end
  def test_outputs_energy_flows_f54; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f54); end
  def test_outputs_energy_flows_g54; assert_equal("Oil.extract", worksheet.outputs_energy_flows_g54); end
  def test_outputs_energy_flows_h54; assert_equal("Global Oil Extraction", worksheet.outputs_energy_flows_h54); end
  def test_outputs_energy_flows_v54; assert_in_epsilon(12.648271480824405, worksheet.outputs_energy_flows_v54, 0.002); end
  def test_outputs_energy_flows_w54; assert_in_epsilon(15.59252680479861, worksheet.outputs_energy_flows_w54, 0.002); end
  def test_outputs_energy_flows_x54; assert_in_epsilon(19.82826998865559, worksheet.outputs_energy_flows_x54, 0.002); end
  def test_outputs_energy_flows_y54; assert_in_epsilon(29.190605628614946, worksheet.outputs_energy_flows_y54, 0.002); end
  def test_outputs_energy_flows_z54; assert_in_epsilon(34.374685837121774, worksheet.outputs_energy_flows_z54, 0.002); end
  def test_outputs_energy_flows_aa54; assert_in_epsilon(40.1828187525889, worksheet.outputs_energy_flows_aa54, 0.002); end
  def test_outputs_energy_flows_ab54; assert_in_epsilon(49.37686991456633, worksheet.outputs_energy_flows_ab54, 0.002); end
  def test_outputs_energy_flows_ac54; assert_in_epsilon(60.0577336410463, worksheet.outputs_energy_flows_ac54, 0.002); end
  def test_outputs_energy_flows_ad54; assert_in_epsilon(69.3466415263257, worksheet.outputs_energy_flows_ad54, 0.002); end
  def test_outputs_energy_flows_c56; assert_equal("Q.03", worksheet.outputs_energy_flows_c56); end
  def test_outputs_energy_flows_d56; assert_equal("Global Gas reserves ", worksheet.outputs_energy_flows_d56); end
  def test_outputs_energy_flows_e56; assert_equal("CFF.03", worksheet.outputs_energy_flows_e56); end
  def test_outputs_energy_flows_f56; assert_equal("Global Unprocessed gas", worksheet.outputs_energy_flows_f56); end
  def test_outputs_energy_flows_g56; assert_equal("NaturalGas.extract", worksheet.outputs_energy_flows_g56); end
  def test_outputs_energy_flows_h56; assert_equal("Global Natural Gas Extraction", worksheet.outputs_energy_flows_h56); end
  def test_outputs_energy_flows_v56; assert_in_epsilon(92.82072665195463, worksheet.outputs_energy_flows_v56, 0.002); end
  def test_outputs_energy_flows_w56; assert_in_epsilon(102.20688319912547, worksheet.outputs_energy_flows_w56, 0.002); end
  def test_outputs_energy_flows_x56; assert_in_epsilon(109.80130396160258, worksheet.outputs_energy_flows_x56, 0.002); end
  def test_outputs_energy_flows_y56; assert_in_epsilon(118.43992518319352, worksheet.outputs_energy_flows_y56, 0.002); end
  def test_outputs_energy_flows_z56; assert_in_epsilon(127.81212795665321, worksheet.outputs_energy_flows_z56, 0.002); end
  def test_outputs_energy_flows_aa56; assert_in_epsilon(137.68760109114126, worksheet.outputs_energy_flows_aa56, 0.002); end
  def test_outputs_energy_flows_ab56; assert_in_epsilon(148.8469952454661, worksheet.outputs_energy_flows_ab56, 0.002); end
  def test_outputs_energy_flows_ac56; assert_in_epsilon(160.8161416468036, worksheet.outputs_energy_flows_ac56, 0.002); end
  def test_outputs_energy_flows_ad56; assert_in_epsilon(173.4349746328926, worksheet.outputs_energy_flows_ad56, 0.002); end
  def test_outputs_energy_flows_c58; assert_equal("Q.03", worksheet.outputs_energy_flows_c58); end
  def test_outputs_energy_flows_d58; assert_equal("Global Gas reserves ", worksheet.outputs_energy_flows_d58); end
  def test_outputs_energy_flows_e58; assert_equal("L.02", worksheet.outputs_energy_flows_e58); end
  def test_outputs_energy_flows_f58; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f58); end
  def test_outputs_energy_flows_g58; assert_equal("NaturalGas.extract", worksheet.outputs_energy_flows_g58); end
  def test_outputs_energy_flows_h58; assert_equal("Global Natural Gas Extraction", worksheet.outputs_energy_flows_h58); end
  def test_outputs_energy_flows_v58; assert_in_epsilon(27.725671597337097, worksheet.outputs_energy_flows_v58, 0.002); end
  def test_outputs_energy_flows_w58; assert_in_epsilon(31.22246823576417, worksheet.outputs_energy_flows_w58, 0.002); end
  def test_outputs_energy_flows_x58; assert_in_epsilon(35.82376760550959, worksheet.outputs_energy_flows_x58, 0.002); end
  def test_outputs_energy_flows_y58; assert_in_epsilon(38.64220370698355, worksheet.outputs_energy_flows_y58, 0.002); end
  def test_outputs_energy_flows_z58; assert_in_epsilon(43.0597008624019, worksheet.outputs_energy_flows_z58, 0.002); end
  def test_outputs_energy_flows_aa58; assert_in_epsilon(44.921949427613725, worksheet.outputs_energy_flows_aa58, 0.002); end
  def test_outputs_energy_flows_ab58; assert_in_epsilon(48.56281277239344, worksheet.outputs_energy_flows_ab58, 0.002); end
  def test_outputs_energy_flows_ac58; assert_in_epsilon(58.279419179904295, worksheet.outputs_energy_flows_ac58, 0.002); end
  def test_outputs_energy_flows_ad58; assert_in_epsilon(69.47115230393177, worksheet.outputs_energy_flows_ad58, 0.002); end
  def test_outputs_energy_flows_c60; assert_equal("CFF.01", worksheet.outputs_energy_flows_c60); end
  def test_outputs_energy_flows_d60; assert_equal("Global Crude coal", worksheet.outputs_energy_flows_d60); end
  def test_outputs_energy_flows_e60; assert_equal("FF.01", worksheet.outputs_energy_flows_e60); end
  def test_outputs_energy_flows_f60; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_f60); end
  def test_outputs_energy_flows_g60; assert_equal("Coal.wash", worksheet.outputs_energy_flows_g60); end
  def test_outputs_energy_flows_h60; assert_equal("Global Coal washeries", worksheet.outputs_energy_flows_h60); end
  def test_outputs_energy_flows_v60; assert_in_epsilon(131.80799302292965, worksheet.outputs_energy_flows_v60, 0.002); end
  def test_outputs_energy_flows_w60; assert_in_epsilon(147.0980888787639, worksheet.outputs_energy_flows_w60, 0.002); end
  def test_outputs_energy_flows_x60; assert_in_epsilon(155.45939994208956, worksheet.outputs_energy_flows_x60, 0.002); end
  def test_outputs_energy_flows_y60; assert_in_epsilon(170.4482831852275, worksheet.outputs_energy_flows_y60, 0.002); end
  def test_outputs_energy_flows_z60; assert_in_epsilon(181.7338178118003, worksheet.outputs_energy_flows_z60, 0.002); end
  def test_outputs_energy_flows_aa60; assert_in_epsilon(190.98785732137029, worksheet.outputs_energy_flows_aa60, 0.002); end
  def test_outputs_energy_flows_ab60; assert_in_epsilon(195.82065124473192, worksheet.outputs_energy_flows_ab60, 0.002); end
  def test_outputs_energy_flows_ac60; assert_in_epsilon(193.99806570391974, worksheet.outputs_energy_flows_ac60, 0.002); end
  def test_outputs_energy_flows_ad60; assert_in_epsilon(191.62844724648392, worksheet.outputs_energy_flows_ad60, 0.002); end
  def test_outputs_energy_flows_c62; assert_equal("CFF.01", worksheet.outputs_energy_flows_c62); end
  def test_outputs_energy_flows_d62; assert_equal("Global Crude coal", worksheet.outputs_energy_flows_d62); end
  def test_outputs_energy_flows_e62; assert_equal("L.02", worksheet.outputs_energy_flows_e62); end
  def test_outputs_energy_flows_f62; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f62); end
  def test_outputs_energy_flows_g62; assert_equal("Coal.wash", worksheet.outputs_energy_flows_g62); end
  def test_outputs_energy_flows_h62; assert_equal("Global Coal washeries", worksheet.outputs_energy_flows_h62); end
  def test_outputs_energy_flows_v62; assert_in_epsilon(6.937262790680506, worksheet.outputs_energy_flows_v62, 0.002); end
  def test_outputs_energy_flows_w62; assert_in_epsilon(10.732478587720976, worksheet.outputs_energy_flows_w62, 0.002); end
  def test_outputs_energy_flows_x62; assert_in_epsilon(13.151662901825347, worksheet.outputs_energy_flows_x62, 0.002); end
  def test_outputs_energy_flows_y62; assert_in_epsilon(16.446764166995592, worksheet.outputs_energy_flows_y62, 0.002); end
  def test_outputs_energy_flows_z62; assert_in_epsilon(20.642371288199996, worksheet.outputs_energy_flows_z62, 0.002); end
  def test_outputs_energy_flows_aa62; assert_in_epsilon(24.0885585810737, worksheet.outputs_energy_flows_aa62, 0.002); end
  def test_outputs_energy_flows_ab62; assert_in_epsilon(28.230437135968202, worksheet.outputs_energy_flows_ab62, 0.002); end
  def test_outputs_energy_flows_ac62; assert_in_epsilon(31.581080463428776, worksheet.outputs_energy_flows_ac62, 0.002); end
  def test_outputs_energy_flows_ad62; assert_in_epsilon(35.958782262404355, worksheet.outputs_energy_flows_ad62, 0.002); end
  def test_outputs_energy_flows_c64; assert_equal("CFF.02", worksheet.outputs_energy_flows_c64); end
  def test_outputs_energy_flows_d64; assert_equal("Global Crude oil", worksheet.outputs_energy_flows_d64); end
  def test_outputs_energy_flows_e64; assert_equal("FF.02", worksheet.outputs_energy_flows_e64); end
  def test_outputs_energy_flows_f64; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_f64); end
  def test_outputs_energy_flows_g64; assert_equal("Oil.refine", worksheet.outputs_energy_flows_g64); end
  def test_outputs_energy_flows_h64; assert_equal("Global Oil refineries", worksheet.outputs_energy_flows_h64); end
  def test_outputs_energy_flows_v64; assert_in_epsilon(155.776284414976, worksheet.outputs_energy_flows_v64, 0.002); end
  def test_outputs_energy_flows_w64; assert_in_epsilon(170.6725999382892, worksheet.outputs_energy_flows_w64, 0.002); end
  def test_outputs_energy_flows_x64; assert_in_epsilon(195.13876628695974, worksheet.outputs_energy_flows_x64, 0.002); end
  def test_outputs_energy_flows_y64; assert_in_epsilon(210.07915543437144, worksheet.outputs_energy_flows_y64, 0.002); end
  def test_outputs_energy_flows_z64; assert_in_epsilon(228.78167957201202, worksheet.outputs_energy_flows_z64, 0.002); end
  def test_outputs_energy_flows_aa64; assert_in_epsilon(245.94758756955795, worksheet.outputs_energy_flows_aa64, 0.002); end
  def test_outputs_energy_flows_ab64; assert_in_epsilon(264.125684939, worksheet.outputs_energy_flows_ab64, 0.002); end
  def test_outputs_energy_flows_ac64; assert_in_epsilon(284.3502245905611, worksheet.outputs_energy_flows_ac64, 0.002); end
  def test_outputs_energy_flows_ad64; assert_in_epsilon(301.2922447114689, worksheet.outputs_energy_flows_ad64, 0.002); end
  def test_outputs_energy_flows_c66; assert_equal("CFF.02", worksheet.outputs_energy_flows_c66); end
  def test_outputs_energy_flows_d66; assert_equal("Global Crude oil", worksheet.outputs_energy_flows_d66); end
  def test_outputs_energy_flows_e66; assert_equal("L.02", worksheet.outputs_energy_flows_e66); end
  def test_outputs_energy_flows_f66; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f66); end
  def test_outputs_energy_flows_g66; assert_equal("Oil.refine", worksheet.outputs_energy_flows_g66); end
  def test_outputs_energy_flows_h66; assert_equal("Global Oil refineries", worksheet.outputs_energy_flows_h66); end
  def test_outputs_energy_flows_v66; assert_in_epsilon(12.26503668740574, worksheet.outputs_energy_flows_v66, 0.002); end
  def test_outputs_energy_flows_w66; assert_in_epsilon(13.63906306202307, worksheet.outputs_energy_flows_w66, 0.002); end
  def test_outputs_energy_flows_x66; assert_in_epsilon(15.594242662240816, worksheet.outputs_energy_flows_x66, 0.002); end
  def test_outputs_energy_flows_y66; assert_in_epsilon(16.78818304767111, worksheet.outputs_energy_flows_y66, 0.002); end
  def test_outputs_energy_flows_z66; assert_in_epsilon(18.603354567274323, worksheet.outputs_energy_flows_z66, 0.002); end
  def test_outputs_energy_flows_aa66; assert_in_epsilon(18.28488725807196, worksheet.outputs_energy_flows_aa66, 0.002); end
  def test_outputs_energy_flows_ab66; assert_in_epsilon(20.124944569179092, worksheet.outputs_energy_flows_ab66, 0.002); end
  def test_outputs_energy_flows_ac66; assert_in_epsilon(21.797734701601996, worksheet.outputs_energy_flows_ac66, 0.002); end
  def test_outputs_energy_flows_ad66; assert_in_epsilon(23.376122434510535, worksheet.outputs_energy_flows_ad66, 0.002); end
  def test_outputs_energy_flows_c68; assert_equal("CFF.03", worksheet.outputs_energy_flows_c68); end
  def test_outputs_energy_flows_d68; assert_equal("Global Unprocessed gas", worksheet.outputs_energy_flows_d68); end
  def test_outputs_energy_flows_e68; assert_equal("FF.03", worksheet.outputs_energy_flows_e68); end
  def test_outputs_energy_flows_f68; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_f68); end
  def test_outputs_energy_flows_g68; assert_equal("Natural.gas.process", worksheet.outputs_energy_flows_g68); end
  def test_outputs_energy_flows_h68; assert_equal("Global Natural gas processing plants", worksheet.outputs_energy_flows_h68); end
  def test_outputs_energy_flows_v68; assert_in_epsilon(90.96431211891553, worksheet.outputs_energy_flows_v68, 0.002); end
  def test_outputs_energy_flows_w68; assert_in_epsilon(100.16274553514296, worksheet.outputs_energy_flows_w68, 0.002); end
  def test_outputs_energy_flows_x68; assert_in_epsilon(107.60527788237053, worksheet.outputs_energy_flows_x68, 0.002); end
  def test_outputs_energy_flows_y68; assert_in_epsilon(116.07112667952966, worksheet.outputs_energy_flows_y68, 0.002); end
  def test_outputs_energy_flows_z68; assert_in_epsilon(125.25588539752015, worksheet.outputs_energy_flows_z68, 0.002); end
  def test_outputs_energy_flows_aa68; assert_in_epsilon(134.93384906931843, worksheet.outputs_energy_flows_aa68, 0.002); end
  def test_outputs_energy_flows_ab68; assert_in_epsilon(145.87005534055677, worksheet.outputs_energy_flows_ab68, 0.002); end
  def test_outputs_energy_flows_ac68; assert_in_epsilon(157.59981881386753, worksheet.outputs_energy_flows_ac68, 0.002); end
  def test_outputs_energy_flows_ad68; assert_in_epsilon(169.96627514023473, worksheet.outputs_energy_flows_ad68, 0.002); end
  def test_outputs_energy_flows_c70; assert_equal("CFF.03", worksheet.outputs_energy_flows_c70); end
  def test_outputs_energy_flows_d70; assert_equal("Global Unprocessed gas", worksheet.outputs_energy_flows_d70); end
  def test_outputs_energy_flows_e70; assert_equal("L.02", worksheet.outputs_energy_flows_e70); end
  def test_outputs_energy_flows_f70; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f70); end
  def test_outputs_energy_flows_g70; assert_equal("Natural.gas.process", worksheet.outputs_energy_flows_g70); end
  def test_outputs_energy_flows_h70; assert_equal("Global Natural gas processing plants", worksheet.outputs_energy_flows_h70); end
  def test_outputs_energy_flows_v70; assert_in_epsilon(1.8564145330391, worksheet.outputs_energy_flows_v70, 0.002); end
  def test_outputs_energy_flows_w70; assert_in_epsilon(2.044137663982511, worksheet.outputs_energy_flows_w70, 0.002); end
  def test_outputs_energy_flows_x70; assert_in_epsilon(2.1960260792320554, worksheet.outputs_energy_flows_x70, 0.002); end
  def test_outputs_energy_flows_y70; assert_in_epsilon(2.368798503663868, worksheet.outputs_energy_flows_y70, 0.002); end
  def test_outputs_energy_flows_z70; assert_in_epsilon(2.556242559133068, worksheet.outputs_energy_flows_z70, 0.002); end
  def test_outputs_energy_flows_aa70; assert_in_epsilon(2.7537520218228337, worksheet.outputs_energy_flows_aa70, 0.002); end
  def test_outputs_energy_flows_ab70; assert_in_epsilon(2.9769399049093295, worksheet.outputs_energy_flows_ab70, 0.002); end
  def test_outputs_energy_flows_ac70; assert_in_epsilon(3.216322832936072, worksheet.outputs_energy_flows_ac70, 0.002); end
  def test_outputs_energy_flows_ad70; assert_in_epsilon(3.468699492657862, worksheet.outputs_energy_flows_ad70, 0.002); end
  def test_outputs_energy_flows_c72; assert_equal("FF.01", worksheet.outputs_energy_flows_c72); end
  def test_outputs_energy_flows_d72; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d72); end
  def test_outputs_energy_flows_e72; assert_equal("n/a", worksheet.outputs_energy_flows_e72); end
  def test_outputs_energy_flows_f72; assert_equal("Solid", worksheet.outputs_energy_flows_f72); end
  def test_outputs_energy_flows_g72; assert_equal("coal.network", worksheet.outputs_energy_flows_g72); end
  def test_outputs_energy_flows_h72; assert_equal("Global Coal distribution network", worksheet.outputs_energy_flows_h72); end
  def test_outputs_energy_flows_i72; assert_equal("C.01", worksheet.outputs_energy_flows_i72); end
  def test_outputs_energy_flows_j72; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j72); end
  def test_outputs_energy_flows_v72; assert_in_epsilon(131.528940689516, worksheet.outputs_energy_flows_v72, 0.002); end
  def test_outputs_energy_flows_w72; assert_in_epsilon(146.78666569416862, worksheet.outputs_energy_flows_w72, 0.002); end
  def test_outputs_energy_flows_x72; assert_in_epsilon(155.13027492235437, worksheet.outputs_energy_flows_x72, 0.002); end
  def test_outputs_energy_flows_y72; assert_in_epsilon(170.08742501526115, worksheet.outputs_energy_flows_y72, 0.002); end
  def test_outputs_energy_flows_z72; assert_in_epsilon(181.3490668967952, worksheet.outputs_energy_flows_z72, 0.002); end
  def test_outputs_energy_flows_aa72; assert_in_epsilon(190.58351456478243, worksheet.outputs_energy_flows_aa72, 0.002); end
  def test_outputs_energy_flows_ab72; assert_in_epsilon(195.40607692031352, worksheet.outputs_energy_flows_ab72, 0.002); end
  def test_outputs_energy_flows_ac72; assert_in_epsilon(193.5873499979079, worksheet.outputs_energy_flows_ac72, 0.002); end
  def test_outputs_energy_flows_ad72; assert_in_epsilon(191.222748289037, worksheet.outputs_energy_flows_ad72, 0.002); end
  def test_outputs_energy_flows_c74; assert_equal("FF.01", worksheet.outputs_energy_flows_c74); end
  def test_outputs_energy_flows_d74; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d74); end
  def test_outputs_energy_flows_e74; assert_equal("L.02", worksheet.outputs_energy_flows_e74); end
  def test_outputs_energy_flows_f74; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f74); end
  def test_outputs_energy_flows_g74; assert_equal("coal.network", worksheet.outputs_energy_flows_g74); end
  def test_outputs_energy_flows_h74; assert_equal("Global Coal distribution network", worksheet.outputs_energy_flows_h74); end
  def test_outputs_energy_flows_i74; assert_equal("C.01", worksheet.outputs_energy_flows_i74); end
  def test_outputs_energy_flows_j74; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j74); end
  def test_outputs_energy_flows_v74; assert_in_delta(0.2790523334136694, worksheet.outputs_energy_flows_v74, 0.002); end
  def test_outputs_energy_flows_w74; assert_in_delta(0.3114231845952587, worksheet.outputs_energy_flows_w74, 0.002); end
  def test_outputs_energy_flows_x74; assert_in_delta(0.32912501973520103, worksheet.outputs_energy_flows_x74, 0.002); end
  def test_outputs_energy_flows_y74; assert_in_delta(0.3608581699663486, worksheet.outputs_energy_flows_y74, 0.002); end
  def test_outputs_energy_flows_z74; assert_in_delta(0.3847509150050964, worksheet.outputs_energy_flows_z74, 0.002); end
  def test_outputs_energy_flows_aa74; assert_in_delta(0.40434275658786417, worksheet.outputs_energy_flows_aa74, 0.002); end
  def test_outputs_energy_flows_ab74; assert_in_delta(0.4145743244184043, worksheet.outputs_energy_flows_ab74, 0.002); end
  def test_outputs_energy_flows_ac74; assert_in_delta(0.410715706011847, worksheet.outputs_energy_flows_ac74, 0.002); end
  def test_outputs_energy_flows_ad74; assert_in_delta(0.40569895744689055, worksheet.outputs_energy_flows_ad74, 0.002); end
  def test_outputs_energy_flows_c76; assert_equal("FF.02", worksheet.outputs_energy_flows_c76); end
  def test_outputs_energy_flows_d76; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d76); end
  def test_outputs_energy_flows_e76; assert_equal("n/a", worksheet.outputs_energy_flows_e76); end
  def test_outputs_energy_flows_f76; assert_equal("Liquid", worksheet.outputs_energy_flows_f76); end
  def test_outputs_energy_flows_g76; assert_equal("oil.network", worksheet.outputs_energy_flows_g76); end
  def test_outputs_energy_flows_h76; assert_equal("Global Oil distribution network", worksheet.outputs_energy_flows_h76); end
  def test_outputs_energy_flows_i76; assert_equal("C.02", worksheet.outputs_energy_flows_i76); end
  def test_outputs_energy_flows_j76; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j76); end
  def test_outputs_energy_flows_v76; assert_in_epsilon(155.62894535944693, worksheet.outputs_energy_flows_v76, 0.002); end
  def test_outputs_energy_flows_w76; assert_in_epsilon(170.5111713885325, worksheet.outputs_energy_flows_w76, 0.002); end
  def test_outputs_energy_flows_x76; assert_in_epsilon(194.95419671894234, worksheet.outputs_energy_flows_x76, 0.002); end
  def test_outputs_energy_flows_y76; assert_in_epsilon(209.8804546856388, worksheet.outputs_energy_flows_y76, 0.002); end
  def test_outputs_energy_flows_z76; assert_in_epsilon(228.56528927411085, worksheet.outputs_energy_flows_z76, 0.002); end
  def test_outputs_energy_flows_aa76; assert_in_epsilon(245.71496111169728, worksheet.outputs_energy_flows_aa76, 0.002); end
  def test_outputs_energy_flows_ab76; assert_in_epsilon(263.875864954488, worksheet.outputs_energy_flows_ab76, 0.002); end
  def test_outputs_energy_flows_ac76; assert_in_epsilon(284.0812754774917, worksheet.outputs_energy_flows_ac76, 0.002); end
  def test_outputs_energy_flows_ad76; assert_in_epsilon(301.0072711999955, worksheet.outputs_energy_flows_ad76, 0.002); end
  def test_outputs_energy_flows_c78; assert_equal("FF.02", worksheet.outputs_energy_flows_c78); end
  def test_outputs_energy_flows_d78; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d78); end
  def test_outputs_energy_flows_e78; assert_equal("L.02", worksheet.outputs_energy_flows_e78); end
  def test_outputs_energy_flows_f78; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f78); end
  def test_outputs_energy_flows_g78; assert_equal("oil.network", worksheet.outputs_energy_flows_g78); end
  def test_outputs_energy_flows_h78; assert_equal("Global Oil distribution network", worksheet.outputs_energy_flows_h78); end
  def test_outputs_energy_flows_i78; assert_equal("C.02", worksheet.outputs_energy_flows_i78); end
  def test_outputs_energy_flows_j78; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j78); end
  def test_outputs_energy_flows_v78; assert_in_delta(0.14733905552906912, worksheet.outputs_energy_flows_v78, 0.002); end
  def test_outputs_energy_flows_w78; assert_in_delta(0.1614285497567089, worksheet.outputs_energy_flows_w78, 0.002); end
  def test_outputs_energy_flows_x78; assert_in_delta(0.18456956801740412, worksheet.outputs_energy_flows_x78, 0.002); end
  def test_outputs_energy_flows_y78; assert_in_delta(0.19870074873264246, worksheet.outputs_energy_flows_y78, 0.002); end
  def test_outputs_energy_flows_z78; assert_in_delta(0.21639029790117215, worksheet.outputs_energy_flows_z78, 0.002); end
  def test_outputs_energy_flows_aa78; assert_in_delta(0.23262645786066696, worksheet.outputs_energy_flows_aa78, 0.002); end
  def test_outputs_energy_flows_ab78; assert_in_delta(0.2498199845119648, worksheet.outputs_energy_flows_ab78, 0.002); end
  def test_outputs_energy_flows_ac78; assert_in_delta(0.26894911306938435, worksheet.outputs_energy_flows_ac78, 0.002); end
  def test_outputs_energy_flows_ad78; assert_in_delta(0.2849735114734399, worksheet.outputs_energy_flows_ad78, 0.002); end
  def test_outputs_energy_flows_c80; assert_equal("FF.03", worksheet.outputs_energy_flows_c80); end
  def test_outputs_energy_flows_d80; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d80); end
  def test_outputs_energy_flows_e80; assert_equal("n/a", worksheet.outputs_energy_flows_e80); end
  def test_outputs_energy_flows_f80; assert_equal("Gas", worksheet.outputs_energy_flows_f80); end
  def test_outputs_energy_flows_g80; assert_equal("gas.nework", worksheet.outputs_energy_flows_g80); end
  def test_outputs_energy_flows_h80; assert_equal("Global Gas distribution network", worksheet.outputs_energy_flows_h80); end
  def test_outputs_energy_flows_i80; assert_equal("C.03", worksheet.outputs_energy_flows_i80); end
  def test_outputs_energy_flows_j80; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j80); end
  def test_outputs_energy_flows_v80; assert_in_epsilon(88.462282592305, worksheet.outputs_energy_flows_v80, 0.002); end
  def test_outputs_energy_flows_w80; assert_in_epsilon(97.40770742230934, worksheet.outputs_energy_flows_w80, 0.002); end
  def test_outputs_energy_flows_x80; assert_in_epsilon(104.64552832554585, worksheet.outputs_energy_flows_x80, 0.002); end
  def test_outputs_energy_flows_y80; assert_in_epsilon(112.8785187284083, worksheet.outputs_energy_flows_y80, 0.002); end
  def test_outputs_energy_flows_z80; assert_in_epsilon(121.81064499118753, worksheet.outputs_energy_flows_z80, 0.002); end
  def test_outputs_energy_flows_aa80; assert_in_epsilon(131.22241030122996, worksheet.outputs_energy_flows_aa80, 0.002); end
  def test_outputs_energy_flows_ab80; assert_in_epsilon(141.85780947172344, worksheet.outputs_energy_flows_ab80, 0.002); end
  def test_outputs_energy_flows_ac80; assert_in_epsilon(153.26493856384946, worksheet.outputs_energy_flows_ac80, 0.002); end
  def test_outputs_energy_flows_ad80; assert_in_epsilon(165.29124787929152, worksheet.outputs_energy_flows_ad80, 0.002); end
  def test_outputs_energy_flows_c82; assert_equal("FF.03", worksheet.outputs_energy_flows_c82); end
  def test_outputs_energy_flows_d82; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d82); end
  def test_outputs_energy_flows_e82; assert_equal("L.02", worksheet.outputs_energy_flows_e82); end
  def test_outputs_energy_flows_f82; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f82); end
  def test_outputs_energy_flows_g82; assert_equal("gas.nework", worksheet.outputs_energy_flows_g82); end
  def test_outputs_energy_flows_h82; assert_equal("Global Gas distribution network", worksheet.outputs_energy_flows_h82); end
  def test_outputs_energy_flows_i82; assert_equal("C.03", worksheet.outputs_energy_flows_i82); end
  def test_outputs_energy_flows_j82; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j82); end
  def test_outputs_energy_flows_v82; assert_in_epsilon(2.5020295266105284, worksheet.outputs_energy_flows_v82, 0.002); end
  def test_outputs_energy_flows_w82; assert_in_epsilon(2.7550381128336103, worksheet.outputs_energy_flows_w82, 0.002); end
  def test_outputs_energy_flows_x82; assert_in_epsilon(2.9597495568246774, worksheet.outputs_energy_flows_x82, 0.002); end
  def test_outputs_energy_flows_y82; assert_in_epsilon(3.192607951121354, worksheet.outputs_energy_flows_y82, 0.002); end
  def test_outputs_energy_flows_z82; assert_in_epsilon(3.4452404063326214, worksheet.outputs_energy_flows_z82, 0.002); end
  def test_outputs_energy_flows_aa82; assert_in_epsilon(3.7114387680884735, worksheet.outputs_energy_flows_aa82, 0.002); end
  def test_outputs_energy_flows_ab82; assert_in_epsilon(4.012245868833334, worksheet.outputs_energy_flows_ab82, 0.002); end
  def test_outputs_energy_flows_ac82; assert_in_epsilon(4.334880250018067, worksheet.outputs_energy_flows_ac82, 0.002); end
  def test_outputs_energy_flows_ad82; assert_in_epsilon(4.675027260943203, worksheet.outputs_energy_flows_ad82, 0.002); end
  def test_outputs_energy_flows_c84; assert_equal("n/a ", worksheet.outputs_energy_flows_c84); end
  def test_outputs_energy_flows_d84; assert_equal("Bio conversion", worksheet.outputs_energy_flows_d84); end
  def test_outputs_energy_flows_e84; assert_equal("n/a ", worksheet.outputs_energy_flows_e84); end
  def test_outputs_energy_flows_f84; assert_equal("Solid", worksheet.outputs_energy_flows_f84); end
  def test_outputs_energy_flows_g84; assert_equal("n/a", worksheet.outputs_energy_flows_g84); end
  def test_outputs_energy_flows_h84; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_h84); end
  def test_outputs_energy_flows_i84; assert_equal("C.01", worksheet.outputs_energy_flows_i84); end
  def test_outputs_energy_flows_j84; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j84); end
  def test_outputs_energy_flows_v84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v84||0), 0.002); end
  def test_outputs_energy_flows_w84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w84||0), 0.002); end
  def test_outputs_energy_flows_x84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x84||0), 0.002); end
  def test_outputs_energy_flows_y84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y84||0), 0.002); end
  def test_outputs_energy_flows_z84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z84||0), 0.002); end
  def test_outputs_energy_flows_aa84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa84||0), 0.002); end
  def test_outputs_energy_flows_ab84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab84||0), 0.002); end
  def test_outputs_energy_flows_ac84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac84||0), 0.002); end
  def test_outputs_energy_flows_ad84; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad84||0), 0.002); end
  def test_outputs_energy_flows_c86; assert_equal("n/a ", worksheet.outputs_energy_flows_c86); end
  def test_outputs_energy_flows_d86; assert_equal("Bio conversion", worksheet.outputs_energy_flows_d86); end
  def test_outputs_energy_flows_e86; assert_equal("n/a ", worksheet.outputs_energy_flows_e86); end
  def test_outputs_energy_flows_f86; assert_equal("Liquid", worksheet.outputs_energy_flows_f86); end
  def test_outputs_energy_flows_g86; assert_equal("n/a", worksheet.outputs_energy_flows_g86); end
  def test_outputs_energy_flows_h86; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_h86); end
  def test_outputs_energy_flows_i86; assert_equal("C.02", worksheet.outputs_energy_flows_i86); end
  def test_outputs_energy_flows_j86; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j86); end
  def test_outputs_energy_flows_v86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v86||0), 0.002); end
  def test_outputs_energy_flows_w86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w86||0), 0.002); end
  def test_outputs_energy_flows_x86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x86||0), 0.002); end
  def test_outputs_energy_flows_y86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y86||0), 0.002); end
  def test_outputs_energy_flows_z86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z86||0), 0.002); end
  def test_outputs_energy_flows_aa86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa86||0), 0.002); end
  def test_outputs_energy_flows_ab86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab86||0), 0.002); end
  def test_outputs_energy_flows_ac86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac86||0), 0.002); end
  def test_outputs_energy_flows_ad86; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad86||0), 0.002); end
  def test_outputs_energy_flows_c88; assert_equal("n/a ", worksheet.outputs_energy_flows_c88); end
  def test_outputs_energy_flows_d88; assert_equal("Bio conversion", worksheet.outputs_energy_flows_d88); end
  def test_outputs_energy_flows_e88; assert_equal("n/a ", worksheet.outputs_energy_flows_e88); end
  def test_outputs_energy_flows_f88; assert_equal("Gas", worksheet.outputs_energy_flows_f88); end
  def test_outputs_energy_flows_g88; assert_equal("n/a", worksheet.outputs_energy_flows_g88); end
  def test_outputs_energy_flows_h88; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_h88); end
  def test_outputs_energy_flows_i88; assert_equal("C.03", worksheet.outputs_energy_flows_i88); end
  def test_outputs_energy_flows_j88; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j88); end
  def test_outputs_energy_flows_v88; assert_in_epsilon(3.8589176470794397, worksheet.outputs_energy_flows_v88, 0.002); end
  def test_outputs_energy_flows_w88; assert_in_epsilon(4.0546166286316705, worksheet.outputs_energy_flows_w88, 0.002); end
  def test_outputs_energy_flows_x88; assert_in_epsilon(4.2906065005311715, worksheet.outputs_energy_flows_x88, 0.002); end
  def test_outputs_energy_flows_y88; assert_in_epsilon(4.524094767866408, worksheet.outputs_energy_flows_y88, 0.002); end
  def test_outputs_energy_flows_z88; assert_in_epsilon(4.814316145566888, worksheet.outputs_energy_flows_z88, 0.002); end
  def test_outputs_energy_flows_aa88; assert_in_epsilon(5.117150008936817, worksheet.outputs_energy_flows_aa88, 0.002); end
  def test_outputs_energy_flows_ab88; assert_in_epsilon(5.41444633083019, worksheet.outputs_energy_flows_ab88, 0.002); end
  def test_outputs_energy_flows_ac88; assert_in_epsilon(5.647028229779436, worksheet.outputs_energy_flows_ac88, 0.002); end
  def test_outputs_energy_flows_ad88; assert_in_epsilon(5.83472749638165, worksheet.outputs_energy_flows_ad88, 0.002); end
  def test_outputs_energy_flows_c90; assert_equal("n/a ", worksheet.outputs_energy_flows_c90); end
  def test_outputs_energy_flows_d90; assert_equal("Bio conversion", worksheet.outputs_energy_flows_d90); end
  def test_outputs_energy_flows_e90; assert_equal("n/a ", worksheet.outputs_energy_flows_e90); end
  def test_outputs_energy_flows_f90; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f90); end
  def test_outputs_energy_flows_g90; assert_equal("n/a", worksheet.outputs_energy_flows_g90); end
  def test_outputs_energy_flows_h90; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_h90); end
  def test_outputs_energy_flows_i90; assert_equal("L.01", worksheet.outputs_energy_flows_i90); end
  def test_outputs_energy_flows_j90; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j90); end
  def test_outputs_energy_flows_v90; assert_in_delta(0.6809854671316664, worksheet.outputs_energy_flows_v90, 0.002); end
  def test_outputs_energy_flows_w90; assert_in_delta(0.7155205815232364, worksheet.outputs_energy_flows_w90, 0.002); end
  def test_outputs_energy_flows_x90; assert_in_delta(0.7571658530349135, worksheet.outputs_energy_flows_x90, 0.002); end
  def test_outputs_energy_flows_y90; assert_in_delta(0.798369664917602, worksheet.outputs_energy_flows_y90, 0.002); end
  def test_outputs_energy_flows_z90; assert_in_delta(0.809884959067328, worksheet.outputs_energy_flows_z90, 0.002); end
  def test_outputs_energy_flows_aa90; assert_in_delta(0.8608289734660071, worksheet.outputs_energy_flows_aa90, 0.002); end
  def test_outputs_energy_flows_ab90; assert_in_delta(0.9108414388312482, worksheet.outputs_energy_flows_ab90, 0.002); end
  def test_outputs_energy_flows_ac90; assert_in_delta(0.9499673657572894, worksheet.outputs_energy_flows_ac90, 0.002); end
  def test_outputs_energy_flows_ad90; assert_in_delta(0.9815429433165406, worksheet.outputs_energy_flows_ad90, 0.002); end
  def test_outputs_energy_flows_c92; assert_equal("n/a", worksheet.outputs_energy_flows_c92); end
  def test_outputs_energy_flows_d92; assert_equal("Solid", worksheet.outputs_energy_flows_d92); end
  def test_outputs_energy_flows_e92; assert_equal("n/a", worksheet.outputs_energy_flows_e92); end
  def test_outputs_energy_flows_f92; assert_equal("Thermal generation", worksheet.outputs_energy_flows_f92); end
  def test_outputs_energy_flows_i92; assert_equal("C.01", worksheet.outputs_energy_flows_i92); end
  def test_outputs_energy_flows_j92; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j92); end
  def test_outputs_energy_flows_k92; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k92); end
  def test_outputs_energy_flows_l92; assert_equal("Unabated power", worksheet.outputs_energy_flows_l92); end
  def test_outputs_energy_flows_v92; assert_in_epsilon(96.18125381640462, worksheet.outputs_energy_flows_v92, 0.002); end
  def test_outputs_energy_flows_w92; assert_in_epsilon(105.19290817208679, worksheet.outputs_energy_flows_w92, 0.002); end
  def test_outputs_energy_flows_x92; assert_in_epsilon(109.59362107710159, worksheet.outputs_energy_flows_x92, 0.002); end
  def test_outputs_energy_flows_y92; assert_in_epsilon(121.1610247504234, worksheet.outputs_energy_flows_y92, 0.002); end
  def test_outputs_energy_flows_z92; assert_in_epsilon(128.72023022702191, worksheet.outputs_energy_flows_z92, 0.002); end
  def test_outputs_energy_flows_aa92; assert_in_epsilon(134.31650062287466, worksheet.outputs_energy_flows_aa92, 0.002); end
  def test_outputs_energy_flows_ab92; assert_in_epsilon(135.34142778784485, worksheet.outputs_energy_flows_ab92, 0.002); end
  def test_outputs_energy_flows_ac92; assert_in_epsilon(129.50002397038273, worksheet.outputs_energy_flows_ac92, 0.002); end
  def test_outputs_energy_flows_ad92; assert_in_epsilon(125.29572004240119, worksheet.outputs_energy_flows_ad92, 0.002); end
  def test_outputs_energy_flows_c94; assert_equal("n/a", worksheet.outputs_energy_flows_c94); end
  def test_outputs_energy_flows_d94; assert_equal("Liquid", worksheet.outputs_energy_flows_d94); end
  def test_outputs_energy_flows_e94; assert_equal("n/a", worksheet.outputs_energy_flows_e94); end
  def test_outputs_energy_flows_f94; assert_equal("Thermal generation", worksheet.outputs_energy_flows_f94); end
  def test_outputs_energy_flows_i94; assert_equal("C.02", worksheet.outputs_energy_flows_i94); end
  def test_outputs_energy_flows_j94; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j94); end
  def test_outputs_energy_flows_k94; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k94); end
  def test_outputs_energy_flows_l94; assert_equal("Unabated power", worksheet.outputs_energy_flows_l94); end
  def test_outputs_energy_flows_v94; assert_in_epsilon(11.163925645193483, worksheet.outputs_energy_flows_v94, 0.002); end
  def test_outputs_energy_flows_w94; assert_in_epsilon(12.625944002906081, worksheet.outputs_energy_flows_w94, 0.002); end
  def test_outputs_energy_flows_x94; assert_in_epsilon(25.341521735644072, worksheet.outputs_energy_flows_x94, 0.002); end
  def test_outputs_energy_flows_y94; assert_in_epsilon(28.704171610642522, worksheet.outputs_energy_flows_y94, 0.002); end
  def test_outputs_energy_flows_z94; assert_in_epsilon(35.7433119875998, worksheet.outputs_energy_flows_z94, 0.002); end
  def test_outputs_energy_flows_aa94; assert_in_epsilon(41.398815671946565, worksheet.outputs_energy_flows_aa94, 0.002); end
  def test_outputs_energy_flows_ab94; assert_in_epsilon(47.878354074814844, worksheet.outputs_energy_flows_ab94, 0.002); end
  def test_outputs_energy_flows_ac94; assert_in_epsilon(56.20187727939346, worksheet.outputs_energy_flows_ac94, 0.002); end
  def test_outputs_energy_flows_ad94; assert_in_epsilon(61.92330112554239, worksheet.outputs_energy_flows_ad94, 0.002); end
  def test_outputs_energy_flows_c96; assert_equal("n/a", worksheet.outputs_energy_flows_c96); end
  def test_outputs_energy_flows_d96; assert_equal("Gas", worksheet.outputs_energy_flows_d96); end
  def test_outputs_energy_flows_e96; assert_equal("n/a", worksheet.outputs_energy_flows_e96); end
  def test_outputs_energy_flows_f96; assert_equal("Thermal generation", worksheet.outputs_energy_flows_f96); end
  def test_outputs_energy_flows_i96; assert_equal("C.03", worksheet.outputs_energy_flows_i96); end
  def test_outputs_energy_flows_j96; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j96); end
  def test_outputs_energy_flows_k96; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k96); end
  def test_outputs_energy_flows_l96; assert_equal("Unabated power", worksheet.outputs_energy_flows_l96); end
  def test_outputs_energy_flows_v96; assert_in_epsilon(40.34420667416213, worksheet.outputs_energy_flows_v96, 0.002); end
  def test_outputs_energy_flows_w96; assert_in_epsilon(44.16979283610214, worksheet.outputs_energy_flows_w96, 0.002); end
  def test_outputs_energy_flows_x96; assert_in_epsilon(46.181781665089176, worksheet.outputs_energy_flows_x96, 0.002); end
  def test_outputs_energy_flows_y96; assert_in_epsilon(49.57392311305404, worksheet.outputs_energy_flows_y96, 0.002); end
  def test_outputs_energy_flows_z96; assert_in_epsilon(53.78479853799389, worksheet.outputs_energy_flows_z96, 0.002); end
  def test_outputs_energy_flows_aa96; assert_in_epsilon(58.70480396105018, worksheet.outputs_energy_flows_aa96, 0.002); end
  def test_outputs_energy_flows_ab96; assert_in_epsilon(64.91750273721327, worksheet.outputs_energy_flows_ab96, 0.002); end
  def test_outputs_energy_flows_ac96; assert_in_epsilon(72.14589162137932, worksheet.outputs_energy_flows_ac96, 0.002); end
  def test_outputs_energy_flows_ad96; assert_in_epsilon(80.24858439694792, worksheet.outputs_energy_flows_ad96, 0.002); end
  def test_outputs_energy_flows_c98; assert_equal("N.01", worksheet.outputs_energy_flows_c98); end
  def test_outputs_energy_flows_d98; assert_equal("Global Nuclear fission", worksheet.outputs_energy_flows_d98); end
  def test_outputs_energy_flows_e98; assert_equal("n/a", worksheet.outputs_energy_flows_e98); end
  def test_outputs_energy_flows_f98; assert_equal("Thermal generation", worksheet.outputs_energy_flows_f98); end
  def test_outputs_energy_flows_g98; assert_equal("nuclear.elec", worksheet.outputs_energy_flows_g98); end
  def test_outputs_energy_flows_h98; assert_equal("Global Nuclear power stations", worksheet.outputs_energy_flows_h98); end
  def test_outputs_energy_flows_v98; assert_in_epsilon(28.364194134679412, worksheet.outputs_energy_flows_v98, 0.002); end
  def test_outputs_energy_flows_w98; assert_in_epsilon(30.079108475420238, worksheet.outputs_energy_flows_w98, 0.002); end
  def test_outputs_energy_flows_x98; assert_in_epsilon(30.484933913827224, worksheet.outputs_energy_flows_x98, 0.002); end
  def test_outputs_energy_flows_y98; assert_in_epsilon(31.422413793579608, worksheet.outputs_energy_flows_y98, 0.002); end
  def test_outputs_energy_flows_z98; assert_in_epsilon(31.66327271788277, worksheet.outputs_energy_flows_z98, 0.002); end
  def test_outputs_energy_flows_aa98; assert_in_epsilon(32.685107495888026, worksheet.outputs_energy_flows_aa98, 0.002); end
  def test_outputs_energy_flows_ab98; assert_in_epsilon(33.09253981576231, worksheet.outputs_energy_flows_ab98, 0.002); end
  def test_outputs_energy_flows_ac98; assert_in_epsilon(33.90231671085916, worksheet.outputs_energy_flows_ac98, 0.002); end
  def test_outputs_energy_flows_ad98; assert_in_epsilon(34.751120746493534, worksheet.outputs_energy_flows_ad98, 0.002); end
  def test_outputs_energy_flows_c100; assert_equal("n/a", worksheet.outputs_energy_flows_c100); end
  def test_outputs_energy_flows_d100; assert_equal("Thermal generation", worksheet.outputs_energy_flows_d100); end
  def test_outputs_energy_flows_e100; assert_equal("H.01", worksheet.outputs_energy_flows_e100); end
  def test_outputs_energy_flows_f100; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_f100); end
  def test_outputs_energy_flows_k100; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k100); end
  def test_outputs_energy_flows_l100; assert_equal("Unabated power", worksheet.outputs_energy_flows_l100); end
  def test_outputs_energy_flows_m100; assert_equal("Nuclear", worksheet.outputs_energy_flows_m100); end
  def test_outputs_energy_flows_v100; assert_in_epsilon(9.655492400541373, worksheet.outputs_energy_flows_v100, 0.002); end
  def test_outputs_energy_flows_w100; assert_in_epsilon(10.913045339706686, worksheet.outputs_energy_flows_w100, 0.002); end
  def test_outputs_energy_flows_x100; assert_in_epsilon(12.322888993968357, worksheet.outputs_energy_flows_x100, 0.002); end
  def test_outputs_energy_flows_y100; assert_in_epsilon(13.610861660470524, worksheet.outputs_energy_flows_y100, 0.002); end
  def test_outputs_energy_flows_z100; assert_in_epsilon(14.897772185550838, worksheet.outputs_energy_flows_z100, 0.002); end
  def test_outputs_energy_flows_aa100; assert_in_epsilon(16.109464702177412, worksheet.outputs_energy_flows_aa100, 0.002); end
  def test_outputs_energy_flows_ab100; assert_in_epsilon(17.2982228538038, worksheet.outputs_energy_flows_ab100, 0.002); end
  def test_outputs_energy_flows_ac100; assert_in_epsilon(18.404263706149784, worksheet.outputs_energy_flows_ac100, 0.002); end
  def test_outputs_energy_flows_ad100; assert_in_epsilon(19.383988191958352, worksheet.outputs_energy_flows_ad100, 0.002); end
  def test_outputs_energy_flows_c102; assert_equal("n/a", worksheet.outputs_energy_flows_c102); end
  def test_outputs_energy_flows_d102; assert_equal("Thermal generation", worksheet.outputs_energy_flows_d102); end
  def test_outputs_energy_flows_f102; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f102); end
  def test_outputs_energy_flows_i102; assert_equal("E.02", worksheet.outputs_energy_flows_i102); end
  def test_outputs_energy_flows_j102; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j102); end
  def test_outputs_energy_flows_k102; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k102); end
  def test_outputs_energy_flows_l102; assert_equal("Unabated power", worksheet.outputs_energy_flows_l102); end
  def test_outputs_energy_flows_m102; assert_equal("Nuclear", worksheet.outputs_energy_flows_m102); end
  def test_outputs_energy_flows_v102; assert_in_epsilon(61.306527361361816, worksheet.outputs_energy_flows_v102, 0.002); end
  def test_outputs_energy_flows_w102; assert_in_epsilon(67.83225341049895, worksheet.outputs_energy_flows_w102, 0.002); end
  def test_outputs_energy_flows_x102; assert_in_epsilon(75.65898703607095, worksheet.outputs_energy_flows_x102, 0.002); end
  def test_outputs_energy_flows_y102; assert_in_epsilon(83.799421391127, worksheet.outputs_energy_flows_y102, 0.002); end
  def test_outputs_energy_flows_z102; assert_in_epsilon(91.67221379870963, worksheet.outputs_energy_flows_z102, 0.002); end
  def test_outputs_energy_flows_aa102; assert_in_epsilon(99.10489252993047, worksheet.outputs_energy_flows_aa102, 0.002); end
  def test_outputs_energy_flows_ab102; assert_in_epsilon(105.71033519639836, worksheet.outputs_energy_flows_ab102, 0.002); end
  def test_outputs_energy_flows_ac102; assert_in_epsilon(110.2743290163364, worksheet.outputs_energy_flows_ac102, 0.002); end
  def test_outputs_energy_flows_ad102; assert_in_epsilon(114.74249027441263, worksheet.outputs_energy_flows_ad102, 0.002); end
  def test_outputs_energy_flows_c104; assert_equal("n/a", worksheet.outputs_energy_flows_c104); end
  def test_outputs_energy_flows_d104; assert_equal("Thermal generation", worksheet.outputs_energy_flows_d104); end
  def test_outputs_energy_flows_e104; assert_equal("L.02", worksheet.outputs_energy_flows_e104); end
  def test_outputs_energy_flows_f104; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f104); end
  def test_outputs_energy_flows_k104; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k104); end
  def test_outputs_energy_flows_l104; assert_equal("Unabated power", worksheet.outputs_energy_flows_l104); end
  def test_outputs_energy_flows_m104; assert_equal("Nuclear", worksheet.outputs_energy_flows_m104); end
  def test_outputs_energy_flows_v104; assert_in_epsilon(4.06277296659905, worksheet.outputs_energy_flows_v104, 0.002); end
  def test_outputs_energy_flows_w104; assert_in_epsilon(4.496372731565855, worksheet.outputs_energy_flows_w104, 0.002); end
  def test_outputs_energy_flows_x104; assert_in_epsilon(5.018535120289151, worksheet.outputs_energy_flows_x104, 0.002); end
  def test_outputs_energy_flows_y104; assert_in_epsilon(5.559017286156045, worksheet.outputs_energy_flows_y104, 0.002); end
  def test_outputs_energy_flows_z104; assert_in_epsilon(6.084977764593415, worksheet.outputs_energy_flows_z104, 0.002); end
  def test_outputs_energy_flows_aa104; assert_in_epsilon(6.579862501133616, worksheet.outputs_energy_flows_aa104, 0.002); end
  def test_outputs_energy_flows_ab104; assert_in_epsilon(7.020689467099188, worksheet.outputs_energy_flows_ab104, 0.002); end
  def test_outputs_energy_flows_ac104; assert_in_epsilon(7.327030343523618, worksheet.outputs_energy_flows_ac104, 0.002); end
  def test_outputs_energy_flows_ad104; assert_in_epsilon(7.63113321276818, worksheet.outputs_energy_flows_ad104, 0.002); end
  def test_outputs_energy_flows_c106; assert_equal("n/a", worksheet.outputs_energy_flows_c106); end
  def test_outputs_energy_flows_d106; assert_equal("Thermal generation", worksheet.outputs_energy_flows_d106); end
  def test_outputs_energy_flows_e106; assert_equal("L.01", worksheet.outputs_energy_flows_e106); end
  def test_outputs_energy_flows_f106; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f106); end
  def test_outputs_energy_flows_k106; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_k106); end
  def test_outputs_energy_flows_l106; assert_equal("Unabated power", worksheet.outputs_energy_flows_l106); end
  def test_outputs_energy_flows_m106; assert_equal("Nuclear", worksheet.outputs_energy_flows_m106); end
  def test_outputs_energy_flows_v106; assert_in_epsilon(101.0287875419374, worksheet.outputs_energy_flows_v106, 0.002); end
  def test_outputs_energy_flows_w106; assert_in_epsilon(108.82608200474372, worksheet.outputs_energy_flows_w106, 0.002); end
  def test_outputs_energy_flows_x106; assert_in_epsilon(118.60144724133359, worksheet.outputs_energy_flows_x106, 0.002); end
  def test_outputs_energy_flows_y106; assert_in_epsilon(127.89223292994603, worksheet.outputs_energy_flows_y106, 0.002); end
  def test_outputs_energy_flows_z106; assert_in_epsilon(137.2566497216445, worksheet.outputs_energy_flows_z106, 0.002); end
  def test_outputs_energy_flows_aa106; assert_in_epsilon(145.31100801851795, worksheet.outputs_energy_flows_aa106, 0.002); end
  def test_outputs_energy_flows_ab106; assert_in_epsilon(151.20057689833396, worksheet.outputs_energy_flows_ab106, 0.002); end
  def test_outputs_energy_flows_ac106; assert_in_epsilon(155.74448651600488, worksheet.outputs_energy_flows_ac106, 0.002); end
  def test_outputs_energy_flows_ad106; assert_in_epsilon(160.46111463224582, worksheet.outputs_energy_flows_ad106, 0.002); end
  def test_outputs_energy_flows_c108; assert_equal("n/a", worksheet.outputs_energy_flows_c108); end
  def test_outputs_energy_flows_d108; assert_equal("Storage", worksheet.outputs_energy_flows_d108); end
  def test_outputs_energy_flows_e108; assert_equal("n/a", worksheet.outputs_energy_flows_e108); end
  def test_outputs_energy_flows_f108; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f108); end
  def test_outputs_energy_flows_g108; assert_equal("storage.elec", worksheet.outputs_energy_flows_g108); end
  def test_outputs_energy_flows_h108; assert_equal("Global Storage unit", worksheet.outputs_energy_flows_h108); end
  def test_outputs_energy_flows_i108; assert_equal("E.02", worksheet.outputs_energy_flows_i108); end
  def test_outputs_energy_flows_j108; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j108); end
  def test_outputs_energy_flows_v108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v108||0), 0.002); end
  def test_outputs_energy_flows_w108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w108||0), 0.002); end
  def test_outputs_energy_flows_x108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x108||0), 0.002); end
  def test_outputs_energy_flows_y108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y108||0), 0.002); end
  def test_outputs_energy_flows_z108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z108||0), 0.002); end
  def test_outputs_energy_flows_aa108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa108||0), 0.002); end
  def test_outputs_energy_flows_ab108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab108||0), 0.002); end
  def test_outputs_energy_flows_ac108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac108||0), 0.002); end
  def test_outputs_energy_flows_ad108; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad108||0), 0.002); end
  def test_outputs_energy_flows_c110; assert_equal("n/a", worksheet.outputs_energy_flows_c110); end
  def test_outputs_energy_flows_d110; assert_equal("Storage", worksheet.outputs_energy_flows_d110); end
  def test_outputs_energy_flows_e110; assert_equal("L.01", worksheet.outputs_energy_flows_e110); end
  def test_outputs_energy_flows_f110; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f110); end
  def test_outputs_energy_flows_g110; assert_equal("storage.elec", worksheet.outputs_energy_flows_g110); end
  def test_outputs_energy_flows_h110; assert_equal("Global Storage unit", worksheet.outputs_energy_flows_h110); end
  def test_outputs_energy_flows_v110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v110||0), 0.002); end
  def test_outputs_energy_flows_w110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w110||0), 0.002); end
  def test_outputs_energy_flows_x110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x110||0), 0.002); end
  def test_outputs_energy_flows_y110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y110||0), 0.002); end
  def test_outputs_energy_flows_z110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z110||0), 0.002); end
  def test_outputs_energy_flows_aa110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa110||0), 0.002); end
  def test_outputs_energy_flows_ab110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab110||0), 0.002); end
  def test_outputs_energy_flows_ac110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac110||0), 0.002); end
  def test_outputs_energy_flows_ad110; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad110||0), 0.002); end
  def test_outputs_energy_flows_c112; assert_equal("n/a", worksheet.outputs_energy_flows_c112); end
  def test_outputs_energy_flows_d112; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d112); end
  def test_outputs_energy_flows_e112; assert_equal("L.02", worksheet.outputs_energy_flows_e112); end
  def test_outputs_energy_flows_f112; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_f112); end
  def test_outputs_energy_flows_g112; assert_equal("electricity.network", worksheet.outputs_energy_flows_g112); end
  def test_outputs_energy_flows_h112; assert_equal("Global Electricity distribution network", worksheet.outputs_energy_flows_h112); end
  def test_outputs_energy_flows_v112; assert_in_epsilon(5.995029542789481, worksheet.outputs_energy_flows_v112, 0.002); end
  def test_outputs_energy_flows_w112; assert_in_epsilon(6.675206641749951, worksheet.outputs_energy_flows_w112, 0.002); end
  def test_outputs_energy_flows_x112; assert_in_epsilon(7.441487585328568, worksheet.outputs_energy_flows_x112, 0.002); end
  def test_outputs_energy_flows_y112; assert_in_epsilon(8.192093070105637, worksheet.outputs_energy_flows_y112, 0.002); end
  def test_outputs_energy_flows_z112; assert_in_epsilon(8.951892238327819, worksheet.outputs_energy_flows_z112, 0.002); end
  def test_outputs_energy_flows_aa112; assert_in_epsilon(9.701864111936363, worksheet.outputs_energy_flows_aa112, 0.002); end
  def test_outputs_energy_flows_ab112; assert_in_epsilon(10.454596685147086, worksheet.outputs_energy_flows_ab112, 0.002); end
  def test_outputs_energy_flows_ac112; assert_in_epsilon(11.192420367763596, worksheet.outputs_energy_flows_ac112, 0.002); end
  def test_outputs_energy_flows_ad112; assert_in_epsilon(11.898536269774807, worksheet.outputs_energy_flows_ad112, 0.002); end
  def test_outputs_energy_flows_c114; assert_equal("n/a", worksheet.outputs_energy_flows_c114); end
  def test_outputs_energy_flows_d114; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d114); end
  def test_outputs_energy_flows_e114; assert_equal("n/a", worksheet.outputs_energy_flows_e114); end
  def test_outputs_energy_flows_f114; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f114); end
  def test_outputs_energy_flows_i114; assert_equal("E.01", worksheet.outputs_energy_flows_i114); end
  def test_outputs_energy_flows_j114; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j114); end
  def test_outputs_energy_flows_k114; assert_equal("Global buildings", worksheet.outputs_energy_flows_k114); end
  def test_outputs_energy_flows_v114; assert_in_epsilon(4.540987962851808, worksheet.outputs_energy_flows_v114, 0.002); end
  def test_outputs_energy_flows_w114; assert_in_epsilon(5.41829771305364, worksheet.outputs_energy_flows_w114, 0.002); end
  def test_outputs_energy_flows_x114; assert_in_epsilon(6.5896239875895475, worksheet.outputs_energy_flows_x114, 0.002); end
  def test_outputs_energy_flows_y114; assert_in_epsilon(7.859110269123434, worksheet.outputs_energy_flows_y114, 0.002); end
  def test_outputs_energy_flows_z114; assert_in_epsilon(9.216307846211137, worksheet.outputs_energy_flows_z114, 0.002); end
  def test_outputs_energy_flows_aa114; assert_in_epsilon(10.610709191017868, worksheet.outputs_energy_flows_aa114, 0.002); end
  def test_outputs_energy_flows_ab114; assert_in_epsilon(12.06473569073222, worksheet.outputs_energy_flows_ab114, 0.002); end
  def test_outputs_energy_flows_ac114; assert_in_epsilon(13.519479104358325, worksheet.outputs_energy_flows_ac114, 0.002); end
  def test_outputs_energy_flows_ad114; assert_in_epsilon(15.009648852775832, worksheet.outputs_energy_flows_ad114, 0.002); end
  def test_outputs_energy_flows_c116; assert_equal("n/a", worksheet.outputs_energy_flows_c116); end
  def test_outputs_energy_flows_d116; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d116); end
  def test_outputs_energy_flows_e116; assert_equal("n/a", worksheet.outputs_energy_flows_e116); end
  def test_outputs_energy_flows_f116; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f116); end
  def test_outputs_energy_flows_i116; assert_equal("E.01", worksheet.outputs_energy_flows_i116); end
  def test_outputs_energy_flows_j116; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j116); end
  def test_outputs_energy_flows_k116; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k116); end
  def test_outputs_energy_flows_l116; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l116); end
  def test_outputs_energy_flows_v116; assert_in_epsilon(3.238074545473781, worksheet.outputs_energy_flows_v116, 0.002); end
  def test_outputs_energy_flows_w116; assert_in_epsilon(3.727386332660923, worksheet.outputs_energy_flows_w116, 0.002); end
  def test_outputs_energy_flows_x116; assert_in_epsilon(4.361383337666835, worksheet.outputs_energy_flows_x116, 0.002); end
  def test_outputs_energy_flows_y116; assert_in_epsilon(5.033855040572255, worksheet.outputs_energy_flows_y116, 0.002); end
  def test_outputs_energy_flows_z116; assert_in_epsilon(5.741289447423308, worksheet.outputs_energy_flows_z116, 0.002); end
  def test_outputs_energy_flows_aa116; assert_in_epsilon(6.456501809361965, worksheet.outputs_energy_flows_aa116, 0.002); end
  def test_outputs_energy_flows_ab116; assert_in_epsilon(7.1982353403356125, worksheet.outputs_energy_flows_ab116, 0.002); end
  def test_outputs_energy_flows_ac116; assert_in_epsilon(7.936097521528909, worksheet.outputs_energy_flows_ac116, 0.002); end
  def test_outputs_energy_flows_ad116; assert_in_epsilon(8.695260562482405, worksheet.outputs_energy_flows_ad116, 0.002); end
  def test_outputs_energy_flows_c118; assert_equal("n/a", worksheet.outputs_energy_flows_c118); end
  def test_outputs_energy_flows_d118; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d118); end
  def test_outputs_energy_flows_e118; assert_equal("n/a", worksheet.outputs_energy_flows_e118); end
  def test_outputs_energy_flows_f118; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f118); end
  def test_outputs_energy_flows_i118; assert_equal("E.01", worksheet.outputs_energy_flows_i118); end
  def test_outputs_energy_flows_j118; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j118); end
  def test_outputs_energy_flows_k118; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k118); end
  def test_outputs_energy_flows_l118; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l118); end
  def test_outputs_energy_flows_v118; assert_in_epsilon(10.0493030264467, worksheet.outputs_energy_flows_v118, 0.002); end
  def test_outputs_energy_flows_w118; assert_in_epsilon(11.126432946806268, worksheet.outputs_energy_flows_w118, 0.002); end
  def test_outputs_energy_flows_x118; assert_in_epsilon(12.400613840088159, worksheet.outputs_energy_flows_x118, 0.002); end
  def test_outputs_energy_flows_y118; assert_in_epsilon(13.630881451749243, worksheet.outputs_energy_flows_y118, 0.002); end
  def test_outputs_energy_flows_z118; assert_in_epsilon(14.80130197657269, worksheet.outputs_energy_flows_z118, 0.002); end
  def test_outputs_energy_flows_aa118; assert_in_epsilon(15.838266327687553, worksheet.outputs_energy_flows_aa118, 0.002); end
  def test_outputs_energy_flows_ab118; assert_in_epsilon(16.787319893563872, worksheet.outputs_energy_flows_ab118, 0.002); end
  def test_outputs_energy_flows_ac118; assert_in_epsilon(17.575154426601987, worksheet.outputs_energy_flows_ac118, 0.002); end
  def test_outputs_energy_flows_ad118; assert_in_epsilon(18.249189559730112, worksheet.outputs_energy_flows_ad118, 0.002); end
  def test_outputs_energy_flows_c120; assert_equal("n/a", worksheet.outputs_energy_flows_c120); end
  def test_outputs_energy_flows_d120; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d120); end
  def test_outputs_energy_flows_e120; assert_equal("n/a", worksheet.outputs_energy_flows_e120); end
  def test_outputs_energy_flows_f120; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f120); end
  def test_outputs_energy_flows_i120; assert_equal("E.01", worksheet.outputs_energy_flows_i120); end
  def test_outputs_energy_flows_j120; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j120); end
  def test_outputs_energy_flows_k120; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k120); end
  def test_outputs_energy_flows_l120; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l120); end
  def test_outputs_energy_flows_v120; assert_in_epsilon(1.8836813408215276, worksheet.outputs_energy_flows_v120, 0.002); end
  def test_outputs_energy_flows_w120; assert_in_epsilon(2.085682011200834, worksheet.outputs_energy_flows_w120, 0.002); end
  def test_outputs_energy_flows_x120; assert_in_epsilon(2.3317349826131246, worksheet.outputs_energy_flows_x120, 0.002); end
  def test_outputs_energy_flows_y120; assert_in_epsilon(2.5786277962453292, worksheet.outputs_energy_flows_y120, 0.002); end
  def test_outputs_energy_flows_z120; assert_in_epsilon(2.8246505365051395, worksheet.outputs_energy_flows_z120, 0.002); end
  def test_outputs_energy_flows_aa120; assert_in_epsilon(3.0571884405539764, worksheet.outputs_energy_flows_aa120, 0.002); end
  def test_outputs_energy_flows_ab120; assert_in_epsilon(3.286392384342073, worksheet.outputs_energy_flows_ab120, 0.002); end
  def test_outputs_energy_flows_ac120; assert_in_epsilon(3.4992759878021005, worksheet.outputs_energy_flows_ac120, 0.002); end
  def test_outputs_energy_flows_ad120; assert_in_epsilon(3.7091276635615613, worksheet.outputs_energy_flows_ad120, 0.002); end
  def test_outputs_energy_flows_c122; assert_equal("n/a", worksheet.outputs_energy_flows_c122); end
  def test_outputs_energy_flows_d122; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d122); end
  def test_outputs_energy_flows_e122; assert_equal("n/a", worksheet.outputs_energy_flows_e122); end
  def test_outputs_energy_flows_f122; assert_equal("Non domestic", worksheet.outputs_energy_flows_f122); end
  def test_outputs_energy_flows_i122; assert_equal("E.01", worksheet.outputs_energy_flows_i122); end
  def test_outputs_energy_flows_j122; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j122); end
  def test_outputs_energy_flows_k122; assert_equal("Non-residential", worksheet.outputs_energy_flows_k122); end
  def test_outputs_energy_flows_v122; assert_in_epsilon(19.212555371343317, worksheet.outputs_energy_flows_v122, 0.002); end
  def test_outputs_energy_flows_w122; assert_in_epsilon(20.944247757449798, worksheet.outputs_energy_flows_w122, 0.002); end
  def test_outputs_energy_flows_x122; assert_in_epsilon(22.976192977284867, worksheet.outputs_energy_flows_x122, 0.002); end
  def test_outputs_energy_flows_y122; assert_in_epsilon(24.942959312334082, worksheet.outputs_energy_flows_y122, 0.002); end
  def test_outputs_energy_flows_z122; assert_in_epsilon(26.825518465354975, worksheet.outputs_energy_flows_z122, 0.002); end
  def test_outputs_energy_flows_aa122; assert_in_epsilon(28.612711859767064, worksheet.outputs_energy_flows_aa122, 0.002); end
  def test_outputs_energy_flows_ab122; assert_in_epsilon(30.287455784010834, worksheet.outputs_energy_flows_ab122, 0.002); end
  def test_outputs_energy_flows_ac122; assert_in_epsilon(31.827158541743163, worksheet.outputs_energy_flows_ac122, 0.002); end
  def test_outputs_energy_flows_ad122; assert_in_epsilon(33.21162730498154, worksheet.outputs_energy_flows_ad122, 0.002); end
  def test_outputs_energy_flows_c124; assert_equal("n/a", worksheet.outputs_energy_flows_c124); end
  def test_outputs_energy_flows_d124; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d124); end
  def test_outputs_energy_flows_e124; assert_equal("n/a", worksheet.outputs_energy_flows_e124); end
  def test_outputs_energy_flows_f124; assert_equal("Steel", worksheet.outputs_energy_flows_f124); end
  def test_outputs_energy_flows_i124; assert_equal("E.01", worksheet.outputs_energy_flows_i124); end
  def test_outputs_energy_flows_j124; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j124); end
  def test_outputs_energy_flows_v124; assert_in_epsilon(2.843293418361173, worksheet.outputs_energy_flows_v124, 0.002); end
  def test_outputs_energy_flows_w124; assert_in_epsilon(3.3555622565205443, worksheet.outputs_energy_flows_w124, 0.002); end
  def test_outputs_energy_flows_x124; assert_in_epsilon(3.4873602071407164, worksheet.outputs_energy_flows_x124, 0.002); end
  def test_outputs_energy_flows_y124; assert_in_epsilon(3.6924875309908063, worksheet.outputs_energy_flows_y124, 0.002); end
  def test_outputs_energy_flows_z124; assert_in_epsilon(3.9435258781108042, worksheet.outputs_energy_flows_z124, 0.002); end
  def test_outputs_energy_flows_aa124; assert_in_epsilon(4.180888489505697, worksheet.outputs_energy_flows_aa124, 0.002); end
  def test_outputs_energy_flows_ab124; assert_in_epsilon(4.469087560631027, worksheet.outputs_energy_flows_ab124, 0.002); end
  def test_outputs_energy_flows_ac124; assert_in_epsilon(4.855701940750287, worksheet.outputs_energy_flows_ac124, 0.002); end
  def test_outputs_energy_flows_ad124; assert_in_epsilon(5.032486899729481, worksheet.outputs_energy_flows_ad124, 0.002); end
  def test_outputs_energy_flows_c126; assert_equal("n/a", worksheet.outputs_energy_flows_c126); end
  def test_outputs_energy_flows_d126; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d126); end
  def test_outputs_energy_flows_e126; assert_equal("n/a", worksheet.outputs_energy_flows_e126); end
  def test_outputs_energy_flows_f126; assert_equal("Aluminium", worksheet.outputs_energy_flows_f126); end
  def test_outputs_energy_flows_i126; assert_equal("E.01", worksheet.outputs_energy_flows_i126); end
  def test_outputs_energy_flows_j126; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j126); end
  def test_outputs_energy_flows_v126; assert_in_epsilon(2.4366032392955352, worksheet.outputs_energy_flows_v126, 0.002); end
  def test_outputs_energy_flows_w126; assert_in_epsilon(3.0894750077834514, worksheet.outputs_energy_flows_w126, 0.002); end
  def test_outputs_energy_flows_x126; assert_in_epsilon(3.6048798363637484, worksheet.outputs_energy_flows_x126, 0.002); end
  def test_outputs_energy_flows_y126; assert_in_epsilon(4.2582021932306215, worksheet.outputs_energy_flows_y126, 0.002); end
  def test_outputs_energy_flows_z126; assert_in_epsilon(4.975405230602788, worksheet.outputs_energy_flows_z126, 0.002); end
  def test_outputs_energy_flows_aa126; assert_in_epsilon(5.773138617137518, worksheet.outputs_energy_flows_aa126, 0.002); end
  def test_outputs_energy_flows_ab126; assert_in_epsilon(6.658684380591788, worksheet.outputs_energy_flows_ab126, 0.002); end
  def test_outputs_energy_flows_ac126; assert_in_epsilon(7.676462289236671, worksheet.outputs_energy_flows_ac126, 0.002); end
  def test_outputs_energy_flows_ad126; assert_in_epsilon(8.798470797816574, worksheet.outputs_energy_flows_ad126, 0.002); end
  def test_outputs_energy_flows_c128; assert_equal("n/a", worksheet.outputs_energy_flows_c128); end
  def test_outputs_energy_flows_d128; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d128); end
  def test_outputs_energy_flows_e128; assert_equal("n/a", worksheet.outputs_energy_flows_e128); end
  def test_outputs_energy_flows_f128; assert_equal("Cement", worksheet.outputs_energy_flows_f128); end
  def test_outputs_energy_flows_i128; assert_equal("E.01", worksheet.outputs_energy_flows_i128); end
  def test_outputs_energy_flows_j128; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j128); end
  def test_outputs_energy_flows_v128; assert_in_epsilon(1.288872331200076, worksheet.outputs_energy_flows_v128, 0.002); end
  def test_outputs_energy_flows_w128; assert_in_epsilon(1.465267578346, worksheet.outputs_energy_flows_w128, 0.002); end
  def test_outputs_energy_flows_x128; assert_in_epsilon(1.5423779292981599, worksheet.outputs_energy_flows_x128, 0.002); end
  def test_outputs_energy_flows_y128; assert_in_epsilon(1.624078854056031, worksheet.outputs_energy_flows_y128, 0.002); end
  def test_outputs_energy_flows_z128; assert_in_epsilon(1.7050574799221854, worksheet.outputs_energy_flows_z128, 0.002); end
  def test_outputs_energy_flows_aa128; assert_in_epsilon(1.7878264747945714, worksheet.outputs_energy_flows_aa128, 0.002); end
  def test_outputs_energy_flows_ab128; assert_in_epsilon(1.8716945454291845, worksheet.outputs_energy_flows_ab128, 0.002); end
  def test_outputs_energy_flows_ac128; assert_in_epsilon(1.9582350813520537, worksheet.outputs_energy_flows_ac128, 0.002); end
  def test_outputs_energy_flows_ad128; assert_in_epsilon(2.0432600438277744, worksheet.outputs_energy_flows_ad128, 0.002); end
  def test_outputs_energy_flows_c130; assert_equal("n/a", worksheet.outputs_energy_flows_c130); end
  def test_outputs_energy_flows_d130; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d130); end
  def test_outputs_energy_flows_e130; assert_equal("n/a", worksheet.outputs_energy_flows_e130); end
  def test_outputs_energy_flows_f130; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f130); end
  def test_outputs_energy_flows_i130; assert_equal("E.01", worksheet.outputs_energy_flows_i130); end
  def test_outputs_energy_flows_j130; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j130); end
  def test_outputs_energy_flows_v130; assert_in_epsilon(1.82013932102304, worksheet.outputs_energy_flows_v130, 0.002); end
  def test_outputs_energy_flows_w130; assert_in_epsilon(1.8347274787678354, worksheet.outputs_energy_flows_w130, 0.002); end
  def test_outputs_energy_flows_x130; assert_in_epsilon(1.9129576978001386, worksheet.outputs_energy_flows_x130, 0.002); end
  def test_outputs_energy_flows_y130; assert_in_epsilon(1.944281346884742, worksheet.outputs_energy_flows_y130, 0.002); end
  def test_outputs_energy_flows_z130; assert_in_epsilon(1.9647323417147473, worksheet.outputs_energy_flows_z130, 0.002); end
  def test_outputs_energy_flows_aa130; assert_in_epsilon(1.975410141943482, worksheet.outputs_energy_flows_aa130, 0.002); end
  def test_outputs_energy_flows_ab130; assert_in_epsilon(1.9768268539200053, worksheet.outputs_energy_flows_ab130, 0.002); end
  def test_outputs_energy_flows_ac130; assert_in_epsilon(1.9690817751557308, worksheet.outputs_energy_flows_ac130, 0.002); end
  def test_outputs_energy_flows_ad130; assert_in_epsilon(1.9524266699046473, worksheet.outputs_energy_flows_ad130, 0.002); end
  def test_outputs_energy_flows_c132; assert_equal("n/a", worksheet.outputs_energy_flows_c132); end
  def test_outputs_energy_flows_d132; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d132); end
  def test_outputs_energy_flows_e132; assert_equal("n/a", worksheet.outputs_energy_flows_e132); end
  def test_outputs_energy_flows_f132; assert_equal("Chemicals", worksheet.outputs_energy_flows_f132); end
  def test_outputs_energy_flows_i132; assert_equal("E.01", worksheet.outputs_energy_flows_i132); end
  def test_outputs_energy_flows_j132; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j132); end
  def test_outputs_energy_flows_v132; assert_in_epsilon(4.161383127368254, worksheet.outputs_energy_flows_v132, 0.002); end
  def test_outputs_energy_flows_w132; assert_in_epsilon(4.887978076127338, worksheet.outputs_energy_flows_w132, 0.002); end
  def test_outputs_energy_flows_x132; assert_in_epsilon(5.38304533259307, worksheet.outputs_energy_flows_x132, 0.002); end
  def test_outputs_energy_flows_y132; assert_in_epsilon(5.754618154322663, worksheet.outputs_energy_flows_y132, 0.002); end
  def test_outputs_energy_flows_z132; assert_in_epsilon(6.130734321547525, worksheet.outputs_energy_flows_z132, 0.002); end
  def test_outputs_energy_flows_aa132; assert_in_epsilon(6.484713680747469, worksheet.outputs_energy_flows_aa132, 0.002); end
  def test_outputs_energy_flows_ab132; assert_in_epsilon(6.866241319303267, worksheet.outputs_energy_flows_ab132, 0.002); end
  def test_outputs_energy_flows_ac132; assert_in_epsilon(7.225233155584234, worksheet.outputs_energy_flows_ac132, 0.002); end
  def test_outputs_energy_flows_ad132; assert_in_epsilon(7.6036798023339776, worksheet.outputs_energy_flows_ad132, 0.002); end
  def test_outputs_energy_flows_c134; assert_equal("n/a", worksheet.outputs_energy_flows_c134); end
  def test_outputs_energy_flows_d134; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d134); end
  def test_outputs_energy_flows_e134; assert_equal("n/a", worksheet.outputs_energy_flows_e134); end
  def test_outputs_energy_flows_f134; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f134); end
  def test_outputs_energy_flows_i134; assert_equal("E.01", worksheet.outputs_energy_flows_i134); end
  def test_outputs_energy_flows_j134; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j134); end
  def test_outputs_energy_flows_l134; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l134); end
  def test_outputs_energy_flows_m134; assert_equal("Timber", worksheet.outputs_energy_flows_m134); end
  def test_outputs_energy_flows_v134; assert_in_epsilon(14.528030114313331, worksheet.outputs_energy_flows_v134, 0.002); end
  def test_outputs_energy_flows_w134; assert_in_epsilon(15.681065436492965, worksheet.outputs_energy_flows_w134, 0.002); end
  def test_outputs_energy_flows_x134; assert_in_epsilon(17.41639403262858, worksheet.outputs_energy_flows_x134, 0.002); end
  def test_outputs_energy_flows_y134; assert_in_epsilon(18.81840642820775, worksheet.outputs_energy_flows_y134, 0.002); end
  def test_outputs_energy_flows_z134; assert_in_epsilon(20.146426887356576, worksheet.outputs_energy_flows_z134, 0.002); end
  def test_outputs_energy_flows_aa134; assert_in_epsilon(21.39692823825449, worksheet.outputs_energy_flows_aa134, 0.002); end
  def test_outputs_energy_flows_ab134; assert_in_epsilon(22.557657736750834, worksheet.outputs_energy_flows_ab134, 0.002); end
  def test_outputs_energy_flows_ac134; assert_in_epsilon(23.618245423600726, worksheet.outputs_energy_flows_ac134, 0.002); end
  def test_outputs_energy_flows_ad134; assert_in_epsilon(24.555044480292832, worksheet.outputs_energy_flows_ad134, 0.002); end
  def test_outputs_energy_flows_c136; assert_equal("n/a", worksheet.outputs_energy_flows_c136); end
  def test_outputs_energy_flows_d136; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d136); end
  def test_outputs_energy_flows_e136; assert_equal("n/a", worksheet.outputs_energy_flows_e136); end
  def test_outputs_energy_flows_f136; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f136); end
  def test_outputs_energy_flows_i136; assert_equal("E.01", worksheet.outputs_energy_flows_i136); end
  def test_outputs_energy_flows_j136; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j136); end
  def test_outputs_energy_flows_l136; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l136); end
  def test_outputs_energy_flows_m136; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m136); end
  def test_outputs_energy_flows_v136; assert_in_delta(0.19881886969284746, worksheet.outputs_energy_flows_v136, 0.002); end
  def test_outputs_energy_flows_w136; assert_in_delta(0.4053228013625778, worksheet.outputs_energy_flows_w136, 0.002); end
  def test_outputs_energy_flows_x136; assert_in_delta(0.6955490647141892, worksheet.outputs_energy_flows_x136, 0.002); end
  def test_outputs_energy_flows_y136; assert_in_epsilon(1.0248404065156516, worksheet.outputs_energy_flows_y136, 0.002); end
  def test_outputs_energy_flows_z136; assert_in_epsilon(1.3929802616569515, worksheet.outputs_energy_flows_z136, 0.002); end
  def test_outputs_energy_flows_aa136; assert_in_epsilon(1.799899541881977, worksheet.outputs_energy_flows_aa136, 0.002); end
  def test_outputs_energy_flows_ab136; assert_in_epsilon(2.2450859904068525, worksheet.outputs_energy_flows_ab136, 0.002); end
  def test_outputs_energy_flows_ac136; assert_in_epsilon(2.727598987570076, worksheet.outputs_energy_flows_ac136, 0.002); end
  def test_outputs_energy_flows_ad136; assert_in_epsilon(3.245896082829666, worksheet.outputs_energy_flows_ad136, 0.002); end
  def test_outputs_energy_flows_c138; assert_equal("n/a", worksheet.outputs_energy_flows_c138); end
  def test_outputs_energy_flows_d138; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d138); end
  def test_outputs_energy_flows_e138; assert_equal("n/a", worksheet.outputs_energy_flows_e138); end
  def test_outputs_energy_flows_f138; assert_equal("International passenger", worksheet.outputs_energy_flows_f138); end
  def test_outputs_energy_flows_i138; assert_equal("E.01", worksheet.outputs_energy_flows_i138); end
  def test_outputs_energy_flows_j138; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j138); end
  def test_outputs_energy_flows_l138; assert_equal("International", worksheet.outputs_energy_flows_l138); end
  def test_outputs_energy_flows_v138; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v138||0), 0.002); end
  def test_outputs_energy_flows_w138; assert_in_delta(0.003204206031493881, worksheet.outputs_energy_flows_w138, 0.002); end
  def test_outputs_energy_flows_x138; assert_in_delta(0.008049037591251957, worksheet.outputs_energy_flows_x138, 0.002); end
  def test_outputs_energy_flows_y138; assert_in_delta(0.013975092924225968, worksheet.outputs_energy_flows_y138, 0.002); end
  def test_outputs_energy_flows_z138; assert_in_delta(0.0211844002213404, worksheet.outputs_energy_flows_z138, 0.002); end
  def test_outputs_energy_flows_aa138; assert_in_delta(0.029940676239874786, worksheet.outputs_energy_flows_aa138, 0.002); end
  def test_outputs_energy_flows_ab138; assert_in_delta(0.040572061582101936, worksheet.outputs_energy_flows_ab138, 0.002); end
  def test_outputs_energy_flows_ac138; assert_in_delta(0.05347621094209685, worksheet.outputs_energy_flows_ac138, 0.002); end
  def test_outputs_energy_flows_ad138; assert_in_delta(0.06913937321711161, worksheet.outputs_energy_flows_ad138, 0.002); end
  def test_outputs_energy_flows_c140; assert_equal("n/a", worksheet.outputs_energy_flows_c140); end
  def test_outputs_energy_flows_d140; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d140); end
  def test_outputs_energy_flows_e140; assert_equal("n/a", worksheet.outputs_energy_flows_e140); end
  def test_outputs_energy_flows_f140; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f140); end
  def test_outputs_energy_flows_i140; assert_equal("E.01", worksheet.outputs_energy_flows_i140); end
  def test_outputs_energy_flows_j140; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j140); end
  def test_outputs_energy_flows_l140; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l140); end
  def test_outputs_energy_flows_v140; assert_in_delta(0.13826458288412322, worksheet.outputs_energy_flows_v140, 0.002); end
  def test_outputs_energy_flows_w140; assert_in_delta(0.19004219594257146, worksheet.outputs_energy_flows_w140, 0.002); end
  def test_outputs_energy_flows_x140; assert_in_delta(0.25849129898071566, worksheet.outputs_energy_flows_x140, 0.002); end
  def test_outputs_energy_flows_y140; assert_in_delta(0.33243917204966966, worksheet.outputs_energy_flows_y140, 0.002); end
  def test_outputs_energy_flows_z140; assert_in_delta(0.4120354032782465, worksheet.outputs_energy_flows_z140, 0.002); end
  def test_outputs_energy_flows_aa140; assert_in_delta(0.4974273914021824, worksheet.outputs_energy_flows_aa140, 0.002); end
  def test_outputs_energy_flows_ab140; assert_in_delta(0.5887598490159364, worksheet.outputs_energy_flows_ab140, 0.002); end
  def test_outputs_energy_flows_ac140; assert_in_delta(0.6861742701978992, worksheet.outputs_energy_flows_ac140, 0.002); end
  def test_outputs_energy_flows_ad140; assert_in_delta(0.7898083605620982, worksheet.outputs_energy_flows_ad140, 0.002); end
  def test_outputs_energy_flows_c142; assert_equal("n/a", worksheet.outputs_energy_flows_c142); end
  def test_outputs_energy_flows_d142; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d142); end
  def test_outputs_energy_flows_e142; assert_equal("n/a", worksheet.outputs_energy_flows_e142); end
  def test_outputs_energy_flows_f142; assert_equal("International freight", worksheet.outputs_energy_flows_f142); end
  def test_outputs_energy_flows_i142; assert_equal("E.01", worksheet.outputs_energy_flows_i142); end
  def test_outputs_energy_flows_j142; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j142); end
  def test_outputs_energy_flows_l142; assert_equal("International freight", worksheet.outputs_energy_flows_l142); end
  def test_outputs_energy_flows_v142; assert_in_delta(0.27579627474268875, worksheet.outputs_energy_flows_v142, 0.002); end
  def test_outputs_energy_flows_w142; assert_in_delta(0.39469535021934604, worksheet.outputs_energy_flows_w142, 0.002); end
  def test_outputs_energy_flows_x142; assert_in_delta(0.571257221358368, worksheet.outputs_energy_flows_x142, 0.002); end
  def test_outputs_energy_flows_y142; assert_in_delta(0.7848792988637536, worksheet.outputs_energy_flows_y142, 0.002); end
  def test_outputs_energy_flows_z142; assert_in_epsilon(1.038834965832911, worksheet.outputs_energy_flows_z142, 0.002); end
  def test_outputs_energy_flows_aa142; assert_in_epsilon(1.3366169537367862, worksheet.outputs_energy_flows_aa142, 0.002); end
  def test_outputs_energy_flows_ab142; assert_in_epsilon(1.6819502345189528, worksheet.outputs_energy_flows_ab142, 0.002); end
  def test_outputs_energy_flows_ac142; assert_in_epsilon(2.078805617470999, worksheet.outputs_energy_flows_ac142, 0.002); end
  def test_outputs_energy_flows_ad142; assert_in_epsilon(2.5314140877723013, worksheet.outputs_energy_flows_ad142, 0.002); end
  def test_outputs_energy_flows_c144; assert_equal("n/a", worksheet.outputs_energy_flows_c144); end
  def test_outputs_energy_flows_d144; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d144); end
  def test_outputs_energy_flows_e144; assert_equal("n/a", worksheet.outputs_energy_flows_e144); end
  def test_outputs_energy_flows_f144; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f144); end
  def test_outputs_energy_flows_i144; assert_equal("E.01", worksheet.outputs_energy_flows_i144); end
  def test_outputs_energy_flows_j144; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j144); end
  def test_outputs_energy_flows_v144; assert_in_delta(5.69986361910142e-09, worksheet.outputs_energy_flows_v144, 0.002); end
  def test_outputs_energy_flows_w144; assert_in_delta(5.6285999958060365e-09, worksheet.outputs_energy_flows_w144, 0.002); end
  def test_outputs_energy_flows_x144; assert_in_delta(5.371401808320746e-09, worksheet.outputs_energy_flows_x144, 0.002); end
  def test_outputs_energy_flows_y144; assert_in_delta(4.945014256203269e-09, worksheet.outputs_energy_flows_y144, 0.002); end
  def test_outputs_energy_flows_z144; assert_in_delta(9.551932260344856e-09, worksheet.outputs_energy_flows_z144, 0.002); end
  def test_outputs_energy_flows_aa144; assert_in_delta(1.2083123754154353e-08, worksheet.outputs_energy_flows_aa144, 0.002); end
  def test_outputs_energy_flows_ab144; assert_in_delta(1.0292619729141713e-08, worksheet.outputs_energy_flows_ab144, 0.002); end
  def test_outputs_energy_flows_ac144; assert_in_delta(6.400327023554584e-09, worksheet.outputs_energy_flows_ac144, 0.002); end
  def test_outputs_energy_flows_ad144; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad144||0), 0.002); end
  def test_outputs_energy_flows_c146; assert_equal("n/a", worksheet.outputs_energy_flows_c146); end
  def test_outputs_energy_flows_d146; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d146); end
  def test_outputs_energy_flows_e146; assert_equal("G.01", worksheet.outputs_energy_flows_e146); end
  def test_outputs_energy_flows_f146; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f146); end
  def test_outputs_energy_flows_g146; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g146); end
  def test_outputs_energy_flows_h146; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h146); end
  def test_outputs_energy_flows_i146; assert_equal("E.01", worksheet.outputs_energy_flows_i146); end
  def test_outputs_energy_flows_j146; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j146); end
  def test_outputs_energy_flows_v146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v146||0), 0.002); end
  def test_outputs_energy_flows_w146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w146||0), 0.002); end
  def test_outputs_energy_flows_x146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x146||0), 0.002); end
  def test_outputs_energy_flows_y146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y146||0), 0.002); end
  def test_outputs_energy_flows_z146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z146||0), 0.002); end
  def test_outputs_energy_flows_aa146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa146||0), 0.002); end
  def test_outputs_energy_flows_ab146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab146||0), 0.002); end
  def test_outputs_energy_flows_ac146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac146||0), 0.002); end
  def test_outputs_energy_flows_ad146; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad146||0), 0.002); end
  def test_outputs_energy_flows_c148; assert_equal("n/a", worksheet.outputs_energy_flows_c148); end
  def test_outputs_energy_flows_d148; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d148); end
  def test_outputs_energy_flows_e148; assert_equal("n/a", worksheet.outputs_energy_flows_e148); end
  def test_outputs_energy_flows_f148; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f148); end
  def test_outputs_energy_flows_g148; assert_equal("n/a", worksheet.outputs_energy_flows_g148); end
  def test_outputs_energy_flows_h148; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h148); end
  def test_outputs_energy_flows_i148; assert_equal("E.01", worksheet.outputs_energy_flows_i148); end
  def test_outputs_energy_flows_j148; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j148); end
  def test_outputs_energy_flows_v148; assert_in_epsilon(3.955000000000001, worksheet.outputs_energy_flows_v148, 0.002); end
  def test_outputs_energy_flows_w148; assert_in_epsilon(3.96815663999883, worksheet.outputs_energy_flows_w148, 0.002); end
  def test_outputs_energy_flows_x148; assert_in_epsilon(4.057949174439614, worksheet.outputs_energy_flows_x148, 0.002); end
  def test_outputs_energy_flows_y148; assert_in_epsilon(4.140009297237616, worksheet.outputs_energy_flows_y148, 0.002); end
  def test_outputs_energy_flows_z148; assert_in_epsilon(4.237681810207501, worksheet.outputs_energy_flows_z148, 0.002); end
  def test_outputs_energy_flows_aa148; assert_in_epsilon(4.367832515706085, worksheet.outputs_energy_flows_aa148, 0.002); end
  def test_outputs_energy_flows_ab148; assert_in_epsilon(4.48613154577205, worksheet.outputs_energy_flows_ab148, 0.002); end
  def test_outputs_energy_flows_ac148; assert_in_epsilon(4.545980875591577, worksheet.outputs_energy_flows_ac148, 0.002); end
  def test_outputs_energy_flows_ad148; assert_in_epsilon(4.567760912480799, worksheet.outputs_energy_flows_ad148, 0.002); end
  def test_outputs_energy_flows_d150; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d150); end
  def test_outputs_energy_flows_f150; assert_equal("Global oversupply", worksheet.outputs_energy_flows_f150); end
  def test_outputs_energy_flows_i150; assert_equal("G.E.02", worksheet.outputs_energy_flows_i150); end
  def test_outputs_energy_flows_j150; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j150); end
  def test_outputs_energy_flows_p150; assert_equal("Net balance", worksheet.outputs_energy_flows_p150); end
  def test_outputs_energy_flows_v150; assert_in_delta(1.4210854715202004e-14, worksheet.outputs_energy_flows_v150, 0.002); end
  def test_outputs_energy_flows_w150; assert_in_delta(-1.4210854715202004e-14, worksheet.outputs_energy_flows_w150, 0.002); end
  def test_outputs_energy_flows_x150; assert_in_delta(-1.4210854715202004e-14, worksheet.outputs_energy_flows_x150, 0.002); end
  def test_outputs_energy_flows_y150; assert_in_delta(1.4210854715202004e-14, worksheet.outputs_energy_flows_y150, 0.002); end
  def test_outputs_energy_flows_z150; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z150||0), 0.002); end
  def test_outputs_energy_flows_aa150; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa150||0), 0.002); end
  def test_outputs_energy_flows_ab150; assert_in_delta(-2.842170943040401e-14, worksheet.outputs_energy_flows_ab150, 0.002); end
  def test_outputs_energy_flows_ac150; assert_in_delta(-2.842170943040401e-14, worksheet.outputs_energy_flows_ac150, 0.002); end
  def test_outputs_energy_flows_ad150; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad150||0), 0.002); end
  def test_outputs_energy_flows_c152; assert_equal("n/a", worksheet.outputs_energy_flows_c152); end
  def test_outputs_energy_flows_d152; assert_equal("Solid", worksheet.outputs_energy_flows_d152); end
  def test_outputs_energy_flows_e152; assert_equal("n/a", worksheet.outputs_energy_flows_e152); end
  def test_outputs_energy_flows_f152; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f152); end
  def test_outputs_energy_flows_i152; assert_equal("C.01", worksheet.outputs_energy_flows_i152); end
  def test_outputs_energy_flows_j152; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j152); end
  def test_outputs_energy_flows_k152; assert_equal("Global buildings", worksheet.outputs_energy_flows_k152); end
  def test_outputs_energy_flows_v152; assert_in_epsilon(10.504678181068044, worksheet.outputs_energy_flows_v152, 0.002); end
  def test_outputs_energy_flows_w152; assert_in_epsilon(10.815921412083568, worksheet.outputs_energy_flows_w152, 0.002); end
  def test_outputs_energy_flows_x152; assert_in_epsilon(11.076784476084658, worksheet.outputs_energy_flows_x152, 0.002); end
  def test_outputs_energy_flows_y152; assert_in_epsilon(11.254739053875852, worksheet.outputs_energy_flows_y152, 0.002); end
  def test_outputs_energy_flows_z152; assert_in_epsilon(11.353830853134554, worksheet.outputs_energy_flows_z152, 0.002); end
  def test_outputs_energy_flows_aa152; assert_in_epsilon(11.373164037377489, worksheet.outputs_energy_flows_aa152, 0.002); end
  def test_outputs_energy_flows_ab152; assert_in_epsilon(11.320518967659696, worksheet.outputs_energy_flows_ab152, 0.002); end
  def test_outputs_energy_flows_ac152; assert_in_epsilon(11.203656266479165, worksheet.outputs_energy_flows_ac152, 0.002); end
  def test_outputs_energy_flows_ad152; assert_in_epsilon(10.989830698565294, worksheet.outputs_energy_flows_ad152, 0.002); end
  def test_outputs_energy_flows_c154; assert_equal("n/a", worksheet.outputs_energy_flows_c154); end
  def test_outputs_energy_flows_d154; assert_equal("Solid", worksheet.outputs_energy_flows_d154); end
  def test_outputs_energy_flows_e154; assert_equal("n/a", worksheet.outputs_energy_flows_e154); end
  def test_outputs_energy_flows_f154; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f154); end
  def test_outputs_energy_flows_i154; assert_equal("C.01", worksheet.outputs_energy_flows_i154); end
  def test_outputs_energy_flows_j154; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j154); end
  def test_outputs_energy_flows_k154; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k154); end
  def test_outputs_energy_flows_l154; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l154); end
  def test_outputs_energy_flows_v154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v154||0), 0.002); end
  def test_outputs_energy_flows_w154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w154||0), 0.002); end
  def test_outputs_energy_flows_x154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x154||0), 0.002); end
  def test_outputs_energy_flows_y154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y154||0), 0.002); end
  def test_outputs_energy_flows_z154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z154||0), 0.002); end
  def test_outputs_energy_flows_aa154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa154||0), 0.002); end
  def test_outputs_energy_flows_ab154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab154||0), 0.002); end
  def test_outputs_energy_flows_ac154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac154||0), 0.002); end
  def test_outputs_energy_flows_ad154; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad154||0), 0.002); end
  def test_outputs_energy_flows_c156; assert_equal("n/a", worksheet.outputs_energy_flows_c156); end
  def test_outputs_energy_flows_d156; assert_equal("Solid", worksheet.outputs_energy_flows_d156); end
  def test_outputs_energy_flows_e156; assert_equal("n/a", worksheet.outputs_energy_flows_e156); end
  def test_outputs_energy_flows_f156; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f156); end
  def test_outputs_energy_flows_i156; assert_equal("C.01", worksheet.outputs_energy_flows_i156); end
  def test_outputs_energy_flows_j156; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j156); end
  def test_outputs_energy_flows_k156; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k156); end
  def test_outputs_energy_flows_l156; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l156); end
  def test_outputs_energy_flows_v156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v156||0), 0.002); end
  def test_outputs_energy_flows_w156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w156||0), 0.002); end
  def test_outputs_energy_flows_x156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x156||0), 0.002); end
  def test_outputs_energy_flows_y156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y156||0), 0.002); end
  def test_outputs_energy_flows_z156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z156||0), 0.002); end
  def test_outputs_energy_flows_aa156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa156||0), 0.002); end
  def test_outputs_energy_flows_ab156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab156||0), 0.002); end
  def test_outputs_energy_flows_ac156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac156||0), 0.002); end
  def test_outputs_energy_flows_ad156; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad156||0), 0.002); end
  def test_outputs_energy_flows_c158; assert_equal("n/a", worksheet.outputs_energy_flows_c158); end
  def test_outputs_energy_flows_d158; assert_equal("Solid", worksheet.outputs_energy_flows_d158); end
  def test_outputs_energy_flows_e158; assert_equal("n/a", worksheet.outputs_energy_flows_e158); end
  def test_outputs_energy_flows_f158; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f158); end
  def test_outputs_energy_flows_i158; assert_equal("C.01", worksheet.outputs_energy_flows_i158); end
  def test_outputs_energy_flows_j158; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j158); end
  def test_outputs_energy_flows_k158; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k158); end
  def test_outputs_energy_flows_l158; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l158); end
  def test_outputs_energy_flows_v158; assert_in_epsilon(2.2057048241859825, worksheet.outputs_energy_flows_v158, 0.002); end
  def test_outputs_energy_flows_w158; assert_in_epsilon(2.3428256275914316, worksheet.outputs_energy_flows_w158, 0.002); end
  def test_outputs_energy_flows_x158; assert_in_epsilon(2.4930192117957395, worksheet.outputs_energy_flows_x158, 0.002); end
  def test_outputs_energy_flows_y158; assert_in_epsilon(2.630496556202314, worksheet.outputs_energy_flows_y158, 0.002); end
  def test_outputs_energy_flows_z158; assert_in_epsilon(2.754718022544719, worksheet.outputs_energy_flows_z158, 0.002); end
  def test_outputs_energy_flows_aa158; assert_in_epsilon(2.854684415893595, worksheet.outputs_energy_flows_aa158, 0.002); end
  def test_outputs_energy_flows_ab158; assert_in_epsilon(2.941500963405658, worksheet.outputs_energy_flows_ab158, 0.002); end
  def test_outputs_energy_flows_ac158; assert_in_epsilon(3.004724701060449, worksheet.outputs_energy_flows_ac158, 0.002); end
  def test_outputs_energy_flows_ad158; assert_in_epsilon(3.055115230926547, worksheet.outputs_energy_flows_ad158, 0.002); end
  def test_outputs_energy_flows_c160; assert_equal("n/a", worksheet.outputs_energy_flows_c160); end
  def test_outputs_energy_flows_d160; assert_equal("Solid", worksheet.outputs_energy_flows_d160); end
  def test_outputs_energy_flows_e160; assert_equal("n/a", worksheet.outputs_energy_flows_e160); end
  def test_outputs_energy_flows_f160; assert_equal("Non domestic", worksheet.outputs_energy_flows_f160); end
  def test_outputs_energy_flows_i160; assert_equal("C.01", worksheet.outputs_energy_flows_i160); end
  def test_outputs_energy_flows_j160; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j160); end
  def test_outputs_energy_flows_k160; assert_equal("Non-residential", worksheet.outputs_energy_flows_k160); end
  def test_outputs_energy_flows_v160; assert_in_delta(0.9214993884672424, worksheet.outputs_energy_flows_v160, 0.002); end
  def test_outputs_energy_flows_w160; assert_in_delta(0.9440437384325339, worksheet.outputs_energy_flows_w160, 0.002); end
  def test_outputs_energy_flows_x160; assert_in_delta(0.9542928086569464, worksheet.outputs_energy_flows_x160, 0.002); end
  def test_outputs_energy_flows_y160; assert_in_delta(0.9497334810170105, worksheet.outputs_energy_flows_y160, 0.002); end
  def test_outputs_energy_flows_z160; assert_in_delta(0.9309625448356276, worksheet.outputs_energy_flows_z160, 0.002); end
  def test_outputs_energy_flows_aa160; assert_in_delta(0.8990786901297709, worksheet.outputs_energy_flows_aa160, 0.002); end
  def test_outputs_energy_flows_ab160; assert_in_delta(0.8551526562596129, worksheet.outputs_energy_flows_ab160, 0.002); end
  def test_outputs_energy_flows_ac160; assert_in_delta(0.8003208892747155, worksheet.outputs_energy_flows_ac160, 0.002); end
  def test_outputs_energy_flows_ad160; assert_in_delta(0.7360278135457434, worksheet.outputs_energy_flows_ad160, 0.002); end
  def test_outputs_energy_flows_c162; assert_equal("n/a", worksheet.outputs_energy_flows_c162); end
  def test_outputs_energy_flows_d162; assert_equal("Solid", worksheet.outputs_energy_flows_d162); end
  def test_outputs_energy_flows_e162; assert_equal("n/a", worksheet.outputs_energy_flows_e162); end
  def test_outputs_energy_flows_f162; assert_equal("Steel", worksheet.outputs_energy_flows_f162); end
  def test_outputs_energy_flows_i162; assert_equal("C.01", worksheet.outputs_energy_flows_i162); end
  def test_outputs_energy_flows_j162; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j162); end
  def test_outputs_energy_flows_v162; assert_in_delta(0.5489501886, worksheet.outputs_energy_flows_v162, 0.002); end
  def test_outputs_energy_flows_w162; assert_in_epsilon(1.0471043392972563, worksheet.outputs_energy_flows_w162, 0.002); end
  def test_outputs_energy_flows_x162; assert_in_epsilon(1.1701128429207703, worksheet.outputs_energy_flows_x162, 0.002); end
  def test_outputs_energy_flows_y162; assert_in_epsilon(1.5226288989616128, worksheet.outputs_energy_flows_y162, 0.002); end
  def test_outputs_energy_flows_z162; assert_in_epsilon(1.9227463572929335, worksheet.outputs_energy_flows_z162, 0.002); end
  def test_outputs_energy_flows_aa162; assert_in_epsilon(2.3462887169236533, worksheet.outputs_energy_flows_aa162, 0.002); end
  def test_outputs_energy_flows_ab162; assert_in_epsilon(2.8300812292750614, worksheet.outputs_energy_flows_ab162, 0.002); end
  def test_outputs_energy_flows_ac162; assert_in_epsilon(3.4173833606399073, worksheet.outputs_energy_flows_ac162, 0.002); end
  def test_outputs_energy_flows_ad162; assert_in_epsilon(3.8891703397072366, worksheet.outputs_energy_flows_ad162, 0.002); end
  def test_outputs_energy_flows_c164; assert_equal("n/a", worksheet.outputs_energy_flows_c164); end
  def test_outputs_energy_flows_d164; assert_equal("Solid", worksheet.outputs_energy_flows_d164); end
  def test_outputs_energy_flows_e164; assert_equal("n/a", worksheet.outputs_energy_flows_e164); end
  def test_outputs_energy_flows_f164; assert_equal("Aluminium", worksheet.outputs_energy_flows_f164); end
  def test_outputs_energy_flows_i164; assert_equal("C.01", worksheet.outputs_energy_flows_i164); end
  def test_outputs_energy_flows_j164; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j164); end
  def test_outputs_energy_flows_v164; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v164||0), 0.002); end
  def test_outputs_energy_flows_w164; assert_in_delta(0.00031753285619320844, worksheet.outputs_energy_flows_w164, 0.002); end
  def test_outputs_energy_flows_x164; assert_in_delta(0.0004174124488461289, worksheet.outputs_energy_flows_x164, 0.002); end
  def test_outputs_energy_flows_y164; assert_in_delta(0.0007677692711028877, worksheet.outputs_energy_flows_y164, 0.002); end
  def test_outputs_energy_flows_z164; assert_in_delta(0.0012185183887663, worksheet.outputs_energy_flows_z164, 0.002); end
  def test_outputs_energy_flows_aa164; assert_in_delta(0.001787275067532537, worksheet.outputs_energy_flows_aa164, 0.002); end
  def test_outputs_energy_flows_ab164; assert_in_delta(0.002492461147957612, worksheet.outputs_energy_flows_ab164, 0.002); end
  def test_outputs_energy_flows_ac164; assert_in_delta(0.0033706976196852135, worksheet.outputs_energy_flows_ac164, 0.002); end
  def test_outputs_energy_flows_ad164; assert_in_delta(0.004433632495512262, worksheet.outputs_energy_flows_ad164, 0.002); end
  def test_outputs_energy_flows_c166; assert_equal("n/a", worksheet.outputs_energy_flows_c166); end
  def test_outputs_energy_flows_d166; assert_equal("Solid", worksheet.outputs_energy_flows_d166); end
  def test_outputs_energy_flows_e166; assert_equal("n/a", worksheet.outputs_energy_flows_e166); end
  def test_outputs_energy_flows_f166; assert_equal("Cement", worksheet.outputs_energy_flows_f166); end
  def test_outputs_energy_flows_i166; assert_equal("C.01", worksheet.outputs_energy_flows_i166); end
  def test_outputs_energy_flows_j166; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j166); end
  def test_outputs_energy_flows_v166; assert_in_delta(0.4925092998042991, worksheet.outputs_energy_flows_v166, 0.002); end
  def test_outputs_energy_flows_w166; assert_in_delta(0.6118268332927891, worksheet.outputs_energy_flows_w166, 0.002); end
  def test_outputs_energy_flows_x166; assert_in_delta(0.6631500882257209, worksheet.outputs_energy_flows_x166, 0.002); end
  def test_outputs_energy_flows_y166; assert_in_delta(0.7414319983917711, worksheet.outputs_energy_flows_y166, 0.002); end
  def test_outputs_energy_flows_z166; assert_in_delta(0.8237068147721766, worksheet.outputs_energy_flows_z166, 0.002); end
  def test_outputs_energy_flows_aa166; assert_in_delta(0.9111975854070988, worksheet.outputs_energy_flows_aa166, 0.002); end
  def test_outputs_energy_flows_ab166; assert_in_epsilon(1.0036763304578373, worksheet.outputs_energy_flows_ab166, 0.002); end
  def test_outputs_energy_flows_ac166; assert_in_epsilon(1.1021161833618378, worksheet.outputs_energy_flows_ac166, 0.002); end
  def test_outputs_energy_flows_ad166; assert_in_epsilon(1.2042618220679493, worksheet.outputs_energy_flows_ad166, 0.002); end
  def test_outputs_energy_flows_c168; assert_equal("n/a", worksheet.outputs_energy_flows_c168); end
  def test_outputs_energy_flows_d168; assert_equal("Solid", worksheet.outputs_energy_flows_d168); end
  def test_outputs_energy_flows_e168; assert_equal("n/a", worksheet.outputs_energy_flows_e168); end
  def test_outputs_energy_flows_f168; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f168); end
  def test_outputs_energy_flows_i168; assert_equal("C.01", worksheet.outputs_energy_flows_i168); end
  def test_outputs_energy_flows_j168; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j168); end
  def test_outputs_energy_flows_v168; assert_in_epsilon(1.7854467564492018, worksheet.outputs_energy_flows_v168, 0.002); end
  def test_outputs_energy_flows_w168; assert_in_epsilon(1.8063095084926704, worksheet.outputs_energy_flows_w168, 0.002); end
  def test_outputs_energy_flows_x168; assert_in_epsilon(1.9027372809669514, worksheet.outputs_energy_flows_x168, 0.002); end
  def test_outputs_energy_flows_y168; assert_in_epsilon(1.9489640244623705, worksheet.outputs_energy_flows_y168, 0.002); end
  def test_outputs_energy_flows_z168; assert_in_epsilon(1.9848803356179343, worksheet.outputs_energy_flows_z168, 0.002); end
  def test_outputs_energy_flows_aa168; assert_in_epsilon(2.0113591145427914, worksheet.outputs_energy_flows_aa168, 0.002); end
  def test_outputs_energy_flows_ab168; assert_in_epsilon(2.0286997313235857, worksheet.outputs_energy_flows_ab168, 0.002); end
  def test_outputs_energy_flows_ac168; assert_in_epsilon(2.03678557132408, worksheet.outputs_energy_flows_ac168, 0.002); end
  def test_outputs_energy_flows_ad168; assert_in_epsilon(2.035656734025988, worksheet.outputs_energy_flows_ad168, 0.002); end
  def test_outputs_energy_flows_c170; assert_equal("n/a", worksheet.outputs_energy_flows_c170); end
  def test_outputs_energy_flows_d170; assert_equal("Solid", worksheet.outputs_energy_flows_d170); end
  def test_outputs_energy_flows_e170; assert_equal("n/a", worksheet.outputs_energy_flows_e170); end
  def test_outputs_energy_flows_f170; assert_equal("Chemicals", worksheet.outputs_energy_flows_f170); end
  def test_outputs_energy_flows_i170; assert_equal("C.01", worksheet.outputs_energy_flows_i170); end
  def test_outputs_energy_flows_j170; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j170); end
  def test_outputs_energy_flows_v170; assert_in_delta(0.16218874378437845, worksheet.outputs_energy_flows_v170, 0.002); end
  def test_outputs_energy_flows_w170; assert_in_delta(0.20768928583106408, worksheet.outputs_energy_flows_w170, 0.002); end
  def test_outputs_energy_flows_x170; assert_in_delta(0.20980268663216764, worksheet.outputs_energy_flows_x170, 0.002); end
  def test_outputs_energy_flows_y170; assert_in_delta(0.2242846334599889, worksheet.outputs_energy_flows_y170, 0.002); end
  def test_outputs_energy_flows_z170; assert_in_delta(0.23894365590807923, worksheet.outputs_energy_flows_z170, 0.002); end
  def test_outputs_energy_flows_aa170; assert_in_delta(0.25273990245328654, worksheet.outputs_energy_flows_aa170, 0.002); end
  def test_outputs_energy_flows_ab170; assert_in_delta(0.267609835483346, worksheet.outputs_energy_flows_ab170, 0.002); end
  def test_outputs_energy_flows_ac170; assert_in_delta(0.2816014419211986, worksheet.outputs_energy_flows_ac170, 0.002); end
  def test_outputs_energy_flows_ad170; assert_in_delta(0.29635129415712314, worksheet.outputs_energy_flows_ad170, 0.002); end
  def test_outputs_energy_flows_c172; assert_equal("n/a", worksheet.outputs_energy_flows_c172); end
  def test_outputs_energy_flows_d172; assert_equal("Solid", worksheet.outputs_energy_flows_d172); end
  def test_outputs_energy_flows_e172; assert_equal("n/a", worksheet.outputs_energy_flows_e172); end
  def test_outputs_energy_flows_f172; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f172); end
  def test_outputs_energy_flows_i172; assert_equal("C.01", worksheet.outputs_energy_flows_i172); end
  def test_outputs_energy_flows_j172; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j172); end
  def test_outputs_energy_flows_l172; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l172); end
  def test_outputs_energy_flows_m172; assert_equal("Timber", worksheet.outputs_energy_flows_m172); end
  def test_outputs_energy_flows_v172; assert_in_epsilon(5.432131184106508, worksheet.outputs_energy_flows_v172, 0.002); end
  def test_outputs_energy_flows_w172; assert_in_epsilon(5.984855643828855, worksheet.outputs_energy_flows_w172, 0.002); end
  def test_outputs_energy_flows_x172; assert_in_epsilon(6.58938508365712, worksheet.outputs_energy_flows_x172, 0.002); end
  def test_outputs_energy_flows_y172; assert_in_epsilon(7.135566379325949, worksheet.outputs_energy_flows_y172, 0.002); end
  def test_outputs_energy_flows_z172; assert_in_epsilon(7.663581133711624, worksheet.outputs_energy_flows_z172, 0.002); end
  def test_outputs_energy_flows_aa172; assert_in_epsilon(8.17338327471026, worksheet.outputs_energy_flows_aa172, 0.002); end
  def test_outputs_energy_flows_ab172; assert_in_epsilon(8.659650504424961, worksheet.outputs_energy_flows_ab172, 0.002); end
  def test_outputs_energy_flows_ac172; assert_in_epsilon(9.119806296142006, worksheet.outputs_energy_flows_ac172, 0.002); end
  def test_outputs_energy_flows_ad172; assert_in_epsilon(9.539726979028753, worksheet.outputs_energy_flows_ad172, 0.002); end
  def test_outputs_energy_flows_c174; assert_equal("n/a", worksheet.outputs_energy_flows_c174); end
  def test_outputs_energy_flows_d174; assert_equal("Solid", worksheet.outputs_energy_flows_d174); end
  def test_outputs_energy_flows_e174; assert_equal("n/a", worksheet.outputs_energy_flows_e174); end
  def test_outputs_energy_flows_f174; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f174); end
  def test_outputs_energy_flows_i174; assert_equal("C.01", worksheet.outputs_energy_flows_i174); end
  def test_outputs_energy_flows_j174; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j174); end
  def test_outputs_energy_flows_l174; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l174); end
  def test_outputs_energy_flows_m174; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m174); end
  def test_outputs_energy_flows_v174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v174||0), 0.002); end
  def test_outputs_energy_flows_w174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w174||0), 0.002); end
  def test_outputs_energy_flows_x174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x174||0), 0.002); end
  def test_outputs_energy_flows_y174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y174||0), 0.002); end
  def test_outputs_energy_flows_z174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z174||0), 0.002); end
  def test_outputs_energy_flows_aa174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa174||0), 0.002); end
  def test_outputs_energy_flows_ab174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab174||0), 0.002); end
  def test_outputs_energy_flows_ac174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac174||0), 0.002); end
  def test_outputs_energy_flows_ad174; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad174||0), 0.002); end
  def test_outputs_energy_flows_c176; assert_equal("n/a", worksheet.outputs_energy_flows_c176); end
  def test_outputs_energy_flows_d176; assert_equal("Solid", worksheet.outputs_energy_flows_d176); end
  def test_outputs_energy_flows_e176; assert_equal("n/a", worksheet.outputs_energy_flows_e176); end
  def test_outputs_energy_flows_f176; assert_equal("International passenger", worksheet.outputs_energy_flows_f176); end
  def test_outputs_energy_flows_i176; assert_equal("C.01", worksheet.outputs_energy_flows_i176); end
  def test_outputs_energy_flows_j176; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j176); end
  def test_outputs_energy_flows_l176; assert_equal("International", worksheet.outputs_energy_flows_l176); end
  def test_outputs_energy_flows_v176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v176||0), 0.002); end
  def test_outputs_energy_flows_w176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w176||0), 0.002); end
  def test_outputs_energy_flows_x176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x176||0), 0.002); end
  def test_outputs_energy_flows_y176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y176||0), 0.002); end
  def test_outputs_energy_flows_z176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z176||0), 0.002); end
  def test_outputs_energy_flows_aa176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa176||0), 0.002); end
  def test_outputs_energy_flows_ab176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab176||0), 0.002); end
  def test_outputs_energy_flows_ac176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac176||0), 0.002); end
  def test_outputs_energy_flows_ad176; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad176||0), 0.002); end
  def test_outputs_energy_flows_c178; assert_equal("n/a", worksheet.outputs_energy_flows_c178); end
  def test_outputs_energy_flows_d178; assert_equal("Solid", worksheet.outputs_energy_flows_d178); end
  def test_outputs_energy_flows_e178; assert_equal("n/a", worksheet.outputs_energy_flows_e178); end
  def test_outputs_energy_flows_f178; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f178); end
  def test_outputs_energy_flows_i178; assert_equal("C.01", worksheet.outputs_energy_flows_i178); end
  def test_outputs_energy_flows_j178; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j178); end
  def test_outputs_energy_flows_l178; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l178); end
  def test_outputs_energy_flows_v178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v178||0), 0.002); end
  def test_outputs_energy_flows_w178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w178||0), 0.002); end
  def test_outputs_energy_flows_x178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x178||0), 0.002); end
  def test_outputs_energy_flows_y178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y178||0), 0.002); end
  def test_outputs_energy_flows_z178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z178||0), 0.002); end
  def test_outputs_energy_flows_aa178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa178||0), 0.002); end
  def test_outputs_energy_flows_ab178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab178||0), 0.002); end
  def test_outputs_energy_flows_ac178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac178||0), 0.002); end
  def test_outputs_energy_flows_ad178; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad178||0), 0.002); end
  def test_outputs_energy_flows_c180; assert_equal("n/a", worksheet.outputs_energy_flows_c180); end
  def test_outputs_energy_flows_d180; assert_equal("Solid", worksheet.outputs_energy_flows_d180); end
  def test_outputs_energy_flows_e180; assert_equal("n/a", worksheet.outputs_energy_flows_e180); end
  def test_outputs_energy_flows_f180; assert_equal("International freight", worksheet.outputs_energy_flows_f180); end
  def test_outputs_energy_flows_i180; assert_equal("C.01", worksheet.outputs_energy_flows_i180); end
  def test_outputs_energy_flows_j180; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j180); end
  def test_outputs_energy_flows_l180; assert_equal("International freight", worksheet.outputs_energy_flows_l180); end
  def test_outputs_energy_flows_v180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v180||0), 0.002); end
  def test_outputs_energy_flows_w180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w180||0), 0.002); end
  def test_outputs_energy_flows_x180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x180||0), 0.002); end
  def test_outputs_energy_flows_y180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y180||0), 0.002); end
  def test_outputs_energy_flows_z180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z180||0), 0.002); end
  def test_outputs_energy_flows_aa180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa180||0), 0.002); end
  def test_outputs_energy_flows_ab180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab180||0), 0.002); end
  def test_outputs_energy_flows_ac180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac180||0), 0.002); end
  def test_outputs_energy_flows_ad180; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad180||0), 0.002); end
  def test_outputs_energy_flows_c182; assert_equal("n/a", worksheet.outputs_energy_flows_c182); end
  def test_outputs_energy_flows_d182; assert_equal("Solid", worksheet.outputs_energy_flows_d182); end
  def test_outputs_energy_flows_e182; assert_equal("n/a", worksheet.outputs_energy_flows_e182); end
  def test_outputs_energy_flows_f182; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f182); end
  def test_outputs_energy_flows_i182; assert_equal("C.01", worksheet.outputs_energy_flows_i182); end
  def test_outputs_energy_flows_j182; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j182); end
  def test_outputs_energy_flows_v182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v182||0), 0.002); end
  def test_outputs_energy_flows_w182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w182||0), 0.002); end
  def test_outputs_energy_flows_x182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x182||0), 0.002); end
  def test_outputs_energy_flows_y182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y182||0), 0.002); end
  def test_outputs_energy_flows_z182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z182||0), 0.002); end
  def test_outputs_energy_flows_aa182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa182||0), 0.002); end
  def test_outputs_energy_flows_ab182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab182||0), 0.002); end
  def test_outputs_energy_flows_ac182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac182||0), 0.002); end
  def test_outputs_energy_flows_ad182; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad182||0), 0.002); end
  def test_outputs_energy_flows_c184; assert_equal("n/a", worksheet.outputs_energy_flows_c184); end
  def test_outputs_energy_flows_d184; assert_equal("Solid", worksheet.outputs_energy_flows_d184); end
  def test_outputs_energy_flows_e184; assert_equal("G.01", worksheet.outputs_energy_flows_e184); end
  def test_outputs_energy_flows_f184; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f184); end
  def test_outputs_energy_flows_g184; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g184); end
  def test_outputs_energy_flows_h184; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h184); end
  def test_outputs_energy_flows_i184; assert_equal("C.01", worksheet.outputs_energy_flows_i184); end
  def test_outputs_energy_flows_j184; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j184); end
  def test_outputs_energy_flows_v184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v184||0), 0.002); end
  def test_outputs_energy_flows_w184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w184||0), 0.002); end
  def test_outputs_energy_flows_x184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x184||0), 0.002); end
  def test_outputs_energy_flows_y184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y184||0), 0.002); end
  def test_outputs_energy_flows_z184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z184||0), 0.002); end
  def test_outputs_energy_flows_aa184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa184||0), 0.002); end
  def test_outputs_energy_flows_ab184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab184||0), 0.002); end
  def test_outputs_energy_flows_ac184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac184||0), 0.002); end
  def test_outputs_energy_flows_ad184; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad184||0), 0.002); end
  def test_outputs_energy_flows_c186; assert_equal("n/a", worksheet.outputs_energy_flows_c186); end
  def test_outputs_energy_flows_d186; assert_equal("Solid", worksheet.outputs_energy_flows_d186); end
  def test_outputs_energy_flows_e186; assert_equal("n/a", worksheet.outputs_energy_flows_e186); end
  def test_outputs_energy_flows_f186; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f186); end
  def test_outputs_energy_flows_g186; assert_equal("n/a", worksheet.outputs_energy_flows_g186); end
  def test_outputs_energy_flows_h186; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h186); end
  def test_outputs_energy_flows_i186; assert_equal("C.01", worksheet.outputs_energy_flows_i186); end
  def test_outputs_energy_flows_j186; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j186); end
  def test_outputs_energy_flows_v186; assert_in_epsilon(28.813646988237757, worksheet.outputs_energy_flows_v186, 0.002); end
  def test_outputs_energy_flows_w186; assert_in_epsilon(29.208476463475627, worksheet.outputs_energy_flows_w186, 0.002); end
  def test_outputs_energy_flows_x186; assert_in_epsilon(29.859573092260966, worksheet.outputs_energy_flows_x186, 0.002); end
  def test_outputs_energy_flows_y186; assert_in_epsilon(30.531203239848836, worksheet.outputs_energy_flows_y186, 0.002); end
  def test_outputs_energy_flows_z186; assert_in_epsilon(31.103706796241582, worksheet.outputs_energy_flows_z186, 0.002); end
  def test_outputs_energy_flows_aa186; assert_in_epsilon(31.471625244224086, worksheet.outputs_energy_flows_aa186, 0.002); end
  def test_outputs_energy_flows_ab186; assert_in_epsilon(31.942596472117337, worksheet.outputs_energy_flows_ab186, 0.002); end
  def test_outputs_energy_flows_ac186; assert_in_epsilon(32.80765668150286, worksheet.outputs_energy_flows_ac186, 0.002); end
  def test_outputs_energy_flows_ad186; assert_in_epsilon(33.919950679034315, worksheet.outputs_energy_flows_ad186, 0.002); end
  def test_outputs_energy_flows_c188; assert_equal("n/a", worksheet.outputs_energy_flows_c188); end
  def test_outputs_energy_flows_d188; assert_equal("Liquid", worksheet.outputs_energy_flows_d188); end
  def test_outputs_energy_flows_e188; assert_equal("n/a", worksheet.outputs_energy_flows_e188); end
  def test_outputs_energy_flows_f188; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f188); end
  def test_outputs_energy_flows_i188; assert_equal("C.02", worksheet.outputs_energy_flows_i188); end
  def test_outputs_energy_flows_j188; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j188); end
  def test_outputs_energy_flows_k188; assert_equal("Global buildings", worksheet.outputs_energy_flows_k188); end
  def test_outputs_energy_flows_v188; assert_in_epsilon(5.64830009486501, worksheet.outputs_energy_flows_v188, 0.002); end
  def test_outputs_energy_flows_w188; assert_in_epsilon(5.908203599192904, worksheet.outputs_energy_flows_w188, 0.002); end
  def test_outputs_energy_flows_x188; assert_in_epsilon(6.138249344675389, worksheet.outputs_energy_flows_x188, 0.002); end
  def test_outputs_energy_flows_y188; assert_in_epsilon(6.288824287081091, worksheet.outputs_energy_flows_y188, 0.002); end
  def test_outputs_energy_flows_z188; assert_in_epsilon(6.357733541371875, worksheet.outputs_energy_flows_z188, 0.002); end
  def test_outputs_energy_flows_aa188; assert_in_epsilon(6.321111575862503, worksheet.outputs_energy_flows_aa188, 0.002); end
  def test_outputs_energy_flows_ab188; assert_in_epsilon(6.207070504407185, worksheet.outputs_energy_flows_ab188, 0.002); end
  def test_outputs_energy_flows_ac188; assert_in_epsilon(5.996795515369962, worksheet.outputs_energy_flows_ac188, 0.002); end
  def test_outputs_energy_flows_ad188; assert_in_epsilon(5.719732011683305, worksheet.outputs_energy_flows_ad188, 0.002); end
  def test_outputs_energy_flows_c190; assert_equal("n/a", worksheet.outputs_energy_flows_c190); end
  def test_outputs_energy_flows_d190; assert_equal("Liquid", worksheet.outputs_energy_flows_d190); end
  def test_outputs_energy_flows_e190; assert_equal("n/a", worksheet.outputs_energy_flows_e190); end
  def test_outputs_energy_flows_f190; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f190); end
  def test_outputs_energy_flows_i190; assert_equal("C.02", worksheet.outputs_energy_flows_i190); end
  def test_outputs_energy_flows_j190; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j190); end
  def test_outputs_energy_flows_k190; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k190); end
  def test_outputs_energy_flows_l190; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l190); end
  def test_outputs_energy_flows_v190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v190||0), 0.002); end
  def test_outputs_energy_flows_w190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w190||0), 0.002); end
  def test_outputs_energy_flows_x190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x190||0), 0.002); end
  def test_outputs_energy_flows_y190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y190||0), 0.002); end
  def test_outputs_energy_flows_z190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z190||0), 0.002); end
  def test_outputs_energy_flows_aa190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa190||0), 0.002); end
  def test_outputs_energy_flows_ab190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab190||0), 0.002); end
  def test_outputs_energy_flows_ac190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac190||0), 0.002); end
  def test_outputs_energy_flows_ad190; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad190||0), 0.002); end
  def test_outputs_energy_flows_c192; assert_equal("n/a", worksheet.outputs_energy_flows_c192); end
  def test_outputs_energy_flows_d192; assert_equal("Liquid", worksheet.outputs_energy_flows_d192); end
  def test_outputs_energy_flows_e192; assert_equal("n/a", worksheet.outputs_energy_flows_e192); end
  def test_outputs_energy_flows_f192; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f192); end
  def test_outputs_energy_flows_i192; assert_equal("C.02", worksheet.outputs_energy_flows_i192); end
  def test_outputs_energy_flows_j192; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j192); end
  def test_outputs_energy_flows_k192; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k192); end
  def test_outputs_energy_flows_l192; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l192); end
  def test_outputs_energy_flows_v192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v192||0), 0.002); end
  def test_outputs_energy_flows_w192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w192||0), 0.002); end
  def test_outputs_energy_flows_x192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x192||0), 0.002); end
  def test_outputs_energy_flows_y192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y192||0), 0.002); end
  def test_outputs_energy_flows_z192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z192||0), 0.002); end
  def test_outputs_energy_flows_aa192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa192||0), 0.002); end
  def test_outputs_energy_flows_ab192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab192||0), 0.002); end
  def test_outputs_energy_flows_ac192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac192||0), 0.002); end
  def test_outputs_energy_flows_ad192; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad192||0), 0.002); end
  def test_outputs_energy_flows_c194; assert_equal("n/a", worksheet.outputs_energy_flows_c194); end
  def test_outputs_energy_flows_d194; assert_equal("Liquid", worksheet.outputs_energy_flows_d194); end
  def test_outputs_energy_flows_e194; assert_equal("n/a", worksheet.outputs_energy_flows_e194); end
  def test_outputs_energy_flows_f194; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f194); end
  def test_outputs_energy_flows_i194; assert_equal("C.02", worksheet.outputs_energy_flows_i194); end
  def test_outputs_energy_flows_j194; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j194); end
  def test_outputs_energy_flows_k194; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k194); end
  def test_outputs_energy_flows_l194; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l194); end
  def test_outputs_energy_flows_v194; assert_in_epsilon(2.12837206627918, worksheet.outputs_energy_flows_v194, 0.002); end
  def test_outputs_energy_flows_w194; assert_in_epsilon(2.2606020271341083, worksheet.outputs_energy_flows_w194, 0.002); end
  def test_outputs_energy_flows_x194; assert_in_epsilon(2.4014064221419287, worksheet.outputs_energy_flows_x194, 0.002); end
  def test_outputs_energy_flows_y194; assert_in_epsilon(2.525222403329616, worksheet.outputs_energy_flows_y194, 0.002); end
  def test_outputs_energy_flows_z194; assert_in_epsilon(2.631452126091338, worksheet.outputs_energy_flows_z194, 0.002); end
  def test_outputs_energy_flows_aa194; assert_in_epsilon(2.7097899232703995, worksheet.outputs_energy_flows_aa194, 0.002); end
  def test_outputs_energy_flows_ab194; assert_in_epsilon(2.7711391064019284, worksheet.outputs_energy_flows_ab194, 0.002); end
  def test_outputs_energy_flows_ac194; assert_in_epsilon(2.8059923830233697, worksheet.outputs_energy_flows_ac194, 0.002); end
  def test_outputs_energy_flows_ad194; assert_in_epsilon(2.825226011131801, worksheet.outputs_energy_flows_ad194, 0.002); end
  def test_outputs_energy_flows_c196; assert_equal("n/a", worksheet.outputs_energy_flows_c196); end
  def test_outputs_energy_flows_d196; assert_equal("Liquid", worksheet.outputs_energy_flows_d196); end
  def test_outputs_energy_flows_e196; assert_equal("n/a", worksheet.outputs_energy_flows_e196); end
  def test_outputs_energy_flows_f196; assert_equal("Non domestic", worksheet.outputs_energy_flows_f196); end
  def test_outputs_energy_flows_i196; assert_equal("C.02", worksheet.outputs_energy_flows_i196); end
  def test_outputs_energy_flows_j196; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j196); end
  def test_outputs_energy_flows_k196; assert_equal("Non-residential", worksheet.outputs_energy_flows_k196); end
  def test_outputs_energy_flows_v196; assert_in_epsilon(2.4071169002607897, worksheet.outputs_energy_flows_v196, 0.002); end
  def test_outputs_energy_flows_w196; assert_in_epsilon(2.4837112189438297, worksheet.outputs_energy_flows_w196, 0.002); end
  def test_outputs_energy_flows_x196; assert_in_epsilon(2.5356500348645614, worksheet.outputs_energy_flows_x196, 0.002); end
  def test_outputs_energy_flows_y196; assert_in_epsilon(2.5518056338801642, worksheet.outputs_energy_flows_y196, 0.002); end
  def test_outputs_energy_flows_z196; assert_in_epsilon(2.533145814455508, worksheet.outputs_energy_flows_z196, 0.002); end
  def test_outputs_energy_flows_aa196; assert_in_epsilon(2.4819049223209464, worksheet.outputs_energy_flows_aa196, 0.002); end
  def test_outputs_energy_flows_ab196; assert_in_epsilon(2.400164069199375, worksheet.outputs_energy_flows_ab196, 0.002); end
  def test_outputs_energy_flows_ac196; assert_in_epsilon(2.2900793106213833, worksheet.outputs_energy_flows_ac196, 0.002); end
  def test_outputs_energy_flows_ad196; assert_in_epsilon(2.154558025256227, worksheet.outputs_energy_flows_ad196, 0.002); end
  def test_outputs_energy_flows_c198; assert_equal("n/a", worksheet.outputs_energy_flows_c198); end
  def test_outputs_energy_flows_d198; assert_equal("Liquid", worksheet.outputs_energy_flows_d198); end
  def test_outputs_energy_flows_e198; assert_equal("n/a", worksheet.outputs_energy_flows_e198); end
  def test_outputs_energy_flows_f198; assert_equal("Steel", worksheet.outputs_energy_flows_f198); end
  def test_outputs_energy_flows_i198; assert_equal("C.02", worksheet.outputs_energy_flows_i198); end
  def test_outputs_energy_flows_j198; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j198); end
  def test_outputs_energy_flows_v198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v198||0), 0.002); end
  def test_outputs_energy_flows_w198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w198||0), 0.002); end
  def test_outputs_energy_flows_x198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x198||0), 0.002); end
  def test_outputs_energy_flows_y198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y198||0), 0.002); end
  def test_outputs_energy_flows_z198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z198||0), 0.002); end
  def test_outputs_energy_flows_aa198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa198||0), 0.002); end
  def test_outputs_energy_flows_ab198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab198||0), 0.002); end
  def test_outputs_energy_flows_ac198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac198||0), 0.002); end
  def test_outputs_energy_flows_ad198; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad198||0), 0.002); end
  def test_outputs_energy_flows_c200; assert_equal("n/a", worksheet.outputs_energy_flows_c200); end
  def test_outputs_energy_flows_d200; assert_equal("Liquid", worksheet.outputs_energy_flows_d200); end
  def test_outputs_energy_flows_e200; assert_equal("n/a", worksheet.outputs_energy_flows_e200); end
  def test_outputs_energy_flows_f200; assert_equal("Aluminium", worksheet.outputs_energy_flows_f200); end
  def test_outputs_energy_flows_i200; assert_equal("C.02", worksheet.outputs_energy_flows_i200); end
  def test_outputs_energy_flows_j200; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j200); end
  def test_outputs_energy_flows_v200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v200||0), 0.002); end
  def test_outputs_energy_flows_w200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w200||0), 0.002); end
  def test_outputs_energy_flows_x200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x200||0), 0.002); end
  def test_outputs_energy_flows_y200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y200||0), 0.002); end
  def test_outputs_energy_flows_z200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z200||0), 0.002); end
  def test_outputs_energy_flows_aa200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa200||0), 0.002); end
  def test_outputs_energy_flows_ab200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab200||0), 0.002); end
  def test_outputs_energy_flows_ac200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac200||0), 0.002); end
  def test_outputs_energy_flows_ad200; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad200||0), 0.002); end
  def test_outputs_energy_flows_c202; assert_equal("n/a", worksheet.outputs_energy_flows_c202); end
  def test_outputs_energy_flows_d202; assert_equal("Liquid", worksheet.outputs_energy_flows_d202); end
  def test_outputs_energy_flows_e202; assert_equal("n/a", worksheet.outputs_energy_flows_e202); end
  def test_outputs_energy_flows_f202; assert_equal("Cement", worksheet.outputs_energy_flows_f202); end
  def test_outputs_energy_flows_i202; assert_equal("C.02", worksheet.outputs_energy_flows_i202); end
  def test_outputs_energy_flows_j202; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j202); end
  def test_outputs_energy_flows_v202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v202||0), 0.002); end
  def test_outputs_energy_flows_w202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w202||0), 0.002); end
  def test_outputs_energy_flows_x202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x202||0), 0.002); end
  def test_outputs_energy_flows_y202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y202||0), 0.002); end
  def test_outputs_energy_flows_z202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z202||0), 0.002); end
  def test_outputs_energy_flows_aa202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa202||0), 0.002); end
  def test_outputs_energy_flows_ab202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab202||0), 0.002); end
  def test_outputs_energy_flows_ac202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac202||0), 0.002); end
  def test_outputs_energy_flows_ad202; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad202||0), 0.002); end
  def test_outputs_energy_flows_c204; assert_equal("n/a", worksheet.outputs_energy_flows_c204); end
  def test_outputs_energy_flows_d204; assert_equal("Liquid", worksheet.outputs_energy_flows_d204); end
  def test_outputs_energy_flows_e204; assert_equal("n/a", worksheet.outputs_energy_flows_e204); end
  def test_outputs_energy_flows_f204; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f204); end
  def test_outputs_energy_flows_i204; assert_equal("C.02", worksheet.outputs_energy_flows_i204); end
  def test_outputs_energy_flows_j204; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j204); end
  def test_outputs_energy_flows_v204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v204||0), 0.002); end
  def test_outputs_energy_flows_w204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w204||0), 0.002); end
  def test_outputs_energy_flows_x204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x204||0), 0.002); end
  def test_outputs_energy_flows_y204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y204||0), 0.002); end
  def test_outputs_energy_flows_z204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z204||0), 0.002); end
  def test_outputs_energy_flows_aa204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa204||0), 0.002); end
  def test_outputs_energy_flows_ab204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab204||0), 0.002); end
  def test_outputs_energy_flows_ac204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac204||0), 0.002); end
  def test_outputs_energy_flows_ad204; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad204||0), 0.002); end
  def test_outputs_energy_flows_c206; assert_equal("n/a", worksheet.outputs_energy_flows_c206); end
  def test_outputs_energy_flows_d206; assert_equal("Liquid", worksheet.outputs_energy_flows_d206); end
  def test_outputs_energy_flows_e206; assert_equal("n/a", worksheet.outputs_energy_flows_e206); end
  def test_outputs_energy_flows_f206; assert_equal("Chemicals", worksheet.outputs_energy_flows_f206); end
  def test_outputs_energy_flows_i206; assert_equal("C.02", worksheet.outputs_energy_flows_i206); end
  def test_outputs_energy_flows_j206; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j206); end
  def test_outputs_energy_flows_v206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v206||0), 0.002); end
  def test_outputs_energy_flows_w206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w206||0), 0.002); end
  def test_outputs_energy_flows_x206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x206||0), 0.002); end
  def test_outputs_energy_flows_y206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y206||0), 0.002); end
  def test_outputs_energy_flows_z206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z206||0), 0.002); end
  def test_outputs_energy_flows_aa206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa206||0), 0.002); end
  def test_outputs_energy_flows_ab206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab206||0), 0.002); end
  def test_outputs_energy_flows_ac206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac206||0), 0.002); end
  def test_outputs_energy_flows_ad206; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad206||0), 0.002); end
  def test_outputs_energy_flows_c208; assert_equal("n/a", worksheet.outputs_energy_flows_c208); end
  def test_outputs_energy_flows_d208; assert_equal("Liquid", worksheet.outputs_energy_flows_d208); end
  def test_outputs_energy_flows_e208; assert_equal("n/a", worksheet.outputs_energy_flows_e208); end
  def test_outputs_energy_flows_f208; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f208); end
  def test_outputs_energy_flows_i208; assert_equal("C.02", worksheet.outputs_energy_flows_i208); end
  def test_outputs_energy_flows_j208; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j208); end
  def test_outputs_energy_flows_l208; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l208); end
  def test_outputs_energy_flows_m208; assert_equal("Timber", worksheet.outputs_energy_flows_m208); end
  def test_outputs_energy_flows_v208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v208||0), 0.002); end
  def test_outputs_energy_flows_w208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w208||0), 0.002); end
  def test_outputs_energy_flows_x208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x208||0), 0.002); end
  def test_outputs_energy_flows_y208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y208||0), 0.002); end
  def test_outputs_energy_flows_z208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z208||0), 0.002); end
  def test_outputs_energy_flows_aa208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa208||0), 0.002); end
  def test_outputs_energy_flows_ab208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab208||0), 0.002); end
  def test_outputs_energy_flows_ac208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac208||0), 0.002); end
  def test_outputs_energy_flows_ad208; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad208||0), 0.002); end
  def test_outputs_energy_flows_c210; assert_equal("n/a", worksheet.outputs_energy_flows_c210); end
  def test_outputs_energy_flows_d210; assert_equal("Liquid", worksheet.outputs_energy_flows_d210); end
  def test_outputs_energy_flows_e210; assert_equal("n/a", worksheet.outputs_energy_flows_e210); end
  def test_outputs_energy_flows_f210; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f210); end
  def test_outputs_energy_flows_i210; assert_equal("C.02", worksheet.outputs_energy_flows_i210); end
  def test_outputs_energy_flows_j210; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j210); end
  def test_outputs_energy_flows_l210; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l210); end
  def test_outputs_energy_flows_m210; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m210); end
  def test_outputs_energy_flows_v210; assert_in_epsilon(46.55726062707137, worksheet.outputs_energy_flows_v210, 0.002); end
  def test_outputs_energy_flows_w210; assert_in_epsilon(49.39487910716418, worksheet.outputs_energy_flows_w210, 0.002); end
  def test_outputs_energy_flows_x210; assert_in_epsilon(52.12998758081146, worksheet.outputs_energy_flows_x210, 0.002); end
  def test_outputs_energy_flows_y210; assert_in_epsilon(54.690916617538704, worksheet.outputs_energy_flows_y210, 0.002); end
  def test_outputs_energy_flows_z210; assert_in_epsilon(57.074345661009524, worksheet.outputs_energy_flows_z210, 0.002); end
  def test_outputs_energy_flows_aa210; assert_in_epsilon(59.29023024021979, worksheet.outputs_energy_flows_aa210, 0.002); end
  def test_outputs_energy_flows_ab210; assert_in_epsilon(61.33798163193133, worksheet.outputs_energy_flows_ab210, 0.002); end
  def test_outputs_energy_flows_ac210; assert_in_epsilon(63.21524248924241, worksheet.outputs_energy_flows_ac210, 0.002); end
  def test_outputs_energy_flows_ad210; assert_in_epsilon(64.90163670328945, worksheet.outputs_energy_flows_ad210, 0.002); end
  def test_outputs_energy_flows_c212; assert_equal("n/a", worksheet.outputs_energy_flows_c212); end
  def test_outputs_energy_flows_d212; assert_equal("Liquid", worksheet.outputs_energy_flows_d212); end
  def test_outputs_energy_flows_e212; assert_equal("n/a", worksheet.outputs_energy_flows_e212); end
  def test_outputs_energy_flows_f212; assert_equal("International passenger", worksheet.outputs_energy_flows_f212); end
  def test_outputs_energy_flows_i212; assert_equal("C.02", worksheet.outputs_energy_flows_i212); end
  def test_outputs_energy_flows_j212; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j212); end
  def test_outputs_energy_flows_l212; assert_equal("International", worksheet.outputs_energy_flows_l212); end
  def test_outputs_energy_flows_v212; assert_in_epsilon(11.200783672219371, worksheet.outputs_energy_flows_v212, 0.002); end
  def test_outputs_energy_flows_w212; assert_in_epsilon(12.146667367690121, worksheet.outputs_energy_flows_w212, 0.002); end
  def test_outputs_energy_flows_x212; assert_in_epsilon(13.041576297999917, worksheet.outputs_energy_flows_x212, 0.002); end
  def test_outputs_energy_flows_y212; assert_in_epsilon(13.994520262161275, worksheet.outputs_energy_flows_y212, 0.002); end
  def test_outputs_energy_flows_z212; assert_in_epsilon(15.02373716356804, worksheet.outputs_energy_flows_z212, 0.002); end
  def test_outputs_energy_flows_aa212; assert_in_epsilon(16.152770488215708, worksheet.outputs_energy_flows_aa212, 0.002); end
  def test_outputs_energy_flows_ab212; assert_in_epsilon(17.403011123212302, worksheet.outputs_energy_flows_ab212, 0.002); end
  def test_outputs_energy_flows_ac212; assert_in_epsilon(18.793876351906423, worksheet.outputs_energy_flows_ac212, 0.002); end
  def test_outputs_energy_flows_ad212; assert_in_epsilon(20.346989927192123, worksheet.outputs_energy_flows_ad212, 0.002); end
  def test_outputs_energy_flows_c214; assert_equal("n/a", worksheet.outputs_energy_flows_c214); end
  def test_outputs_energy_flows_d214; assert_equal("Liquid", worksheet.outputs_energy_flows_d214); end
  def test_outputs_energy_flows_e214; assert_equal("n/a", worksheet.outputs_energy_flows_e214); end
  def test_outputs_energy_flows_f214; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f214); end
  def test_outputs_energy_flows_i214; assert_equal("C.02", worksheet.outputs_energy_flows_i214); end
  def test_outputs_energy_flows_j214; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j214); end
  def test_outputs_energy_flows_l214; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l214); end
  def test_outputs_energy_flows_v214; assert_in_epsilon(13.538303988230114, worksheet.outputs_energy_flows_v214, 0.002); end
  def test_outputs_energy_flows_w214; assert_in_epsilon(14.487451845731506, worksheet.outputs_energy_flows_w214, 0.002); end
  def test_outputs_energy_flows_x214; assert_in_epsilon(15.622052807587586, worksheet.outputs_energy_flows_x214, 0.002); end
  def test_outputs_energy_flows_y214; assert_in_epsilon(16.78157525476413, worksheet.outputs_energy_flows_y214, 0.002); end
  def test_outputs_energy_flows_z214; assert_in_epsilon(17.96629351239568, worksheet.outputs_energy_flows_z214, 0.002); end
  def test_outputs_energy_flows_aa214; assert_in_epsilon(19.176480798492722, worksheet.outputs_energy_flows_aa214, 0.002); end
  def test_outputs_energy_flows_ab214; assert_in_epsilon(20.412409212037648, worksheet.outputs_energy_flows_ab214, 0.002); end
  def test_outputs_energy_flows_ac214; assert_in_epsilon(21.67434973243271, worksheet.outputs_energy_flows_ac214, 0.002); end
  def test_outputs_energy_flows_ad214; assert_in_epsilon(22.96257223134874, worksheet.outputs_energy_flows_ad214, 0.002); end
  def test_outputs_energy_flows_c216; assert_equal("n/a", worksheet.outputs_energy_flows_c216); end
  def test_outputs_energy_flows_d216; assert_equal("Liquid", worksheet.outputs_energy_flows_d216); end
  def test_outputs_energy_flows_e216; assert_equal("n/a", worksheet.outputs_energy_flows_e216); end
  def test_outputs_energy_flows_f216; assert_equal("International freight", worksheet.outputs_energy_flows_f216); end
  def test_outputs_energy_flows_i216; assert_equal("C.02", worksheet.outputs_energy_flows_i216); end
  def test_outputs_energy_flows_j216; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j216); end
  def test_outputs_energy_flows_l216; assert_equal("International freight", worksheet.outputs_energy_flows_l216); end
  def test_outputs_energy_flows_v216; assert_in_epsilon(27.084375466003895, worksheet.outputs_energy_flows_v216, 0.002); end
  def test_outputs_energy_flows_w216; assert_in_epsilon(29.933123698225636, worksheet.outputs_energy_flows_w216, 0.002); end
  def test_outputs_energy_flows_x216; assert_in_epsilon(33.34882050413014, worksheet.outputs_energy_flows_x216, 0.002); end
  def test_outputs_energy_flows_y216; assert_in_epsilon(36.88372053458789, worksheet.outputs_energy_flows_y216, 0.002); end
  def test_outputs_energy_flows_z216; assert_in_epsilon(40.53956659274071, worksheet.outputs_energy_flows_z216, 0.002); end
  def test_outputs_energy_flows_aa216; assert_in_epsilon(44.31800196650838, worksheet.outputs_energy_flows_aa216, 0.002); end
  def test_outputs_energy_flows_ab216; assert_in_epsilon(48.22055870668986, worksheet.outputs_energy_flows_ab216, 0.002); end
  def test_outputs_energy_flows_ac216; assert_in_epsilon(52.248645104039355, worksheet.outputs_energy_flows_ac216, 0.002); end
  def test_outputs_energy_flows_ad216; assert_in_epsilon(56.40353231918637, worksheet.outputs_energy_flows_ad216, 0.002); end
  def test_outputs_energy_flows_c218; assert_equal("n/a", worksheet.outputs_energy_flows_c218); end
  def test_outputs_energy_flows_d218; assert_equal("Liquid", worksheet.outputs_energy_flows_d218); end
  def test_outputs_energy_flows_e218; assert_equal("n/a", worksheet.outputs_energy_flows_e218); end
  def test_outputs_energy_flows_f218; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f218); end
  def test_outputs_energy_flows_i218; assert_equal("C.02", worksheet.outputs_energy_flows_i218); end
  def test_outputs_energy_flows_j218; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j218); end
  def test_outputs_energy_flows_v218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v218||0), 0.002); end
  def test_outputs_energy_flows_w218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w218||0), 0.002); end
  def test_outputs_energy_flows_x218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x218||0), 0.002); end
  def test_outputs_energy_flows_y218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y218||0), 0.002); end
  def test_outputs_energy_flows_z218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z218||0), 0.002); end
  def test_outputs_energy_flows_aa218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa218||0), 0.002); end
  def test_outputs_energy_flows_ab218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab218||0), 0.002); end
  def test_outputs_energy_flows_ac218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac218||0), 0.002); end
  def test_outputs_energy_flows_ad218; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad218||0), 0.002); end
  def test_outputs_energy_flows_c220; assert_equal("n/a", worksheet.outputs_energy_flows_c220); end
  def test_outputs_energy_flows_d220; assert_equal("Liquid", worksheet.outputs_energy_flows_d220); end
  def test_outputs_energy_flows_e220; assert_equal("G.01", worksheet.outputs_energy_flows_e220); end
  def test_outputs_energy_flows_f220; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f220); end
  def test_outputs_energy_flows_g220; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g220); end
  def test_outputs_energy_flows_h220; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h220); end
  def test_outputs_energy_flows_i220; assert_equal("C.02", worksheet.outputs_energy_flows_i220); end
  def test_outputs_energy_flows_j220; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j220); end
  def test_outputs_energy_flows_v220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v220||0), 0.002); end
  def test_outputs_energy_flows_w220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w220||0), 0.002); end
  def test_outputs_energy_flows_x220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x220||0), 0.002); end
  def test_outputs_energy_flows_y220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y220||0), 0.002); end
  def test_outputs_energy_flows_z220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z220||0), 0.002); end
  def test_outputs_energy_flows_aa220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa220||0), 0.002); end
  def test_outputs_energy_flows_ab220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab220||0), 0.002); end
  def test_outputs_energy_flows_ac220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac220||0), 0.002); end
  def test_outputs_energy_flows_ad220; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad220||0), 0.002); end
  def test_outputs_energy_flows_c222; assert_equal("n/a", worksheet.outputs_energy_flows_c222); end
  def test_outputs_energy_flows_d222; assert_equal("Liquid", worksheet.outputs_energy_flows_d222); end
  def test_outputs_energy_flows_e222; assert_equal("n/a", worksheet.outputs_energy_flows_e222); end
  def test_outputs_energy_flows_f222; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f222); end
  def test_outputs_energy_flows_g222; assert_equal("n/a", worksheet.outputs_energy_flows_g222); end
  def test_outputs_energy_flows_h222; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h222); end
  def test_outputs_energy_flows_i222; assert_equal("C.02", worksheet.outputs_energy_flows_i222); end
  def test_outputs_energy_flows_j222; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j222); end
  def test_outputs_energy_flows_v222; assert_in_epsilon(5.091000000000001, worksheet.outputs_energy_flows_v222, 0.002); end
  def test_outputs_energy_flows_w222; assert_in_epsilon(5.127884157819872, worksheet.outputs_energy_flows_w222, 0.002); end
  def test_outputs_energy_flows_x222; assert_in_epsilon(5.1977169347165555, worksheet.outputs_energy_flows_x222, 0.002); end
  def test_outputs_energy_flows_y222; assert_in_epsilon(5.241925183381958, worksheet.outputs_energy_flows_y222, 0.002); end
  def test_outputs_energy_flows_z222; assert_in_epsilon(5.307172361611527, worksheet.outputs_energy_flows_z222, 0.002); end
  def test_outputs_energy_flows_aa222; assert_in_epsilon(5.418409622272449, worksheet.outputs_energy_flows_aa222, 0.002); end
  def test_outputs_energy_flows_ab222; assert_in_epsilon(5.510055661333965, worksheet.outputs_energy_flows_ab222, 0.002); end
  def test_outputs_energy_flows_ac222; assert_in_epsilon(5.513173679001974, worksheet.outputs_energy_flows_ac222, 0.002); end
  def test_outputs_energy_flows_ad222; assert_in_epsilon(5.4579143107269665, worksheet.outputs_energy_flows_ad222, 0.002); end
  def test_outputs_energy_flows_c224; assert_equal("n/a", worksheet.outputs_energy_flows_c224); end
  def test_outputs_energy_flows_d224; assert_equal("Gas", worksheet.outputs_energy_flows_d224); end
  def test_outputs_energy_flows_e224; assert_equal("n/a", worksheet.outputs_energy_flows_e224); end
  def test_outputs_energy_flows_f224; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f224); end
  def test_outputs_energy_flows_i224; assert_equal("C.03", worksheet.outputs_energy_flows_i224); end
  def test_outputs_energy_flows_j224; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j224); end
  def test_outputs_energy_flows_k224; assert_equal("Global buildings", worksheet.outputs_energy_flows_k224); end
  def test_outputs_energy_flows_v224; assert_in_epsilon(15.567049342504138, worksheet.outputs_energy_flows_v224, 0.002); end
  def test_outputs_energy_flows_w224; assert_in_epsilon(16.70128987962294, worksheet.outputs_energy_flows_w224, 0.002); end
  def test_outputs_energy_flows_x224; assert_in_epsilon(17.941908865424853, worksheet.outputs_energy_flows_x224, 0.002); end
  def test_outputs_energy_flows_y224; assert_in_epsilon(19.05528240788943, worksheet.outputs_energy_flows_y224, 0.002); end
  def test_outputs_energy_flows_z224; assert_in_epsilon(20.033032438564252, worksheet.outputs_energy_flows_z224, 0.002); end
  def test_outputs_energy_flows_aa224; assert_in_epsilon(20.79481688532705, worksheet.outputs_energy_flows_aa224, 0.002); end
  def test_outputs_energy_flows_ab224; assert_in_epsilon(21.42320350426364, worksheet.outputs_energy_flows_ab224, 0.002); end
  def test_outputs_energy_flows_ac224; assert_in_epsilon(21.844769556478045, worksheet.outputs_energy_flows_ac224, 0.002); end
  def test_outputs_energy_flows_ad224; assert_in_epsilon(22.15870443989403, worksheet.outputs_energy_flows_ad224, 0.002); end
  def test_outputs_energy_flows_c226; assert_equal("n/a", worksheet.outputs_energy_flows_c226); end
  def test_outputs_energy_flows_d226; assert_equal("Gas", worksheet.outputs_energy_flows_d226); end
  def test_outputs_energy_flows_e226; assert_equal("n/a", worksheet.outputs_energy_flows_e226); end
  def test_outputs_energy_flows_f226; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f226); end
  def test_outputs_energy_flows_i226; assert_equal("C.03", worksheet.outputs_energy_flows_i226); end
  def test_outputs_energy_flows_j226; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j226); end
  def test_outputs_energy_flows_k226; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k226); end
  def test_outputs_energy_flows_l226; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l226); end
  def test_outputs_energy_flows_v226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v226||0), 0.002); end
  def test_outputs_energy_flows_w226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w226||0), 0.002); end
  def test_outputs_energy_flows_x226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x226||0), 0.002); end
  def test_outputs_energy_flows_y226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y226||0), 0.002); end
  def test_outputs_energy_flows_z226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z226||0), 0.002); end
  def test_outputs_energy_flows_aa226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa226||0), 0.002); end
  def test_outputs_energy_flows_ab226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab226||0), 0.002); end
  def test_outputs_energy_flows_ac226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac226||0), 0.002); end
  def test_outputs_energy_flows_ad226; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad226||0), 0.002); end
  def test_outputs_energy_flows_c228; assert_equal("n/a", worksheet.outputs_energy_flows_c228); end
  def test_outputs_energy_flows_d228; assert_equal("Gas", worksheet.outputs_energy_flows_d228); end
  def test_outputs_energy_flows_e228; assert_equal("n/a", worksheet.outputs_energy_flows_e228); end
  def test_outputs_energy_flows_f228; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f228); end
  def test_outputs_energy_flows_i228; assert_equal("C.03", worksheet.outputs_energy_flows_i228); end
  def test_outputs_energy_flows_j228; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j228); end
  def test_outputs_energy_flows_k228; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k228); end
  def test_outputs_energy_flows_l228; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l228); end
  def test_outputs_energy_flows_v228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v228||0), 0.002); end
  def test_outputs_energy_flows_w228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w228||0), 0.002); end
  def test_outputs_energy_flows_x228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x228||0), 0.002); end
  def test_outputs_energy_flows_y228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y228||0), 0.002); end
  def test_outputs_energy_flows_z228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z228||0), 0.002); end
  def test_outputs_energy_flows_aa228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa228||0), 0.002); end
  def test_outputs_energy_flows_ab228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab228||0), 0.002); end
  def test_outputs_energy_flows_ac228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac228||0), 0.002); end
  def test_outputs_energy_flows_ad228; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad228||0), 0.002); end
  def test_outputs_energy_flows_c230; assert_equal("n/a", worksheet.outputs_energy_flows_c230); end
  def test_outputs_energy_flows_d230; assert_equal("Gas", worksheet.outputs_energy_flows_d230); end
  def test_outputs_energy_flows_e230; assert_equal("n/a", worksheet.outputs_energy_flows_e230); end
  def test_outputs_energy_flows_f230; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f230); end
  def test_outputs_energy_flows_i230; assert_equal("C.03", worksheet.outputs_energy_flows_i230); end
  def test_outputs_energy_flows_j230; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j230); end
  def test_outputs_energy_flows_k230; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k230); end
  def test_outputs_energy_flows_l230; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l230); end
  def test_outputs_energy_flows_v230; assert_in_epsilon(3.5232041853812337, worksheet.outputs_energy_flows_v230, 0.002); end
  def test_outputs_energy_flows_w230; assert_in_epsilon(3.9094826777216665, worksheet.outputs_energy_flows_w230, 0.002); end
  def test_outputs_energy_flows_x230; assert_in_epsilon(4.382312017371041, worksheet.outputs_energy_flows_x230, 0.002); end
  def test_outputs_energy_flows_y230; assert_in_epsilon(4.858858816427409, worksheet.outputs_energy_flows_y230, 0.002); end
  def test_outputs_energy_flows_z230; assert_in_epsilon(5.335770374397407, worksheet.outputs_energy_flows_z230, 0.002); end
  def test_outputs_energy_flows_aa230; assert_in_epsilon(5.78906842600707, worksheet.outputs_energy_flows_aa230, 0.002); end
  def test_outputs_energy_flows_ab230; assert_in_epsilon(6.237791639841468, worksheet.outputs_energy_flows_ab230, 0.002); end
  def test_outputs_energy_flows_ac230; assert_in_epsilon(6.657153954838489, worksheet.outputs_energy_flows_ac230, 0.002); end
  def test_outputs_energy_flows_ad230; assert_in_epsilon(7.072856450358726, worksheet.outputs_energy_flows_ad230, 0.002); end
  def test_outputs_energy_flows_c232; assert_equal("n/a", worksheet.outputs_energy_flows_c232); end
  def test_outputs_energy_flows_d232; assert_equal("Gas", worksheet.outputs_energy_flows_d232); end
  def test_outputs_energy_flows_e232; assert_equal("n/a", worksheet.outputs_energy_flows_e232); end
  def test_outputs_energy_flows_f232; assert_equal("Non domestic", worksheet.outputs_energy_flows_f232); end
  def test_outputs_energy_flows_i232; assert_equal("C.03", worksheet.outputs_energy_flows_i232); end
  def test_outputs_energy_flows_j232; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j232); end
  def test_outputs_energy_flows_k232; assert_equal("Non-residential", worksheet.outputs_energy_flows_k232); end
  def test_outputs_energy_flows_v232; assert_in_epsilon(4.4184506127801635, worksheet.outputs_energy_flows_v232, 0.002); end
  def test_outputs_energy_flows_w232; assert_in_epsilon(4.773007429663862, worksheet.outputs_energy_flows_w232, 0.002); end
  def test_outputs_energy_flows_x232; assert_in_epsilon(5.169955247860349, worksheet.outputs_energy_flows_x232, 0.002); end
  def test_outputs_energy_flows_y232; assert_in_epsilon(5.532937547640102, worksheet.outputs_energy_flows_y232, 0.002); end
  def test_outputs_energy_flows_z232; assert_in_epsilon(5.856174667717392, worksheet.outputs_energy_flows_z232, 0.002); end
  def test_outputs_energy_flows_aa232; assert_in_epsilon(6.1358246905759, worksheet.outputs_energy_flows_aa232, 0.002); end
  def test_outputs_energy_flows_ab232; assert_in_epsilon(6.366970116223756, worksheet.outputs_energy_flows_ab232, 0.002); end
  def test_outputs_energy_flows_ac232; assert_in_epsilon(6.543867981167841, worksheet.outputs_energy_flows_ac232, 0.002); end
  def test_outputs_energy_flows_ad232; assert_in_epsilon(6.661728783089782, worksheet.outputs_energy_flows_ad232, 0.002); end
  def test_outputs_energy_flows_c234; assert_equal("n/a", worksheet.outputs_energy_flows_c234); end
  def test_outputs_energy_flows_d234; assert_equal("Gas", worksheet.outputs_energy_flows_d234); end
  def test_outputs_energy_flows_e234; assert_equal("n/a", worksheet.outputs_energy_flows_e234); end
  def test_outputs_energy_flows_f234; assert_equal("Steel", worksheet.outputs_energy_flows_f234); end
  def test_outputs_energy_flows_i234; assert_equal("C.03", worksheet.outputs_energy_flows_i234); end
  def test_outputs_energy_flows_j234; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j234); end
  def test_outputs_energy_flows_v234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v234||0), 0.002); end
  def test_outputs_energy_flows_w234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w234||0), 0.002); end
  def test_outputs_energy_flows_x234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x234||0), 0.002); end
  def test_outputs_energy_flows_y234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y234||0), 0.002); end
  def test_outputs_energy_flows_z234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z234||0), 0.002); end
  def test_outputs_energy_flows_aa234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa234||0), 0.002); end
  def test_outputs_energy_flows_ab234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab234||0), 0.002); end
  def test_outputs_energy_flows_ac234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac234||0), 0.002); end
  def test_outputs_energy_flows_ad234; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad234||0), 0.002); end
  def test_outputs_energy_flows_c236; assert_equal("n/a", worksheet.outputs_energy_flows_c236); end
  def test_outputs_energy_flows_d236; assert_equal("Gas", worksheet.outputs_energy_flows_d236); end
  def test_outputs_energy_flows_e236; assert_equal("n/a", worksheet.outputs_energy_flows_e236); end
  def test_outputs_energy_flows_f236; assert_equal("Aluminium", worksheet.outputs_energy_flows_f236); end
  def test_outputs_energy_flows_i236; assert_equal("C.03", worksheet.outputs_energy_flows_i236); end
  def test_outputs_energy_flows_j236; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j236); end
  def test_outputs_energy_flows_v236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v236||0), 0.002); end
  def test_outputs_energy_flows_w236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w236||0), 0.002); end
  def test_outputs_energy_flows_x236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x236||0), 0.002); end
  def test_outputs_energy_flows_y236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y236||0), 0.002); end
  def test_outputs_energy_flows_z236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z236||0), 0.002); end
  def test_outputs_energy_flows_aa236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa236||0), 0.002); end
  def test_outputs_energy_flows_ab236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab236||0), 0.002); end
  def test_outputs_energy_flows_ac236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac236||0), 0.002); end
  def test_outputs_energy_flows_ad236; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad236||0), 0.002); end
  def test_outputs_energy_flows_c238; assert_equal("n/a", worksheet.outputs_energy_flows_c238); end
  def test_outputs_energy_flows_d238; assert_equal("Gas", worksheet.outputs_energy_flows_d238); end
  def test_outputs_energy_flows_e238; assert_equal("n/a", worksheet.outputs_energy_flows_e238); end
  def test_outputs_energy_flows_f238; assert_equal("Cement", worksheet.outputs_energy_flows_f238); end
  def test_outputs_energy_flows_i238; assert_equal("C.03", worksheet.outputs_energy_flows_i238); end
  def test_outputs_energy_flows_j238; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j238); end
  def test_outputs_energy_flows_v238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v238||0), 0.002); end
  def test_outputs_energy_flows_w238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w238||0), 0.002); end
  def test_outputs_energy_flows_x238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x238||0), 0.002); end
  def test_outputs_energy_flows_y238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y238||0), 0.002); end
  def test_outputs_energy_flows_z238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z238||0), 0.002); end
  def test_outputs_energy_flows_aa238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa238||0), 0.002); end
  def test_outputs_energy_flows_ab238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab238||0), 0.002); end
  def test_outputs_energy_flows_ac238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac238||0), 0.002); end
  def test_outputs_energy_flows_ad238; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad238||0), 0.002); end
  def test_outputs_energy_flows_c240; assert_equal("n/a", worksheet.outputs_energy_flows_c240); end
  def test_outputs_energy_flows_d240; assert_equal("Gas", worksheet.outputs_energy_flows_d240); end
  def test_outputs_energy_flows_e240; assert_equal("n/a", worksheet.outputs_energy_flows_e240); end
  def test_outputs_energy_flows_f240; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f240); end
  def test_outputs_energy_flows_i240; assert_equal("C.03", worksheet.outputs_energy_flows_i240); end
  def test_outputs_energy_flows_j240; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j240); end
  def test_outputs_energy_flows_v240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v240||0), 0.002); end
  def test_outputs_energy_flows_w240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w240||0), 0.002); end
  def test_outputs_energy_flows_x240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x240||0), 0.002); end
  def test_outputs_energy_flows_y240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y240||0), 0.002); end
  def test_outputs_energy_flows_z240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z240||0), 0.002); end
  def test_outputs_energy_flows_aa240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa240||0), 0.002); end
  def test_outputs_energy_flows_ab240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab240||0), 0.002); end
  def test_outputs_energy_flows_ac240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac240||0), 0.002); end
  def test_outputs_energy_flows_ad240; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad240||0), 0.002); end
  def test_outputs_energy_flows_c242; assert_equal("n/a", worksheet.outputs_energy_flows_c242); end
  def test_outputs_energy_flows_d242; assert_equal("Gas", worksheet.outputs_energy_flows_d242); end
  def test_outputs_energy_flows_e242; assert_equal("n/a", worksheet.outputs_energy_flows_e242); end
  def test_outputs_energy_flows_f242; assert_equal("Chemicals", worksheet.outputs_energy_flows_f242); end
  def test_outputs_energy_flows_i242; assert_equal("C.03", worksheet.outputs_energy_flows_i242); end
  def test_outputs_energy_flows_j242; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j242); end
  def test_outputs_energy_flows_v242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v242||0), 0.002); end
  def test_outputs_energy_flows_w242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w242||0), 0.002); end
  def test_outputs_energy_flows_x242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x242||0), 0.002); end
  def test_outputs_energy_flows_y242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y242||0), 0.002); end
  def test_outputs_energy_flows_z242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z242||0), 0.002); end
  def test_outputs_energy_flows_aa242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa242||0), 0.002); end
  def test_outputs_energy_flows_ab242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab242||0), 0.002); end
  def test_outputs_energy_flows_ac242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac242||0), 0.002); end
  def test_outputs_energy_flows_ad242; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad242||0), 0.002); end
  def test_outputs_energy_flows_c244; assert_equal("n/a", worksheet.outputs_energy_flows_c244); end
  def test_outputs_energy_flows_d244; assert_equal("Gas", worksheet.outputs_energy_flows_d244); end
  def test_outputs_energy_flows_e244; assert_equal("n/a", worksheet.outputs_energy_flows_e244); end
  def test_outputs_energy_flows_f244; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f244); end
  def test_outputs_energy_flows_i244; assert_equal("C.03", worksheet.outputs_energy_flows_i244); end
  def test_outputs_energy_flows_j244; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j244); end
  def test_outputs_energy_flows_l244; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l244); end
  def test_outputs_energy_flows_m244; assert_equal("Timber", worksheet.outputs_energy_flows_m244); end
  def test_outputs_energy_flows_v244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v244||0), 0.002); end
  def test_outputs_energy_flows_w244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w244||0), 0.002); end
  def test_outputs_energy_flows_x244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x244||0), 0.002); end
  def test_outputs_energy_flows_y244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y244||0), 0.002); end
  def test_outputs_energy_flows_z244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z244||0), 0.002); end
  def test_outputs_energy_flows_aa244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa244||0), 0.002); end
  def test_outputs_energy_flows_ab244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab244||0), 0.002); end
  def test_outputs_energy_flows_ac244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac244||0), 0.002); end
  def test_outputs_energy_flows_ad244; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad244||0), 0.002); end
  def test_outputs_energy_flows_c246; assert_equal("n/a", worksheet.outputs_energy_flows_c246); end
  def test_outputs_energy_flows_d246; assert_equal("Gas", worksheet.outputs_energy_flows_d246); end
  def test_outputs_energy_flows_e246; assert_equal("n/a", worksheet.outputs_energy_flows_e246); end
  def test_outputs_energy_flows_f246; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f246); end
  def test_outputs_energy_flows_i246; assert_equal("C.03", worksheet.outputs_energy_flows_i246); end
  def test_outputs_energy_flows_j246; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j246); end
  def test_outputs_energy_flows_l246; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l246); end
  def test_outputs_energy_flows_m246; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m246); end
  def test_outputs_energy_flows_v246; assert_in_delta(0.3219083694363256, worksheet.outputs_energy_flows_v246, 0.002); end
  def test_outputs_energy_flows_w246; assert_in_delta(0.39885233715172763, worksheet.outputs_energy_flows_w246, 0.002); end
  def test_outputs_energy_flows_x246; assert_in_delta(0.4982898394580495, worksheet.outputs_energy_flows_x246, 0.002); end
  def test_outputs_energy_flows_y246; assert_in_delta(0.6057501462842251, worksheet.outputs_energy_flows_y246, 0.002); end
  def test_outputs_energy_flows_z246; assert_in_delta(0.7206141088302022, worksheet.outputs_energy_flows_z246, 0.002); end
  def test_outputs_energy_flows_aa246; assert_in_delta(0.8424310139517959, worksheet.outputs_energy_flows_aa246, 0.002); end
  def test_outputs_energy_flows_ab246; assert_in_delta(0.970663026209704, worksheet.outputs_energy_flows_ab246, 0.002); end
  def test_outputs_energy_flows_ac246; assert_in_epsilon(1.1047838276710211, worksheet.outputs_energy_flows_ac246, 0.002); end
  def test_outputs_energy_flows_ad246; assert_in_epsilon(1.2438738779145333, worksheet.outputs_energy_flows_ad246, 0.002); end
  def test_outputs_energy_flows_c248; assert_equal("n/a", worksheet.outputs_energy_flows_c248); end
  def test_outputs_energy_flows_d248; assert_equal("Gas", worksheet.outputs_energy_flows_d248); end
  def test_outputs_energy_flows_e248; assert_equal("n/a", worksheet.outputs_energy_flows_e248); end
  def test_outputs_energy_flows_f248; assert_equal("International passenger", worksheet.outputs_energy_flows_f248); end
  def test_outputs_energy_flows_i248; assert_equal("C.03", worksheet.outputs_energy_flows_i248); end
  def test_outputs_energy_flows_j248; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j248); end
  def test_outputs_energy_flows_l248; assert_equal("International", worksheet.outputs_energy_flows_l248); end
  def test_outputs_energy_flows_v248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v248||0), 0.002); end
  def test_outputs_energy_flows_w248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w248||0), 0.002); end
  def test_outputs_energy_flows_x248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x248||0), 0.002); end
  def test_outputs_energy_flows_y248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y248||0), 0.002); end
  def test_outputs_energy_flows_z248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z248||0), 0.002); end
  def test_outputs_energy_flows_aa248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa248||0), 0.002); end
  def test_outputs_energy_flows_ab248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab248||0), 0.002); end
  def test_outputs_energy_flows_ac248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac248||0), 0.002); end
  def test_outputs_energy_flows_ad248; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad248||0), 0.002); end
  def test_outputs_energy_flows_c250; assert_equal("n/a", worksheet.outputs_energy_flows_c250); end
  def test_outputs_energy_flows_d250; assert_equal("Gas", worksheet.outputs_energy_flows_d250); end
  def test_outputs_energy_flows_e250; assert_equal("n/a", worksheet.outputs_energy_flows_e250); end
  def test_outputs_energy_flows_f250; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f250); end
  def test_outputs_energy_flows_i250; assert_equal("C.03", worksheet.outputs_energy_flows_i250); end
  def test_outputs_energy_flows_j250; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j250); end
  def test_outputs_energy_flows_l250; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l250); end
  def test_outputs_energy_flows_v250; assert_in_delta(0.011926822007994763, worksheet.outputs_energy_flows_v250, 0.002); end
  def test_outputs_energy_flows_w250; assert_in_delta(0.08448662460339201, worksheet.outputs_energy_flows_w250, 0.002); end
  def test_outputs_energy_flows_x250; assert_in_delta(0.1901859936584497, worksheet.outputs_energy_flows_x250, 0.002); end
  def test_outputs_energy_flows_y250; assert_in_delta(0.3135202995611245, worksheet.outputs_energy_flows_y250, 0.002); end
  def test_outputs_energy_flows_z250; assert_in_delta(0.45548895952288876, worksheet.outputs_energy_flows_z250, 0.002); end
  def test_outputs_energy_flows_aa250; assert_in_delta(0.6171326170211417, worksheet.outputs_energy_flows_aa250, 0.002); end
  def test_outputs_energy_flows_ab250; assert_in_delta(0.7995345939054108, worksheet.outputs_energy_flows_ab250, 0.002); end
  def test_outputs_energy_flows_ac250; assert_in_epsilon(1.0038223890072617, worksheet.outputs_energy_flows_ac250, 0.002); end
  def test_outputs_energy_flows_ad250; assert_in_epsilon(1.231169224651188, worksheet.outputs_energy_flows_ad250, 0.002); end
  def test_outputs_energy_flows_c252; assert_equal("n/a", worksheet.outputs_energy_flows_c252); end
  def test_outputs_energy_flows_d252; assert_equal("Gas", worksheet.outputs_energy_flows_d252); end
  def test_outputs_energy_flows_e252; assert_equal("n/a", worksheet.outputs_energy_flows_e252); end
  def test_outputs_energy_flows_f252; assert_equal("International freight", worksheet.outputs_energy_flows_f252); end
  def test_outputs_energy_flows_i252; assert_equal("C.03", worksheet.outputs_energy_flows_i252); end
  def test_outputs_energy_flows_j252; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j252); end
  def test_outputs_energy_flows_l252; assert_equal("International freight", worksheet.outputs_energy_flows_l252); end
  def test_outputs_energy_flows_v252; assert_in_delta(1.237111016955099e-08, worksheet.outputs_energy_flows_v252, 0.002); end
  def test_outputs_energy_flows_w252; assert_in_delta(0.09620474391248193, worksheet.outputs_energy_flows_w252, 0.002); end
  def test_outputs_energy_flows_x252; assert_in_delta(0.25413498225499376, worksheet.outputs_energy_flows_x252, 0.002); end
  def test_outputs_energy_flows_y252; assert_in_delta(0.45726244040976444, worksheet.outputs_energy_flows_y252, 0.002); end
  def test_outputs_energy_flows_z252; assert_in_delta(0.7093678152297073, worksheet.outputs_energy_flows_z252, 0.002); end
  def test_outputs_energy_flows_aa252; assert_in_epsilon(1.0144587502537579, worksheet.outputs_energy_flows_aa252, 0.002); end
  def test_outputs_energy_flows_ab252; assert_in_epsilon(1.3767814181528002, worksheet.outputs_energy_flows_ab252, 0.002); end
  def test_outputs_energy_flows_ac252; assert_in_epsilon(1.800832639623204, worksheet.outputs_energy_flows_ac252, 0.002); end
  def test_outputs_energy_flows_ad252; assert_in_epsilon(2.2913725620159378, worksheet.outputs_energy_flows_ad252, 0.002); end
  def test_outputs_energy_flows_c254; assert_equal("n/a", worksheet.outputs_energy_flows_c254); end
  def test_outputs_energy_flows_d254; assert_equal("Gas", worksheet.outputs_energy_flows_d254); end
  def test_outputs_energy_flows_e254; assert_equal("n/a", worksheet.outputs_energy_flows_e254); end
  def test_outputs_energy_flows_f254; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f254); end
  def test_outputs_energy_flows_i254; assert_equal("C.03", worksheet.outputs_energy_flows_i254); end
  def test_outputs_energy_flows_j254; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j254); end
  def test_outputs_energy_flows_v254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v254||0), 0.002); end
  def test_outputs_energy_flows_w254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w254||0), 0.002); end
  def test_outputs_energy_flows_x254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x254||0), 0.002); end
  def test_outputs_energy_flows_y254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y254||0), 0.002); end
  def test_outputs_energy_flows_z254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z254||0), 0.002); end
  def test_outputs_energy_flows_aa254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa254||0), 0.002); end
  def test_outputs_energy_flows_ab254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab254||0), 0.002); end
  def test_outputs_energy_flows_ac254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac254||0), 0.002); end
  def test_outputs_energy_flows_ad254; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad254||0), 0.002); end
  def test_outputs_energy_flows_c256; assert_equal("n/a", worksheet.outputs_energy_flows_c256); end
  def test_outputs_energy_flows_d256; assert_equal("Gas", worksheet.outputs_energy_flows_d256); end
  def test_outputs_energy_flows_e256; assert_equal("G.01", worksheet.outputs_energy_flows_e256); end
  def test_outputs_energy_flows_f256; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f256); end
  def test_outputs_energy_flows_g256; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g256); end
  def test_outputs_energy_flows_h256; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h256); end
  def test_outputs_energy_flows_i256; assert_equal("C.03", worksheet.outputs_energy_flows_i256); end
  def test_outputs_energy_flows_j256; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j256); end
  def test_outputs_energy_flows_v256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v256||0), 0.002); end
  def test_outputs_energy_flows_w256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w256||0), 0.002); end
  def test_outputs_energy_flows_x256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x256||0), 0.002); end
  def test_outputs_energy_flows_y256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y256||0), 0.002); end
  def test_outputs_energy_flows_z256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z256||0), 0.002); end
  def test_outputs_energy_flows_aa256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa256||0), 0.002); end
  def test_outputs_energy_flows_ab256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab256||0), 0.002); end
  def test_outputs_energy_flows_ac256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac256||0), 0.002); end
  def test_outputs_energy_flows_ad256; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad256||0), 0.002); end
  def test_outputs_energy_flows_c258; assert_equal("n/a", worksheet.outputs_energy_flows_c258); end
  def test_outputs_energy_flows_d258; assert_equal("Gas", worksheet.outputs_energy_flows_d258); end
  def test_outputs_energy_flows_e258; assert_equal("n/a", worksheet.outputs_energy_flows_e258); end
  def test_outputs_energy_flows_f258; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f258); end
  def test_outputs_energy_flows_g258; assert_equal("n/a", worksheet.outputs_energy_flows_g258); end
  def test_outputs_energy_flows_h258; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h258); end
  def test_outputs_energy_flows_i258; assert_equal("C.03", worksheet.outputs_energy_flows_i258); end
  def test_outputs_energy_flows_j258; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j258); end
  def test_outputs_energy_flows_v258; assert_in_delta(0.6980000000000002, worksheet.outputs_energy_flows_v258, 0.002); end
  def test_outputs_energy_flows_w258; assert_in_delta(0.7003219556812095, worksheet.outputs_energy_flows_w258, 0.002); end
  def test_outputs_energy_flows_x258; assert_in_delta(0.7161690325559673, worksheet.outputs_energy_flows_x258, 0.002); end
  def test_outputs_energy_flows_y258; assert_in_delta(0.7306514511938953, worksheet.outputs_energy_flows_y258, 0.002); end
  def test_outputs_energy_flows_z258; assert_in_delta(0.7478892297155085, worksheet.outputs_energy_flows_z258, 0.002); end
  def test_outputs_energy_flows_aa258; assert_in_delta(0.7708589370323254, worksheet.outputs_energy_flows_aa258, 0.002); end
  def test_outputs_energy_flows_ab258; assert_in_delta(0.7917369959415653, worksheet.outputs_energy_flows_ab258, 0.002); end
  def test_outputs_energy_flows_ac258; assert_in_delta(0.802299532531712, worksheet.outputs_energy_flows_ac258, 0.002); end
  def test_outputs_energy_flows_ad258; assert_in_delta(0.8061433923923129, worksheet.outputs_energy_flows_ad258, 0.002); end
  def test_outputs_energy_flows_c260; assert_equal("FF.01", worksheet.outputs_energy_flows_c260); end
  def test_outputs_energy_flows_d260; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d260); end
  def test_outputs_energy_flows_e260; assert_equal("n/a", worksheet.outputs_energy_flows_e260); end
  def test_outputs_energy_flows_f260; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f260); end
  def test_outputs_energy_flows_i260; assert_equal("FF.01", worksheet.outputs_energy_flows_i260); end
  def test_outputs_energy_flows_j260; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j260); end
  def test_outputs_energy_flows_k260; assert_equal("Global buildings", worksheet.outputs_energy_flows_k260); end
  def test_outputs_energy_flows_v260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v260||0), 0.002); end
  def test_outputs_energy_flows_w260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w260||0), 0.002); end
  def test_outputs_energy_flows_x260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x260||0), 0.002); end
  def test_outputs_energy_flows_y260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y260||0), 0.002); end
  def test_outputs_energy_flows_z260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z260||0), 0.002); end
  def test_outputs_energy_flows_aa260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa260||0), 0.002); end
  def test_outputs_energy_flows_ab260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab260||0), 0.002); end
  def test_outputs_energy_flows_ac260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac260||0), 0.002); end
  def test_outputs_energy_flows_ad260; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad260||0), 0.002); end
  def test_outputs_energy_flows_c262; assert_equal("FF.01", worksheet.outputs_energy_flows_c262); end
  def test_outputs_energy_flows_d262; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d262); end
  def test_outputs_energy_flows_e262; assert_equal("n/a", worksheet.outputs_energy_flows_e262); end
  def test_outputs_energy_flows_f262; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f262); end
  def test_outputs_energy_flows_i262; assert_equal("FF.01", worksheet.outputs_energy_flows_i262); end
  def test_outputs_energy_flows_j262; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j262); end
  def test_outputs_energy_flows_k262; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k262); end
  def test_outputs_energy_flows_l262; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l262); end
  def test_outputs_energy_flows_v262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v262||0), 0.002); end
  def test_outputs_energy_flows_w262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w262||0), 0.002); end
  def test_outputs_energy_flows_x262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x262||0), 0.002); end
  def test_outputs_energy_flows_y262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y262||0), 0.002); end
  def test_outputs_energy_flows_z262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z262||0), 0.002); end
  def test_outputs_energy_flows_aa262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa262||0), 0.002); end
  def test_outputs_energy_flows_ab262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab262||0), 0.002); end
  def test_outputs_energy_flows_ac262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac262||0), 0.002); end
  def test_outputs_energy_flows_ad262; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad262||0), 0.002); end
  def test_outputs_energy_flows_c264; assert_equal("FF.01", worksheet.outputs_energy_flows_c264); end
  def test_outputs_energy_flows_d264; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d264); end
  def test_outputs_energy_flows_e264; assert_equal("n/a", worksheet.outputs_energy_flows_e264); end
  def test_outputs_energy_flows_f264; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f264); end
  def test_outputs_energy_flows_i264; assert_equal("FF.01", worksheet.outputs_energy_flows_i264); end
  def test_outputs_energy_flows_j264; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j264); end
  def test_outputs_energy_flows_k264; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k264); end
  def test_outputs_energy_flows_l264; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l264); end
  def test_outputs_energy_flows_v264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v264||0), 0.002); end
  def test_outputs_energy_flows_w264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w264||0), 0.002); end
  def test_outputs_energy_flows_x264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x264||0), 0.002); end
  def test_outputs_energy_flows_y264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y264||0), 0.002); end
  def test_outputs_energy_flows_z264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z264||0), 0.002); end
  def test_outputs_energy_flows_aa264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa264||0), 0.002); end
  def test_outputs_energy_flows_ab264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab264||0), 0.002); end
  def test_outputs_energy_flows_ac264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac264||0), 0.002); end
  def test_outputs_energy_flows_ad264; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad264||0), 0.002); end
  def test_outputs_energy_flows_c266; assert_equal("FF.01", worksheet.outputs_energy_flows_c266); end
  def test_outputs_energy_flows_d266; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d266); end
  def test_outputs_energy_flows_e266; assert_equal("n/a", worksheet.outputs_energy_flows_e266); end
  def test_outputs_energy_flows_f266; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f266); end
  def test_outputs_energy_flows_i266; assert_equal("FF.01", worksheet.outputs_energy_flows_i266); end
  def test_outputs_energy_flows_j266; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j266); end
  def test_outputs_energy_flows_k266; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k266); end
  def test_outputs_energy_flows_l266; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l266); end
  def test_outputs_energy_flows_v266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v266||0), 0.002); end
  def test_outputs_energy_flows_w266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w266||0), 0.002); end
  def test_outputs_energy_flows_x266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x266||0), 0.002); end
  def test_outputs_energy_flows_y266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y266||0), 0.002); end
  def test_outputs_energy_flows_z266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z266||0), 0.002); end
  def test_outputs_energy_flows_aa266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa266||0), 0.002); end
  def test_outputs_energy_flows_ab266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab266||0), 0.002); end
  def test_outputs_energy_flows_ac266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac266||0), 0.002); end
  def test_outputs_energy_flows_ad266; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad266||0), 0.002); end
  def test_outputs_energy_flows_c268; assert_equal("FF.01", worksheet.outputs_energy_flows_c268); end
  def test_outputs_energy_flows_d268; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d268); end
  def test_outputs_energy_flows_e268; assert_equal("n/a", worksheet.outputs_energy_flows_e268); end
  def test_outputs_energy_flows_f268; assert_equal("Non domestic", worksheet.outputs_energy_flows_f268); end
  def test_outputs_energy_flows_i268; assert_equal("FF.01", worksheet.outputs_energy_flows_i268); end
  def test_outputs_energy_flows_j268; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j268); end
  def test_outputs_energy_flows_k268; assert_equal("Non-residential", worksheet.outputs_energy_flows_k268); end
  def test_outputs_energy_flows_v268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v268||0), 0.002); end
  def test_outputs_energy_flows_w268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w268||0), 0.002); end
  def test_outputs_energy_flows_x268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x268||0), 0.002); end
  def test_outputs_energy_flows_y268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y268||0), 0.002); end
  def test_outputs_energy_flows_z268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z268||0), 0.002); end
  def test_outputs_energy_flows_aa268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa268||0), 0.002); end
  def test_outputs_energy_flows_ab268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab268||0), 0.002); end
  def test_outputs_energy_flows_ac268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac268||0), 0.002); end
  def test_outputs_energy_flows_ad268; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad268||0), 0.002); end
  def test_outputs_energy_flows_c270; assert_equal("FF.01", worksheet.outputs_energy_flows_c270); end
  def test_outputs_energy_flows_d270; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d270); end
  def test_outputs_energy_flows_e270; assert_equal("n/a", worksheet.outputs_energy_flows_e270); end
  def test_outputs_energy_flows_f270; assert_equal("Steel", worksheet.outputs_energy_flows_f270); end
  def test_outputs_energy_flows_i270; assert_equal("FF.01", worksheet.outputs_energy_flows_i270); end
  def test_outputs_energy_flows_j270; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j270); end
  def test_outputs_energy_flows_v270; assert_in_epsilon(23.058721431466676, worksheet.outputs_energy_flows_v270, 0.002); end
  def test_outputs_energy_flows_w270; assert_in_epsilon(25.942461167723444, worksheet.outputs_energy_flows_w270, 0.002); end
  def test_outputs_energy_flows_x270; assert_in_epsilon(27.550940965530994, worksheet.outputs_energy_flows_x270, 0.002); end
  def test_outputs_energy_flows_y270; assert_in_epsilon(28.750644859972397, worksheet.outputs_energy_flows_y270, 0.002); end
  def test_outputs_energy_flows_z270; assert_in_epsilon(30.2626657137093, worksheet.outputs_energy_flows_z270, 0.002); end
  def test_outputs_energy_flows_aa270; assert_in_epsilon(31.622016828085957, worksheet.outputs_energy_flows_aa270, 0.002); end
  def test_outputs_energy_flows_ab270; assert_in_epsilon(33.31520101270584, worksheet.outputs_energy_flows_ab270, 0.002); end
  def test_outputs_energy_flows_ac270; assert_in_epsilon(35.676463769262284, worksheet.outputs_energy_flows_ac270, 0.002); end
  def test_outputs_energy_flows_ad270; assert_in_epsilon(36.44363981298571, worksheet.outputs_energy_flows_ad270, 0.002); end
  def test_outputs_energy_flows_c272; assert_equal("FF.01", worksheet.outputs_energy_flows_c272); end
  def test_outputs_energy_flows_d272; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d272); end
  def test_outputs_energy_flows_e272; assert_equal("n/a", worksheet.outputs_energy_flows_e272); end
  def test_outputs_energy_flows_f272; assert_equal("Aluminium", worksheet.outputs_energy_flows_f272); end
  def test_outputs_energy_flows_i272; assert_equal("FF.01", worksheet.outputs_energy_flows_i272); end
  def test_outputs_energy_flows_j272; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j272); end
  def test_outputs_energy_flows_v272; assert_in_delta(0.7339274805745354, worksheet.outputs_energy_flows_v272, 0.002); end
  def test_outputs_energy_flows_w272; assert_in_delta(0.9352483726686971, worksheet.outputs_energy_flows_w272, 0.002); end
  def test_outputs_energy_flows_x272; assert_in_epsilon(1.0933759548333863, worksheet.outputs_energy_flows_x272, 0.002); end
  def test_outputs_energy_flows_y272; assert_in_epsilon(1.2961164003521772, worksheet.outputs_energy_flows_y272, 0.002); end
  def test_outputs_energy_flows_z272; assert_in_epsilon(1.5195653351179768, worksheet.outputs_energy_flows_z272, 0.002); end
  def test_outputs_energy_flows_aa272; assert_in_epsilon(1.7689906740817398, worksheet.outputs_energy_flows_aa272, 0.002); end
  def test_outputs_energy_flows_ab272; assert_in_epsilon(2.0468463204679095, worksheet.outputs_energy_flows_ab272, 0.002); end
  def test_outputs_energy_flows_ac272; assert_in_epsilon(2.367064796833624, worksheet.outputs_energy_flows_ac272, 0.002); end
  def test_outputs_energy_flows_ad272; assert_in_epsilon(2.721346235731726, worksheet.outputs_energy_flows_ad272, 0.002); end
  def test_outputs_energy_flows_c274; assert_equal("FF.01", worksheet.outputs_energy_flows_c274); end
  def test_outputs_energy_flows_d274; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d274); end
  def test_outputs_energy_flows_e274; assert_equal("n/a", worksheet.outputs_energy_flows_e274); end
  def test_outputs_energy_flows_f274; assert_equal("Cement", worksheet.outputs_energy_flows_f274); end
  def test_outputs_energy_flows_i274; assert_equal("FF.01", worksheet.outputs_energy_flows_i274); end
  def test_outputs_energy_flows_j274; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j274); end
  def test_outputs_energy_flows_v274; assert_in_epsilon(6.851960921136625, worksheet.outputs_energy_flows_v274, 0.002); end
  def test_outputs_energy_flows_w274; assert_in_epsilon(7.74028063778082, worksheet.outputs_energy_flows_w274, 0.002); end
  def test_outputs_energy_flows_x274; assert_in_epsilon(8.129401455800311, worksheet.outputs_energy_flows_x274, 0.002); end
  def test_outputs_energy_flows_y274; assert_in_epsilon(8.518922615967371, worksheet.outputs_energy_flows_y274, 0.002); end
  def test_outputs_energy_flows_z274; assert_in_epsilon(8.90053822588338, worksheet.outputs_energy_flows_z274, 0.002); end
  def test_outputs_energy_flows_aa274; assert_in_epsilon(9.287355865426118, worksheet.outputs_energy_flows_aa274, 0.002); end
  def test_outputs_energy_flows_ab274; assert_in_epsilon(9.675665993256535, worksheet.outputs_energy_flows_ab274, 0.002); end
  def test_outputs_energy_flows_ac274; assert_in_epsilon(10.073478939817434, worksheet.outputs_energy_flows_ac274, 0.002); end
  def test_outputs_energy_flows_ad274; assert_in_epsilon(10.459153847685476, worksheet.outputs_energy_flows_ad274, 0.002); end
  def test_outputs_energy_flows_c276; assert_equal("FF.01", worksheet.outputs_energy_flows_c276); end
  def test_outputs_energy_flows_d276; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d276); end
  def test_outputs_energy_flows_e276; assert_equal("n/a", worksheet.outputs_energy_flows_e276); end
  def test_outputs_energy_flows_f276; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f276); end
  def test_outputs_energy_flows_i276; assert_equal("FF.01", worksheet.outputs_energy_flows_i276); end
  def test_outputs_energy_flows_j276; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j276); end
  def test_outputs_energy_flows_v276; assert_in_epsilon(1.518261087438881, worksheet.outputs_energy_flows_v276, 0.002); end
  def test_outputs_energy_flows_w276; assert_in_epsilon(1.5341200943681217, worksheet.outputs_energy_flows_w276, 0.002); end
  def test_outputs_energy_flows_x276; assert_in_epsilon(1.6062770692541974, worksheet.outputs_energy_flows_x276, 0.002); end
  def test_outputs_energy_flows_y276; assert_in_epsilon(1.6386640852134349, worksheet.outputs_energy_flows_y276, 0.002); end
  def test_outputs_energy_flows_z276; assert_in_epsilon(1.6621266203241438, worksheet.outputs_energy_flows_z276, 0.002); end
  def test_outputs_energy_flows_aa276; assert_in_epsilon(1.677498821467504, worksheet.outputs_energy_flows_aa276, 0.002); end
  def test_outputs_energy_flows_ab276; assert_in_epsilon(1.6851259170605475, worksheet.outputs_energy_flows_ab276, 0.002); end
  def test_outputs_energy_flows_ac276; assert_in_epsilon(1.6850042909433123, worksheet.outputs_energy_flows_ac276, 0.002); end
  def test_outputs_energy_flows_ad276; assert_in_epsilon(1.677260352277043, worksheet.outputs_energy_flows_ad276, 0.002); end
  def test_outputs_energy_flows_c278; assert_equal("FF.01", worksheet.outputs_energy_flows_c278); end
  def test_outputs_energy_flows_d278; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d278); end
  def test_outputs_energy_flows_e278; assert_equal("n/a", worksheet.outputs_energy_flows_e278); end
  def test_outputs_energy_flows_f278; assert_equal("Chemicals", worksheet.outputs_energy_flows_f278); end
  def test_outputs_energy_flows_i278; assert_equal("FF.01", worksheet.outputs_energy_flows_i278); end
  def test_outputs_energy_flows_j278; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j278); end
  def test_outputs_energy_flows_v278; assert_in_epsilon(2.787968769692799, worksheet.outputs_energy_flows_v278, 0.002); end
  def test_outputs_energy_flows_w278; assert_in_epsilon(3.069189279919977, worksheet.outputs_energy_flows_w278, 0.002); end
  def test_outputs_energy_flows_x278; assert_in_epsilon(3.34779561149986, worksheet.outputs_energy_flows_x278, 0.002); end
  def test_outputs_energy_flows_y278; assert_in_epsilon(3.5546315599520737, worksheet.outputs_energy_flows_y278, 0.002); end
  def test_outputs_energy_flows_z278; assert_in_epsilon(3.7728308207969308, worksheet.outputs_energy_flows_z278, 0.002); end
  def test_outputs_energy_flows_aa278; assert_in_epsilon(4.000011618868017, worksheet.outputs_energy_flows_aa278, 0.002); end
  def test_outputs_energy_flows_ab278; assert_in_epsilon(4.234839765464126, worksheet.outputs_energy_flows_ab278, 0.002); end
  def test_outputs_energy_flows_ac278; assert_in_epsilon(4.443211719543936, worksheet.outputs_energy_flows_ac278, 0.002); end
  def test_outputs_energy_flows_ad278; assert_in_epsilon(4.632393772644373, worksheet.outputs_energy_flows_ad278, 0.002); end
  def test_outputs_energy_flows_c280; assert_equal("FF.01", worksheet.outputs_energy_flows_c280); end
  def test_outputs_energy_flows_d280; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d280); end
  def test_outputs_energy_flows_e280; assert_equal("n/a", worksheet.outputs_energy_flows_e280); end
  def test_outputs_energy_flows_f280; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f280); end
  def test_outputs_energy_flows_i280; assert_equal("FF.01", worksheet.outputs_energy_flows_i280); end
  def test_outputs_energy_flows_j280; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j280); end
  def test_outputs_energy_flows_l280; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l280); end
  def test_outputs_energy_flows_m280; assert_equal("Timber", worksheet.outputs_energy_flows_m280); end
  def test_outputs_energy_flows_v280; assert_in_epsilon(7.157385604573962, worksheet.outputs_energy_flows_v280, 0.002); end
  def test_outputs_energy_flows_w280; assert_in_epsilon(7.820040511390022, worksheet.outputs_energy_flows_w280, 0.002); end
  def test_outputs_energy_flows_x280; assert_in_epsilon(8.608733981979526, worksheet.outputs_energy_flows_x280, 0.002); end
  def test_outputs_energy_flows_y280; assert_in_epsilon(9.290011174874872, worksheet.outputs_energy_flows_y280, 0.002); end
  def test_outputs_energy_flows_z280; assert_in_epsilon(9.940228492756043, worksheet.outputs_energy_flows_z280, 0.002); end
  def test_outputs_energy_flows_aa280; assert_in_epsilon(10.559082345308942, worksheet.outputs_energy_flows_aa280, 0.002); end
  def test_outputs_energy_flows_ab280; assert_in_epsilon(11.140183901385722, worksheet.outputs_energy_flows_ab280, 0.002); end
  def test_outputs_energy_flows_ac280; assert_in_epsilon(11.679993776748294, worksheet.outputs_energy_flows_ac280, 0.002); end
  def test_outputs_energy_flows_ad280; assert_in_epsilon(12.162610359825665, worksheet.outputs_energy_flows_ad280, 0.002); end
  def test_outputs_energy_flows_c282; assert_equal("FF.01", worksheet.outputs_energy_flows_c282); end
  def test_outputs_energy_flows_d282; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d282); end
  def test_outputs_energy_flows_e282; assert_equal("n/a", worksheet.outputs_energy_flows_e282); end
  def test_outputs_energy_flows_f282; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f282); end
  def test_outputs_energy_flows_i282; assert_equal("FF.01", worksheet.outputs_energy_flows_i282); end
  def test_outputs_energy_flows_j282; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j282); end
  def test_outputs_energy_flows_l282; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l282); end
  def test_outputs_energy_flows_m282; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m282); end
  def test_outputs_energy_flows_v282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v282||0), 0.002); end
  def test_outputs_energy_flows_w282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w282||0), 0.002); end
  def test_outputs_energy_flows_x282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x282||0), 0.002); end
  def test_outputs_energy_flows_y282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y282||0), 0.002); end
  def test_outputs_energy_flows_z282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z282||0), 0.002); end
  def test_outputs_energy_flows_aa282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa282||0), 0.002); end
  def test_outputs_energy_flows_ab282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab282||0), 0.002); end
  def test_outputs_energy_flows_ac282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac282||0), 0.002); end
  def test_outputs_energy_flows_ad282; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad282||0), 0.002); end
  def test_outputs_energy_flows_c284; assert_equal("FF.01", worksheet.outputs_energy_flows_c284); end
  def test_outputs_energy_flows_d284; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d284); end
  def test_outputs_energy_flows_e284; assert_equal("n/a", worksheet.outputs_energy_flows_e284); end
  def test_outputs_energy_flows_f284; assert_equal("International passenger", worksheet.outputs_energy_flows_f284); end
  def test_outputs_energy_flows_i284; assert_equal("FF.01", worksheet.outputs_energy_flows_i284); end
  def test_outputs_energy_flows_j284; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j284); end
  def test_outputs_energy_flows_l284; assert_equal("International", worksheet.outputs_energy_flows_l284); end
  def test_outputs_energy_flows_v284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v284||0), 0.002); end
  def test_outputs_energy_flows_w284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w284||0), 0.002); end
  def test_outputs_energy_flows_x284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x284||0), 0.002); end
  def test_outputs_energy_flows_y284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y284||0), 0.002); end
  def test_outputs_energy_flows_z284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z284||0), 0.002); end
  def test_outputs_energy_flows_aa284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa284||0), 0.002); end
  def test_outputs_energy_flows_ab284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab284||0), 0.002); end
  def test_outputs_energy_flows_ac284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac284||0), 0.002); end
  def test_outputs_energy_flows_ad284; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad284||0), 0.002); end
  def test_outputs_energy_flows_c286; assert_equal("FF.01", worksheet.outputs_energy_flows_c286); end
  def test_outputs_energy_flows_d286; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d286); end
  def test_outputs_energy_flows_e286; assert_equal("n/a", worksheet.outputs_energy_flows_e286); end
  def test_outputs_energy_flows_f286; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f286); end
  def test_outputs_energy_flows_i286; assert_equal("FF.01", worksheet.outputs_energy_flows_i286); end
  def test_outputs_energy_flows_j286; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j286); end
  def test_outputs_energy_flows_l286; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l286); end
  def test_outputs_energy_flows_v286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v286||0), 0.002); end
  def test_outputs_energy_flows_w286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w286||0), 0.002); end
  def test_outputs_energy_flows_x286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x286||0), 0.002); end
  def test_outputs_energy_flows_y286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y286||0), 0.002); end
  def test_outputs_energy_flows_z286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z286||0), 0.002); end
  def test_outputs_energy_flows_aa286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa286||0), 0.002); end
  def test_outputs_energy_flows_ab286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab286||0), 0.002); end
  def test_outputs_energy_flows_ac286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac286||0), 0.002); end
  def test_outputs_energy_flows_ad286; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad286||0), 0.002); end
  def test_outputs_energy_flows_c288; assert_equal("FF.01", worksheet.outputs_energy_flows_c288); end
  def test_outputs_energy_flows_d288; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d288); end
  def test_outputs_energy_flows_e288; assert_equal("n/a", worksheet.outputs_energy_flows_e288); end
  def test_outputs_energy_flows_f288; assert_equal("International freight", worksheet.outputs_energy_flows_f288); end
  def test_outputs_energy_flows_i288; assert_equal("FF.01", worksheet.outputs_energy_flows_i288); end
  def test_outputs_energy_flows_j288; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j288); end
  def test_outputs_energy_flows_l288; assert_equal("International freight", worksheet.outputs_energy_flows_l288); end
  def test_outputs_energy_flows_v288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v288||0), 0.002); end
  def test_outputs_energy_flows_w288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w288||0), 0.002); end
  def test_outputs_energy_flows_x288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x288||0), 0.002); end
  def test_outputs_energy_flows_y288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y288||0), 0.002); end
  def test_outputs_energy_flows_z288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z288||0), 0.002); end
  def test_outputs_energy_flows_aa288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa288||0), 0.002); end
  def test_outputs_energy_flows_ab288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab288||0), 0.002); end
  def test_outputs_energy_flows_ac288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac288||0), 0.002); end
  def test_outputs_energy_flows_ad288; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad288||0), 0.002); end
  def test_outputs_energy_flows_c290; assert_equal("FF.01", worksheet.outputs_energy_flows_c290); end
  def test_outputs_energy_flows_d290; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d290); end
  def test_outputs_energy_flows_e290; assert_equal("n/a", worksheet.outputs_energy_flows_e290); end
  def test_outputs_energy_flows_f290; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f290); end
  def test_outputs_energy_flows_i290; assert_equal("FF.01", worksheet.outputs_energy_flows_i290); end
  def test_outputs_energy_flows_j290; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j290); end
  def test_outputs_energy_flows_v290; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v290||0), 0.002); end
  def test_outputs_energy_flows_w290; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w290||0), 0.002); end
  def test_outputs_energy_flows_x290; assert_in_delta(7.2265615342360816e-09, worksheet.outputs_energy_flows_x290, 0.002); end
  def test_outputs_energy_flows_y290; assert_in_delta(1.3386288022305346e-08, worksheet.outputs_energy_flows_y290, 0.002); end
  def test_outputs_energy_flows_z290; assert_in_delta(2.1220663842599577e-08, worksheet.outputs_energy_flows_z290, 0.002); end
  def test_outputs_energy_flows_aa290; assert_in_delta(2.0388090674814267e-08, worksheet.outputs_energy_flows_aa290, 0.002); end
  def test_outputs_energy_flows_ab290; assert_in_delta(1.4807622517837991e-08, worksheet.outputs_energy_flows_ab290, 0.002); end
  def test_outputs_energy_flows_ac290; assert_in_delta(8.056069035257425e-09, worksheet.outputs_energy_flows_ac290, 0.002); end
  def test_outputs_energy_flows_ad290; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad290||0), 0.002); end
  def test_outputs_energy_flows_c292; assert_equal("FF.01", worksheet.outputs_energy_flows_c292); end
  def test_outputs_energy_flows_d292; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d292); end
  def test_outputs_energy_flows_e292; assert_equal("G.01", worksheet.outputs_energy_flows_e292); end
  def test_outputs_energy_flows_f292; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f292); end
  def test_outputs_energy_flows_g292; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g292); end
  def test_outputs_energy_flows_h292; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h292); end
  def test_outputs_energy_flows_i292; assert_equal("FF.01", worksheet.outputs_energy_flows_i292); end
  def test_outputs_energy_flows_j292; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j292); end
  def test_outputs_energy_flows_v292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v292||0), 0.002); end
  def test_outputs_energy_flows_w292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w292||0), 0.002); end
  def test_outputs_energy_flows_x292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x292||0), 0.002); end
  def test_outputs_energy_flows_y292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y292||0), 0.002); end
  def test_outputs_energy_flows_z292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z292||0), 0.002); end
  def test_outputs_energy_flows_aa292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa292||0), 0.002); end
  def test_outputs_energy_flows_ab292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab292||0), 0.002); end
  def test_outputs_energy_flows_ac292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac292||0), 0.002); end
  def test_outputs_energy_flows_ad292; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad292||0), 0.002); end
  def test_outputs_energy_flows_c294; assert_equal("FF.01", worksheet.outputs_energy_flows_c294); end
  def test_outputs_energy_flows_d294; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_d294); end
  def test_outputs_energy_flows_e294; assert_equal("n/a", worksheet.outputs_energy_flows_e294); end
  def test_outputs_energy_flows_f294; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f294); end
  def test_outputs_energy_flows_g294; assert_equal("n/a", worksheet.outputs_energy_flows_g294); end
  def test_outputs_energy_flows_h294; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h294); end
  def test_outputs_energy_flows_i294; assert_equal("FF.01", worksheet.outputs_energy_flows_i294); end
  def test_outputs_energy_flows_j294; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j294); end
  def test_outputs_energy_flows_v294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v294||0), 0.002); end
  def test_outputs_energy_flows_w294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w294||0), 0.002); end
  def test_outputs_energy_flows_x294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x294||0), 0.002); end
  def test_outputs_energy_flows_y294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y294||0), 0.002); end
  def test_outputs_energy_flows_z294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z294||0), 0.002); end
  def test_outputs_energy_flows_aa294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa294||0), 0.002); end
  def test_outputs_energy_flows_ab294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab294||0), 0.002); end
  def test_outputs_energy_flows_ac294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac294||0), 0.002); end
  def test_outputs_energy_flows_ad294; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad294||0), 0.002); end
  def test_outputs_energy_flows_c296; assert_equal("FF.02", worksheet.outputs_energy_flows_c296); end
  def test_outputs_energy_flows_d296; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d296); end
  def test_outputs_energy_flows_e296; assert_equal("n/a", worksheet.outputs_energy_flows_e296); end
  def test_outputs_energy_flows_f296; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f296); end
  def test_outputs_energy_flows_i296; assert_equal("FF.02", worksheet.outputs_energy_flows_i296); end
  def test_outputs_energy_flows_j296; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j296); end
  def test_outputs_energy_flows_k296; assert_equal("Global buildings", worksheet.outputs_energy_flows_k296); end
  def test_outputs_energy_flows_v296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v296||0), 0.002); end
  def test_outputs_energy_flows_w296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w296||0), 0.002); end
  def test_outputs_energy_flows_x296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x296||0), 0.002); end
  def test_outputs_energy_flows_y296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y296||0), 0.002); end
  def test_outputs_energy_flows_z296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z296||0), 0.002); end
  def test_outputs_energy_flows_aa296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa296||0), 0.002); end
  def test_outputs_energy_flows_ab296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab296||0), 0.002); end
  def test_outputs_energy_flows_ac296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac296||0), 0.002); end
  def test_outputs_energy_flows_ad296; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad296||0), 0.002); end
  def test_outputs_energy_flows_c298; assert_equal("FF.02", worksheet.outputs_energy_flows_c298); end
  def test_outputs_energy_flows_d298; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d298); end
  def test_outputs_energy_flows_e298; assert_equal("n/a", worksheet.outputs_energy_flows_e298); end
  def test_outputs_energy_flows_f298; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f298); end
  def test_outputs_energy_flows_i298; assert_equal("FF.02", worksheet.outputs_energy_flows_i298); end
  def test_outputs_energy_flows_j298; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j298); end
  def test_outputs_energy_flows_k298; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k298); end
  def test_outputs_energy_flows_l298; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l298); end
  def test_outputs_energy_flows_v298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v298||0), 0.002); end
  def test_outputs_energy_flows_w298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w298||0), 0.002); end
  def test_outputs_energy_flows_x298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x298||0), 0.002); end
  def test_outputs_energy_flows_y298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y298||0), 0.002); end
  def test_outputs_energy_flows_z298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z298||0), 0.002); end
  def test_outputs_energy_flows_aa298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa298||0), 0.002); end
  def test_outputs_energy_flows_ab298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab298||0), 0.002); end
  def test_outputs_energy_flows_ac298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac298||0), 0.002); end
  def test_outputs_energy_flows_ad298; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad298||0), 0.002); end
  def test_outputs_energy_flows_c300; assert_equal("FF.02", worksheet.outputs_energy_flows_c300); end
  def test_outputs_energy_flows_d300; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d300); end
  def test_outputs_energy_flows_e300; assert_equal("n/a", worksheet.outputs_energy_flows_e300); end
  def test_outputs_energy_flows_f300; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f300); end
  def test_outputs_energy_flows_i300; assert_equal("FF.02", worksheet.outputs_energy_flows_i300); end
  def test_outputs_energy_flows_j300; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j300); end
  def test_outputs_energy_flows_k300; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k300); end
  def test_outputs_energy_flows_l300; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l300); end
  def test_outputs_energy_flows_v300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v300||0), 0.002); end
  def test_outputs_energy_flows_w300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w300||0), 0.002); end
  def test_outputs_energy_flows_x300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x300||0), 0.002); end
  def test_outputs_energy_flows_y300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y300||0), 0.002); end
  def test_outputs_energy_flows_z300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z300||0), 0.002); end
  def test_outputs_energy_flows_aa300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa300||0), 0.002); end
  def test_outputs_energy_flows_ab300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab300||0), 0.002); end
  def test_outputs_energy_flows_ac300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac300||0), 0.002); end
  def test_outputs_energy_flows_ad300; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad300||0), 0.002); end
  def test_outputs_energy_flows_c302; assert_equal("FF.02", worksheet.outputs_energy_flows_c302); end
  def test_outputs_energy_flows_d302; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d302); end
  def test_outputs_energy_flows_e302; assert_equal("n/a", worksheet.outputs_energy_flows_e302); end
  def test_outputs_energy_flows_f302; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f302); end
  def test_outputs_energy_flows_i302; assert_equal("FF.02", worksheet.outputs_energy_flows_i302); end
  def test_outputs_energy_flows_j302; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j302); end
  def test_outputs_energy_flows_k302; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k302); end
  def test_outputs_energy_flows_l302; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l302); end
  def test_outputs_energy_flows_v302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v302||0), 0.002); end
  def test_outputs_energy_flows_w302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w302||0), 0.002); end
  def test_outputs_energy_flows_x302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x302||0), 0.002); end
  def test_outputs_energy_flows_y302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y302||0), 0.002); end
  def test_outputs_energy_flows_z302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z302||0), 0.002); end
  def test_outputs_energy_flows_aa302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa302||0), 0.002); end
  def test_outputs_energy_flows_ab302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab302||0), 0.002); end
  def test_outputs_energy_flows_ac302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac302||0), 0.002); end
  def test_outputs_energy_flows_ad302; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad302||0), 0.002); end
  def test_outputs_energy_flows_c304; assert_equal("FF.02", worksheet.outputs_energy_flows_c304); end
  def test_outputs_energy_flows_d304; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d304); end
  def test_outputs_energy_flows_e304; assert_equal("n/a", worksheet.outputs_energy_flows_e304); end
  def test_outputs_energy_flows_f304; assert_equal("Non domestic", worksheet.outputs_energy_flows_f304); end
  def test_outputs_energy_flows_i304; assert_equal("FF.02", worksheet.outputs_energy_flows_i304); end
  def test_outputs_energy_flows_j304; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j304); end
  def test_outputs_energy_flows_k304; assert_equal("Non-residential", worksheet.outputs_energy_flows_k304); end
  def test_outputs_energy_flows_v304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v304||0), 0.002); end
  def test_outputs_energy_flows_w304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w304||0), 0.002); end
  def test_outputs_energy_flows_x304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x304||0), 0.002); end
  def test_outputs_energy_flows_y304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y304||0), 0.002); end
  def test_outputs_energy_flows_z304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z304||0), 0.002); end
  def test_outputs_energy_flows_aa304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa304||0), 0.002); end
  def test_outputs_energy_flows_ab304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab304||0), 0.002); end
  def test_outputs_energy_flows_ac304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac304||0), 0.002); end
  def test_outputs_energy_flows_ad304; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad304||0), 0.002); end
  def test_outputs_energy_flows_c306; assert_equal("FF.02", worksheet.outputs_energy_flows_c306); end
  def test_outputs_energy_flows_d306; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d306); end
  def test_outputs_energy_flows_e306; assert_equal("n/a", worksheet.outputs_energy_flows_e306); end
  def test_outputs_energy_flows_f306; assert_equal("Steel", worksheet.outputs_energy_flows_f306); end
  def test_outputs_energy_flows_i306; assert_equal("FF.02", worksheet.outputs_energy_flows_i306); end
  def test_outputs_energy_flows_j306; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j306); end
  def test_outputs_energy_flows_v306; assert_in_delta(0.6053795859240001, worksheet.outputs_energy_flows_v306, 0.002); end
  def test_outputs_energy_flows_w306; assert_in_delta(0.6914686783900985, worksheet.outputs_energy_flows_w306, 0.002); end
  def test_outputs_energy_flows_x306; assert_in_delta(0.736149573576381, worksheet.outputs_energy_flows_x306, 0.002); end
  def test_outputs_energy_flows_y306; assert_in_delta(0.7756752738898929, worksheet.outputs_energy_flows_y306, 0.002); end
  def test_outputs_energy_flows_z306; assert_in_delta(0.8243530617931735, worksheet.outputs_energy_flows_z306, 0.002); end
  def test_outputs_energy_flows_aa306; assert_in_delta(0.8696410662818668, worksheet.outputs_energy_flows_aa306, 0.002); end
  def test_outputs_energy_flows_ab306; assert_in_delta(0.9249274743652716, worksheet.outputs_energy_flows_ab306, 0.002); end
  def test_outputs_energy_flows_ac306; assert_in_delta(0.9998431022281186, worksheet.outputs_energy_flows_ac306, 0.002); end
  def test_outputs_energy_flows_ad306; assert_in_epsilon(1.0309232227806904, worksheet.outputs_energy_flows_ad306, 0.002); end
  def test_outputs_energy_flows_c308; assert_equal("FF.02", worksheet.outputs_energy_flows_c308); end
  def test_outputs_energy_flows_d308; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d308); end
  def test_outputs_energy_flows_e308; assert_equal("n/a", worksheet.outputs_energy_flows_e308); end
  def test_outputs_energy_flows_f308; assert_equal("Aluminium", worksheet.outputs_energy_flows_f308); end
  def test_outputs_energy_flows_i308; assert_equal("FF.02", worksheet.outputs_energy_flows_i308); end
  def test_outputs_energy_flows_j308; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j308); end
  def test_outputs_energy_flows_v308; assert_in_delta(0.5405428608660057, worksheet.outputs_energy_flows_v308, 0.002); end
  def test_outputs_energy_flows_w308; assert_in_delta(0.6883862369379016, worksheet.outputs_energy_flows_w308, 0.002); end
  def test_outputs_energy_flows_x308; assert_in_delta(0.8046688883928609, worksheet.outputs_energy_flows_x308, 0.002); end
  def test_outputs_energy_flows_y308; assert_in_delta(0.9534848975482658, worksheet.outputs_energy_flows_y308, 0.002); end
  def test_outputs_energy_flows_z308; assert_in_epsilon(1.1174127010963897, worksheet.outputs_energy_flows_z308, 0.002); end
  def test_outputs_energy_flows_aa308; assert_in_epsilon(1.3003066721800616, worksheet.outputs_energy_flows_aa308, 0.002); end
  def test_outputs_energy_flows_ab308; assert_in_epsilon(1.5039472897634028, worksheet.outputs_energy_flows_ab308, 0.002); end
  def test_outputs_energy_flows_ac308; assert_in_epsilon(1.738542821876159, worksheet.outputs_energy_flows_ac308, 0.002); end
  def test_outputs_energy_flows_ad308; assert_in_epsilon(1.9979626398055486, worksheet.outputs_energy_flows_ad308, 0.002); end
  def test_outputs_energy_flows_c310; assert_equal("FF.02", worksheet.outputs_energy_flows_c310); end
  def test_outputs_energy_flows_d310; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d310); end
  def test_outputs_energy_flows_e310; assert_equal("n/a", worksheet.outputs_energy_flows_e310); end
  def test_outputs_energy_flows_f310; assert_equal("Cement", worksheet.outputs_energy_flows_f310); end
  def test_outputs_energy_flows_i310; assert_equal("FF.02", worksheet.outputs_energy_flows_i310); end
  def test_outputs_energy_flows_j310; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j310); end
  def test_outputs_energy_flows_v310; assert_in_epsilon(1.1385974140784139, worksheet.outputs_energy_flows_v310, 0.002); end
  def test_outputs_energy_flows_w310; assert_in_epsilon(1.2944260150920344, worksheet.outputs_energy_flows_w310, 0.002); end
  def test_outputs_energy_flows_x310; assert_in_epsilon(1.3625457536165317, worksheet.outputs_energy_flows_x310, 0.002); end
  def test_outputs_energy_flows_y310; assert_in_epsilon(1.434720832098131, worksheet.outputs_energy_flows_y310, 0.002); end
  def test_outputs_energy_flows_z310; assert_in_epsilon(1.5062578274815113, worksheet.outputs_energy_flows_z310, 0.002); end
  def test_outputs_energy_flows_aa310; assert_in_epsilon(1.579376445397547, worksheet.outputs_energy_flows_aa310, 0.002); end
  def test_outputs_energy_flows_ab310; assert_in_epsilon(1.653465993319957, worksheet.outputs_energy_flows_ab310, 0.002); end
  def test_outputs_energy_flows_ac310; assert_in_epsilon(1.729916412829694, worksheet.outputs_energy_flows_ac310, 0.002); end
  def test_outputs_energy_flows_ad310; assert_in_epsilon(1.805027965823333, worksheet.outputs_energy_flows_ad310, 0.002); end
  def test_outputs_energy_flows_c312; assert_equal("FF.02", worksheet.outputs_energy_flows_c312); end
  def test_outputs_energy_flows_d312; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d312); end
  def test_outputs_energy_flows_e312; assert_equal("n/a", worksheet.outputs_energy_flows_e312); end
  def test_outputs_energy_flows_f312; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f312); end
  def test_outputs_energy_flows_i312; assert_equal("FF.02", worksheet.outputs_energy_flows_i312); end
  def test_outputs_energy_flows_j312; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j312); end
  def test_outputs_energy_flows_v312; assert_in_delta(0.40529936521738275, worksheet.outputs_energy_flows_v312, 0.002); end
  def test_outputs_energy_flows_w312; assert_in_delta(0.41036410425314945, worksheet.outputs_energy_flows_w312, 0.002); end
  def test_outputs_energy_flows_x312; assert_in_delta(0.4305812928767621, worksheet.outputs_energy_flows_x312, 0.002); end
  def test_outputs_energy_flows_y312; assert_in_delta(0.4402818672585882, worksheet.outputs_energy_flows_y312, 0.002); end
  def test_outputs_energy_flows_z312; assert_in_delta(0.44762411621476944, worksheet.outputs_energy_flows_z312, 0.002); end
  def test_outputs_energy_flows_aa312; assert_in_delta(0.4528167191989318, worksheet.outputs_energy_flows_aa312, 0.002); end
  def test_outputs_energy_flows_ab312; assert_in_delta(0.4559380204389863, worksheet.outputs_energy_flows_ab312, 0.002); end
  def test_outputs_energy_flows_ac312; assert_in_delta(0.4569724912154991, worksheet.outputs_energy_flows_ac312, 0.002); end
  def test_outputs_energy_flows_ad312; assert_in_delta(0.4559398024886942, worksheet.outputs_energy_flows_ad312, 0.002); end
  def test_outputs_energy_flows_c314; assert_equal("FF.02", worksheet.outputs_energy_flows_c314); end
  def test_outputs_energy_flows_d314; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d314); end
  def test_outputs_energy_flows_e314; assert_equal("n/a", worksheet.outputs_energy_flows_e314); end
  def test_outputs_energy_flows_f314; assert_equal("Chemicals", worksheet.outputs_energy_flows_f314); end
  def test_outputs_energy_flows_i314; assert_equal("FF.02", worksheet.outputs_energy_flows_i314); end
  def test_outputs_energy_flows_j314; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j314); end
  def test_outputs_energy_flows_v314; assert_in_epsilon(19.210879294175705, worksheet.outputs_energy_flows_v314, 0.002); end
  def test_outputs_energy_flows_w314; assert_in_epsilon(23.472933432550064, worksheet.outputs_energy_flows_w314, 0.002); end
  def test_outputs_energy_flows_x314; assert_in_epsilon(25.028376441624058, worksheet.outputs_energy_flows_x314, 0.002); end
  def test_outputs_energy_flows_y314; assert_in_epsilon(26.776513450753516, worksheet.outputs_energy_flows_y314, 0.002); end
  def test_outputs_energy_flows_z314; assert_in_epsilon(28.688159596302913, worksheet.outputs_energy_flows_z314, 0.002); end
  def test_outputs_energy_flows_aa314; assert_in_epsilon(30.512595661131886, worksheet.outputs_energy_flows_aa314, 0.002); end
  def test_outputs_energy_flows_ab314; assert_in_epsilon(32.58446849363923, worksheet.outputs_energy_flows_ab314, 0.002); end
  def test_outputs_energy_flows_ac314; assert_in_epsilon(34.9824034654881, worksheet.outputs_energy_flows_ac314, 0.002); end
  def test_outputs_energy_flows_ad314; assert_in_epsilon(36.83779739130501, worksheet.outputs_energy_flows_ad314, 0.002); end
  def test_outputs_energy_flows_c316; assert_equal("FF.02", worksheet.outputs_energy_flows_c316); end
  def test_outputs_energy_flows_d316; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d316); end
  def test_outputs_energy_flows_e316; assert_equal("n/a", worksheet.outputs_energy_flows_e316); end
  def test_outputs_energy_flows_f316; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f316); end
  def test_outputs_energy_flows_i316; assert_equal("FF.02", worksheet.outputs_energy_flows_i316); end
  def test_outputs_energy_flows_j316; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j316); end
  def test_outputs_energy_flows_l316; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l316); end
  def test_outputs_energy_flows_m316; assert_equal("Timber", worksheet.outputs_energy_flows_m316); end
  def test_outputs_energy_flows_v316; assert_in_epsilon(8.9088083790622, worksheet.outputs_energy_flows_v316, 0.002); end
  def test_outputs_energy_flows_w316; assert_in_epsilon(9.585125896501022, worksheet.outputs_energy_flows_w316, 0.002); end
  def test_outputs_energy_flows_x316; assert_in_epsilon(10.834893106284111, worksheet.outputs_energy_flows_x316, 0.002); end
  def test_outputs_energy_flows_y316; assert_in_epsilon(11.837096576723036, worksheet.outputs_energy_flows_y316, 0.002); end
  def test_outputs_energy_flows_z316; assert_in_epsilon(12.804723210378098, worksheet.outputs_energy_flows_z316, 0.002); end
  def test_outputs_energy_flows_aa316; assert_in_epsilon(13.732709338397498, worksheet.outputs_energy_flows_aa316, 0.002); end
  def test_outputs_energy_flows_ab316; assert_in_epsilon(14.612373592932776, worksheet.outputs_energy_flows_ab316, 0.002); end
  def test_outputs_energy_flows_ac316; assert_in_epsilon(15.433565338823152, worksheet.outputs_energy_flows_ac316, 0.002); end
  def test_outputs_energy_flows_ad316; assert_in_epsilon(16.184157512434897, worksheet.outputs_energy_flows_ad316, 0.002); end
  def test_outputs_energy_flows_c318; assert_equal("FF.02", worksheet.outputs_energy_flows_c318); end
  def test_outputs_energy_flows_d318; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d318); end
  def test_outputs_energy_flows_e318; assert_equal("n/a", worksheet.outputs_energy_flows_e318); end
  def test_outputs_energy_flows_f318; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f318); end
  def test_outputs_energy_flows_i318; assert_equal("FF.02", worksheet.outputs_energy_flows_i318); end
  def test_outputs_energy_flows_j318; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j318); end
  def test_outputs_energy_flows_l318; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l318); end
  def test_outputs_energy_flows_m318; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m318); end
  def test_outputs_energy_flows_v318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v318||0), 0.002); end
  def test_outputs_energy_flows_w318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w318||0), 0.002); end
  def test_outputs_energy_flows_x318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x318||0), 0.002); end
  def test_outputs_energy_flows_y318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y318||0), 0.002); end
  def test_outputs_energy_flows_z318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z318||0), 0.002); end
  def test_outputs_energy_flows_aa318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa318||0), 0.002); end
  def test_outputs_energy_flows_ab318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab318||0), 0.002); end
  def test_outputs_energy_flows_ac318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac318||0), 0.002); end
  def test_outputs_energy_flows_ad318; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad318||0), 0.002); end
  def test_outputs_energy_flows_c320; assert_equal("FF.02", worksheet.outputs_energy_flows_c320); end
  def test_outputs_energy_flows_d320; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d320); end
  def test_outputs_energy_flows_e320; assert_equal("n/a", worksheet.outputs_energy_flows_e320); end
  def test_outputs_energy_flows_f320; assert_equal("International passenger", worksheet.outputs_energy_flows_f320); end
  def test_outputs_energy_flows_i320; assert_equal("FF.02", worksheet.outputs_energy_flows_i320); end
  def test_outputs_energy_flows_j320; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j320); end
  def test_outputs_energy_flows_l320; assert_equal("International", worksheet.outputs_energy_flows_l320); end
  def test_outputs_energy_flows_v320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v320||0), 0.002); end
  def test_outputs_energy_flows_w320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w320||0), 0.002); end
  def test_outputs_energy_flows_x320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x320||0), 0.002); end
  def test_outputs_energy_flows_y320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y320||0), 0.002); end
  def test_outputs_energy_flows_z320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z320||0), 0.002); end
  def test_outputs_energy_flows_aa320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa320||0), 0.002); end
  def test_outputs_energy_flows_ab320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab320||0), 0.002); end
  def test_outputs_energy_flows_ac320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac320||0), 0.002); end
  def test_outputs_energy_flows_ad320; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad320||0), 0.002); end
  def test_outputs_energy_flows_c322; assert_equal("FF.02", worksheet.outputs_energy_flows_c322); end
  def test_outputs_energy_flows_d322; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d322); end
  def test_outputs_energy_flows_e322; assert_equal("n/a", worksheet.outputs_energy_flows_e322); end
  def test_outputs_energy_flows_f322; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f322); end
  def test_outputs_energy_flows_i322; assert_equal("FF.02", worksheet.outputs_energy_flows_i322); end
  def test_outputs_energy_flows_j322; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j322); end
  def test_outputs_energy_flows_l322; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l322); end
  def test_outputs_energy_flows_v322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v322||0), 0.002); end
  def test_outputs_energy_flows_w322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w322||0), 0.002); end
  def test_outputs_energy_flows_x322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x322||0), 0.002); end
  def test_outputs_energy_flows_y322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y322||0), 0.002); end
  def test_outputs_energy_flows_z322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z322||0), 0.002); end
  def test_outputs_energy_flows_aa322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa322||0), 0.002); end
  def test_outputs_energy_flows_ab322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab322||0), 0.002); end
  def test_outputs_energy_flows_ac322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac322||0), 0.002); end
  def test_outputs_energy_flows_ad322; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad322||0), 0.002); end
  def test_outputs_energy_flows_c324; assert_equal("FF.02", worksheet.outputs_energy_flows_c324); end
  def test_outputs_energy_flows_d324; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d324); end
  def test_outputs_energy_flows_e324; assert_equal("n/a", worksheet.outputs_energy_flows_e324); end
  def test_outputs_energy_flows_f324; assert_equal("International freight", worksheet.outputs_energy_flows_f324); end
  def test_outputs_energy_flows_i324; assert_equal("FF.02", worksheet.outputs_energy_flows_i324); end
  def test_outputs_energy_flows_j324; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j324); end
  def test_outputs_energy_flows_l324; assert_equal("International freight", worksheet.outputs_energy_flows_l324); end
  def test_outputs_energy_flows_v324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v324||0), 0.002); end
  def test_outputs_energy_flows_w324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w324||0), 0.002); end
  def test_outputs_energy_flows_x324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x324||0), 0.002); end
  def test_outputs_energy_flows_y324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y324||0), 0.002); end
  def test_outputs_energy_flows_z324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z324||0), 0.002); end
  def test_outputs_energy_flows_aa324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa324||0), 0.002); end
  def test_outputs_energy_flows_ab324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab324||0), 0.002); end
  def test_outputs_energy_flows_ac324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac324||0), 0.002); end
  def test_outputs_energy_flows_ad324; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad324||0), 0.002); end
  def test_outputs_energy_flows_c326; assert_equal("FF.02", worksheet.outputs_energy_flows_c326); end
  def test_outputs_energy_flows_d326; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d326); end
  def test_outputs_energy_flows_e326; assert_equal("n/a", worksheet.outputs_energy_flows_e326); end
  def test_outputs_energy_flows_f326; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f326); end
  def test_outputs_energy_flows_i326; assert_equal("FF.02", worksheet.outputs_energy_flows_i326); end
  def test_outputs_energy_flows_j326; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j326); end
  def test_outputs_energy_flows_v326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v326||0), 0.002); end
  def test_outputs_energy_flows_w326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w326||0), 0.002); end
  def test_outputs_energy_flows_x326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x326||0), 0.002); end
  def test_outputs_energy_flows_y326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y326||0), 0.002); end
  def test_outputs_energy_flows_z326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z326||0), 0.002); end
  def test_outputs_energy_flows_aa326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa326||0), 0.002); end
  def test_outputs_energy_flows_ab326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab326||0), 0.002); end
  def test_outputs_energy_flows_ac326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac326||0), 0.002); end
  def test_outputs_energy_flows_ad326; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad326||0), 0.002); end
  def test_outputs_energy_flows_c328; assert_equal("FF.02", worksheet.outputs_energy_flows_c328); end
  def test_outputs_energy_flows_d328; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d328); end
  def test_outputs_energy_flows_e328; assert_equal("G.01", worksheet.outputs_energy_flows_e328); end
  def test_outputs_energy_flows_f328; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f328); end
  def test_outputs_energy_flows_g328; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g328); end
  def test_outputs_energy_flows_h328; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h328); end
  def test_outputs_energy_flows_i328; assert_equal("FF.02", worksheet.outputs_energy_flows_i328); end
  def test_outputs_energy_flows_j328; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j328); end
  def test_outputs_energy_flows_v328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v328||0), 0.002); end
  def test_outputs_energy_flows_w328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w328||0), 0.002); end
  def test_outputs_energy_flows_x328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x328||0), 0.002); end
  def test_outputs_energy_flows_y328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y328||0), 0.002); end
  def test_outputs_energy_flows_z328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z328||0), 0.002); end
  def test_outputs_energy_flows_aa328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa328||0), 0.002); end
  def test_outputs_energy_flows_ab328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab328||0), 0.002); end
  def test_outputs_energy_flows_ac328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac328||0), 0.002); end
  def test_outputs_energy_flows_ad328; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad328||0), 0.002); end
  def test_outputs_energy_flows_c330; assert_equal("FF.02", worksheet.outputs_energy_flows_c330); end
  def test_outputs_energy_flows_d330; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_d330); end
  def test_outputs_energy_flows_e330; assert_equal("n/a", worksheet.outputs_energy_flows_e330); end
  def test_outputs_energy_flows_f330; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f330); end
  def test_outputs_energy_flows_g330; assert_equal("n/a", worksheet.outputs_energy_flows_g330); end
  def test_outputs_energy_flows_h330; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h330); end
  def test_outputs_energy_flows_i330; assert_equal("FF.02", worksheet.outputs_energy_flows_i330); end
  def test_outputs_energy_flows_j330; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_j330); end
  def test_outputs_energy_flows_v330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v330||0), 0.002); end
  def test_outputs_energy_flows_w330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w330||0), 0.002); end
  def test_outputs_energy_flows_x330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x330||0), 0.002); end
  def test_outputs_energy_flows_y330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y330||0), 0.002); end
  def test_outputs_energy_flows_z330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z330||0), 0.002); end
  def test_outputs_energy_flows_aa330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa330||0), 0.002); end
  def test_outputs_energy_flows_ab330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab330||0), 0.002); end
  def test_outputs_energy_flows_ac330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac330||0), 0.002); end
  def test_outputs_energy_flows_ad330; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad330||0), 0.002); end
  def test_outputs_energy_flows_c332; assert_equal("FF.03", worksheet.outputs_energy_flows_c332); end
  def test_outputs_energy_flows_d332; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d332); end
  def test_outputs_energy_flows_e332; assert_equal("n/a", worksheet.outputs_energy_flows_e332); end
  def test_outputs_energy_flows_f332; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f332); end
  def test_outputs_energy_flows_i332; assert_equal("FF.03", worksheet.outputs_energy_flows_i332); end
  def test_outputs_energy_flows_j332; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j332); end
  def test_outputs_energy_flows_k332; assert_equal("Global buildings", worksheet.outputs_energy_flows_k332); end
  def test_outputs_energy_flows_v332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v332||0), 0.002); end
  def test_outputs_energy_flows_w332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w332||0), 0.002); end
  def test_outputs_energy_flows_x332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x332||0), 0.002); end
  def test_outputs_energy_flows_y332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y332||0), 0.002); end
  def test_outputs_energy_flows_z332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z332||0), 0.002); end
  def test_outputs_energy_flows_aa332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa332||0), 0.002); end
  def test_outputs_energy_flows_ab332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab332||0), 0.002); end
  def test_outputs_energy_flows_ac332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac332||0), 0.002); end
  def test_outputs_energy_flows_ad332; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad332||0), 0.002); end
  def test_outputs_energy_flows_c334; assert_equal("FF.03", worksheet.outputs_energy_flows_c334); end
  def test_outputs_energy_flows_d334; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d334); end
  def test_outputs_energy_flows_e334; assert_equal("n/a", worksheet.outputs_energy_flows_e334); end
  def test_outputs_energy_flows_f334; assert_equal("Domestic lighting", worksheet.outputs_energy_flows_f334); end
  def test_outputs_energy_flows_i334; assert_equal("FF.03", worksheet.outputs_energy_flows_i334); end
  def test_outputs_energy_flows_j334; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j334); end
  def test_outputs_energy_flows_k334; assert_equal("Urban lighting", worksheet.outputs_energy_flows_k334); end
  def test_outputs_energy_flows_l334; assert_equal("Rural lighting", worksheet.outputs_energy_flows_l334); end
  def test_outputs_energy_flows_v334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v334||0), 0.002); end
  def test_outputs_energy_flows_w334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w334||0), 0.002); end
  def test_outputs_energy_flows_x334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x334||0), 0.002); end
  def test_outputs_energy_flows_y334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y334||0), 0.002); end
  def test_outputs_energy_flows_z334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z334||0), 0.002); end
  def test_outputs_energy_flows_aa334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa334||0), 0.002); end
  def test_outputs_energy_flows_ab334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab334||0), 0.002); end
  def test_outputs_energy_flows_ac334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac334||0), 0.002); end
  def test_outputs_energy_flows_ad334; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad334||0), 0.002); end
  def test_outputs_energy_flows_c336; assert_equal("FF.03", worksheet.outputs_energy_flows_c336); end
  def test_outputs_energy_flows_d336; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d336); end
  def test_outputs_energy_flows_e336; assert_equal("n/a", worksheet.outputs_energy_flows_e336); end
  def test_outputs_energy_flows_f336; assert_equal("Domestic appliances", worksheet.outputs_energy_flows_f336); end
  def test_outputs_energy_flows_i336; assert_equal("FF.03", worksheet.outputs_energy_flows_i336); end
  def test_outputs_energy_flows_j336; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j336); end
  def test_outputs_energy_flows_k336; assert_equal("Urban appliances", worksheet.outputs_energy_flows_k336); end
  def test_outputs_energy_flows_l336; assert_equal("Rural appliances", worksheet.outputs_energy_flows_l336); end
  def test_outputs_energy_flows_v336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v336||0), 0.002); end
  def test_outputs_energy_flows_w336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w336||0), 0.002); end
  def test_outputs_energy_flows_x336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x336||0), 0.002); end
  def test_outputs_energy_flows_y336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y336||0), 0.002); end
  def test_outputs_energy_flows_z336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z336||0), 0.002); end
  def test_outputs_energy_flows_aa336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa336||0), 0.002); end
  def test_outputs_energy_flows_ab336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab336||0), 0.002); end
  def test_outputs_energy_flows_ac336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac336||0), 0.002); end
  def test_outputs_energy_flows_ad336; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad336||0), 0.002); end
  def test_outputs_energy_flows_c338; assert_equal("FF.03", worksheet.outputs_energy_flows_c338); end
  def test_outputs_energy_flows_d338; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d338); end
  def test_outputs_energy_flows_e338; assert_equal("n/a", worksheet.outputs_energy_flows_e338); end
  def test_outputs_energy_flows_f338; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f338); end
  def test_outputs_energy_flows_i338; assert_equal("FF.03", worksheet.outputs_energy_flows_i338); end
  def test_outputs_energy_flows_j338; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j338); end
  def test_outputs_energy_flows_k338; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k338); end
  def test_outputs_energy_flows_l338; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l338); end
  def test_outputs_energy_flows_v338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v338||0), 0.002); end
  def test_outputs_energy_flows_w338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w338||0), 0.002); end
  def test_outputs_energy_flows_x338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x338||0), 0.002); end
  def test_outputs_energy_flows_y338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y338||0), 0.002); end
  def test_outputs_energy_flows_z338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z338||0), 0.002); end
  def test_outputs_energy_flows_aa338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa338||0), 0.002); end
  def test_outputs_energy_flows_ab338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab338||0), 0.002); end
  def test_outputs_energy_flows_ac338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac338||0), 0.002); end
  def test_outputs_energy_flows_ad338; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad338||0), 0.002); end
  def test_outputs_energy_flows_c340; assert_equal("FF.03", worksheet.outputs_energy_flows_c340); end
  def test_outputs_energy_flows_d340; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d340); end
  def test_outputs_energy_flows_e340; assert_equal("n/a", worksheet.outputs_energy_flows_e340); end
  def test_outputs_energy_flows_f340; assert_equal("Non domestic", worksheet.outputs_energy_flows_f340); end
  def test_outputs_energy_flows_i340; assert_equal("FF.03", worksheet.outputs_energy_flows_i340); end
  def test_outputs_energy_flows_j340; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j340); end
  def test_outputs_energy_flows_k340; assert_equal("Non-residential", worksheet.outputs_energy_flows_k340); end
  def test_outputs_energy_flows_v340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v340||0), 0.002); end
  def test_outputs_energy_flows_w340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w340||0), 0.002); end
  def test_outputs_energy_flows_x340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x340||0), 0.002); end
  def test_outputs_energy_flows_y340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y340||0), 0.002); end
  def test_outputs_energy_flows_z340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z340||0), 0.002); end
  def test_outputs_energy_flows_aa340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa340||0), 0.002); end
  def test_outputs_energy_flows_ab340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab340||0), 0.002); end
  def test_outputs_energy_flows_ac340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac340||0), 0.002); end
  def test_outputs_energy_flows_ad340; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad340||0), 0.002); end
  def test_outputs_energy_flows_c342; assert_equal("FF.03", worksheet.outputs_energy_flows_c342); end
  def test_outputs_energy_flows_d342; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d342); end
  def test_outputs_energy_flows_e342; assert_equal("n/a", worksheet.outputs_energy_flows_e342); end
  def test_outputs_energy_flows_f342; assert_equal("Steel", worksheet.outputs_energy_flows_f342); end
  def test_outputs_energy_flows_i342; assert_equal("FF.03", worksheet.outputs_energy_flows_i342); end
  def test_outputs_energy_flows_j342; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j342); end
  def test_outputs_energy_flows_v342; assert_in_epsilon(1.461123803326635, worksheet.outputs_energy_flows_v342, 0.002); end
  def test_outputs_energy_flows_w342; assert_in_epsilon(1.8050492653001668, worksheet.outputs_energy_flows_w342, 0.002); end
  def test_outputs_energy_flows_x342; assert_in_epsilon(1.863603322916251, worksheet.outputs_energy_flows_x342, 0.002); end
  def test_outputs_energy_flows_y342; assert_in_epsilon(2.014369982147128, worksheet.outputs_energy_flows_y342, 0.002); end
  def test_outputs_energy_flows_z342; assert_in_epsilon(2.1945871170527713, worksheet.outputs_energy_flows_z342, 0.002); end
  def test_outputs_energy_flows_aa342; assert_in_epsilon(2.3718460850262693, worksheet.outputs_energy_flows_aa342, 0.002); end
  def test_outputs_energy_flows_ab342; assert_in_epsilon(2.582881930412921, worksheet.outputs_energy_flows_ab342, 0.002); end
  def test_outputs_energy_flows_ac342; assert_in_epsilon(2.8571850895216784, worksheet.outputs_energy_flows_ac342, 0.002); end
  def test_outputs_energy_flows_ad342; assert_in_epsilon(3.0131196767007173, worksheet.outputs_energy_flows_ad342, 0.002); end
  def test_outputs_energy_flows_c344; assert_equal("FF.03", worksheet.outputs_energy_flows_c344); end
  def test_outputs_energy_flows_d344; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d344); end
  def test_outputs_energy_flows_e344; assert_equal("n/a", worksheet.outputs_energy_flows_e344); end
  def test_outputs_energy_flows_f344; assert_equal("Aluminium", worksheet.outputs_energy_flows_f344); end
  def test_outputs_energy_flows_i344; assert_equal("FF.03", worksheet.outputs_energy_flows_i344); end
  def test_outputs_energy_flows_j344; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j344); end
  def test_outputs_energy_flows_v344; assert_in_delta(0.6799566079776811, worksheet.outputs_energy_flows_v344, 0.002); end
  def test_outputs_energy_flows_w344; assert_in_delta(0.8216611574443293, worksheet.outputs_energy_flows_w344, 0.002); end
  def test_outputs_energy_flows_x344; assert_in_delta(0.8958583350684984, worksheet.outputs_energy_flows_x344, 0.002); end
  def test_outputs_energy_flows_y344; assert_in_epsilon(1.0033920495422384, worksheet.outputs_energy_flows_y344, 0.002); end
  def test_outputs_energy_flows_z344; assert_in_epsilon(1.1186222846528997, worksheet.outputs_energy_flows_z344, 0.002); end
  def test_outputs_energy_flows_aa344; assert_in_epsilon(1.2449629619512907, worksheet.outputs_energy_flows_aa344, 0.002); end
  def test_outputs_energy_flows_ab344; assert_in_epsilon(1.3834328082675031, worksheet.outputs_energy_flows_ab344, 0.002); end
  def test_outputs_energy_flows_ac344; assert_in_epsilon(1.5424720259395064, worksheet.outputs_energy_flows_ac344, 0.002); end
  def test_outputs_energy_flows_ad344; assert_in_epsilon(1.715491499435693, worksheet.outputs_energy_flows_ad344, 0.002); end
  def test_outputs_energy_flows_c346; assert_equal("FF.03", worksheet.outputs_energy_flows_c346); end
  def test_outputs_energy_flows_d346; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d346); end
  def test_outputs_energy_flows_e346; assert_equal("n/a", worksheet.outputs_energy_flows_e346); end
  def test_outputs_energy_flows_f346; assert_equal("Cement", worksheet.outputs_energy_flows_f346); end
  def test_outputs_energy_flows_i346; assert_equal("FF.03", worksheet.outputs_energy_flows_i346); end
  def test_outputs_energy_flows_j346; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j346); end
  def test_outputs_energy_flows_v346; assert_in_delta(0.8284396320493046, worksheet.outputs_energy_flows_v346, 0.002); end
  def test_outputs_energy_flows_w346; assert_in_delta(0.9418199957233002, worksheet.outputs_energy_flows_w346, 0.002); end
  def test_outputs_energy_flows_x346; assert_in_delta(0.9913836873501667, worksheet.outputs_energy_flows_x346, 0.002); end
  def test_outputs_energy_flows_y346; assert_in_epsilon(1.0438980306299837, worksheet.outputs_energy_flows_y346, 0.002); end
  def test_outputs_energy_flows_z346; assert_in_epsilon(1.0959481068031225, worksheet.outputs_energy_flows_z346, 0.002); end
  def test_outputs_energy_flows_aa346; assert_in_epsilon(1.149148966187949, worksheet.outputs_energy_flows_aa346, 0.002); end
  def test_outputs_energy_flows_ab346; assert_in_epsilon(1.2030562709653994, worksheet.outputs_energy_flows_ab346, 0.002); end
  def test_outputs_energy_flows_ac346; assert_in_epsilon(1.2586813379342408, worksheet.outputs_energy_flows_ac346, 0.002); end
  def test_outputs_energy_flows_ad346; assert_in_epsilon(1.3133322501489568, worksheet.outputs_energy_flows_ad346, 0.002); end
  def test_outputs_energy_flows_c348; assert_equal("FF.03", worksheet.outputs_energy_flows_c348); end
  def test_outputs_energy_flows_d348; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d348); end
  def test_outputs_energy_flows_e348; assert_equal("n/a", worksheet.outputs_energy_flows_e348); end
  def test_outputs_energy_flows_f348; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f348); end
  def test_outputs_energy_flows_i348; assert_equal("FF.03", worksheet.outputs_energy_flows_i348); end
  def test_outputs_energy_flows_j348; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j348); end
  def test_outputs_energy_flows_v348; assert_in_epsilon(1.0822193748413809, worksheet.outputs_energy_flows_v348, 0.002); end
  def test_outputs_energy_flows_w348; assert_in_epsilon(1.1058157614931468, worksheet.outputs_energy_flows_w348, 0.002); end
  def test_outputs_energy_flows_x348; assert_in_epsilon(1.1708954442146826, worksheet.outputs_energy_flows_x348, 0.002); end
  def test_outputs_energy_flows_y348; assert_in_epsilon(1.2093041838796004, worksheet.outputs_energy_flows_y348, 0.002); end
  def test_outputs_energy_flows_z348; assert_in_epsilon(1.2417040704087587, worksheet.outputs_energy_flows_z348, 0.002); end
  def test_outputs_energy_flows_aa348; assert_in_epsilon(1.2684864846192008, worksheet.outputs_energy_flows_aa348, 0.002); end
  def test_outputs_energy_flows_ab348; assert_in_epsilon(1.2896968609098671, worksheet.outputs_energy_flows_ab348, 0.002); end
  def test_outputs_energy_flows_ac348; assert_in_epsilon(1.305121014838671, worksheet.outputs_energy_flows_ac348, 0.002); end
  def test_outputs_energy_flows_ad348; assert_in_epsilon(1.3146444725020374, worksheet.outputs_energy_flows_ad348, 0.002); end
  def test_outputs_energy_flows_c350; assert_equal("FF.03", worksheet.outputs_energy_flows_c350); end
  def test_outputs_energy_flows_d350; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d350); end
  def test_outputs_energy_flows_e350; assert_equal("n/a", worksheet.outputs_energy_flows_e350); end
  def test_outputs_energy_flows_f350; assert_equal("Chemicals", worksheet.outputs_energy_flows_f350); end
  def test_outputs_energy_flows_i350; assert_equal("FF.03", worksheet.outputs_energy_flows_i350); end
  def test_outputs_energy_flows_j350; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j350); end
  def test_outputs_energy_flows_v350; assert_in_epsilon(11.453709993252762, worksheet.outputs_energy_flows_v350, 0.002); end
  def test_outputs_energy_flows_w350; assert_in_epsilon(12.976934584759432, worksheet.outputs_energy_flows_w350, 0.002); end
  def test_outputs_energy_flows_x350; assert_in_epsilon(14.001458897924241, worksheet.outputs_energy_flows_x350, 0.002); end
  def test_outputs_energy_flows_y350; assert_in_epsilon(14.890965249982646, worksheet.outputs_energy_flows_y350, 0.002); end
  def test_outputs_energy_flows_z350; assert_in_epsilon(15.81324585366485, worksheet.outputs_energy_flows_z350, 0.002); end
  def test_outputs_energy_flows_aa350; assert_in_epsilon(16.748346244583004, worksheet.outputs_energy_flows_aa350, 0.002); end
  def test_outputs_energy_flows_ab350; assert_in_epsilon(17.72064521891055, worksheet.outputs_energy_flows_ab350, 0.002); end
  def test_outputs_energy_flows_ac350; assert_in_epsilon(18.578109718445447, worksheet.outputs_energy_flows_ac350, 0.002); end
  def test_outputs_energy_flows_ad350; assert_in_epsilon(19.413586610755083, worksheet.outputs_energy_flows_ad350, 0.002); end
  def test_outputs_energy_flows_c352; assert_equal("FF.03", worksheet.outputs_energy_flows_c352); end
  def test_outputs_energy_flows_d352; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d352); end
  def test_outputs_energy_flows_e352; assert_equal("n/a", worksheet.outputs_energy_flows_e352); end
  def test_outputs_energy_flows_f352; assert_equal("Other manufacturing", worksheet.outputs_energy_flows_f352); end
  def test_outputs_energy_flows_i352; assert_equal("FF.03", worksheet.outputs_energy_flows_i352); end
  def test_outputs_energy_flows_j352; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j352); end
  def test_outputs_energy_flows_l352; assert_equal("Global Other industries", worksheet.outputs_energy_flows_l352); end
  def test_outputs_energy_flows_m352; assert_equal("Timber", worksheet.outputs_energy_flows_m352); end
  def test_outputs_energy_flows_v352; assert_in_epsilon(11.931004722655661, worksheet.outputs_energy_flows_v352, 0.002); end
  def test_outputs_energy_flows_w352; assert_in_epsilon(12.977604715693182, worksheet.outputs_energy_flows_w352, 0.002); end
  def test_outputs_energy_flows_x352; assert_in_epsilon(14.678197416883444, worksheet.outputs_energy_flows_x352, 0.002); end
  def test_outputs_energy_flows_y352; assert_in_epsilon(16.112497709363055, worksheet.outputs_energy_flows_y352, 0.002); end
  def test_outputs_energy_flows_z352; assert_in_epsilon(17.517717521978536, worksheet.outputs_energy_flows_z352, 0.002); end
  def test_outputs_energy_flows_aa352; assert_in_epsilon(18.887374250463804, worksheet.outputs_energy_flows_aa352, 0.002); end
  def test_outputs_energy_flows_ab352; assert_in_epsilon(20.208358656374333, worksheet.outputs_energy_flows_ab352, 0.002); end
  def test_outputs_energy_flows_ac352; assert_in_epsilon(21.466976091362735, worksheet.outputs_energy_flows_ac352, 0.002); end
  def test_outputs_energy_flows_ad352; assert_in_epsilon(22.641367738866258, worksheet.outputs_energy_flows_ad352, 0.002); end
  def test_outputs_energy_flows_c354; assert_equal("FF.03", worksheet.outputs_energy_flows_c354); end
  def test_outputs_energy_flows_d354; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d354); end
  def test_outputs_energy_flows_e354; assert_equal("n/a", worksheet.outputs_energy_flows_e354); end
  def test_outputs_energy_flows_f354; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f354); end
  def test_outputs_energy_flows_i354; assert_equal("FF.03", worksheet.outputs_energy_flows_i354); end
  def test_outputs_energy_flows_j354; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j354); end
  def test_outputs_energy_flows_l354; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l354); end
  def test_outputs_energy_flows_m354; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m354); end
  def test_outputs_energy_flows_v354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v354||0), 0.002); end
  def test_outputs_energy_flows_w354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w354||0), 0.002); end
  def test_outputs_energy_flows_x354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x354||0), 0.002); end
  def test_outputs_energy_flows_y354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y354||0), 0.002); end
  def test_outputs_energy_flows_z354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z354||0), 0.002); end
  def test_outputs_energy_flows_aa354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa354||0), 0.002); end
  def test_outputs_energy_flows_ab354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab354||0), 0.002); end
  def test_outputs_energy_flows_ac354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac354||0), 0.002); end
  def test_outputs_energy_flows_ad354; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad354||0), 0.002); end
  def test_outputs_energy_flows_c356; assert_equal("FF.03", worksheet.outputs_energy_flows_c356); end
  def test_outputs_energy_flows_d356; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d356); end
  def test_outputs_energy_flows_e356; assert_equal("n/a", worksheet.outputs_energy_flows_e356); end
  def test_outputs_energy_flows_f356; assert_equal("International passenger", worksheet.outputs_energy_flows_f356); end
  def test_outputs_energy_flows_i356; assert_equal("FF.03", worksheet.outputs_energy_flows_i356); end
  def test_outputs_energy_flows_j356; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j356); end
  def test_outputs_energy_flows_l356; assert_equal("International", worksheet.outputs_energy_flows_l356); end
  def test_outputs_energy_flows_v356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v356||0), 0.002); end
  def test_outputs_energy_flows_w356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w356||0), 0.002); end
  def test_outputs_energy_flows_x356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x356||0), 0.002); end
  def test_outputs_energy_flows_y356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y356||0), 0.002); end
  def test_outputs_energy_flows_z356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z356||0), 0.002); end
  def test_outputs_energy_flows_aa356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa356||0), 0.002); end
  def test_outputs_energy_flows_ab356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab356||0), 0.002); end
  def test_outputs_energy_flows_ac356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac356||0), 0.002); end
  def test_outputs_energy_flows_ad356; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad356||0), 0.002); end
  def test_outputs_energy_flows_c358; assert_equal("FF.03", worksheet.outputs_energy_flows_c358); end
  def test_outputs_energy_flows_d358; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d358); end
  def test_outputs_energy_flows_e358; assert_equal("n/a", worksheet.outputs_energy_flows_e358); end
  def test_outputs_energy_flows_f358; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f358); end
  def test_outputs_energy_flows_i358; assert_equal("FF.03", worksheet.outputs_energy_flows_i358); end
  def test_outputs_energy_flows_j358; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j358); end
  def test_outputs_energy_flows_l358; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l358); end
  def test_outputs_energy_flows_v358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v358||0), 0.002); end
  def test_outputs_energy_flows_w358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w358||0), 0.002); end
  def test_outputs_energy_flows_x358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x358||0), 0.002); end
  def test_outputs_energy_flows_y358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y358||0), 0.002); end
  def test_outputs_energy_flows_z358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z358||0), 0.002); end
  def test_outputs_energy_flows_aa358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa358||0), 0.002); end
  def test_outputs_energy_flows_ab358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab358||0), 0.002); end
  def test_outputs_energy_flows_ac358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac358||0), 0.002); end
  def test_outputs_energy_flows_ad358; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad358||0), 0.002); end
  def test_outputs_energy_flows_c360; assert_equal("FF.03", worksheet.outputs_energy_flows_c360); end
  def test_outputs_energy_flows_d360; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d360); end
  def test_outputs_energy_flows_e360; assert_equal("n/a", worksheet.outputs_energy_flows_e360); end
  def test_outputs_energy_flows_f360; assert_equal("International freight", worksheet.outputs_energy_flows_f360); end
  def test_outputs_energy_flows_i360; assert_equal("FF.03", worksheet.outputs_energy_flows_i360); end
  def test_outputs_energy_flows_j360; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j360); end
  def test_outputs_energy_flows_l360; assert_equal("International freight", worksheet.outputs_energy_flows_l360); end
  def test_outputs_energy_flows_v360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v360||0), 0.002); end
  def test_outputs_energy_flows_w360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w360||0), 0.002); end
  def test_outputs_energy_flows_x360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x360||0), 0.002); end
  def test_outputs_energy_flows_y360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y360||0), 0.002); end
  def test_outputs_energy_flows_z360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z360||0), 0.002); end
  def test_outputs_energy_flows_aa360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa360||0), 0.002); end
  def test_outputs_energy_flows_ab360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab360||0), 0.002); end
  def test_outputs_energy_flows_ac360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac360||0), 0.002); end
  def test_outputs_energy_flows_ad360; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad360||0), 0.002); end
  def test_outputs_energy_flows_c362; assert_equal("FF.03", worksheet.outputs_energy_flows_c362); end
  def test_outputs_energy_flows_d362; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d362); end
  def test_outputs_energy_flows_e362; assert_equal("n/a", worksheet.outputs_energy_flows_e362); end
  def test_outputs_energy_flows_f362; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_f362); end
  def test_outputs_energy_flows_i362; assert_equal("FF.03", worksheet.outputs_energy_flows_i362); end
  def test_outputs_energy_flows_j362; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j362); end
  def test_outputs_energy_flows_v362; assert_in_delta(8.663792701034158e-08, worksheet.outputs_energy_flows_v362, 0.002); end
  def test_outputs_energy_flows_w362; assert_in_delta(8.606804825586925e-08, worksheet.outputs_energy_flows_w362, 0.002); end
  def test_outputs_energy_flows_x362; assert_in_delta(7.80468645697497e-08, worksheet.outputs_energy_flows_x362, 0.002); end
  def test_outputs_energy_flows_y362; assert_in_delta(6.827006891375725e-08, worksheet.outputs_energy_flows_y362, 0.002); end
  def test_outputs_energy_flows_z362; assert_in_delta(5.0222237760819e-08, worksheet.outputs_energy_flows_z362, 0.002); end
  def test_outputs_energy_flows_aa362; assert_in_delta(3.6116046338242416e-08, worksheet.outputs_energy_flows_aa362, 0.002); end
  def test_outputs_energy_flows_ab362; assert_in_delta(2.496142081578404e-08, worksheet.outputs_energy_flows_ab362, 0.002); end
  def test_outputs_energy_flows_ac362; assert_in_delta(1.288971045641188e-08, worksheet.outputs_energy_flows_ac362, 0.002); end
  def test_outputs_energy_flows_ad362; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad362||0), 0.002); end
  def test_outputs_energy_flows_c364; assert_equal("FF.03", worksheet.outputs_energy_flows_c364); end
  def test_outputs_energy_flows_d364; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d364); end
  def test_outputs_energy_flows_e364; assert_equal("G.01", worksheet.outputs_energy_flows_e364); end
  def test_outputs_energy_flows_f364; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f364); end
  def test_outputs_energy_flows_g364; assert_equal("GGR.tech", worksheet.outputs_energy_flows_g364); end
  def test_outputs_energy_flows_h364; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_h364); end
  def test_outputs_energy_flows_i364; assert_equal("FF.03", worksheet.outputs_energy_flows_i364); end
  def test_outputs_energy_flows_j364; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j364); end
  def test_outputs_energy_flows_v364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v364||0), 0.002); end
  def test_outputs_energy_flows_w364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w364||0), 0.002); end
  def test_outputs_energy_flows_x364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x364||0), 0.002); end
  def test_outputs_energy_flows_y364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y364||0), 0.002); end
  def test_outputs_energy_flows_z364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z364||0), 0.002); end
  def test_outputs_energy_flows_aa364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa364||0), 0.002); end
  def test_outputs_energy_flows_ab364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab364||0), 0.002); end
  def test_outputs_energy_flows_ac364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac364||0), 0.002); end
  def test_outputs_energy_flows_ad364; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad364||0), 0.002); end
  def test_outputs_energy_flows_c366; assert_equal("FF.03", worksheet.outputs_energy_flows_c366); end
  def test_outputs_energy_flows_d366; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_d366); end
  def test_outputs_energy_flows_e366; assert_equal("n/a", worksheet.outputs_energy_flows_e366); end
  def test_outputs_energy_flows_f366; assert_equal("Agriculture including bioenergy production", worksheet.outputs_energy_flows_f366); end
  def test_outputs_energy_flows_g366; assert_equal("n/a", worksheet.outputs_energy_flows_g366); end
  def test_outputs_energy_flows_h366; assert_equal("Global Land / Food / Bioenergy / Sequestration", worksheet.outputs_energy_flows_h366); end
  def test_outputs_energy_flows_i366; assert_equal("FF.03", worksheet.outputs_energy_flows_i366); end
  def test_outputs_energy_flows_j366; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j366); end
  def test_outputs_energy_flows_v366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v366||0), 0.002); end
  def test_outputs_energy_flows_w366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w366||0), 0.002); end
  def test_outputs_energy_flows_x366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x366||0), 0.002); end
  def test_outputs_energy_flows_y366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y366||0), 0.002); end
  def test_outputs_energy_flows_z366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z366||0), 0.002); end
  def test_outputs_energy_flows_aa366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa366||0), 0.002); end
  def test_outputs_energy_flows_ab366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab366||0), 0.002); end
  def test_outputs_energy_flows_ac366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac366||0), 0.002); end
  def test_outputs_energy_flows_ad366; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad366||0), 0.002); end
  def test_outputs_energy_flows_c368; assert_equal("n/a", worksheet.outputs_energy_flows_c368); end
  def test_outputs_energy_flows_d368; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_d368); end
  def test_outputs_energy_flows_e368; assert_equal("L.01", worksheet.outputs_energy_flows_e368); end
  def test_outputs_energy_flows_f368; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_f368); end
  def test_outputs_energy_flows_v368; assert_in_delta(2.393942720022596e-08, worksheet.outputs_energy_flows_v368, 0.002); end
  def test_outputs_energy_flows_w368; assert_in_delta(2.374818910230483e-08, worksheet.outputs_energy_flows_w368, 0.002); end
  def test_outputs_energy_flows_x368; assert_in_delta(2.541065694275741e-08, worksheet.outputs_energy_flows_x368, 0.002); end
  def test_outputs_energy_flows_y368; assert_in_delta(2.6182360203590697e-08, worksheet.outputs_energy_flows_y368, 0.002); end
  def test_outputs_energy_flows_z368; assert_in_delta(2.762406852473141e-08, worksheet.outputs_energy_flows_z368, 0.002); end
  def test_outputs_energy_flows_aa368; assert_in_delta(2.4635707109589744e-08, worksheet.outputs_energy_flows_aa368, 0.002); end
  def test_outputs_energy_flows_ab368; assert_in_delta(1.8044037546870485e-08, worksheet.outputs_energy_flows_ab368, 0.002); end
  def test_outputs_energy_flows_ac368; assert_in_delta(9.926956264038524e-09, worksheet.outputs_energy_flows_ac368, 0.002); end
  def test_outputs_energy_flows_ad368; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad368||0), 0.002); end
  def test_outputs_energy_flows_c370; assert_equal("HY.01", worksheet.outputs_energy_flows_c370); end
  def test_outputs_energy_flows_d370; assert_equal("Global H2", worksheet.outputs_energy_flows_d370); end
  def test_outputs_energy_flows_e370; assert_equal("n/a", worksheet.outputs_energy_flows_e370); end
  def test_outputs_energy_flows_f370; assert_equal("Domestic passenger", worksheet.outputs_energy_flows_f370); end
  def test_outputs_energy_flows_i370; assert_equal("HY.01", worksheet.outputs_energy_flows_i370); end
  def test_outputs_energy_flows_j370; assert_equal("Global H2", worksheet.outputs_energy_flows_j370); end
  def test_outputs_energy_flows_l370; assert_equal("Urban passenger", worksheet.outputs_energy_flows_l370); end
  def test_outputs_energy_flows_m370; assert_equal("Rural passenger", worksheet.outputs_energy_flows_m370); end
  def test_outputs_energy_flows_v370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v370||0), 0.002); end
  def test_outputs_energy_flows_w370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w370||0), 0.002); end
  def test_outputs_energy_flows_x370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x370||0), 0.002); end
  def test_outputs_energy_flows_y370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y370||0), 0.002); end
  def test_outputs_energy_flows_z370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z370||0), 0.002); end
  def test_outputs_energy_flows_aa370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa370||0), 0.002); end
  def test_outputs_energy_flows_ab370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab370||0), 0.002); end
  def test_outputs_energy_flows_ac370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac370||0), 0.002); end
  def test_outputs_energy_flows_ad370; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad370||0), 0.002); end
  def test_outputs_energy_flows_c372; assert_equal("HY.01", worksheet.outputs_energy_flows_c372); end
  def test_outputs_energy_flows_d372; assert_equal("Global H2", worksheet.outputs_energy_flows_d372); end
  def test_outputs_energy_flows_e372; assert_equal("n/a", worksheet.outputs_energy_flows_e372); end
  def test_outputs_energy_flows_f372; assert_equal("International passenger", worksheet.outputs_energy_flows_f372); end
  def test_outputs_energy_flows_i372; assert_equal("HY.01", worksheet.outputs_energy_flows_i372); end
  def test_outputs_energy_flows_j372; assert_equal("Global H2", worksheet.outputs_energy_flows_j372); end
  def test_outputs_energy_flows_l372; assert_equal("International", worksheet.outputs_energy_flows_l372); end
  def test_outputs_energy_flows_v372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v372||0), 0.002); end
  def test_outputs_energy_flows_w372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w372||0), 0.002); end
  def test_outputs_energy_flows_x372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x372||0), 0.002); end
  def test_outputs_energy_flows_y372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y372||0), 0.002); end
  def test_outputs_energy_flows_z372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z372||0), 0.002); end
  def test_outputs_energy_flows_aa372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa372||0), 0.002); end
  def test_outputs_energy_flows_ab372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab372||0), 0.002); end
  def test_outputs_energy_flows_ac372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac372||0), 0.002); end
  def test_outputs_energy_flows_ad372; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad372||0), 0.002); end
  def test_outputs_energy_flows_c374; assert_equal("HY.01", worksheet.outputs_energy_flows_c374); end
  def test_outputs_energy_flows_d374; assert_equal("Global H2", worksheet.outputs_energy_flows_d374); end
  def test_outputs_energy_flows_e374; assert_equal("n/a", worksheet.outputs_energy_flows_e374); end
  def test_outputs_energy_flows_f374; assert_equal("Domestic freight", worksheet.outputs_energy_flows_f374); end
  def test_outputs_energy_flows_i374; assert_equal("HY.01", worksheet.outputs_energy_flows_i374); end
  def test_outputs_energy_flows_j374; assert_equal("Global H2", worksheet.outputs_energy_flows_j374); end
  def test_outputs_energy_flows_l374; assert_equal("Domestic freight", worksheet.outputs_energy_flows_l374); end
  def test_outputs_energy_flows_v374; assert_in_delta(6.839836342921704e-08, worksheet.outputs_energy_flows_v374, 0.002); end
  def test_outputs_energy_flows_w374; assert_in_delta(6.794845914937047e-08, worksheet.outputs_energy_flows_w374, 0.002); end
  def test_outputs_energy_flows_x374; assert_in_delta(6.523417096954911e-08, worksheet.outputs_energy_flows_x374, 0.002); end
  def test_outputs_energy_flows_y374; assert_in_delta(6.041901098867518e-08, worksheet.outputs_energy_flows_y374, 0.002); end
  def test_outputs_energy_flows_z374; assert_in_delta(5.337076533903203e-08, worksheet.outputs_energy_flows_z374, 0.002); end
  def test_outputs_energy_flows_aa374; assert_in_delta(4.3951553657621294e-08, worksheet.outputs_energy_flows_aa374, 0.002); end
  def test_outputs_energy_flows_ab374; assert_in_delta(3.201762551589326e-08, worksheet.outputs_energy_flows_ab374, 0.002); end
  def test_outputs_energy_flows_ac374; assert_in_delta(1.7419150251185364e-08, worksheet.outputs_energy_flows_ac374, 0.002); end
  def test_outputs_energy_flows_ad374; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad374||0), 0.002); end
  def test_outputs_energy_flows_c376; assert_equal("HY.01", worksheet.outputs_energy_flows_c376); end
  def test_outputs_energy_flows_d376; assert_equal("Global H2", worksheet.outputs_energy_flows_d376); end
  def test_outputs_energy_flows_e376; assert_equal("n/a", worksheet.outputs_energy_flows_e376); end
  def test_outputs_energy_flows_f376; assert_equal("International freight", worksheet.outputs_energy_flows_f376); end
  def test_outputs_energy_flows_i376; assert_equal("HY.01", worksheet.outputs_energy_flows_i376); end
  def test_outputs_energy_flows_j376; assert_equal("Global H2", worksheet.outputs_energy_flows_j376); end
  def test_outputs_energy_flows_l376; assert_equal("International freight", worksheet.outputs_energy_flows_l376); end
  def test_outputs_energy_flows_v376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v376||0), 0.002); end
  def test_outputs_energy_flows_w376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w376||0), 0.002); end
  def test_outputs_energy_flows_x376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x376||0), 0.002); end
  def test_outputs_energy_flows_y376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y376||0), 0.002); end
  def test_outputs_energy_flows_z376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z376||0), 0.002); end
  def test_outputs_energy_flows_aa376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa376||0), 0.002); end
  def test_outputs_energy_flows_ab376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab376||0), 0.002); end
  def test_outputs_energy_flows_ac376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac376||0), 0.002); end
  def test_outputs_energy_flows_ad376; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad376||0), 0.002); end
  def test_outputs_energy_flows_c378; assert_equal("H.01", worksheet.outputs_energy_flows_c378); end
  def test_outputs_energy_flows_d378; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d378); end
  def test_outputs_energy_flows_e378; assert_equal("n/a", worksheet.outputs_energy_flows_e378); end
  def test_outputs_energy_flows_f378; assert_equal("Domestic heating, cooling and hot water", worksheet.outputs_energy_flows_f378); end
  def test_outputs_energy_flows_i378; assert_equal("H.01", worksheet.outputs_energy_flows_i378); end
  def test_outputs_energy_flows_j378; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j378); end
  def test_outputs_energy_flows_k378; assert_equal("Global buildings", worksheet.outputs_energy_flows_k378); end
  def test_outputs_energy_flows_v378; assert_in_epsilon(4.227161524864224, worksheet.outputs_energy_flows_v378, 0.002); end
  def test_outputs_energy_flows_w378; assert_in_epsilon(4.830375376711945, worksheet.outputs_energy_flows_w378, 0.002); end
  def test_outputs_energy_flows_x378; assert_in_epsilon(5.585908974326415, worksheet.outputs_energy_flows_x378, 0.002); end
  def test_outputs_energy_flows_y378; assert_in_epsilon(6.352193052545949, worksheet.outputs_energy_flows_y378, 0.002); end
  def test_outputs_energy_flows_z378; assert_in_epsilon(7.11472717365746, worksheet.outputs_energy_flows_z378, 0.002); end
  def test_outputs_energy_flows_aa378; assert_in_epsilon(7.830157056924655, worksheet.outputs_energy_flows_aa378, 0.002); end
  def test_outputs_energy_flows_ab378; assert_in_epsilon(8.511990069510508, worksheet.outputs_energy_flows_ab378, 0.002); end
  def test_outputs_energy_flows_ac378; assert_in_epsilon(9.114358334442827, worksheet.outputs_energy_flows_ac378, 0.002); end
  def test_outputs_energy_flows_ad378; assert_in_epsilon(9.660878327191446, worksheet.outputs_energy_flows_ad378, 0.002); end
  def test_outputs_energy_flows_c380; assert_equal("H.01", worksheet.outputs_energy_flows_c380); end
  def test_outputs_energy_flows_d380; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d380); end
  def test_outputs_energy_flows_e380; assert_equal("n/a", worksheet.outputs_energy_flows_e380); end
  def test_outputs_energy_flows_f380; assert_equal("Domestic cooking", worksheet.outputs_energy_flows_f380); end
  def test_outputs_energy_flows_i380; assert_equal("H.01", worksheet.outputs_energy_flows_i380); end
  def test_outputs_energy_flows_j380; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j380); end
  def test_outputs_energy_flows_k380; assert_equal("Urban cooking", worksheet.outputs_energy_flows_k380); end
  def test_outputs_energy_flows_l380; assert_equal("Rural cooking", worksheet.outputs_energy_flows_l380); end
  def test_outputs_energy_flows_v380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v380||0), 0.002); end
  def test_outputs_energy_flows_w380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w380||0), 0.002); end
  def test_outputs_energy_flows_x380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x380||0), 0.002); end
  def test_outputs_energy_flows_y380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y380||0), 0.002); end
  def test_outputs_energy_flows_z380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z380||0), 0.002); end
  def test_outputs_energy_flows_aa380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa380||0), 0.002); end
  def test_outputs_energy_flows_ab380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab380||0), 0.002); end
  def test_outputs_energy_flows_ac380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac380||0), 0.002); end
  def test_outputs_energy_flows_ad380; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad380||0), 0.002); end
  def test_outputs_energy_flows_c382; assert_equal("H.01", worksheet.outputs_energy_flows_c382); end
  def test_outputs_energy_flows_d382; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d382); end
  def test_outputs_energy_flows_e382; assert_equal("n/a", worksheet.outputs_energy_flows_e382); end
  def test_outputs_energy_flows_f382; assert_equal("Non domestic", worksheet.outputs_energy_flows_f382); end
  def test_outputs_energy_flows_i382; assert_equal("H.01", worksheet.outputs_energy_flows_i382); end
  def test_outputs_energy_flows_j382; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j382); end
  def test_outputs_energy_flows_k382; assert_equal("Non-residential", worksheet.outputs_energy_flows_k382); end
  def test_outputs_energy_flows_v382; assert_in_delta(0.1297005966719381, worksheet.outputs_energy_flows_v382, 0.002); end
  def test_outputs_energy_flows_w382; assert_in_delta(0.13374539748025532, worksheet.outputs_energy_flows_w382, 0.002); end
  def test_outputs_energy_flows_x382; assert_in_delta(0.13650311708403068, worksheet.outputs_energy_flows_x382, 0.002); end
  def test_outputs_energy_flows_y382; assert_in_delta(0.13741942236328542, worksheet.outputs_energy_flows_y382, 0.002); end
  def test_outputs_energy_flows_z382; assert_in_delta(0.13656222312789756, worksheet.outputs_energy_flows_z382, 0.002); end
  def test_outputs_energy_flows_aa382; assert_in_delta(0.1340635392481879, worksheet.outputs_energy_flows_aa382, 0.002); end
  def test_outputs_energy_flows_ab382; assert_in_delta(0.1300424343154185, worksheet.outputs_energy_flows_ab382, 0.002); end
  def test_outputs_energy_flows_ac382; assert_in_delta(0.124616468572791, worksheet.outputs_energy_flows_ac382, 0.002); end
  def test_outputs_energy_flows_ad382; assert_in_delta(0.11793758648419356, worksheet.outputs_energy_flows_ad382, 0.002); end
  def test_outputs_energy_flows_c384; assert_equal("H.01", worksheet.outputs_energy_flows_c384); end
  def test_outputs_energy_flows_d384; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d384); end
  def test_outputs_energy_flows_e384; assert_equal("n/a", worksheet.outputs_energy_flows_e384); end
  def test_outputs_energy_flows_f384; assert_equal("Steel", worksheet.outputs_energy_flows_f384); end
  def test_outputs_energy_flows_i384; assert_equal("H.01", worksheet.outputs_energy_flows_i384); end
  def test_outputs_energy_flows_j384; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j384); end
  def test_outputs_energy_flows_v384; assert_in_delta(0.803408652648, worksheet.outputs_energy_flows_v384, 0.002); end
  def test_outputs_energy_flows_w384; assert_in_delta(0.9176588245964148, worksheet.outputs_energy_flows_w384, 0.002); end
  def test_outputs_energy_flows_x384; assert_in_delta(0.9769555346860486, worksheet.outputs_energy_flows_x384, 0.002); end
  def test_outputs_energy_flows_y384; assert_in_epsilon(1.0294107055775126, worksheet.outputs_energy_flows_y384, 0.002); end
  def test_outputs_energy_flows_z384; assert_in_epsilon(1.094011754080938, worksheet.outputs_energy_flows_z384, 0.002); end
  def test_outputs_energy_flows_aa384; assert_in_epsilon(1.1541141683568386, worksheet.outputs_energy_flows_aa384, 0.002); end
  def test_outputs_energy_flows_ab384; assert_in_epsilon(1.2274856193618153, worksheet.outputs_energy_flows_ab384, 0.002); end
  def test_outputs_energy_flows_ac384; assert_in_epsilon(1.3269073128629318, worksheet.outputs_energy_flows_ac384, 0.002); end
  def test_outputs_energy_flows_ad384; assert_in_epsilon(1.3681542236572013, worksheet.outputs_energy_flows_ad384, 0.002); end
  def test_outputs_energy_flows_c386; assert_equal("H.01", worksheet.outputs_energy_flows_c386); end
  def test_outputs_energy_flows_d386; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d386); end
  def test_outputs_energy_flows_e386; assert_equal("n/a", worksheet.outputs_energy_flows_e386); end
  def test_outputs_energy_flows_f386; assert_equal("Aluminium", worksheet.outputs_energy_flows_f386); end
  def test_outputs_energy_flows_i386; assert_equal("H.01", worksheet.outputs_energy_flows_i386); end
  def test_outputs_energy_flows_j386; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j386); end
  def test_outputs_energy_flows_v386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v386||0), 0.002); end
  def test_outputs_energy_flows_w386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w386||0), 0.002); end
  def test_outputs_energy_flows_x386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x386||0), 0.002); end
  def test_outputs_energy_flows_y386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y386||0), 0.002); end
  def test_outputs_energy_flows_z386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z386||0), 0.002); end
  def test_outputs_energy_flows_aa386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa386||0), 0.002); end
  def test_outputs_energy_flows_ab386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab386||0), 0.002); end
  def test_outputs_energy_flows_ac386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac386||0), 0.002); end
  def test_outputs_energy_flows_ad386; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad386||0), 0.002); end
  def test_outputs_energy_flows_c388; assert_equal("H.01", worksheet.outputs_energy_flows_c388); end
  def test_outputs_energy_flows_d388; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d388); end
  def test_outputs_energy_flows_e388; assert_equal("n/a", worksheet.outputs_energy_flows_e388); end
  def test_outputs_energy_flows_f388; assert_equal("Cement", worksheet.outputs_energy_flows_f388); end
  def test_outputs_energy_flows_i388; assert_equal("H.01", worksheet.outputs_energy_flows_i388); end
  def test_outputs_energy_flows_j388; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j388); end
  def test_outputs_energy_flows_v388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v388||0), 0.002); end
  def test_outputs_energy_flows_w388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w388||0), 0.002); end
  def test_outputs_energy_flows_x388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x388||0), 0.002); end
  def test_outputs_energy_flows_y388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y388||0), 0.002); end
  def test_outputs_energy_flows_z388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z388||0), 0.002); end
  def test_outputs_energy_flows_aa388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa388||0), 0.002); end
  def test_outputs_energy_flows_ab388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab388||0), 0.002); end
  def test_outputs_energy_flows_ac388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac388||0), 0.002); end
  def test_outputs_energy_flows_ad388; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad388||0), 0.002); end
  def test_outputs_energy_flows_c390; assert_equal("H.01", worksheet.outputs_energy_flows_c390); end
  def test_outputs_energy_flows_d390; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d390); end
  def test_outputs_energy_flows_e390; assert_equal("n/a", worksheet.outputs_energy_flows_e390); end
  def test_outputs_energy_flows_f390; assert_equal("Pulp and paper", worksheet.outputs_energy_flows_f390); end
  def test_outputs_energy_flows_i390; assert_equal("H.01", worksheet.outputs_energy_flows_i390); end
  def test_outputs_energy_flows_j390; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j390); end
  def test_outputs_energy_flows_v390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v390||0), 0.002); end
  def test_outputs_energy_flows_w390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w390||0), 0.002); end
  def test_outputs_energy_flows_x390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x390||0), 0.002); end
  def test_outputs_energy_flows_y390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y390||0), 0.002); end
  def test_outputs_energy_flows_z390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z390||0), 0.002); end
  def test_outputs_energy_flows_aa390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa390||0), 0.002); end
  def test_outputs_energy_flows_ab390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab390||0), 0.002); end
  def test_outputs_energy_flows_ac390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac390||0), 0.002); end
  def test_outputs_energy_flows_ad390; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad390||0), 0.002); end
  def test_outputs_energy_flows_c392; assert_equal("H.01", worksheet.outputs_energy_flows_c392); end
  def test_outputs_energy_flows_d392; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_d392); end
  def test_outputs_energy_flows_e392; assert_equal("n/a", worksheet.outputs_energy_flows_e392); end
  def test_outputs_energy_flows_f392; assert_equal("Chemicals", worksheet.outputs_energy_flows_f392); end
  def test_outputs_energy_flows_i392; assert_equal("H.01", worksheet.outputs_energy_flows_i392); end
  def test_outputs_energy_flows_j392; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j392); end
  def test_outputs_energy_flows_v392; assert_in_epsilon(1.9586662634452077, worksheet.outputs_energy_flows_v392, 0.002); end
  def test_outputs_energy_flows_w392; assert_in_epsilon(2.3131442170328205, worksheet.outputs_energy_flows_w392, 0.002); end
  def test_outputs_energy_flows_x392; assert_in_epsilon(2.5336742532077836, worksheet.outputs_energy_flows_x392, 0.002); end
  def test_outputs_energy_flows_y392; assert_in_epsilon(2.7085649393232827, worksheet.outputs_energy_flows_y392, 0.002); end
  def test_outputs_energy_flows_z392; assert_in_epsilon(2.885594072506112, worksheet.outputs_energy_flows_z392, 0.002); end
  def test_outputs_energy_flows_aa392; assert_in_epsilon(3.0522039249518196, worksheet.outputs_energy_flows_aa392, 0.002); end
  def test_outputs_energy_flows_ab392; assert_in_epsilon(3.231780111844219, worksheet.outputs_energy_flows_ab392, 0.002); end
  def test_outputs_energy_flows_ac392; assert_in_epsilon(3.400749220684831, worksheet.outputs_energy_flows_ac392, 0.002); end
  def test_outputs_energy_flows_ad392; assert_in_epsilon(3.578875256383801, worksheet.outputs_energy_flows_ad392, 0.002); end
  def test_outputs_energy_flows_c400; assert_equal("Vector code energy is taken from", worksheet.outputs_energy_flows_c400); end
  def test_outputs_energy_flows_d400; assert_equal("TAKEN FROM", worksheet.outputs_energy_flows_d400); end
  def test_outputs_energy_flows_e400; assert_equal("Vector code energy is taken to", worksheet.outputs_energy_flows_e400); end
  def test_outputs_energy_flows_f400; assert_equal("TAKEN TO", worksheet.outputs_energy_flows_f400); end
  def test_outputs_energy_flows_g400; assert_equal("Technology code", worksheet.outputs_energy_flows_g400); end
  def test_outputs_energy_flows_h400; assert_equal("Technology description", worksheet.outputs_energy_flows_h400); end
  def test_outputs_energy_flows_i400; assert_equal("Energy code", worksheet.outputs_energy_flows_i400); end
  def test_outputs_energy_flows_j400; assert_equal("Description", worksheet.outputs_energy_flows_j400); end
  def test_outputs_energy_flows_k400; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_k400); end
  def test_outputs_energy_flows_l400; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_l400); end
  def test_outputs_energy_flows_m400; assert_equal("Other name of other lookup", worksheet.outputs_energy_flows_m400); end
  def test_outputs_energy_flows_v400; assert_in_epsilon(2011.0, worksheet.outputs_energy_flows_v400, 0.002); end
  def test_outputs_energy_flows_w400; assert_in_epsilon(2015.0, worksheet.outputs_energy_flows_w400, 0.002); end
  def test_outputs_energy_flows_x400; assert_in_epsilon(2020.0, worksheet.outputs_energy_flows_x400, 0.002); end
  def test_outputs_energy_flows_y400; assert_in_epsilon(2025.0, worksheet.outputs_energy_flows_y400, 0.002); end
  def test_outputs_energy_flows_z400; assert_in_epsilon(2030.0, worksheet.outputs_energy_flows_z400, 0.002); end
  def test_outputs_energy_flows_aa400; assert_in_epsilon(2035.0, worksheet.outputs_energy_flows_aa400, 0.002); end
  def test_outputs_energy_flows_ab400; assert_in_epsilon(2040.0, worksheet.outputs_energy_flows_ab400, 0.002); end
  def test_outputs_energy_flows_ac400; assert_in_epsilon(2045.0, worksheet.outputs_energy_flows_ac400, 0.002); end
  def test_outputs_energy_flows_ad400; assert_in_epsilon(2050.0, worksheet.outputs_energy_flows_ad400, 0.002); end
  def test_outputs_energy_flows_d402; assert_equal("Coal reserves", worksheet.outputs_energy_flows_d402); end
  def test_outputs_energy_flows_f402; assert_equal("Solid", worksheet.outputs_energy_flows_f402); end
  def test_outputs_energy_flows_i402; assert_equal("G.Q.01", worksheet.outputs_energy_flows_i402); end
  def test_outputs_energy_flows_j402; assert_equal("Global Coal reserves ", worksheet.outputs_energy_flows_j402); end
  def test_outputs_energy_flows_v402; assert_in_epsilon(131.528940689516, worksheet.outputs_energy_flows_v402, 0.002); end
  def test_outputs_energy_flows_w402; assert_in_epsilon(146.78666569416862, worksheet.outputs_energy_flows_w402, 0.002); end
  def test_outputs_energy_flows_x402; assert_in_epsilon(155.13027492235437, worksheet.outputs_energy_flows_x402, 0.002); end
  def test_outputs_energy_flows_y402; assert_in_epsilon(170.08742501526115, worksheet.outputs_energy_flows_y402, 0.002); end
  def test_outputs_energy_flows_z402; assert_in_epsilon(181.3490668967952, worksheet.outputs_energy_flows_z402, 0.002); end
  def test_outputs_energy_flows_aa402; assert_in_epsilon(190.58351456478243, worksheet.outputs_energy_flows_aa402, 0.002); end
  def test_outputs_energy_flows_ab402; assert_in_epsilon(195.40607692031352, worksheet.outputs_energy_flows_ab402, 0.002); end
  def test_outputs_energy_flows_ac402; assert_in_epsilon(193.5873499979079, worksheet.outputs_energy_flows_ac402, 0.002); end
  def test_outputs_energy_flows_ad402; assert_in_epsilon(191.22274828903704, worksheet.outputs_energy_flows_ad402, 0.002); end
  def test_outputs_energy_flows_d404; assert_equal("Biomass and waste", worksheet.outputs_energy_flows_d404); end
  def test_outputs_energy_flows_f404; assert_equal("Solid", worksheet.outputs_energy_flows_f404); end
  def test_outputs_energy_flows_i404; assert_equal("G.C.01", worksheet.outputs_energy_flows_i404); end
  def test_outputs_energy_flows_j404; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j404); end
  def test_outputs_energy_flows_k404; assert_equal("G.BM.13", worksheet.outputs_energy_flows_k404); end
  def test_outputs_energy_flows_l404; assert_equal("Global Traditional biomass", worksheet.outputs_energy_flows_l404); end
  def test_outputs_energy_flows_n404; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_n404); end
  def test_outputs_energy_flows_o404; assert_equal("Forest", worksheet.outputs_energy_flows_o404); end
  def test_outputs_energy_flows_p404; assert_equal("Global Native forest", worksheet.outputs_energy_flows_p404); end
  def test_outputs_energy_flows_q404; assert_equal("Arable.bio", worksheet.outputs_energy_flows_q404); end
  def test_outputs_energy_flows_r404; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_r404); end
  def test_outputs_energy_flows_s404; assert_equal("industrial.municipal.non.renewable.waste", worksheet.outputs_energy_flows_s404); end
  def test_outputs_energy_flows_t404; assert_equal("Global ", worksheet.outputs_energy_flows_t404); end
  def test_outputs_energy_flows_v404; assert_in_epsilon(51.03991800000001, worksheet.outputs_energy_flows_v404, 0.002); end
  def test_outputs_energy_flows_w404; assert_in_epsilon(51.43851174698941, worksheet.outputs_energy_flows_w404, 0.002); end
  def test_outputs_energy_flows_x404; assert_in_epsilon(51.800016133608516, worksheet.outputs_energy_flows_x404, 0.002); end
  def test_outputs_energy_flows_y404; assert_in_epsilon(51.9617907842123, worksheet.outputs_energy_flows_y404, 0.002); end
  def test_outputs_energy_flows_z404; assert_in_epsilon(51.835298839232586, worksheet.outputs_energy_flows_z404, 0.002); end
  def test_outputs_energy_flows_aa404; assert_in_epsilon(51.73437498962001, worksheet.outputs_energy_flows_aa404, 0.002); end
  def test_outputs_energy_flows_ab404; assert_in_epsilon(51.610034741492676, worksheet.outputs_energy_flows_ab404, 0.002); end
  def test_outputs_energy_flows_ac404; assert_in_epsilon(52.202553794500744, worksheet.outputs_energy_flows_ac404, 0.002); end
  def test_outputs_energy_flows_ad404; assert_in_epsilon(52.92873952403684, worksheet.outputs_energy_flows_ad404, 0.002); end
  def test_outputs_energy_flows_d406; assert_equal("Oil reserves", worksheet.outputs_energy_flows_d406); end
  def test_outputs_energy_flows_f406; assert_equal("Liquid", worksheet.outputs_energy_flows_f406); end
  def test_outputs_energy_flows_i406; assert_equal("G.Q.02", worksheet.outputs_energy_flows_i406); end
  def test_outputs_energy_flows_j406; assert_equal("Global Oil reserves ", worksheet.outputs_energy_flows_j406); end
  def test_outputs_energy_flows_v406; assert_in_epsilon(155.62894535944693, worksheet.outputs_energy_flows_v406, 0.002); end
  def test_outputs_energy_flows_w406; assert_in_epsilon(170.5111713885325, worksheet.outputs_energy_flows_w406, 0.002); end
  def test_outputs_energy_flows_x406; assert_in_epsilon(194.95419671894234, worksheet.outputs_energy_flows_x406, 0.002); end
  def test_outputs_energy_flows_y406; assert_in_epsilon(209.8804546856388, worksheet.outputs_energy_flows_y406, 0.002); end
  def test_outputs_energy_flows_z406; assert_in_epsilon(228.56528927411085, worksheet.outputs_energy_flows_z406, 0.002); end
  def test_outputs_energy_flows_aa406; assert_in_epsilon(245.71496111169728, worksheet.outputs_energy_flows_aa406, 0.002); end
  def test_outputs_energy_flows_ab406; assert_in_epsilon(263.87586495448807, worksheet.outputs_energy_flows_ab406, 0.002); end
  def test_outputs_energy_flows_ac406; assert_in_epsilon(284.0812754774917, worksheet.outputs_energy_flows_ac406, 0.002); end
  def test_outputs_energy_flows_ad406; assert_in_epsilon(301.0072711999955, worksheet.outputs_energy_flows_ad406, 0.002); end
  def test_outputs_energy_flows_d408; assert_equal("Biomass and waste", worksheet.outputs_energy_flows_d408); end
  def test_outputs_energy_flows_f408; assert_equal("Liquid", worksheet.outputs_energy_flows_f408); end
  def test_outputs_energy_flows_i408; assert_equal("G.C.02", worksheet.outputs_energy_flows_i408); end
  def test_outputs_energy_flows_j408; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j408); end
  def test_outputs_energy_flows_n408; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_n408); end
  def test_outputs_energy_flows_o408; assert_equal("Forest", worksheet.outputs_energy_flows_o408); end
  def test_outputs_energy_flows_p408; assert_equal("Global Native forest", worksheet.outputs_energy_flows_p408); end
  def test_outputs_energy_flows_q408; assert_equal("Arable.bio", worksheet.outputs_energy_flows_q408); end
  def test_outputs_energy_flows_r408; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_r408); end
  def test_outputs_energy_flows_v408; assert_in_delta(0.76, worksheet.outputs_energy_flows_v408, 0.002); end
  def test_outputs_energy_flows_w408; assert_in_delta(0.7425796855766272, worksheet.outputs_energy_flows_w408, 0.002); end
  def test_outputs_energy_flows_x408; assert_in_delta(0.8055853711358296, worksheet.outputs_energy_flows_x408, 0.002); end
  def test_outputs_energy_flows_y408; assert_in_delta(0.8827763079296206, worksheet.outputs_energy_flows_y408, 0.002); end
  def test_outputs_energy_flows_z408; assert_in_delta(0.9620251785968399, worksheet.outputs_energy_flows_z408, 0.002); end
  def test_outputs_energy_flows_aa408; assert_in_epsilon(1.0433319831374877, worksheet.outputs_energy_flows_aa408, 0.002); end
  def test_outputs_energy_flows_ab408; assert_in_epsilon(1.1266967215515633, worksheet.outputs_energy_flows_ab408, 0.002); end
  def test_outputs_energy_flows_ac408; assert_in_epsilon(1.2121193938390675, worksheet.outputs_energy_flows_ac408, 0.002); end
  def test_outputs_energy_flows_ad408; assert_in_epsilon(1.2996, worksheet.outputs_energy_flows_ad408, 0.002); end
  def test_outputs_energy_flows_d410; assert_equal("Gas reserves", worksheet.outputs_energy_flows_d410); end
  def test_outputs_energy_flows_f410; assert_equal("Gas", worksheet.outputs_energy_flows_f410); end
  def test_outputs_energy_flows_i410; assert_equal("G.Q.03", worksheet.outputs_energy_flows_i410); end
  def test_outputs_energy_flows_j410; assert_equal("Global Gas reserves ", worksheet.outputs_energy_flows_j410); end
  def test_outputs_energy_flows_v410; assert_in_epsilon(88.462282592305, worksheet.outputs_energy_flows_v410, 0.002); end
  def test_outputs_energy_flows_w410; assert_in_epsilon(97.40770742230936, worksheet.outputs_energy_flows_w410, 0.002); end
  def test_outputs_energy_flows_x410; assert_in_epsilon(104.64552832554585, worksheet.outputs_energy_flows_x410, 0.002); end
  def test_outputs_energy_flows_y410; assert_in_epsilon(112.8785187284083, worksheet.outputs_energy_flows_y410, 0.002); end
  def test_outputs_energy_flows_z410; assert_in_epsilon(121.81064499118753, worksheet.outputs_energy_flows_z410, 0.002); end
  def test_outputs_energy_flows_aa410; assert_in_epsilon(131.22241030122996, worksheet.outputs_energy_flows_aa410, 0.002); end
  def test_outputs_energy_flows_ab410; assert_in_epsilon(141.85780947172344, worksheet.outputs_energy_flows_ab410, 0.002); end
  def test_outputs_energy_flows_ac410; assert_in_epsilon(153.26493856384946, worksheet.outputs_energy_flows_ac410, 0.002); end
  def test_outputs_energy_flows_ad410; assert_in_epsilon(165.29124787929152, worksheet.outputs_energy_flows_ad410, 0.002); end
  def test_outputs_energy_flows_d412; assert_equal("Biomass and waste", worksheet.outputs_energy_flows_d412); end
  def test_outputs_energy_flows_f412; assert_equal("Gas", worksheet.outputs_energy_flows_f412); end
  def test_outputs_energy_flows_i412; assert_equal("G.C.03", worksheet.outputs_energy_flows_i412); end
  def test_outputs_energy_flows_j412; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j412); end
  def test_outputs_energy_flows_n412; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_n412); end
  def test_outputs_energy_flows_o412; assert_equal("Forest", worksheet.outputs_energy_flows_o412); end
  def test_outputs_energy_flows_p412; assert_equal("Global Native forest", worksheet.outputs_energy_flows_p412); end
  def test_outputs_energy_flows_q412; assert_equal("Arable.bio", worksheet.outputs_energy_flows_q412); end
  def test_outputs_energy_flows_r412; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_r412); end
  def test_outputs_energy_flows_v412; assert_in_epsilon(3.8589176470794397, worksheet.outputs_energy_flows_v412, 0.002); end
  def test_outputs_energy_flows_w412; assert_in_epsilon(4.0546166286316705, worksheet.outputs_energy_flows_w412, 0.002); end
  def test_outputs_energy_flows_x412; assert_in_epsilon(4.2906065005311715, worksheet.outputs_energy_flows_x412, 0.002); end
  def test_outputs_energy_flows_y412; assert_in_epsilon(4.524094767866408, worksheet.outputs_energy_flows_y412, 0.002); end
  def test_outputs_energy_flows_z412; assert_in_epsilon(4.814316145566888, worksheet.outputs_energy_flows_z412, 0.002); end
  def test_outputs_energy_flows_aa412; assert_in_epsilon(5.117150008936817, worksheet.outputs_energy_flows_aa412, 0.002); end
  def test_outputs_energy_flows_ab412; assert_in_epsilon(5.41444633083019, worksheet.outputs_energy_flows_ab412, 0.002); end
  def test_outputs_energy_flows_ac412; assert_in_epsilon(5.647028229779436, worksheet.outputs_energy_flows_ac412, 0.002); end
  def test_outputs_energy_flows_ad412; assert_in_epsilon(5.83472749638165, worksheet.outputs_energy_flows_ad412, 0.002); end
  def test_outputs_energy_flows_d414; assert_equal("Biomass and waste", worksheet.outputs_energy_flows_d414); end
  def test_outputs_energy_flows_f414; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f414); end
  def test_outputs_energy_flows_i414; assert_equal("G.L.01", worksheet.outputs_energy_flows_i414); end
  def test_outputs_energy_flows_j414; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j414); end
  def test_outputs_energy_flows_n414; assert_equal("Biomatter conversion", worksheet.outputs_energy_flows_n414); end
  def test_outputs_energy_flows_o414; assert_equal("Forest", worksheet.outputs_energy_flows_o414); end
  def test_outputs_energy_flows_p414; assert_equal("Global Native forest", worksheet.outputs_energy_flows_p414); end
  def test_outputs_energy_flows_q414; assert_equal("Arable.bio", worksheet.outputs_energy_flows_q414); end
  def test_outputs_energy_flows_r414; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_r414); end
  def test_outputs_energy_flows_v414; assert_in_epsilon(3.0559854671316664, worksheet.outputs_energy_flows_v414, 0.002); end
  def test_outputs_energy_flows_w414; assert_in_epsilon(3.102206722386592, worksheet.outputs_energy_flows_w414, 0.002); end
  def test_outputs_energy_flows_x414; assert_in_epsilon(3.1338049615899086, worksheet.outputs_energy_flows_x414, 0.002); end
  def test_outputs_energy_flows_y414; assert_in_epsilon(3.1387440553533414, worksheet.outputs_energy_flows_y414, 0.002); end
  def test_outputs_energy_flows_z414; assert_in_epsilon(3.0889650582229526, worksheet.outputs_energy_flows_z414, 0.002); end
  def test_outputs_energy_flows_aa414; assert_in_epsilon(3.054702599839632, worksheet.outputs_energy_flows_aa414, 0.002); end
  def test_outputs_energy_flows_ab414; assert_in_epsilon(2.9966482664122687, worksheet.outputs_energy_flows_ab414, 0.002); end
  def test_outputs_energy_flows_ac414; assert_in_epsilon(2.905838123130935, worksheet.outputs_energy_flows_ac414, 0.002); end
  def test_outputs_energy_flows_ad414; assert_in_epsilon(2.7865429433165403, worksheet.outputs_energy_flows_ad414, 0.002); end
  def test_outputs_energy_flows_d416; assert_equal("Biomass and waste", worksheet.outputs_energy_flows_d416); end
  def test_outputs_energy_flows_f416; assert_equal("Global oversupply", worksheet.outputs_energy_flows_f416); end
  def test_outputs_energy_flows_g416; assert_equal("arable.bio", worksheet.outputs_energy_flows_g416); end
  def test_outputs_energy_flows_h416; assert_equal("Global Arable land for bioenergy", worksheet.outputs_energy_flows_h416); end
  def test_outputs_energy_flows_i416; assert_equal("O.01", worksheet.outputs_energy_flows_i416); end
  def test_outputs_energy_flows_j416; assert_equal("Global Oversupply", worksheet.outputs_energy_flows_j416); end
  def test_outputs_energy_flows_v416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v416||0), 0.002); end
  def test_outputs_energy_flows_w416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w416||0), 0.002); end
  def test_outputs_energy_flows_x416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x416||0), 0.002); end
  def test_outputs_energy_flows_y416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y416||0), 0.002); end
  def test_outputs_energy_flows_z416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z416||0), 0.002); end
  def test_outputs_energy_flows_aa416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa416||0), 0.002); end
  def test_outputs_energy_flows_ab416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab416||0), 0.002); end
  def test_outputs_energy_flows_ac416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac416||0), 0.002); end
  def test_outputs_energy_flows_ad416; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad416||0), 0.002); end
  def test_outputs_energy_flows_d418; assert_equal("Coal reserves", worksheet.outputs_energy_flows_d418); end
  def test_outputs_energy_flows_f418; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f418); end
  def test_outputs_energy_flows_i418; assert_equal("G.L.02", worksheet.outputs_energy_flows_i418); end
  def test_outputs_energy_flows_j418; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_j418); end
  def test_outputs_energy_flows_o418; assert_equal("Coal.extract", worksheet.outputs_energy_flows_o418); end
  def test_outputs_energy_flows_p418; assert_equal("Global Coal Extraction", worksheet.outputs_energy_flows_p418); end
  def test_outputs_energy_flows_q418; assert_equal("Coal.wash", worksheet.outputs_energy_flows_q418); end
  def test_outputs_energy_flows_r418; assert_equal("Global Coal washeries", worksheet.outputs_energy_flows_r418); end
  def test_outputs_energy_flows_s418; assert_equal("coal.network", worksheet.outputs_energy_flows_s418); end
  def test_outputs_energy_flows_t418; assert_equal("Global Coal distribution network", worksheet.outputs_energy_flows_t418); end
  def test_outputs_energy_flows_v418; assert_in_epsilon(41.902629077496705, worksheet.outputs_energy_flows_v418, 0.002); end
  def test_outputs_energy_flows_w418; assert_in_epsilon(51.49294167578721, worksheet.outputs_energy_flows_w418, 0.002); end
  def test_outputs_energy_flows_x418; assert_in_epsilon(57.7624811936998, worksheet.outputs_energy_flows_x418, 0.002); end
  def test_outputs_energy_flows_y418; assert_in_epsilon(68.2991149748193, worksheet.outputs_energy_flows_y418, 0.002); end
  def test_outputs_energy_flows_z418; assert_in_epsilon(69.73801635382554, worksheet.outputs_energy_flows_z418, 0.002); end
  def test_outputs_energy_flows_aa418; assert_in_epsilon(78.93580360870631, worksheet.outputs_energy_flows_aa418, 0.002); end
  def test_outputs_energy_flows_ab418; assert_in_epsilon(88.20289571348412, worksheet.outputs_energy_flows_ab418, 0.002); end
  def test_outputs_energy_flows_ac418; assert_in_epsilon(94.87703129026153, worksheet.outputs_energy_flows_ac418, 0.002); end
  def test_outputs_energy_flows_ad418; assert_in_epsilon(102.81759991366097, worksheet.outputs_energy_flows_ad418, 0.002); end
  def test_outputs_energy_flows_d420; assert_equal("Oil reserves", worksheet.outputs_energy_flows_d420); end
  def test_outputs_energy_flows_f420; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f420); end
  def test_outputs_energy_flows_i420; assert_equal("G.L.02", worksheet.outputs_energy_flows_i420); end
  def test_outputs_energy_flows_j420; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_j420); end
  def test_outputs_energy_flows_o420; assert_equal("Oil.extract", worksheet.outputs_energy_flows_o420); end
  def test_outputs_energy_flows_p420; assert_equal("Global Oil Extraction", worksheet.outputs_energy_flows_p420); end
  def test_outputs_energy_flows_q420; assert_equal("Oil.refine", worksheet.outputs_energy_flows_q420); end
  def test_outputs_energy_flows_r420; assert_equal("Global Oil refineries", worksheet.outputs_energy_flows_r420); end
  def test_outputs_energy_flows_s420; assert_equal("oil.network", worksheet.outputs_energy_flows_s420); end
  def test_outputs_energy_flows_t420; assert_equal("Global Oil distribution network", worksheet.outputs_energy_flows_t420); end
  def test_outputs_energy_flows_v420; assert_in_epsilon(25.060647223759215, worksheet.outputs_energy_flows_v420, 0.002); end
  def test_outputs_energy_flows_w420; assert_in_epsilon(29.39301841657839, worksheet.outputs_energy_flows_w420, 0.002); end
  def test_outputs_energy_flows_x420; assert_in_epsilon(35.60708221891381, worksheet.outputs_energy_flows_x420, 0.002); end
  def test_outputs_energy_flows_y420; assert_in_epsilon(46.1774894250187, worksheet.outputs_energy_flows_y420, 0.002); end
  def test_outputs_energy_flows_z420; assert_in_epsilon(53.19443070229727, worksheet.outputs_energy_flows_z420, 0.002); end
  def test_outputs_energy_flows_aa420; assert_in_epsilon(58.70033246852153, worksheet.outputs_energy_flows_aa420, 0.002); end
  def test_outputs_energy_flows_ab420; assert_in_epsilon(69.75163446825738, worksheet.outputs_energy_flows_ab420, 0.002); end
  def test_outputs_energy_flows_ac420; assert_in_epsilon(82.12441745571768, worksheet.outputs_energy_flows_ac420, 0.002); end
  def test_outputs_energy_flows_ad420; assert_in_epsilon(93.00773747230967, worksheet.outputs_energy_flows_ad420, 0.002); end
  def test_outputs_energy_flows_d422; assert_equal("Gas reserves", worksheet.outputs_energy_flows_d422); end
  def test_outputs_energy_flows_f422; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f422); end
  def test_outputs_energy_flows_i422; assert_equal("G.L.02", worksheet.outputs_energy_flows_i422); end
  def test_outputs_energy_flows_j422; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_j422); end
  def test_outputs_energy_flows_o422; assert_equal("Naturalgas.extract", worksheet.outputs_energy_flows_o422); end
  def test_outputs_energy_flows_p422; assert_equal("Global Natural Gas Extraction", worksheet.outputs_energy_flows_p422); end
  def test_outputs_energy_flows_q422; assert_equal("Natural.gas.process", worksheet.outputs_energy_flows_q422); end
  def test_outputs_energy_flows_r422; assert_equal("Global Natural gas processing plants", worksheet.outputs_energy_flows_r422); end
  def test_outputs_energy_flows_s422; assert_equal("gas.nework", worksheet.outputs_energy_flows_s422); end
  def test_outputs_energy_flows_t422; assert_equal("Global Gas distribution network", worksheet.outputs_energy_flows_t422); end
  def test_outputs_energy_flows_v422; assert_in_epsilon(32.084115656986725, worksheet.outputs_energy_flows_v422, 0.002); end
  def test_outputs_energy_flows_w422; assert_in_epsilon(36.02164401258029, worksheet.outputs_energy_flows_w422, 0.002); end
  def test_outputs_energy_flows_x422; assert_in_epsilon(40.97954324156632, worksheet.outputs_energy_flows_x422, 0.002); end
  def test_outputs_energy_flows_y422; assert_in_epsilon(44.20361016176877, worksheet.outputs_energy_flows_y422, 0.002); end
  def test_outputs_energy_flows_z422; assert_in_epsilon(49.06118382786759, worksheet.outputs_energy_flows_z422, 0.002); end
  def test_outputs_energy_flows_aa422; assert_in_epsilon(51.38714021752503, worksheet.outputs_energy_flows_aa422, 0.002); end
  def test_outputs_energy_flows_ab422; assert_in_epsilon(55.551998546136105, worksheet.outputs_energy_flows_ab422, 0.002); end
  def test_outputs_energy_flows_ac422; assert_in_epsilon(65.83062226285844, worksheet.outputs_energy_flows_ac422, 0.002); end
  def test_outputs_energy_flows_ad422; assert_in_epsilon(77.61487905753285, worksheet.outputs_energy_flows_ad422, 0.002); end
  def test_outputs_energy_flows_d424; assert_equal("Solid", worksheet.outputs_energy_flows_d424); end
  def test_outputs_energy_flows_f424; assert_equal("Power plants", worksheet.outputs_energy_flows_f424); end
  def test_outputs_energy_flows_i424; assert_equal("G.C.01", worksheet.outputs_energy_flows_i424); end
  def test_outputs_energy_flows_j424; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j424); end
  def test_outputs_energy_flows_n424; assert_equal("Global Electricity Generation", worksheet.outputs_energy_flows_n424); end
  def test_outputs_energy_flows_v424; assert_in_epsilon(96.18125381640462, worksheet.outputs_energy_flows_v424, 0.002); end
  def test_outputs_energy_flows_w424; assert_in_epsilon(105.19290817208679, worksheet.outputs_energy_flows_w424, 0.002); end
  def test_outputs_energy_flows_x424; assert_in_epsilon(109.59362107710159, worksheet.outputs_energy_flows_x424, 0.002); end
  def test_outputs_energy_flows_y424; assert_in_epsilon(121.1610247504234, worksheet.outputs_energy_flows_y424, 0.002); end
  def test_outputs_energy_flows_z424; assert_in_epsilon(128.72023022702191, worksheet.outputs_energy_flows_z424, 0.002); end
  def test_outputs_energy_flows_aa424; assert_in_epsilon(134.31650062287466, worksheet.outputs_energy_flows_aa424, 0.002); end
  def test_outputs_energy_flows_ab424; assert_in_epsilon(135.34142778784485, worksheet.outputs_energy_flows_ab424, 0.002); end
  def test_outputs_energy_flows_ac424; assert_in_epsilon(129.50002397038273, worksheet.outputs_energy_flows_ac424, 0.002); end
  def test_outputs_energy_flows_ad424; assert_in_epsilon(125.29572004240119, worksheet.outputs_energy_flows_ad424, 0.002); end
  def test_outputs_energy_flows_d426; assert_equal("Liquid", worksheet.outputs_energy_flows_d426); end
  def test_outputs_energy_flows_f426; assert_equal("Power plants", worksheet.outputs_energy_flows_f426); end
  def test_outputs_energy_flows_i426; assert_equal("G.C.02", worksheet.outputs_energy_flows_i426); end
  def test_outputs_energy_flows_j426; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j426); end
  def test_outputs_energy_flows_n426; assert_equal("Global Electricity Generation", worksheet.outputs_energy_flows_n426); end
  def test_outputs_energy_flows_v426; assert_in_epsilon(11.163925645193483, worksheet.outputs_energy_flows_v426, 0.002); end
  def test_outputs_energy_flows_w426; assert_in_epsilon(12.625944002906081, worksheet.outputs_energy_flows_w426, 0.002); end
  def test_outputs_energy_flows_x426; assert_in_epsilon(25.341521735644072, worksheet.outputs_energy_flows_x426, 0.002); end
  def test_outputs_energy_flows_y426; assert_in_epsilon(28.704171610642522, worksheet.outputs_energy_flows_y426, 0.002); end
  def test_outputs_energy_flows_z426; assert_in_epsilon(35.7433119875998, worksheet.outputs_energy_flows_z426, 0.002); end
  def test_outputs_energy_flows_aa426; assert_in_epsilon(41.398815671946565, worksheet.outputs_energy_flows_aa426, 0.002); end
  def test_outputs_energy_flows_ab426; assert_in_epsilon(47.878354074814844, worksheet.outputs_energy_flows_ab426, 0.002); end
  def test_outputs_energy_flows_ac426; assert_in_epsilon(56.20187727939346, worksheet.outputs_energy_flows_ac426, 0.002); end
  def test_outputs_energy_flows_ad426; assert_in_epsilon(61.92330112554239, worksheet.outputs_energy_flows_ad426, 0.002); end
  def test_outputs_energy_flows_d428; assert_equal("Gas", worksheet.outputs_energy_flows_d428); end
  def test_outputs_energy_flows_f428; assert_equal("Power plants", worksheet.outputs_energy_flows_f428); end
  def test_outputs_energy_flows_i428; assert_equal("G.C.03", worksheet.outputs_energy_flows_i428); end
  def test_outputs_energy_flows_j428; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j428); end
  def test_outputs_energy_flows_n428; assert_equal("Global Electricity Generation", worksheet.outputs_energy_flows_n428); end
  def test_outputs_energy_flows_v428; assert_in_epsilon(40.34420667416213, worksheet.outputs_energy_flows_v428, 0.002); end
  def test_outputs_energy_flows_w428; assert_in_epsilon(44.16979283610214, worksheet.outputs_energy_flows_w428, 0.002); end
  def test_outputs_energy_flows_x428; assert_in_epsilon(46.181781665089176, worksheet.outputs_energy_flows_x428, 0.002); end
  def test_outputs_energy_flows_y428; assert_in_epsilon(49.57392311305404, worksheet.outputs_energy_flows_y428, 0.002); end
  def test_outputs_energy_flows_z428; assert_in_epsilon(53.78479853799389, worksheet.outputs_energy_flows_z428, 0.002); end
  def test_outputs_energy_flows_aa428; assert_in_epsilon(58.70480396105018, worksheet.outputs_energy_flows_aa428, 0.002); end
  def test_outputs_energy_flows_ab428; assert_in_epsilon(64.91750273721327, worksheet.outputs_energy_flows_ab428, 0.002); end
  def test_outputs_energy_flows_ac428; assert_in_epsilon(72.14589162137932, worksheet.outputs_energy_flows_ac428, 0.002); end
  def test_outputs_energy_flows_ad428; assert_in_epsilon(80.24858439694792, worksheet.outputs_energy_flows_ad428, 0.002); end
  def test_outputs_energy_flows_d430; assert_equal("Nuclear", worksheet.outputs_energy_flows_d430); end
  def test_outputs_energy_flows_f430; assert_equal("Power plants", worksheet.outputs_energy_flows_f430); end
  def test_outputs_energy_flows_i430; assert_equal("G.N.01", worksheet.outputs_energy_flows_i430); end
  def test_outputs_energy_flows_j430; assert_equal("Global Nuclear fission", worksheet.outputs_energy_flows_j430); end
  def test_outputs_energy_flows_n430; assert_equal("Global Electricity Generation", worksheet.outputs_energy_flows_n430); end
  def test_outputs_energy_flows_v430; assert_in_epsilon(28.364194134679412, worksheet.outputs_energy_flows_v430, 0.002); end
  def test_outputs_energy_flows_w430; assert_in_epsilon(30.079108475420238, worksheet.outputs_energy_flows_w430, 0.002); end
  def test_outputs_energy_flows_x430; assert_in_epsilon(30.484933913827224, worksheet.outputs_energy_flows_x430, 0.002); end
  def test_outputs_energy_flows_y430; assert_in_epsilon(31.422413793579608, worksheet.outputs_energy_flows_y430, 0.002); end
  def test_outputs_energy_flows_z430; assert_in_epsilon(31.66327271788277, worksheet.outputs_energy_flows_z430, 0.002); end
  def test_outputs_energy_flows_aa430; assert_in_epsilon(32.685107495888026, worksheet.outputs_energy_flows_aa430, 0.002); end
  def test_outputs_energy_flows_ab430; assert_in_epsilon(33.09253981576231, worksheet.outputs_energy_flows_ab430, 0.002); end
  def test_outputs_energy_flows_ac430; assert_in_epsilon(33.90231671085916, worksheet.outputs_energy_flows_ac430, 0.002); end
  def test_outputs_energy_flows_ad430; assert_in_epsilon(34.751120746493534, worksheet.outputs_energy_flows_ad430, 0.002); end
  def test_outputs_energy_flows_d432; assert_equal("Power plants", worksheet.outputs_energy_flows_d432); end
  def test_outputs_energy_flows_f432; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f432); end
  def test_outputs_energy_flows_i432; assert_equal("G.E.02", worksheet.outputs_energy_flows_i432); end
  def test_outputs_energy_flows_j432; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j432); end
  def test_outputs_energy_flows_p432; assert_equal("Unabated power", worksheet.outputs_energy_flows_p432); end
  def test_outputs_energy_flows_r432; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_r432); end
  def test_outputs_energy_flows_t432; assert_equal("Nuclear", worksheet.outputs_energy_flows_t432); end
  def test_outputs_energy_flows_v432; assert_in_epsilon(61.306527361361816, worksheet.outputs_energy_flows_v432, 0.002); end
  def test_outputs_energy_flows_w432; assert_in_epsilon(67.83225341049895, worksheet.outputs_energy_flows_w432, 0.002); end
  def test_outputs_energy_flows_x432; assert_in_epsilon(75.65898703607095, worksheet.outputs_energy_flows_x432, 0.002); end
  def test_outputs_energy_flows_y432; assert_in_epsilon(83.799421391127, worksheet.outputs_energy_flows_y432, 0.002); end
  def test_outputs_energy_flows_z432; assert_in_epsilon(91.67221379870963, worksheet.outputs_energy_flows_z432, 0.002); end
  def test_outputs_energy_flows_aa432; assert_in_epsilon(99.10489252993047, worksheet.outputs_energy_flows_aa432, 0.002); end
  def test_outputs_energy_flows_ab432; assert_in_epsilon(105.71033519639836, worksheet.outputs_energy_flows_ab432, 0.002); end
  def test_outputs_energy_flows_ac432; assert_in_epsilon(110.2743290163364, worksheet.outputs_energy_flows_ac432, 0.002); end
  def test_outputs_energy_flows_ad432; assert_in_epsilon(114.74249027441263, worksheet.outputs_energy_flows_ad432, 0.002); end
  def test_outputs_energy_flows_d434; assert_equal("Power plants", worksheet.outputs_energy_flows_d434); end
  def test_outputs_energy_flows_f434; assert_equal("Heat network", worksheet.outputs_energy_flows_f434); end
  def test_outputs_energy_flows_i434; assert_equal("G.H.01", worksheet.outputs_energy_flows_i434); end
  def test_outputs_energy_flows_j434; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j434); end
  def test_outputs_energy_flows_p434; assert_equal("Unabated power", worksheet.outputs_energy_flows_p434); end
  def test_outputs_energy_flows_r434; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_r434); end
  def test_outputs_energy_flows_t434; assert_equal("Nuclear", worksheet.outputs_energy_flows_t434); end
  def test_outputs_energy_flows_v434; assert_in_epsilon(9.655492400541373, worksheet.outputs_energy_flows_v434, 0.002); end
  def test_outputs_energy_flows_w434; assert_in_epsilon(10.913045339706686, worksheet.outputs_energy_flows_w434, 0.002); end
  def test_outputs_energy_flows_x434; assert_in_epsilon(12.322888993968357, worksheet.outputs_energy_flows_x434, 0.002); end
  def test_outputs_energy_flows_y434; assert_in_epsilon(13.610861660470524, worksheet.outputs_energy_flows_y434, 0.002); end
  def test_outputs_energy_flows_z434; assert_in_epsilon(14.897772185550838, worksheet.outputs_energy_flows_z434, 0.002); end
  def test_outputs_energy_flows_aa434; assert_in_epsilon(16.109464702177412, worksheet.outputs_energy_flows_aa434, 0.002); end
  def test_outputs_energy_flows_ab434; assert_in_epsilon(17.2982228538038, worksheet.outputs_energy_flows_ab434, 0.002); end
  def test_outputs_energy_flows_ac434; assert_in_epsilon(18.404263706149784, worksheet.outputs_energy_flows_ac434, 0.002); end
  def test_outputs_energy_flows_ad434; assert_in_epsilon(19.383988191958352, worksheet.outputs_energy_flows_ad434, 0.002); end
  def test_outputs_energy_flows_d436; assert_equal("Solar", worksheet.outputs_energy_flows_d436); end
  def test_outputs_energy_flows_f436; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f436); end
  def test_outputs_energy_flows_i436; assert_equal("G.E.02", worksheet.outputs_energy_flows_i436); end
  def test_outputs_energy_flows_j436; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j436); end
  def test_outputs_energy_flows_p436; assert_equal("Solar", worksheet.outputs_energy_flows_p436); end
  def test_outputs_energy_flows_v436; assert_in_delta(0.23021801616127766, worksheet.outputs_energy_flows_v436, 0.002); end
  def test_outputs_energy_flows_w436; assert_in_delta(0.5097629163990014, worksheet.outputs_energy_flows_w436, 0.002); end
  def test_outputs_energy_flows_x436; assert_in_delta(0.7712380782227164, worksheet.outputs_energy_flows_x436, 0.002); end
  def test_outputs_energy_flows_y436; assert_in_delta(0.8937961283568197, worksheet.outputs_energy_flows_y436, 0.002); end
  def test_outputs_energy_flows_z436; assert_in_epsilon(1.0900911465836793, worksheet.outputs_energy_flows_z436, 0.002); end
  def test_outputs_energy_flows_aa436; assert_in_epsilon(1.354087549079202, worksheet.outputs_energy_flows_aa436, 0.002); end
  def test_outputs_energy_flows_ab436; assert_in_epsilon(1.6162192917347622, worksheet.outputs_energy_flows_ab436, 0.002); end
  def test_outputs_energy_flows_ac436; assert_in_epsilon(2.1897541469038524, worksheet.outputs_energy_flows_ac436, 0.002); end
  def test_outputs_energy_flows_ad436; assert_in_epsilon(3.0339846530067898, worksheet.outputs_energy_flows_ad436, 0.002); end
  def test_outputs_energy_flows_d438; assert_equal("Wind", worksheet.outputs_energy_flows_d438); end
  def test_outputs_energy_flows_f438; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f438); end
  def test_outputs_energy_flows_i438; assert_equal("G.E.02", worksheet.outputs_energy_flows_i438); end
  def test_outputs_energy_flows_j438; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j438); end
  def test_outputs_energy_flows_p438; assert_equal("Wind", worksheet.outputs_energy_flows_p438); end
  def test_outputs_energy_flows_v438; assert_in_epsilon(1.5851747906781677, worksheet.outputs_energy_flows_v438, 0.002); end
  def test_outputs_energy_flows_w438; assert_in_epsilon(2.8982098477289893, worksheet.outputs_energy_flows_w438, 0.002); end
  def test_outputs_energy_flows_x438; assert_in_epsilon(3.4812156988700655, worksheet.outputs_energy_flows_x438, 0.002); end
  def test_outputs_energy_flows_y438; assert_in_epsilon(3.621715818450613, worksheet.outputs_energy_flows_y438, 0.002); end
  def test_outputs_energy_flows_z438; assert_in_epsilon(3.995067306846458, worksheet.outputs_energy_flows_z438, 0.002); end
  def test_outputs_energy_flows_aa438; assert_in_epsilon(4.29321438155864, worksheet.outputs_energy_flows_aa438, 0.002); end
  def test_outputs_energy_flows_ab438; assert_in_epsilon(5.4470053339898, worksheet.outputs_energy_flows_ab438, 0.002); end
  def test_outputs_energy_flows_ac438; assert_in_epsilon(8.011938295415295, worksheet.outputs_energy_flows_ac438, 0.002); end
  def test_outputs_energy_flows_ad438; assert_in_epsilon(9.886358964024362, worksheet.outputs_energy_flows_ad438, 0.002); end
  def test_outputs_energy_flows_d440; assert_equal("Marine", worksheet.outputs_energy_flows_d440); end
  def test_outputs_energy_flows_f440; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f440); end
  def test_outputs_energy_flows_i440; assert_equal("G.E.02", worksheet.outputs_energy_flows_i440); end
  def test_outputs_energy_flows_j440; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j440); end
  def test_outputs_energy_flows_p440; assert_equal("Marine", worksheet.outputs_energy_flows_p440); end
  def test_outputs_energy_flows_v440; assert_in_delta(0.0020659460038178223, worksheet.outputs_energy_flows_v440, 0.002); end
  def test_outputs_energy_flows_w440; assert_in_delta(0.005253069535324254, worksheet.outputs_energy_flows_w440, 0.002); end
  def test_outputs_energy_flows_x440; assert_in_delta(0.007291574131121725, worksheet.outputs_energy_flows_x440, 0.002); end
  def test_outputs_energy_flows_y440; assert_in_delta(0.018268137339261956, worksheet.outputs_energy_flows_y440, 0.002); end
  def test_outputs_energy_flows_z440; assert_in_delta(0.04233817237425517, worksheet.outputs_energy_flows_z440, 0.002); end
  def test_outputs_energy_flows_aa440; assert_in_delta(0.06977958039460573, worksheet.outputs_energy_flows_aa440, 0.002); end
  def test_outputs_energy_flows_ab440; assert_in_delta(0.10427735047733218, worksheet.outputs_energy_flows_ab440, 0.002); end
  def test_outputs_energy_flows_ac440; assert_in_delta(0.14034320101836434, worksheet.outputs_energy_flows_ac440, 0.002); end
  def test_outputs_energy_flows_ad440; assert_in_delta(0.17092076995532643, worksheet.outputs_energy_flows_ad440, 0.002); end
  def test_outputs_energy_flows_d442; assert_equal("Geothermal", worksheet.outputs_energy_flows_d442); end
  def test_outputs_energy_flows_f442; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f442); end
  def test_outputs_energy_flows_i442; assert_equal("G.E.02", worksheet.outputs_energy_flows_i442); end
  def test_outputs_energy_flows_j442; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j442); end
  def test_outputs_energy_flows_p442; assert_equal("Geothermal", worksheet.outputs_energy_flows_p442); end
  def test_outputs_energy_flows_v442; assert_in_delta(0.26219832339716753, worksheet.outputs_energy_flows_v442, 0.002); end
  def test_outputs_energy_flows_w442; assert_in_delta(0.33032859640588036, worksheet.outputs_energy_flows_w442, 0.002); end
  def test_outputs_energy_flows_x442; assert_in_delta(0.4083228483350464, worksheet.outputs_energy_flows_x442, 0.002); end
  def test_outputs_energy_flows_y442; assert_in_delta(0.4633776144026932, worksheet.outputs_energy_flows_y442, 0.002); end
  def test_outputs_energy_flows_z442; assert_in_delta(0.49549289460882034, worksheet.outputs_energy_flows_z442, 0.002); end
  def test_outputs_energy_flows_aa442; assert_in_delta(0.7661788277747499, worksheet.outputs_energy_flows_aa442, 0.002); end
  def test_outputs_energy_flows_ab442; assert_in_delta(0.9542826118392096, worksheet.outputs_energy_flows_ab442, 0.002); end
  def test_outputs_energy_flows_ac442; assert_in_epsilon(1.2570838252112664, worksheet.outputs_energy_flows_ac442, 0.002); end
  def test_outputs_energy_flows_ad442; assert_in_epsilon(1.578236627272539, worksheet.outputs_energy_flows_ad442, 0.002); end
  def test_outputs_energy_flows_d444; assert_equal("Hydro", worksheet.outputs_energy_flows_d444); end
  def test_outputs_energy_flows_f444; assert_equal("Electricity grid", worksheet.outputs_energy_flows_f444); end
  def test_outputs_energy_flows_i444; assert_equal("G.E.02", worksheet.outputs_energy_flows_i444); end
  def test_outputs_energy_flows_j444; assert_equal("Global Electricity (supplied to grid)", worksheet.outputs_energy_flows_j444); end
  def test_outputs_energy_flows_p444; assert_equal("Hydro", worksheet.outputs_energy_flows_p444); end
  def test_outputs_energy_flows_v444; assert_in_epsilon(13.179648636705306, worksheet.outputs_energy_flows_v444, 0.002); end
  def test_outputs_energy_flows_w444; assert_in_epsilon(13.676942595574804, worksheet.outputs_energy_flows_w444, 0.002); end
  def test_outputs_energy_flows_x444; assert_in_epsilon(14.712292313221141, worksheet.outputs_energy_flows_x444, 0.002); end
  def test_outputs_energy_flows_y444; assert_in_epsilon(15.829165630682146, worksheet.outputs_energy_flows_y444, 0.002); end
  def test_outputs_energy_flows_z444; assert_in_epsilon(17.03435618127571, worksheet.outputs_energy_flows_z444, 0.002); end
  def test_outputs_energy_flows_aa444; assert_in_epsilon(18.319711605020377, worksheet.outputs_energy_flows_aa444, 0.002); end
  def test_outputs_energy_flows_ab444; assert_in_epsilon(19.689308081906866, worksheet.outputs_energy_flows_ab444, 0.002); end
  def test_outputs_energy_flows_ac444; assert_in_epsilon(21.071133098765557, worksheet.outputs_energy_flows_ac444, 0.002); end
  def test_outputs_energy_flows_ad444; assert_in_epsilon(22.550786435401854, worksheet.outputs_energy_flows_ad444, 0.002); end
  def test_outputs_energy_flows_d446; assert_equal("Solar", worksheet.outputs_energy_flows_d446); end
  def test_outputs_energy_flows_f446; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f446); end
  def test_outputs_energy_flows_i446; assert_equal("G.L.01", worksheet.outputs_energy_flows_i446); end
  def test_outputs_energy_flows_j446; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j446); end
  def test_outputs_energy_flows_p446; assert_equal("Solar", worksheet.outputs_energy_flows_p446); end
  def test_outputs_energy_flows_v446; assert_in_delta(0.019797808108029794, worksheet.outputs_energy_flows_v446, 0.002); end
  def test_outputs_energy_flows_w446; assert_in_delta(0.12830688473439594, worksheet.outputs_energy_flows_w446, 0.002); end
  def test_outputs_energy_flows_x446; assert_in_delta(0.7915972687396615, worksheet.outputs_energy_flows_x446, 0.002); end
  def test_outputs_energy_flows_y446; assert_in_delta(0.9356561194130046, worksheet.outputs_energy_flows_y446, 0.002); end
  def test_outputs_energy_flows_z446; assert_in_epsilon(1.166508608394058, worksheet.outputs_energy_flows_z446, 0.002); end
  def test_outputs_energy_flows_aa446; assert_in_epsilon(1.3324484397944203, worksheet.outputs_energy_flows_aa446, 0.002); end
  def test_outputs_energy_flows_ab446; assert_in_epsilon(1.2936701198333926, worksheet.outputs_energy_flows_ab446, 0.002); end
  def test_outputs_energy_flows_ac446; assert_in_epsilon(1.5061975342985314, worksheet.outputs_energy_flows_ac446, 0.002); end
  def test_outputs_energy_flows_ad446; assert_in_epsilon(1.866279628685621, worksheet.outputs_energy_flows_ad446, 0.002); end
  def test_outputs_energy_flows_d448; assert_equal("Power plants", worksheet.outputs_energy_flows_d448); end
  def test_outputs_energy_flows_f448; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f448); end
  def test_outputs_energy_flows_i448; assert_equal("G.L.01", worksheet.outputs_energy_flows_i448); end
  def test_outputs_energy_flows_j448; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j448); end
  def test_outputs_energy_flows_k448; assert_equal("G.L.02", worksheet.outputs_energy_flows_k448); end
  def test_outputs_energy_flows_l448; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_l448); end
  def test_outputs_energy_flows_p448; assert_equal("Unabated power", worksheet.outputs_energy_flows_p448); end
  def test_outputs_energy_flows_r448; assert_equal("Carbon Capture and Storage", worksheet.outputs_energy_flows_r448); end
  def test_outputs_energy_flows_t448; assert_equal("Nuclear", worksheet.outputs_energy_flows_t448); end
  def test_outputs_energy_flows_v448; assert_in_epsilon(101.0287875419374, worksheet.outputs_energy_flows_v448, 0.002); end
  def test_outputs_energy_flows_w448; assert_in_epsilon(108.82608200474372, worksheet.outputs_energy_flows_w448, 0.002); end
  def test_outputs_energy_flows_x448; assert_in_epsilon(118.60144724133359, worksheet.outputs_energy_flows_x448, 0.002); end
  def test_outputs_energy_flows_y448; assert_in_epsilon(127.89223292994603, worksheet.outputs_energy_flows_y448, 0.002); end
  def test_outputs_energy_flows_z448; assert_in_epsilon(137.2566497216445, worksheet.outputs_energy_flows_z448, 0.002); end
  def test_outputs_energy_flows_aa448; assert_in_epsilon(145.31100801851795, worksheet.outputs_energy_flows_aa448, 0.002); end
  def test_outputs_energy_flows_ab448; assert_in_epsilon(151.20057689833396, worksheet.outputs_energy_flows_ab448, 0.002); end
  def test_outputs_energy_flows_ac448; assert_in_epsilon(155.74448651600488, worksheet.outputs_energy_flows_ac448, 0.002); end
  def test_outputs_energy_flows_ad448; assert_in_epsilon(160.46111463224582, worksheet.outputs_energy_flows_ad448, 0.002); end
  def test_outputs_energy_flows_d450; assert_equal("Geothermal", worksheet.outputs_energy_flows_d450); end
  def test_outputs_energy_flows_f450; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f450); end
  def test_outputs_energy_flows_i450; assert_equal("G.L.01", worksheet.outputs_energy_flows_i450); end
  def test_outputs_energy_flows_j450; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j450); end
  def test_outputs_energy_flows_p450; assert_equal("Geothermal", worksheet.outputs_energy_flows_p450); end
  def test_outputs_energy_flows_v450; assert_in_epsilon(2.3597849105745077, worksheet.outputs_energy_flows_v450, 0.002); end
  def test_outputs_energy_flows_w450; assert_in_epsilon(2.9658578890688236, worksheet.outputs_energy_flows_w450, 0.002); end
  def test_outputs_energy_flows_x450; assert_in_epsilon(3.655213114579753, worksheet.outputs_energy_flows_x450, 0.002); end
  def test_outputs_energy_flows_y450; assert_in_epsilon(4.13572834622871, worksheet.outputs_energy_flows_y450, 0.002); end
  def test_outputs_energy_flows_z450; assert_in_epsilon(4.409256690341049, worksheet.outputs_energy_flows_z450, 0.002); end
  def test_outputs_energy_flows_aa450; assert_in_epsilon(6.797858809734171, worksheet.outputs_energy_flows_aa450, 0.002); end
  def test_outputs_energy_flows_ab450; assert_in_epsilon(8.441819754221326, worksheet.outputs_energy_flows_ab450, 0.002); end
  def test_outputs_energy_flows_ac450; assert_in_epsilon(11.08774902548103, worksheet.outputs_energy_flows_ac450, 0.002); end
  def test_outputs_energy_flows_ad450; assert_in_epsilon(13.879516822997187, worksheet.outputs_energy_flows_ad450, 0.002); end
  def test_outputs_energy_flows_d452; assert_equal("Solid", worksheet.outputs_energy_flows_d452); end
  def test_outputs_energy_flows_f452; assert_equal("Hydrogen", worksheet.outputs_energy_flows_f452); end
  def test_outputs_energy_flows_i452; assert_equal("G.FF.01", worksheet.outputs_energy_flows_i452); end
  def test_outputs_energy_flows_j452; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_j452); end
  def test_outputs_energy_flows_p452; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_p452); end
  def test_outputs_energy_flows_v452; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v452||0), 0.002); end
  def test_outputs_energy_flows_w452; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w452||0), 0.002); end
  def test_outputs_energy_flows_x452; assert_in_delta(7.2265615342360816e-09, worksheet.outputs_energy_flows_x452, 0.002); end
  def test_outputs_energy_flows_y452; assert_in_delta(1.3386288022305346e-08, worksheet.outputs_energy_flows_y452, 0.002); end
  def test_outputs_energy_flows_z452; assert_in_delta(2.1220663842599577e-08, worksheet.outputs_energy_flows_z452, 0.002); end
  def test_outputs_energy_flows_aa452; assert_in_delta(2.0388090674814267e-08, worksheet.outputs_energy_flows_aa452, 0.002); end
  def test_outputs_energy_flows_ab452; assert_in_delta(1.4807622517837991e-08, worksheet.outputs_energy_flows_ab452, 0.002); end
  def test_outputs_energy_flows_ac452; assert_in_delta(8.056069035257425e-09, worksheet.outputs_energy_flows_ac452, 0.002); end
  def test_outputs_energy_flows_ad452; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad452||0), 0.002); end
  def test_outputs_energy_flows_d454; assert_equal("Gas", worksheet.outputs_energy_flows_d454); end
  def test_outputs_energy_flows_f454; assert_equal("Hydrogen", worksheet.outputs_energy_flows_f454); end
  def test_outputs_energy_flows_i454; assert_equal("G.FF.03", worksheet.outputs_energy_flows_i454); end
  def test_outputs_energy_flows_j454; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_j454); end
  def test_outputs_energy_flows_p454; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_p454); end
  def test_outputs_energy_flows_v454; assert_in_delta(8.663792701034158e-08, worksheet.outputs_energy_flows_v454, 0.002); end
  def test_outputs_energy_flows_w454; assert_in_delta(8.606804825586925e-08, worksheet.outputs_energy_flows_w454, 0.002); end
  def test_outputs_energy_flows_x454; assert_in_delta(7.80468645697497e-08, worksheet.outputs_energy_flows_x454, 0.002); end
  def test_outputs_energy_flows_y454; assert_in_delta(6.827006891375725e-08, worksheet.outputs_energy_flows_y454, 0.002); end
  def test_outputs_energy_flows_z454; assert_in_delta(5.0222237760819e-08, worksheet.outputs_energy_flows_z454, 0.002); end
  def test_outputs_energy_flows_aa454; assert_in_delta(3.6116046338242416e-08, worksheet.outputs_energy_flows_aa454, 0.002); end
  def test_outputs_energy_flows_ab454; assert_in_delta(2.496142081578404e-08, worksheet.outputs_energy_flows_ab454, 0.002); end
  def test_outputs_energy_flows_ac454; assert_in_delta(1.288971045641188e-08, worksheet.outputs_energy_flows_ac454, 0.002); end
  def test_outputs_energy_flows_ad454; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad454||0), 0.002); end
  def test_outputs_energy_flows_d456; assert_equal("Electricity", worksheet.outputs_energy_flows_d456); end
  def test_outputs_energy_flows_f456; assert_equal("Hydrogen", worksheet.outputs_energy_flows_f456); end
  def test_outputs_energy_flows_i456; assert_equal("G.E.01", worksheet.outputs_energy_flows_i456); end
  def test_outputs_energy_flows_j456; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j456); end
  def test_outputs_energy_flows_p456; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_p456); end
  def test_outputs_energy_flows_v456; assert_in_delta(5.69986361910142e-09, worksheet.outputs_energy_flows_v456, 0.002); end
  def test_outputs_energy_flows_w456; assert_in_delta(5.6285999958060365e-09, worksheet.outputs_energy_flows_w456, 0.002); end
  def test_outputs_energy_flows_x456; assert_in_delta(5.371401808320746e-09, worksheet.outputs_energy_flows_x456, 0.002); end
  def test_outputs_energy_flows_y456; assert_in_delta(4.945014256203269e-09, worksheet.outputs_energy_flows_y456, 0.002); end
  def test_outputs_energy_flows_z456; assert_in_delta(9.551932260344856e-09, worksheet.outputs_energy_flows_z456, 0.002); end
  def test_outputs_energy_flows_aa456; assert_in_delta(1.2083123754154353e-08, worksheet.outputs_energy_flows_aa456, 0.002); end
  def test_outputs_energy_flows_ab456; assert_in_delta(1.0292619729141713e-08, worksheet.outputs_energy_flows_ab456, 0.002); end
  def test_outputs_energy_flows_ac456; assert_in_delta(6.400327023554584e-09, worksheet.outputs_energy_flows_ac456, 0.002); end
  def test_outputs_energy_flows_ad456; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad456||0), 0.002); end
  def test_outputs_energy_flows_d458; assert_equal("Hydrogen", worksheet.outputs_energy_flows_d458); end
  def test_outputs_energy_flows_f458; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f458); end
  def test_outputs_energy_flows_i458; assert_equal("G.L.01", worksheet.outputs_energy_flows_i458); end
  def test_outputs_energy_flows_j458; assert_equal("Global Conversion losses", worksheet.outputs_energy_flows_j458); end
  def test_outputs_energy_flows_p458; assert_equal("Hydrogen production", worksheet.outputs_energy_flows_p458); end
  def test_outputs_energy_flows_v458; assert_in_delta(2.393942720022596e-08, worksheet.outputs_energy_flows_v458, 0.002); end
  def test_outputs_energy_flows_w458; assert_in_delta(2.374818910230483e-08, worksheet.outputs_energy_flows_w458, 0.002); end
  def test_outputs_energy_flows_x458; assert_in_delta(2.541065694275741e-08, worksheet.outputs_energy_flows_x458, 0.002); end
  def test_outputs_energy_flows_y458; assert_in_delta(2.6182360203590697e-08, worksheet.outputs_energy_flows_y458, 0.002); end
  def test_outputs_energy_flows_z458; assert_in_delta(2.762406852473141e-08, worksheet.outputs_energy_flows_z458, 0.002); end
  def test_outputs_energy_flows_aa458; assert_in_delta(2.4635707109589744e-08, worksheet.outputs_energy_flows_aa458, 0.002); end
  def test_outputs_energy_flows_ab458; assert_in_delta(1.8044037546870485e-08, worksheet.outputs_energy_flows_ab458, 0.002); end
  def test_outputs_energy_flows_ac458; assert_in_delta(9.926956264038524e-09, worksheet.outputs_energy_flows_ac458, 0.002); end
  def test_outputs_energy_flows_ad458; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad458||0), 0.002); end
  def test_outputs_energy_flows_d460; assert_equal("Hydrogen", worksheet.outputs_energy_flows_d460); end
  def test_outputs_energy_flows_f460; assert_equal("Transport", worksheet.outputs_energy_flows_f460); end
  def test_outputs_energy_flows_i460; assert_equal("G.HY.01", worksheet.outputs_energy_flows_i460); end
  def test_outputs_energy_flows_j460; assert_equal("Global H2", worksheet.outputs_energy_flows_j460); end
  def test_outputs_energy_flows_p460; assert_equal("Global transport", worksheet.outputs_energy_flows_p460); end
  def test_outputs_energy_flows_v460; assert_in_delta(6.839836342921704e-08, worksheet.outputs_energy_flows_v460, 0.002); end
  def test_outputs_energy_flows_w460; assert_in_delta(6.794845914937047e-08, worksheet.outputs_energy_flows_w460, 0.002); end
  def test_outputs_energy_flows_x460; assert_in_delta(6.523417096954911e-08, worksheet.outputs_energy_flows_x460, 0.002); end
  def test_outputs_energy_flows_y460; assert_in_delta(6.041901098867518e-08, worksheet.outputs_energy_flows_y460, 0.002); end
  def test_outputs_energy_flows_z460; assert_in_delta(5.337076533903203e-08, worksheet.outputs_energy_flows_z460, 0.002); end
  def test_outputs_energy_flows_aa460; assert_in_delta(4.3951553657621294e-08, worksheet.outputs_energy_flows_aa460, 0.002); end
  def test_outputs_energy_flows_ab460; assert_in_delta(3.201762551589326e-08, worksheet.outputs_energy_flows_ab460, 0.002); end
  def test_outputs_energy_flows_ac460; assert_in_delta(1.7419150251185364e-08, worksheet.outputs_energy_flows_ac460, 0.002); end
  def test_outputs_energy_flows_ad460; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad460||0), 0.002); end
  def test_outputs_energy_flows_d462; assert_equal("Solid", worksheet.outputs_energy_flows_d462); end
  def test_outputs_energy_flows_f462; assert_equal("Transport", worksheet.outputs_energy_flows_f462); end
  def test_outputs_energy_flows_i462; assert_equal("G.C.01", worksheet.outputs_energy_flows_i462); end
  def test_outputs_energy_flows_j462; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j462); end
  def test_outputs_energy_flows_p462; assert_equal("Global transport", worksheet.outputs_energy_flows_p462); end
  def test_outputs_energy_flows_v462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v462||0), 0.002); end
  def test_outputs_energy_flows_w462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w462||0), 0.002); end
  def test_outputs_energy_flows_x462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x462||0), 0.002); end
  def test_outputs_energy_flows_y462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y462||0), 0.002); end
  def test_outputs_energy_flows_z462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z462||0), 0.002); end
  def test_outputs_energy_flows_aa462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa462||0), 0.002); end
  def test_outputs_energy_flows_ab462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab462||0), 0.002); end
  def test_outputs_energy_flows_ac462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac462||0), 0.002); end
  def test_outputs_energy_flows_ad462; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad462||0), 0.002); end
  def test_outputs_energy_flows_d464; assert_equal("Liquid", worksheet.outputs_energy_flows_d464); end
  def test_outputs_energy_flows_f464; assert_equal("Transport", worksheet.outputs_energy_flows_f464); end
  def test_outputs_energy_flows_i464; assert_equal("G.C.02", worksheet.outputs_energy_flows_i464); end
  def test_outputs_energy_flows_j464; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j464); end
  def test_outputs_energy_flows_p464; assert_equal("Global transport", worksheet.outputs_energy_flows_p464); end
  def test_outputs_energy_flows_v464; assert_in_epsilon(98.38072375352475, worksheet.outputs_energy_flows_v464, 0.002); end
  def test_outputs_energy_flows_w464; assert_in_epsilon(105.96212201881144, worksheet.outputs_energy_flows_w464, 0.002); end
  def test_outputs_energy_flows_x464; assert_in_epsilon(114.14243719052911, worksheet.outputs_energy_flows_x464, 0.002); end
  def test_outputs_energy_flows_y464; assert_in_epsilon(122.35073266905201, worksheet.outputs_energy_flows_y464, 0.002); end
  def test_outputs_energy_flows_z464; assert_in_epsilon(130.60394292971395, worksheet.outputs_energy_flows_z464, 0.002); end
  def test_outputs_energy_flows_aa464; assert_in_epsilon(138.9374834934366, worksheet.outputs_energy_flows_aa464, 0.002); end
  def test_outputs_energy_flows_ab464; assert_in_epsilon(147.37396067387112, worksheet.outputs_energy_flows_ab464, 0.002); end
  def test_outputs_energy_flows_ac464; assert_in_epsilon(155.9321136776209, worksheet.outputs_energy_flows_ac464, 0.002); end
  def test_outputs_energy_flows_ad464; assert_in_epsilon(164.61473118101668, worksheet.outputs_energy_flows_ad464, 0.002); end
  def test_outputs_energy_flows_d466; assert_equal("Gas", worksheet.outputs_energy_flows_d466); end
  def test_outputs_energy_flows_f466; assert_equal("Transport", worksheet.outputs_energy_flows_f466); end
  def test_outputs_energy_flows_i466; assert_equal("G.C.03", worksheet.outputs_energy_flows_i466); end
  def test_outputs_energy_flows_j466; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j466); end
  def test_outputs_energy_flows_p466; assert_equal("Global transport", worksheet.outputs_energy_flows_p466); end
  def test_outputs_energy_flows_v466; assert_in_delta(0.3338352038154306, worksheet.outputs_energy_flows_v466, 0.002); end
  def test_outputs_energy_flows_w466; assert_in_delta(0.5795437056676016, worksheet.outputs_energy_flows_w466, 0.002); end
  def test_outputs_energy_flows_x466; assert_in_delta(0.9426108153714929, worksheet.outputs_energy_flows_x466, 0.002); end
  def test_outputs_energy_flows_y466; assert_in_epsilon(1.376532886255114, worksheet.outputs_energy_flows_y466, 0.002); end
  def test_outputs_energy_flows_z466; assert_in_epsilon(1.8854708835827982, worksheet.outputs_energy_flows_z466, 0.002); end
  def test_outputs_energy_flows_aa466; assert_in_epsilon(2.4740223812266953, worksheet.outputs_energy_flows_aa466, 0.002); end
  def test_outputs_energy_flows_ab466; assert_in_epsilon(3.146979038267915, worksheet.outputs_energy_flows_ab466, 0.002); end
  def test_outputs_energy_flows_ac466; assert_in_epsilon(3.909438856301487, worksheet.outputs_energy_flows_ac466, 0.002); end
  def test_outputs_energy_flows_ad466; assert_in_epsilon(4.766415664581659, worksheet.outputs_energy_flows_ad466, 0.002); end
  def test_outputs_energy_flows_d468; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d468); end
  def test_outputs_energy_flows_f468; assert_equal("Transport", worksheet.outputs_energy_flows_f468); end
  def test_outputs_energy_flows_i468; assert_equal("G.E.01", worksheet.outputs_energy_flows_i468); end
  def test_outputs_energy_flows_j468; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j468); end
  def test_outputs_energy_flows_p468; assert_equal("Global transport", worksheet.outputs_energy_flows_p468); end
  def test_outputs_energy_flows_v468; assert_in_delta(0.6128797273196595, worksheet.outputs_energy_flows_v468, 0.002); end
  def test_outputs_energy_flows_w468; assert_in_delta(0.9932645535559892, worksheet.outputs_energy_flows_w468, 0.002); end
  def test_outputs_energy_flows_x468; assert_in_epsilon(1.5333466226445247, worksheet.outputs_energy_flows_x468, 0.002); end
  def test_outputs_energy_flows_y468; assert_in_epsilon(2.1561339703533005, worksheet.outputs_energy_flows_y468, 0.002); end
  def test_outputs_energy_flows_z468; assert_in_epsilon(2.8650350309894494, worksheet.outputs_energy_flows_z468, 0.002); end
  def test_outputs_energy_flows_aa468; assert_in_epsilon(3.6638845632608206, worksheet.outputs_energy_flows_aa468, 0.002); end
  def test_outputs_energy_flows_ab468; assert_in_epsilon(4.556368135523844, worksheet.outputs_energy_flows_ab468, 0.002); end
  def test_outputs_energy_flows_ac468; assert_in_epsilon(5.546055086181071, worksheet.outputs_energy_flows_ac468, 0.002); end
  def test_outputs_energy_flows_ad468; assert_in_epsilon(6.636257904381177, worksheet.outputs_energy_flows_ad468, 0.002); end
  def test_outputs_energy_flows_d470; assert_equal("Solid", worksheet.outputs_energy_flows_d470); end
  def test_outputs_energy_flows_f470; assert_equal("Manufacturing", worksheet.outputs_energy_flows_f470); end
  def test_outputs_energy_flows_i470; assert_equal("G.C.01", worksheet.outputs_energy_flows_i470); end
  def test_outputs_energy_flows_j470; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j470); end
  def test_outputs_energy_flows_k470; assert_equal("G.FF.01", worksheet.outputs_energy_flows_k470); end
  def test_outputs_energy_flows_l470; assert_equal("Global Coal and fossil waste", worksheet.outputs_energy_flows_l470); end
  def test_outputs_energy_flows_p470; assert_equal("Global manufacturing", worksheet.outputs_energy_flows_p470); end
  def test_outputs_energy_flows_v470; assert_in_epsilon(50.529451467627865, worksheet.outputs_energy_flows_v470, 0.002); end
  def test_outputs_energy_flows_w470; assert_in_epsilon(56.69944320744991, worksheet.outputs_energy_flows_w470, 0.002); end
  def test_outputs_energy_flows_x470; assert_in_epsilon(60.87213043374986, worksheet.outputs_energy_flows_x470, 0.002); end
  def test_outputs_energy_flows_y470; assert_in_epsilon(64.62263440020511, worksheet.outputs_energy_flows_y470, 0.002); end
  def test_outputs_energy_flows_z470; assert_in_epsilon(68.69303202427929, worksheet.outputs_energy_flows_z470, 0.002); end
  def test_outputs_energy_flows_aa470; assert_in_epsilon(72.61171202234289, worksheet.outputs_energy_flows_aa470, 0.002); end
  def test_outputs_energy_flows_ab470; assert_in_epsilon(76.89007300245343, worksheet.outputs_energy_flows_ab470, 0.002); end
  def test_outputs_energy_flows_ac470; assert_in_epsilon(81.8862808441576, worksheet.outputs_energy_flows_ac470, 0.002); end
  def test_outputs_energy_flows_ad470; assert_in_epsilon(85.06600518263255, worksheet.outputs_energy_flows_ad470, 0.002); end
  def test_outputs_energy_flows_d472; assert_equal("Liquid", worksheet.outputs_energy_flows_d472); end
  def test_outputs_energy_flows_f472; assert_equal("Manufacturing", worksheet.outputs_energy_flows_f472); end
  def test_outputs_energy_flows_i472; assert_equal("G.C.02", worksheet.outputs_energy_flows_i472); end
  def test_outputs_energy_flows_j472; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j472); end
  def test_outputs_energy_flows_k472; assert_equal("G.FF.02", worksheet.outputs_energy_flows_k472); end
  def test_outputs_energy_flows_l472; assert_equal("Global Oil and petroleum products", worksheet.outputs_energy_flows_l472); end
  def test_outputs_energy_flows_p472; assert_equal("Global manufacturing", worksheet.outputs_energy_flows_p472); end
  def test_outputs_energy_flows_v472; assert_in_epsilon(30.809506899323708, worksheet.outputs_energy_flows_v472, 0.002); end
  def test_outputs_energy_flows_w472; assert_in_epsilon(36.14270436372427, worksheet.outputs_energy_flows_w472, 0.002); end
  def test_outputs_energy_flows_x472; assert_in_epsilon(39.19721505637071, worksheet.outputs_energy_flows_x472, 0.002); end
  def test_outputs_energy_flows_y472; assert_in_epsilon(42.21777289827143, worksheet.outputs_energy_flows_y472, 0.002); end
  def test_outputs_energy_flows_z472; assert_in_epsilon(45.38853051326686, worksheet.outputs_energy_flows_z472, 0.002); end
  def test_outputs_energy_flows_aa472; assert_in_epsilon(48.447445902587795, worksheet.outputs_energy_flows_aa472, 0.002); end
  def test_outputs_energy_flows_ab472; assert_in_epsilon(51.73512086445962, worksheet.outputs_energy_flows_ab472, 0.002); end
  def test_outputs_energy_flows_ac472; assert_in_epsilon(55.341243632460724, worksheet.outputs_energy_flows_ac472, 0.002); end
  def test_outputs_energy_flows_ad472; assert_in_epsilon(58.311808534638175, worksheet.outputs_energy_flows_ad472, 0.002); end
  def test_outputs_energy_flows_d474; assert_equal("Gas", worksheet.outputs_energy_flows_d474); end
  def test_outputs_energy_flows_f474; assert_equal("Manufacturing", worksheet.outputs_energy_flows_f474); end
  def test_outputs_energy_flows_i474; assert_equal("G.C.03", worksheet.outputs_energy_flows_i474); end
  def test_outputs_energy_flows_j474; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j474); end
  def test_outputs_energy_flows_k474; assert_equal("G.FF.03", worksheet.outputs_energy_flows_k474); end
  def test_outputs_energy_flows_l474; assert_equal("Global Natural gas", worksheet.outputs_energy_flows_l474); end
  def test_outputs_energy_flows_p474; assert_equal("Global manufacturing", worksheet.outputs_energy_flows_p474); end
  def test_outputs_energy_flows_v474; assert_in_epsilon(27.43645413410343, worksheet.outputs_energy_flows_v474, 0.002); end
  def test_outputs_energy_flows_w474; assert_in_epsilon(30.628885480413558, worksheet.outputs_energy_flows_w474, 0.002); end
  def test_outputs_energy_flows_x474; assert_in_epsilon(33.60139710435728, worksheet.outputs_energy_flows_x474, 0.002); end
  def test_outputs_energy_flows_y474; assert_in_epsilon(36.27442720554465, worksheet.outputs_energy_flows_y474, 0.002); end
  def test_outputs_energy_flows_z474; assert_in_epsilon(38.981824954560935, worksheet.outputs_energy_flows_z474, 0.002); end
  def test_outputs_energy_flows_aa474; assert_in_epsilon(41.670164992831516, worksheet.outputs_energy_flows_aa474, 0.002); end
  def test_outputs_energy_flows_ab474; assert_in_epsilon(44.38807174584058, worksheet.outputs_energy_flows_ab474, 0.002); end
  def test_outputs_energy_flows_ac474; assert_in_epsilon(47.00854527804228, worksheet.outputs_energy_flows_ac474, 0.002); end
  def test_outputs_energy_flows_ad474; assert_in_epsilon(49.41154224840875, worksheet.outputs_energy_flows_ad474, 0.002); end
  def test_outputs_energy_flows_d476; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d476); end
  def test_outputs_energy_flows_f476; assert_equal("Manufacturing", worksheet.outputs_energy_flows_f476); end
  def test_outputs_energy_flows_i476; assert_equal("G.E.01", worksheet.outputs_energy_flows_i476); end
  def test_outputs_energy_flows_j476; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j476); end
  def test_outputs_energy_flows_p476; assert_equal("Global manufacturing", worksheet.outputs_energy_flows_p476); end
  def test_outputs_energy_flows_v476; assert_in_epsilon(27.078321551561412, worksheet.outputs_energy_flows_v476, 0.002); end
  def test_outputs_energy_flows_w476; assert_in_epsilon(30.31407583403813, worksheet.outputs_energy_flows_w476, 0.002); end
  def test_outputs_energy_flows_x476; assert_in_epsilon(33.34701503582441, worksheet.outputs_energy_flows_x476, 0.002); end
  def test_outputs_energy_flows_y476; assert_in_epsilon(36.09207450769261, worksheet.outputs_energy_flows_y476, 0.002); end
  def test_outputs_energy_flows_z476; assert_in_epsilon(38.86588213925463, worksheet.outputs_energy_flows_z476, 0.002); end
  def test_outputs_energy_flows_aa476; assert_in_epsilon(41.59890564238323, worksheet.outputs_energy_flows_aa476, 0.002); end
  def test_outputs_energy_flows_ab476; assert_in_epsilon(44.40019239662611, worksheet.outputs_energy_flows_ab476, 0.002); end
  def test_outputs_energy_flows_ac476; assert_in_epsilon(47.30295966567971, worksheet.outputs_energy_flows_ac476, 0.002); end
  def test_outputs_energy_flows_ad476; assert_in_epsilon(49.985368693905286, worksheet.outputs_energy_flows_ad476, 0.002); end
  def test_outputs_energy_flows_d478; assert_equal("Heat network", worksheet.outputs_energy_flows_d478); end
  def test_outputs_energy_flows_f478; assert_equal("Manufacturing", worksheet.outputs_energy_flows_f478); end
  def test_outputs_energy_flows_i478; assert_equal("G.H.01", worksheet.outputs_energy_flows_i478); end
  def test_outputs_energy_flows_j478; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j478); end
  def test_outputs_energy_flows_p478; assert_equal("Global manufacturing", worksheet.outputs_energy_flows_p478); end
  def test_outputs_energy_flows_v478; assert_in_epsilon(5.298630279005212, worksheet.outputs_energy_flows_v478, 0.002); end
  def test_outputs_energy_flows_w478; assert_in_epsilon(5.948924565514483, worksheet.outputs_energy_flows_w478, 0.002); end
  def test_outputs_energy_flows_x478; assert_in_epsilon(6.600476902557913, worksheet.outputs_energy_flows_x478, 0.002); end
  def test_outputs_energy_flows_y478; assert_in_epsilon(7.121249185561291, worksheet.outputs_energy_flows_y478, 0.002); end
  def test_outputs_energy_flows_z478; assert_in_epsilon(7.646482788765475, worksheet.outputs_energy_flows_z478, 0.002); end
  def test_outputs_energy_flows_aa478; assert_in_epsilon(8.145244106004569, worksheet.outputs_energy_flows_aa478, 0.002); end
  def test_outputs_energy_flows_ab478; assert_in_epsilon(8.656190349977875, worksheet.outputs_energy_flows_ab478, 0.002); end
  def test_outputs_energy_flows_ac478; assert_in_epsilon(9.165288903134165, worksheet.outputs_energy_flows_ac478, 0.002); end
  def test_outputs_energy_flows_ad478; assert_in_epsilon(9.605172278282712, worksheet.outputs_energy_flows_ad478, 0.002); end
  def test_outputs_energy_flows_d480; assert_equal("Solid", worksheet.outputs_energy_flows_d480); end
  def test_outputs_energy_flows_f480; assert_equal("Buildings", worksheet.outputs_energy_flows_f480); end
  def test_outputs_energy_flows_i480; assert_equal("G.C.01", worksheet.outputs_energy_flows_i480); end
  def test_outputs_energy_flows_j480; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j480); end
  def test_outputs_energy_flows_k480; assert_equal("G.BM.13", worksheet.outputs_energy_flows_k480); end
  def test_outputs_energy_flows_l480; assert_equal("Global Traditional biomass", worksheet.outputs_energy_flows_l480); end
  def test_outputs_energy_flows_p480; assert_equal("Global buildings", worksheet.outputs_energy_flows_p480); end
  def test_outputs_energy_flows_v480; assert_in_epsilon(34.680153405483516, worksheet.outputs_energy_flows_v480, 0.002); end
  def test_outputs_energy_flows_w480; assert_in_epsilon(35.15090734558627, worksheet.outputs_energy_flows_w480, 0.002); end
  def test_outputs_energy_flows_x480; assert_in_epsilon(35.255876041680125, worksheet.outputs_energy_flows_x480, 0.002); end
  def test_outputs_energy_flows_y480; assert_in_epsilon(35.032451464246016, worksheet.outputs_energy_flows_y480, 0.002); end
  def test_outputs_energy_flows_z480; assert_in_epsilon(34.508906454043334, worksheet.outputs_energy_flows_z480, 0.002); end
  def test_outputs_energy_flows_aa480; assert_in_epsilon(34.088714384750816, worksheet.outputs_energy_flows_aa480, 0.002); end
  def test_outputs_energy_flows_ab480; assert_in_epsilon(33.448412889337604, worksheet.outputs_energy_flows_ab480, 0.002); end
  def test_outputs_energy_flows_ac480; assert_in_epsilon(33.0495748303819, worksheet.outputs_energy_flows_ac480, 0.002); end
  def test_outputs_energy_flows_ad480; assert_in_epsilon(32.42925124672472, worksheet.outputs_energy_flows_ad480, 0.002); end
  def test_outputs_energy_flows_d482; assert_equal("Liquid", worksheet.outputs_energy_flows_d482); end
  def test_outputs_energy_flows_f482; assert_equal("Buildings", worksheet.outputs_energy_flows_f482); end
  def test_outputs_energy_flows_i482; assert_equal("G.C.02", worksheet.outputs_energy_flows_i482); end
  def test_outputs_energy_flows_j482; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j482); end
  def test_outputs_energy_flows_p482; assert_equal("Global buildings", worksheet.outputs_energy_flows_p482); end
  def test_outputs_energy_flows_v482; assert_in_epsilon(10.18378906140498, worksheet.outputs_energy_flows_v482, 0.002); end
  def test_outputs_energy_flows_w482; assert_in_epsilon(10.652516845270842, worksheet.outputs_energy_flows_w482, 0.002); end
  def test_outputs_energy_flows_x482; assert_in_epsilon(11.075305801681878, worksheet.outputs_energy_flows_x482, 0.002); end
  def test_outputs_energy_flows_y482; assert_in_epsilon(11.365852324290872, worksheet.outputs_energy_flows_y482, 0.002); end
  def test_outputs_energy_flows_z482; assert_in_epsilon(11.522331481918721, worksheet.outputs_energy_flows_z482, 0.002); end
  def test_outputs_energy_flows_aa482; assert_in_epsilon(11.512806421453849, worksheet.outputs_energy_flows_aa482, 0.002); end
  def test_outputs_energy_flows_ab482; assert_in_epsilon(11.378373680008488, worksheet.outputs_energy_flows_ab482, 0.002); end
  def test_outputs_energy_flows_ac482; assert_in_epsilon(11.092867209014715, worksheet.outputs_energy_flows_ac482, 0.002); end
  def test_outputs_energy_flows_ad482; assert_in_epsilon(10.699516048071333, worksheet.outputs_energy_flows_ad482, 0.002); end
  def test_outputs_energy_flows_d484; assert_equal("Gas", worksheet.outputs_energy_flows_d484); end
  def test_outputs_energy_flows_f484; assert_equal("Buildings", worksheet.outputs_energy_flows_f484); end
  def test_outputs_energy_flows_i484; assert_equal("G.C.03", worksheet.outputs_energy_flows_i484); end
  def test_outputs_energy_flows_j484; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j484); end
  def test_outputs_energy_flows_p484; assert_equal("Global buildings", worksheet.outputs_energy_flows_p484); end
  def test_outputs_energy_flows_v484; assert_in_epsilon(23.508704140665536, worksheet.outputs_energy_flows_v484, 0.002); end
  def test_outputs_energy_flows_w484; assert_in_epsilon(25.383779987008467, worksheet.outputs_energy_flows_w484, 0.002); end
  def test_outputs_energy_flows_x484; assert_in_epsilon(27.494176130656243, worksheet.outputs_energy_flows_x484, 0.002); end
  def test_outputs_energy_flows_y484; assert_in_epsilon(29.44707877195694, worksheet.outputs_energy_flows_y484, 0.002); end
  def test_outputs_energy_flows_z484; assert_in_epsilon(31.22497748067905, worksheet.outputs_energy_flows_z484, 0.002); end
  def test_outputs_energy_flows_aa484; assert_in_epsilon(32.71971000191002, worksheet.outputs_energy_flows_aa484, 0.002); end
  def test_outputs_energy_flows_ab484; assert_in_epsilon(34.02796526032886, worksheet.outputs_energy_flows_ab484, 0.002); end
  def test_outputs_energy_flows_ac484; assert_in_epsilon(35.045791492484376, worksheet.outputs_energy_flows_ac484, 0.002); end
  def test_outputs_energy_flows_ad484; assert_in_epsilon(35.89328967334254, worksheet.outputs_energy_flows_ad484, 0.002); end
  def test_outputs_energy_flows_d486; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d486); end
  def test_outputs_energy_flows_f486; assert_equal("Buildings", worksheet.outputs_energy_flows_f486); end
  def test_outputs_energy_flows_i486; assert_equal("G.E.01", worksheet.outputs_energy_flows_i486); end
  def test_outputs_energy_flows_j486; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j486); end
  def test_outputs_energy_flows_n486; assert_equal("heater.microchp.non residential.space", worksheet.outputs_energy_flows_n486); end
  def test_outputs_energy_flows_o486; assert_equal("Global non residential chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_o486); end
  def test_outputs_energy_flows_p486; assert_equal("Global buildings", worksheet.outputs_energy_flows_p486); end
  def test_outputs_energy_flows_q486; assert_equal("heater.microchp.urban.space", worksheet.outputs_energy_flows_q486); end
  def test_outputs_energy_flows_r486; assert_equal("Global urban chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_r486); end
  def test_outputs_energy_flows_s486; assert_equal("heater.microchp.rural.space", worksheet.outputs_energy_flows_s486); end
  def test_outputs_energy_flows_t486; assert_equal("Global rural chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_t486); end
  def test_outputs_energy_flows_v486; assert_in_epsilon(38.99365605888607, worksheet.outputs_energy_flows_v486, 0.002); end
  def test_outputs_energy_flows_w486; assert_in_epsilon(43.38277943470583, worksheet.outputs_energy_flows_w486, 0.002); end
  def test_outputs_energy_flows_x486; assert_in_epsilon(48.7553356467236, worksheet.outputs_energy_flows_x486, 0.002); end
  def test_outputs_energy_flows_y486; assert_in_epsilon(54.15690187265195, worksheet.outputs_energy_flows_y486, 0.002); end
  def test_outputs_energy_flows_z486; assert_in_epsilon(59.53657041674331, worksheet.outputs_energy_flows_z486, 0.002); end
  def test_outputs_energy_flows_aa486; assert_in_epsilon(64.71845760972347, worksheet.outputs_energy_flows_aa486, 0.002); end
  def test_outputs_energy_flows_ab486; assert_in_epsilon(69.78254648183774, worksheet.outputs_energy_flows_ab486, 0.002); end
  def test_outputs_energy_flows_ac486; assert_in_epsilon(74.52976656500813, worksheet.outputs_energy_flows_ac486, 0.002); end
  def test_outputs_energy_flows_ad486; assert_in_epsilon(79.06093707407824, worksheet.outputs_energy_flows_ad486, 0.002); end
  def test_outputs_energy_flows_d488; assert_equal("Heat network", worksheet.outputs_energy_flows_d488); end
  def test_outputs_energy_flows_f488; assert_equal("Buildings", worksheet.outputs_energy_flows_f488); end
  def test_outputs_energy_flows_i488; assert_equal("G.H.01", worksheet.outputs_energy_flows_i488); end
  def test_outputs_energy_flows_j488; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j488); end
  def test_outputs_energy_flows_n488; assert_equal("heater.microchp.non residential.space", worksheet.outputs_energy_flows_n488); end
  def test_outputs_energy_flows_o488; assert_equal("Global non residential chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_o488); end
  def test_outputs_energy_flows_p488; assert_equal("Global buildings", worksheet.outputs_energy_flows_p488); end
  def test_outputs_energy_flows_q488; assert_equal("heater.microchp.urban.space", worksheet.outputs_energy_flows_q488); end
  def test_outputs_energy_flows_r488; assert_equal("Global urban chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_r488); end
  def test_outputs_energy_flows_s488; assert_equal("heater.microchp.rural.space", worksheet.outputs_energy_flows_s488); end
  def test_outputs_energy_flows_t488; assert_equal("Global rural chp used by people with access to electricity for space heating", worksheet.outputs_energy_flows_t488); end
  def test_outputs_energy_flows_v488; assert_in_epsilon(4.356862121536162, worksheet.outputs_energy_flows_v488, 0.002); end
  def test_outputs_energy_flows_w488; assert_in_epsilon(4.9641207741922, worksheet.outputs_energy_flows_w488, 0.002); end
  def test_outputs_energy_flows_x488; assert_in_epsilon(5.722412091410446, worksheet.outputs_energy_flows_x488, 0.002); end
  def test_outputs_energy_flows_y488; assert_in_epsilon(6.489612474909234, worksheet.outputs_energy_flows_y488, 0.002); end
  def test_outputs_energy_flows_z488; assert_in_epsilon(7.251289396785358, worksheet.outputs_energy_flows_z488, 0.002); end
  def test_outputs_energy_flows_aa488; assert_in_epsilon(7.964220596172843, worksheet.outputs_energy_flows_aa488, 0.002); end
  def test_outputs_energy_flows_ab488; assert_in_epsilon(8.642032503825927, worksheet.outputs_energy_flows_ab488, 0.002); end
  def test_outputs_energy_flows_ac488; assert_in_epsilon(9.238974803015617, worksheet.outputs_energy_flows_ac488, 0.002); end
  def test_outputs_energy_flows_ad488; assert_in_epsilon(9.77881591367564, worksheet.outputs_energy_flows_ad488, 0.002); end
  def test_outputs_energy_flows_d490; assert_equal("Solar", worksheet.outputs_energy_flows_d490); end
  def test_outputs_energy_flows_f490; assert_equal("Buildings", worksheet.outputs_energy_flows_f490); end
  def test_outputs_energy_flows_i490; assert_equal("G.R.01", worksheet.outputs_energy_flows_i490); end
  def test_outputs_energy_flows_j490; assert_equal("Global Solar", worksheet.outputs_energy_flows_j490); end
  def test_outputs_energy_flows_k490; assert_equal("G.R.07", worksheet.outputs_energy_flows_k490); end
  def test_outputs_energy_flows_l490; assert_equal("Global Environmental heat", worksheet.outputs_energy_flows_l490); end
  def test_outputs_energy_flows_p490; assert_equal("Global buildings", worksheet.outputs_energy_flows_p490); end
  def test_outputs_energy_flows_v490; assert_in_epsilon(6.520265163208563, worksheet.outputs_energy_flows_v490, 0.002); end
  def test_outputs_energy_flows_w490; assert_in_epsilon(7.239090378313835, worksheet.outputs_energy_flows_w490, 0.002); end
  def test_outputs_energy_flows_x490; assert_in_epsilon(8.11833223797641, worksheet.outputs_energy_flows_x490, 0.002); end
  def test_outputs_energy_flows_y490; assert_in_epsilon(9.000257668100273, worksheet.outputs_energy_flows_y490, 0.002); end
  def test_outputs_energy_flows_z490; assert_in_epsilon(9.873502777133604, worksheet.outputs_energy_flows_z490, 0.002); end
  def test_outputs_energy_flows_aa490; assert_in_epsilon(10.704632379382591, worksheet.outputs_energy_flows_aa490, 0.002); end
  def test_outputs_energy_flows_ab490; assert_in_epsilon(11.502139927676494, worksheet.outputs_energy_flows_ab490, 0.002); end
  def test_outputs_energy_flows_ac490; assert_in_epsilon(12.226273272623132, worksheet.outputs_energy_flows_ac490, 0.002); end
  def test_outputs_energy_flows_ad490; assert_in_epsilon(12.8888577001552, worksheet.outputs_energy_flows_ad490, 0.002); end
  def test_outputs_energy_flows_d492; assert_equal("Solid", worksheet.outputs_energy_flows_d492); end
  def test_outputs_energy_flows_f492; assert_equal("Other", worksheet.outputs_energy_flows_f492); end
  def test_outputs_energy_flows_i492; assert_equal("G.C.01", worksheet.outputs_energy_flows_i492); end
  def test_outputs_energy_flows_j492; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j492); end
  def test_outputs_energy_flows_k492; assert_equal("G.BM.09", worksheet.outputs_energy_flows_k492); end
  def test_outputs_energy_flows_l492; assert_equal("Global Dry biomass and waste", worksheet.outputs_energy_flows_l492); end
  def test_outputs_energy_flows_n492; assert_equal("Arable.food", worksheet.outputs_energy_flows_n492); end
  def test_outputs_energy_flows_o492; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_o492); end
  def test_outputs_energy_flows_v492; assert_in_epsilon(1.1780000000000002, worksheet.outputs_energy_flows_v492, 0.002); end
  def test_outputs_energy_flows_w492; assert_in_epsilon(1.1819187160350495, worksheet.outputs_energy_flows_w492, 0.002); end
  def test_outputs_energy_flows_x492; assert_in_epsilon(1.2086634962047698, worksheet.outputs_energy_flows_x492, 0.002); end
  def test_outputs_energy_flows_y492; assert_in_epsilon(1.2331051712126198, worksheet.outputs_energy_flows_y492, 0.002); end
  def test_outputs_energy_flows_z492; assert_in_epsilon(1.262197009462563, worksheet.outputs_energy_flows_z492, 0.002); end
  def test_outputs_energy_flows_aa492; assert_in_epsilon(1.3009625040459587, worksheet.outputs_energy_flows_aa492, 0.002); end
  def test_outputs_energy_flows_ab492; assert_in_epsilon(1.336197967362699, worksheet.outputs_energy_flows_ab492, 0.002); end
  def test_outputs_energy_flows_ac492; assert_in_epsilon(1.3540241394303103, worksheet.outputs_energy_flows_ac492, 0.002); end
  def test_outputs_energy_flows_ad492; assert_in_epsilon(1.3605113413153933, worksheet.outputs_energy_flows_ad492, 0.002); end
  def test_outputs_energy_flows_d494; assert_equal("Liquid", worksheet.outputs_energy_flows_d494); end
  def test_outputs_energy_flows_f494; assert_equal("Other", worksheet.outputs_energy_flows_f494); end
  def test_outputs_energy_flows_i494; assert_equal("G.C.02", worksheet.outputs_energy_flows_i494); end
  def test_outputs_energy_flows_j494; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j494); end
  def test_outputs_energy_flows_n494; assert_equal("Arable.food", worksheet.outputs_energy_flows_n494); end
  def test_outputs_energy_flows_o494; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_o494); end
  def test_outputs_energy_flows_v494; assert_in_epsilon(5.851000000000001, worksheet.outputs_energy_flows_v494, 0.002); end
  def test_outputs_energy_flows_w494; assert_in_epsilon(5.870463843396499, worksheet.outputs_energy_flows_w494, 0.002); end
  def test_outputs_energy_flows_x494; assert_in_epsilon(6.003302305852385, worksheet.outputs_energy_flows_x494, 0.002); end
  def test_outputs_energy_flows_y494; assert_in_epsilon(6.124701491311578, worksheet.outputs_energy_flows_y494, 0.002); end
  def test_outputs_energy_flows_z494; assert_in_epsilon(6.269197540208367, worksheet.outputs_energy_flows_z494, 0.002); end
  def test_outputs_energy_flows_aa494; assert_in_epsilon(6.461741605409937, worksheet.outputs_energy_flows_aa494, 0.002); end
  def test_outputs_energy_flows_ab494; assert_in_epsilon(6.636752382885528, worksheet.outputs_energy_flows_ab494, 0.002); end
  def test_outputs_energy_flows_ac494; assert_in_epsilon(6.725293072841041, worksheet.outputs_energy_flows_ac494, 0.002); end
  def test_outputs_energy_flows_ad494; assert_in_epsilon(6.757514310726966, worksheet.outputs_energy_flows_ad494, 0.002); end
  def test_outputs_energy_flows_d496; assert_equal("Gas", worksheet.outputs_energy_flows_d496); end
  def test_outputs_energy_flows_f496; assert_equal("Other", worksheet.outputs_energy_flows_f496); end
  def test_outputs_energy_flows_i496; assert_equal("G.C.03", worksheet.outputs_energy_flows_i496); end
  def test_outputs_energy_flows_j496; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j496); end
  def test_outputs_energy_flows_n496; assert_equal("Arable.food", worksheet.outputs_energy_flows_n496); end
  def test_outputs_energy_flows_o496; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_o496); end
  def test_outputs_energy_flows_v496; assert_in_delta(0.6980000000000002, worksheet.outputs_energy_flows_v496, 0.002); end
  def test_outputs_energy_flows_w496; assert_in_delta(0.7003219556812095, worksheet.outputs_energy_flows_w496, 0.002); end
  def test_outputs_energy_flows_x496; assert_in_delta(0.7161690325559673, worksheet.outputs_energy_flows_x496, 0.002); end
  def test_outputs_energy_flows_y496; assert_in_delta(0.7306514511938953, worksheet.outputs_energy_flows_y496, 0.002); end
  def test_outputs_energy_flows_z496; assert_in_delta(0.7478892297155085, worksheet.outputs_energy_flows_z496, 0.002); end
  def test_outputs_energy_flows_aa496; assert_in_delta(0.7708589370323254, worksheet.outputs_energy_flows_aa496, 0.002); end
  def test_outputs_energy_flows_ab496; assert_in_delta(0.7917369959415653, worksheet.outputs_energy_flows_ab496, 0.002); end
  def test_outputs_energy_flows_ac496; assert_in_delta(0.802299532531712, worksheet.outputs_energy_flows_ac496, 0.002); end
  def test_outputs_energy_flows_ad496; assert_in_delta(0.8061433923923129, worksheet.outputs_energy_flows_ad496, 0.002); end
  def test_outputs_energy_flows_d498; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d498); end
  def test_outputs_energy_flows_f498; assert_equal("Other", worksheet.outputs_energy_flows_f498); end
  def test_outputs_energy_flows_i498; assert_equal("G.E.01", worksheet.outputs_energy_flows_i498); end
  def test_outputs_energy_flows_j498; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j498); end
  def test_outputs_energy_flows_n498; assert_equal("Arable.food", worksheet.outputs_energy_flows_n498); end
  def test_outputs_energy_flows_o498; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_o498); end
  def test_outputs_energy_flows_v498; assert_in_epsilon(3.955000000000001, worksheet.outputs_energy_flows_v498, 0.002); end
  def test_outputs_energy_flows_w498; assert_in_epsilon(3.96815663999883, worksheet.outputs_energy_flows_w498, 0.002); end
  def test_outputs_energy_flows_x498; assert_in_epsilon(4.057949174439614, worksheet.outputs_energy_flows_x498, 0.002); end
  def test_outputs_energy_flows_y498; assert_in_epsilon(4.140009297237616, worksheet.outputs_energy_flows_y498, 0.002); end
  def test_outputs_energy_flows_z498; assert_in_epsilon(4.237681810207501, worksheet.outputs_energy_flows_z498, 0.002); end
  def test_outputs_energy_flows_aa498; assert_in_epsilon(4.367832515706085, worksheet.outputs_energy_flows_aa498, 0.002); end
  def test_outputs_energy_flows_ab498; assert_in_epsilon(4.48613154577205, worksheet.outputs_energy_flows_ab498, 0.002); end
  def test_outputs_energy_flows_ac498; assert_in_epsilon(4.545980875591577, worksheet.outputs_energy_flows_ac498, 0.002); end
  def test_outputs_energy_flows_ad498; assert_in_epsilon(4.567760912480799, worksheet.outputs_energy_flows_ad498, 0.002); end
  def test_outputs_energy_flows_d500; assert_equal("Heat network", worksheet.outputs_energy_flows_d500); end
  def test_outputs_energy_flows_f500; assert_equal("Other", worksheet.outputs_energy_flows_f500); end
  def test_outputs_energy_flows_i500; assert_equal("G.H.01", worksheet.outputs_energy_flows_i500); end
  def test_outputs_energy_flows_j500; assert_equal("Global Heat transport", worksheet.outputs_energy_flows_j500); end
  def test_outputs_energy_flows_n500; assert_equal("Arable.food", worksheet.outputs_energy_flows_n500); end
  def test_outputs_energy_flows_o500; assert_equal("Global Arable land for food crops", worksheet.outputs_energy_flows_o500); end
  def test_outputs_energy_flows_v500; assert_in_delta(0.7350000000000002, worksheet.outputs_energy_flows_v500, 0.002); end
  def test_outputs_energy_flows_w500; assert_in_delta(0.737445039291818, worksheet.outputs_energy_flows_w500, 0.002); end
  def test_outputs_energy_flows_x500; assert_in_delta(0.7541321474622292, worksheet.outputs_energy_flows_x500, 0.002); end
  def test_outputs_energy_flows_y500; assert_in_delta(0.7693822587786721, worksheet.outputs_energy_flows_y500, 0.002); end
  def test_outputs_energy_flows_z500; assert_in_delta(0.7875337877376773, worksheet.outputs_energy_flows_z500, 0.002); end
  def test_outputs_energy_flows_aa500; assert_in_delta(0.8117210869896264, worksheet.outputs_energy_flows_aa500, 0.002); end
  def test_outputs_energy_flows_ab500; assert_in_delta(0.8337058624886111, worksheet.outputs_energy_flows_ab500, 0.002); end
  def test_outputs_energy_flows_ac500; assert_in_delta(0.8448283043134791, worksheet.outputs_energy_flows_ac500, 0.002); end
  def test_outputs_energy_flows_ad500; assert_in_delta(0.8488759217884672, worksheet.outputs_energy_flows_ad500, 0.002); end
  def test_outputs_energy_flows_d502; assert_equal("Solid", worksheet.outputs_energy_flows_d502); end
  def test_outputs_energy_flows_f502; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f502); end
  def test_outputs_energy_flows_i502; assert_equal("G.C.01", worksheet.outputs_energy_flows_i502); end
  def test_outputs_energy_flows_j502; assert_equal("Global Solid hydrocarbons", worksheet.outputs_energy_flows_j502); end
  def test_outputs_energy_flows_k502; assert_equal("G.BM.09", worksheet.outputs_energy_flows_k502); end
  def test_outputs_energy_flows_l502; assert_equal("Global Dry biomass and waste", worksheet.outputs_energy_flows_l502); end
  def test_outputs_energy_flows_q502; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_q502); end
  def test_outputs_energy_flows_v502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v502||0), 0.002); end
  def test_outputs_energy_flows_w502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w502||0), 0.002); end
  def test_outputs_energy_flows_x502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x502||0), 0.002); end
  def test_outputs_energy_flows_y502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y502||0), 0.002); end
  def test_outputs_energy_flows_z502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z502||0), 0.002); end
  def test_outputs_energy_flows_aa502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa502||0), 0.002); end
  def test_outputs_energy_flows_ab502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab502||0), 0.002); end
  def test_outputs_energy_flows_ac502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac502||0), 0.002); end
  def test_outputs_energy_flows_ad502; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad502||0), 0.002); end
  def test_outputs_energy_flows_d504; assert_equal("Liquid", worksheet.outputs_energy_flows_d504); end
  def test_outputs_energy_flows_f504; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f504); end
  def test_outputs_energy_flows_i504; assert_equal("G.C.02", worksheet.outputs_energy_flows_i504); end
  def test_outputs_energy_flows_j504; assert_equal("Global Liquid hydrocarbons", worksheet.outputs_energy_flows_j504); end
  def test_outputs_energy_flows_q504; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_q504); end
  def test_outputs_energy_flows_v504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v504||0), 0.002); end
  def test_outputs_energy_flows_w504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w504||0), 0.002); end
  def test_outputs_energy_flows_x504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x504||0), 0.002); end
  def test_outputs_energy_flows_y504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y504||0), 0.002); end
  def test_outputs_energy_flows_z504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z504||0), 0.002); end
  def test_outputs_energy_flows_aa504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa504||0), 0.002); end
  def test_outputs_energy_flows_ab504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab504||0), 0.002); end
  def test_outputs_energy_flows_ac504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac504||0), 0.002); end
  def test_outputs_energy_flows_ad504; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad504||0), 0.002); end
  def test_outputs_energy_flows_d506; assert_equal("Gas", worksheet.outputs_energy_flows_d506); end
  def test_outputs_energy_flows_f506; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f506); end
  def test_outputs_energy_flows_i506; assert_equal("G.C.03", worksheet.outputs_energy_flows_i506); end
  def test_outputs_energy_flows_j506; assert_equal("Global Gaseous hydrocarbons", worksheet.outputs_energy_flows_j506); end
  def test_outputs_energy_flows_q506; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_q506); end
  def test_outputs_energy_flows_v506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v506||0), 0.002); end
  def test_outputs_energy_flows_w506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w506||0), 0.002); end
  def test_outputs_energy_flows_x506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x506||0), 0.002); end
  def test_outputs_energy_flows_y506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y506||0), 0.002); end
  def test_outputs_energy_flows_z506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z506||0), 0.002); end
  def test_outputs_energy_flows_aa506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa506||0), 0.002); end
  def test_outputs_energy_flows_ab506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab506||0), 0.002); end
  def test_outputs_energy_flows_ac506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac506||0), 0.002); end
  def test_outputs_energy_flows_ad506; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad506||0), 0.002); end
  def test_outputs_energy_flows_d508; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d508); end
  def test_outputs_energy_flows_f508; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_f508); end
  def test_outputs_energy_flows_i508; assert_equal("G.E.01", worksheet.outputs_energy_flows_i508); end
  def test_outputs_energy_flows_j508; assert_equal("Global Electricity (delivered to end user)", worksheet.outputs_energy_flows_j508); end
  def test_outputs_energy_flows_q508; assert_equal("Greenhouse gas removal", worksheet.outputs_energy_flows_q508); end
  def test_outputs_energy_flows_v508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_v508||0), 0.002); end
  def test_outputs_energy_flows_w508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_w508||0), 0.002); end
  def test_outputs_energy_flows_x508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_x508||0), 0.002); end
  def test_outputs_energy_flows_y508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_y508||0), 0.002); end
  def test_outputs_energy_flows_z508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_z508||0), 0.002); end
  def test_outputs_energy_flows_aa508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_aa508||0), 0.002); end
  def test_outputs_energy_flows_ab508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ab508||0), 0.002); end
  def test_outputs_energy_flows_ac508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ac508||0), 0.002); end
  def test_outputs_energy_flows_ad508; assert_in_delta(0.0, (worksheet.outputs_energy_flows_ad508||0), 0.002); end
  def test_outputs_energy_flows_d510; assert_equal("Electricity grid", worksheet.outputs_energy_flows_d510); end
  def test_outputs_energy_flows_f510; assert_equal("Losses / own use", worksheet.outputs_energy_flows_f510); end
  def test_outputs_energy_flows_i510; assert_equal("G.L.02", worksheet.outputs_energy_flows_i510); end
  def test_outputs_energy_flows_j510; assert_equal("Global Distribution losses and own use", worksheet.outputs_energy_flows_j510); end
  def test_outputs_energy_flows_o510; assert_equal("electricity.network", worksheet.outputs_energy_flows_o510); end
  def test_outputs_energy_flows_p510; assert_equal("Global Electricity distribution network", worksheet.outputs_energy_flows_p510); end
  def test_outputs_energy_flows_v510; assert_in_epsilon(5.995029542789481, worksheet.outputs_energy_flows_v510, 0.002); end
  def test_outputs_energy_flows_w510; assert_in_epsilon(6.675206641749951, worksheet.outputs_energy_flows_w510, 0.002); end
  def test_outputs_energy_flows_x510; assert_in_epsilon(7.441487585328568, worksheet.outputs_energy_flows_x510, 0.002); end
  def test_outputs_energy_flows_y510; assert_in_epsilon(8.192093070105637, worksheet.outputs_energy_flows_y510, 0.002); end
  def test_outputs_energy_flows_z510; assert_in_epsilon(8.951892238327819, worksheet.outputs_energy_flows_z510, 0.002); end
  def test_outputs_energy_flows_aa510; assert_in_epsilon(9.701864111936363, worksheet.outputs_energy_flows_aa510, 0.002); end
  def test_outputs_energy_flows_ab510; assert_in_epsilon(10.454596685147086, worksheet.outputs_energy_flows_ab510, 0.002); end
  def test_outputs_energy_flows_ac510; assert_in_epsilon(11.192420367763596, worksheet.outputs_energy_flows_ac510, 0.002); end
  def test_outputs_energy_flows_ad510; assert_in_epsilon(11.898536269774807, worksheet.outputs_energy_flows_ad510, 0.002); end
  def test_outputs_summary_table_c5; assert_equal("Supertable", worksheet.outputs_summary_table_c5); end
  def test_outputs_summary_table_d5; assert_equal("webtool.supertable", worksheet.outputs_summary_table_d5); end
  def test_outputs_summary_table_e5; assert_equal("Formatted numbers", worksheet.outputs_summary_table_e5); end
  def test_outputs_summary_table_f6; assert_equal("User’s pathway", worksheet.outputs_summary_table_f6); end
  def test_outputs_summary_table_g6; assert_equal("% increase 2011 to 2050", worksheet.outputs_summary_table_g6); end
  def test_outputs_summary_table_c7; assert_equal("Name", worksheet.outputs_summary_table_c7); end
  def test_outputs_summary_table_d7; assert_equal("Unit", worksheet.outputs_summary_table_d7); end
  def test_outputs_summary_table_e7; assert_equal("2011", worksheet.outputs_summary_table_e7); end
  def test_outputs_summary_table_f7; assert_equal("2050", worksheet.outputs_summary_table_f7); end
  def test_outputs_summary_table_g7; assert_equal("% increase 2011 to 2050", worksheet.outputs_summary_table_g7); end
  def test_outputs_summary_table_b8; assert_equal("Emissions and temperature", worksheet.outputs_summary_table_b8); end
  def test_outputs_summary_table_c8; assert_equal("GHG emissions (t CO2e) per capita", worksheet.outputs_summary_table_c8); end
  def test_outputs_summary_table_d8; assert_equal("t CO2e / capita", worksheet.outputs_summary_table_d8); end
  def test_outputs_summary_table_e8; assert_equal("6.7", worksheet.outputs_summary_table_e8); end
  def test_outputs_summary_table_f8; assert_equal("8.0", worksheet.outputs_summary_table_f8); end
  def test_outputs_summary_table_g8; assert_equal("19%", worksheet.outputs_summary_table_g8); end
  def test_outputs_summary_table_c9; assert_equal("Cumulative emissions by 2100 (Gt CO2e)", worksheet.outputs_summary_table_c9); end
  def test_outputs_summary_table_d9; assert_equal("Gt CO2e", worksheet.outputs_summary_table_d9); end
  def test_outputs_summary_table_e9; assert_equal("7,517", worksheet.outputs_summary_table_e9); end
  def test_outputs_summary_table_c10; assert_equal("Temperature change in 2100 (⁰C)", worksheet.outputs_summary_table_c10); end
  def test_outputs_summary_table_d10; assert_equal("⁰C", worksheet.outputs_summary_table_d10); end
  def test_outputs_summary_table_e10; assert_equal("2.2⁰C to 6.4⁰C higher", worksheet.outputs_summary_table_e10); end
  def test_outputs_summary_table_b12; assert_equal("Demographics and long term", worksheet.outputs_summary_table_b12); end
  def test_outputs_summary_table_c12; assert_equal("Population (billions of people)", worksheet.outputs_summary_table_c12); end
  def test_outputs_summary_table_d12; assert_equal("billions of people", worksheet.outputs_summary_table_d12); end
  def test_outputs_summary_table_e12; assert_equal("7.0", worksheet.outputs_summary_table_e12); end
  def test_outputs_summary_table_f12; assert_equal("9.6", worksheet.outputs_summary_table_f12); end
  def test_outputs_summary_table_g12; assert_equal("37%", worksheet.outputs_summary_table_g12); end
  def test_outputs_summary_table_c13; assert_equal("% population in urban areas", worksheet.outputs_summary_table_c13); end
  def test_outputs_summary_table_d13; assert_equal("%", worksheet.outputs_summary_table_d13); end
  def test_outputs_summary_table_e13; assert_equal("52.1%", worksheet.outputs_summary_table_e13); end
  def test_outputs_summary_table_f13; assert_equal("66.4%", worksheet.outputs_summary_table_f13); end
  def test_outputs_summary_table_g13; assert_equal("27%", worksheet.outputs_summary_table_g13); end
  def test_outputs_summary_table_b15; assert_equal("Energy", worksheet.outputs_summary_table_b15); end
  def test_outputs_summary_table_c15; assert_equal("Total energy supply (EJ / year)", worksheet.outputs_summary_table_c15); end
  def test_outputs_summary_table_d15; assert_equal("EJ / year", worksheet.outputs_summary_table_d15); end
  def test_outputs_summary_table_e15; assert_equal("585", worksheet.outputs_summary_table_e15); end
  def test_outputs_summary_table_f15; assert_equal("1,093", worksheet.outputs_summary_table_f15); end
  def test_outputs_summary_table_g15; assert_equal("87%", worksheet.outputs_summary_table_g15); end
  def test_outputs_summary_table_c16; assert_equal("Total energy supply (EJ / year)", worksheet.outputs_summary_table_c16); end
  def test_outputs_summary_table_d16; assert_equal("EJ / year", worksheet.outputs_summary_table_d16); end
  def test_outputs_summary_table_e16; assert_equal("371", worksheet.outputs_summary_table_e16); end
  def test_outputs_summary_table_f16; assert_equal("623", worksheet.outputs_summary_table_f16); end
  def test_outputs_summary_table_g16; assert_equal("68%", worksheet.outputs_summary_table_g16); end
  def test_outputs_summary_table_c17; assert_equal("Energy demand (kWh / capita)", worksheet.outputs_summary_table_c17); end
  def test_outputs_summary_table_d17; assert_equal("kWh / capita", worksheet.outputs_summary_table_d17); end
  def test_outputs_summary_table_e17; assert_equal("14,796", worksheet.outputs_summary_table_e17); end
  def test_outputs_summary_table_f17; assert_equal("18,128", worksheet.outputs_summary_table_f17); end
  def test_outputs_summary_table_g17; assert_equal("23%", worksheet.outputs_summary_table_g17); end
  def test_outputs_summary_table_c18; assert_equal("Proportion of primary energy from fossil fuels ", worksheet.outputs_summary_table_c18); end
  def test_outputs_summary_table_d18; assert_equal("%", worksheet.outputs_summary_table_d18); end
  def test_outputs_summary_table_e18; assert_equal("81.1%", worksheet.outputs_summary_table_e18); end
  def test_outputs_summary_table_f18; assert_equal("85.2%", worksheet.outputs_summary_table_f18); end
  def test_outputs_summary_table_g18; assert_equal("5%", worksheet.outputs_summary_table_g18); end
  def test_outputs_summary_table_c19; assert_equal("Bioenergy supply (EJ / year)", worksheet.outputs_summary_table_c19); end
  def test_outputs_summary_table_d19; assert_equal("EJ / year", worksheet.outputs_summary_table_d19); end
  def test_outputs_summary_table_e19; assert_equal("57.2", worksheet.outputs_summary_table_e19); end
  def test_outputs_summary_table_f19; assert_equal("61.3", worksheet.outputs_summary_table_f19); end
  def test_outputs_summary_table_g19; assert_equal("7%", worksheet.outputs_summary_table_g19); end
  def test_outputs_summary_table_c20; assert_equal("% of oil reserves (as of 2011) left in the ground ", worksheet.outputs_summary_table_c20); end
  def test_outputs_summary_table_d20; assert_equal("% of 2011 reserves", worksheet.outputs_summary_table_d20); end
  def test_outputs_summary_table_e20; assert_equal("100%", worksheet.outputs_summary_table_e20); end
  def test_outputs_summary_table_f20; assert_equal("-1% to 10%", worksheet.outputs_summary_table_f20); end
  def test_outputs_summary_table_c21; assert_equal("% of gas reserves (as of 2011) left in the ground ", worksheet.outputs_summary_table_c21); end
  def test_outputs_summary_table_d21; assert_equal("% of 2011 reserves", worksheet.outputs_summary_table_d21); end
  def test_outputs_summary_table_e21; assert_equal("100%", worksheet.outputs_summary_table_e21); end
  def test_outputs_summary_table_f21; assert_equal("25% to 27%", worksheet.outputs_summary_table_f21); end
  def test_outputs_summary_table_c22; assert_equal("% of coal reserves (as of 2011) left in the ground ", worksheet.outputs_summary_table_c22); end
  def test_outputs_summary_table_d22; assert_equal("% of 2011 reserves", worksheet.outputs_summary_table_d22); end
  def test_outputs_summary_table_e22; assert_equal("100%", worksheet.outputs_summary_table_e22); end
  def test_outputs_summary_table_f22; assert_equal("65% to 68%", worksheet.outputs_summary_table_f22); end
  def test_outputs_summary_table_b24; assert_equal("Electricity", worksheet.outputs_summary_table_b24); end
  def test_outputs_summary_table_c24; assert_equal("Electricity demand (kWh / capita)", worksheet.outputs_summary_table_c24); end
  def test_outputs_summary_table_d24; assert_equal("kWh / capita", worksheet.outputs_summary_table_d24); end
  def test_outputs_summary_table_e24; assert_equal("2,814", worksheet.outputs_summary_table_e24); end
  def test_outputs_summary_table_f24; assert_equal("4,074", worksheet.outputs_summary_table_f24); end
  def test_outputs_summary_table_g24; assert_equal("45%", worksheet.outputs_summary_table_g24); end
  def test_outputs_summary_table_c25; assert_equal("Wind capacity (GW)", worksheet.outputs_summary_table_c25); end
  def test_outputs_summary_table_d25; assert_equal("GW", worksheet.outputs_summary_table_d25); end
  def test_outputs_summary_table_e25; assert_equal("238", worksheet.outputs_summary_table_e25); end
  def test_outputs_summary_table_f25; assert_equal("1,390", worksheet.outputs_summary_table_f25); end
  def test_outputs_summary_table_g25; assert_equal("485%", worksheet.outputs_summary_table_g25); end
  def test_outputs_summary_table_c26; assert_equal("Solar capacity (GW)", worksheet.outputs_summary_table_c26); end
  def test_outputs_summary_table_d26; assert_equal("GW", worksheet.outputs_summary_table_d26); end
  def test_outputs_summary_table_e26; assert_equal("71", worksheet.outputs_summary_table_e26); end
  def test_outputs_summary_table_f26; assert_equal("882", worksheet.outputs_summary_table_f26); end
  def test_outputs_summary_table_g26; assert_equal("1137%", worksheet.outputs_summary_table_g26); end
  def test_outputs_summary_table_c27; assert_equal("Nuclear capacity (GW)", worksheet.outputs_summary_table_c27); end
  def test_outputs_summary_table_d27; assert_equal("GW", worksheet.outputs_summary_table_d27); end
  def test_outputs_summary_table_e27; assert_equal("364", worksheet.outputs_summary_table_e27); end
  def test_outputs_summary_table_f27; assert_equal("502", worksheet.outputs_summary_table_f27); end
  def test_outputs_summary_table_g27; assert_equal("38%", worksheet.outputs_summary_table_g27); end
  def test_outputs_summary_table_c28; assert_equal("Hydro-electric capacity (GW)", worksheet.outputs_summary_table_c28); end
  def test_outputs_summary_table_d28; assert_equal("GW", worksheet.outputs_summary_table_d28); end
  def test_outputs_summary_table_e28; assert_equal("970", worksheet.outputs_summary_table_e28); end
  def test_outputs_summary_table_f28; assert_equal("1,660", worksheet.outputs_summary_table_f28); end
  def test_outputs_summary_table_g28; assert_equal("71%", worksheet.outputs_summary_table_g28); end
  def test_outputs_summary_table_c29; assert_equal("CCS for power (GW)", worksheet.outputs_summary_table_c29); end
  def test_outputs_summary_table_d29; assert_equal("GW", worksheet.outputs_summary_table_d29); end
  def test_outputs_summary_table_e29; assert_equal("0", worksheet.outputs_summary_table_e29); end
  def test_outputs_summary_table_f29; assert_equal("111", worksheet.outputs_summary_table_f29); end
  def test_outputs_summary_table_g29; assert_equal("", worksheet.outputs_summary_table_g29); end
  def test_outputs_summary_table_c30; assert_equal("Unabated fossil fuel capacity (GW)", worksheet.outputs_summary_table_c30); end
  def test_outputs_summary_table_d30; assert_equal("GW", worksheet.outputs_summary_table_d30); end
  def test_outputs_summary_table_e30; assert_equal("3,763", worksheet.outputs_summary_table_e30); end
  def test_outputs_summary_table_f30; assert_equal("8,381", worksheet.outputs_summary_table_f30); end
  def test_outputs_summary_table_g30; assert_equal("123%", worksheet.outputs_summary_table_g30); end
  def test_outputs_summary_table_c31; assert_equal("Storage capacity (GW)", worksheet.outputs_summary_table_c31); end
  def test_outputs_summary_table_d31; assert_equal("GW", worksheet.outputs_summary_table_d31); end
  def test_outputs_summary_table_e31; assert_equal("120", worksheet.outputs_summary_table_e31); end
  def test_outputs_summary_table_f31; assert_equal("278", worksheet.outputs_summary_table_f31); end
  def test_outputs_summary_table_g31; assert_equal("131%", worksheet.outputs_summary_table_g31); end
  def test_outputs_summary_table_c32; assert_equal("Efficiency of unabated fossil fuel power generation", worksheet.outputs_summary_table_c32); end
  def test_outputs_summary_table_d32; assert_equal("% efficiency", worksheet.outputs_summary_table_d32); end
  def test_outputs_summary_table_e32; assert_equal("39%", worksheet.outputs_summary_table_e32); end
  def test_outputs_summary_table_f32; assert_equal("42%", worksheet.outputs_summary_table_f32); end
  def test_outputs_summary_table_g32; assert_equal("8%", worksheet.outputs_summary_table_g32); end
  def test_outputs_summary_table_c33; assert_equal("Efficiency of CCS fossil fuel power generation", worksheet.outputs_summary_table_c33); end
  def test_outputs_summary_table_d33; assert_equal("% efficiency", worksheet.outputs_summary_table_d33); end
  def test_outputs_summary_table_e33; assert_equal("n / a", worksheet.outputs_summary_table_e33); end
  def test_outputs_summary_table_f33; assert_equal("42%", worksheet.outputs_summary_table_f33); end
  def test_outputs_summary_table_g33; assert_equal("", worksheet.outputs_summary_table_g33); end
  def test_outputs_summary_table_b36; assert_equal("Transport", worksheet.outputs_summary_table_b36); end
  def test_outputs_summary_table_c36; assert_equal("Number of passenger vehicles on the road (thousands)", worksheet.outputs_summary_table_c36); end
  def test_outputs_summary_table_d36; assert_equal("000's", worksheet.outputs_summary_table_d36); end
  def test_outputs_summary_table_e36; assert_equal("1,434,514", worksheet.outputs_summary_table_e36); end
  def test_outputs_summary_table_f36; assert_equal("3,711,808", worksheet.outputs_summary_table_f36); end
  def test_outputs_summary_table_g36; assert_equal("159%", worksheet.outputs_summary_table_g36); end
  def test_outputs_summary_table_c37; assert_equal("% urban cars that are zero emission (electric/hydrogen)", worksheet.outputs_summary_table_c37); end
  def test_outputs_summary_table_d37; assert_equal("% of urban cars", worksheet.outputs_summary_table_d37); end
  def test_outputs_summary_table_e37; assert_equal("0.2%", worksheet.outputs_summary_table_e37); end
  def test_outputs_summary_table_f37; assert_equal("2.0%", worksheet.outputs_summary_table_f37); end
  def test_outputs_summary_table_g37; assert_equal("821%", worksheet.outputs_summary_table_g37); end
  def test_outputs_summary_table_c38; assert_equal("Efficiency of urban ICE cars (lge per 100km)", worksheet.outputs_summary_table_c38); end
  def test_outputs_summary_table_d38; assert_equal("lge per 100km", worksheet.outputs_summary_table_d38); end
  def test_outputs_summary_table_e38; assert_equal("8.6", worksheet.outputs_summary_table_e38); end
  def test_outputs_summary_table_f38; assert_equal("5.8", worksheet.outputs_summary_table_f38); end
  def test_outputs_summary_table_g38; assert_equal("-33%", worksheet.outputs_summary_table_g38); end
  def test_outputs_summary_table_c39; assert_equal("Total passenger vehicle km travelled per capita", worksheet.outputs_summary_table_c39); end
  def test_outputs_summary_table_d39; assert_equal("Passenger km / capita", worksheet.outputs_summary_table_d39); end
  def test_outputs_summary_table_e39; assert_equal("7,443", worksheet.outputs_summary_table_e39); end
  def test_outputs_summary_table_f39; assert_equal("10,757", worksheet.outputs_summary_table_f39); end
  def test_outputs_summary_table_g39; assert_equal("45%", worksheet.outputs_summary_table_g39); end
  def test_outputs_summary_table_c40; assert_equal("% of total passenger km travelled using private transport", worksheet.outputs_summary_table_c40); end
  def test_outputs_summary_table_d40; assert_equal("% of total passenger km", worksheet.outputs_summary_table_d40); end
  def test_outputs_summary_table_e40; assert_equal("71.7%", worksheet.outputs_summary_table_e40); end
  def test_outputs_summary_table_f40; assert_equal("76.9%", worksheet.outputs_summary_table_f40); end
  def test_outputs_summary_table_g40; assert_equal("7%", worksheet.outputs_summary_table_g40); end
  def test_outputs_summary_table_c41; assert_equal("Domestic freight (Tonne km / capita)", worksheet.outputs_summary_table_c41); end
  def test_outputs_summary_table_d41; assert_equal("Tonne km / capita", worksheet.outputs_summary_table_d41); end
  def test_outputs_summary_table_e41; assert_equal("819", worksheet.outputs_summary_table_e41); end
  def test_outputs_summary_table_f41; assert_equal("1,149", worksheet.outputs_summary_table_f41); end
  def test_outputs_summary_table_g41; assert_equal("40%", worksheet.outputs_summary_table_g41); end
  def test_outputs_summary_table_c42; assert_equal("International freight (Tonne km / capita)", worksheet.outputs_summary_table_c42); end
  def test_outputs_summary_table_d42; assert_equal("Tonne km / capita", worksheet.outputs_summary_table_d42); end
  def test_outputs_summary_table_e42; assert_equal("15,348", worksheet.outputs_summary_table_e42); end
  def test_outputs_summary_table_f42; assert_equal("23,214", worksheet.outputs_summary_table_f42); end
  def test_outputs_summary_table_g42; assert_equal("51%", worksheet.outputs_summary_table_g42); end
  def test_outputs_summary_table_c43; assert_equal("Air freight (as % of international freight tonne-km)", worksheet.outputs_summary_table_c43); end
  def test_outputs_summary_table_d43; assert_equal("% of international freight tonne-km", worksheet.outputs_summary_table_d43); end
  def test_outputs_summary_table_e43; assert_equal("0.20%", worksheet.outputs_summary_table_e43); end
  def test_outputs_summary_table_f43; assert_equal("0.26%", worksheet.outputs_summary_table_f43); end
  def test_outputs_summary_table_g43; assert_equal("28%", worksheet.outputs_summary_table_g43); end
  def test_outputs_summary_table_b45; assert_equal("Buildings", worksheet.outputs_summary_table_b45); end
  def test_outputs_summary_table_c45; assert_equal("Number of appliances per household", worksheet.outputs_summary_table_c45); end
  def test_outputs_summary_table_d45; assert_equal("No. of appliances", worksheet.outputs_summary_table_d45); end
  def test_outputs_summary_table_e45; assert_equal("5.1", worksheet.outputs_summary_table_e45); end
  def test_outputs_summary_table_f45; assert_equal("7.2", worksheet.outputs_summary_table_f45); end
  def test_outputs_summary_table_g45; assert_equal("41%", worksheet.outputs_summary_table_g45); end
  def test_outputs_summary_table_c46; assert_equal("Refrigerator average power (W) in urban areas", worksheet.outputs_summary_table_c46); end
  def test_outputs_summary_table_d46; assert_equal("Average power (W)", worksheet.outputs_summary_table_d46); end
  def test_outputs_summary_table_e46; assert_equal("100", worksheet.outputs_summary_table_e46); end
  def test_outputs_summary_table_f46; assert_equal("71", worksheet.outputs_summary_table_f46); end
  def test_outputs_summary_table_g46; assert_equal("-29%", worksheet.outputs_summary_table_g46); end
  def test_outputs_summary_table_c47; assert_equal("Building temperature in warm months (⁰C)", worksheet.outputs_summary_table_c47); end
  def test_outputs_summary_table_d47; assert_equal("⁰C", worksheet.outputs_summary_table_d47); end
  def test_outputs_summary_table_e47; assert_equal("27.4", worksheet.outputs_summary_table_e47); end
  def test_outputs_summary_table_f47; assert_equal("25.0", worksheet.outputs_summary_table_f47); end
  def test_outputs_summary_table_g47; assert_equal("-9%", worksheet.outputs_summary_table_g47); end
  def test_outputs_summary_table_c48; assert_equal("Building temperature in cold months (⁰C)", worksheet.outputs_summary_table_c48); end
  def test_outputs_summary_table_d48; assert_equal("⁰C", worksheet.outputs_summary_table_d48); end
  def test_outputs_summary_table_e48; assert_equal("15.9", worksheet.outputs_summary_table_e48); end
  def test_outputs_summary_table_f48; assert_equal("18.3", worksheet.outputs_summary_table_f48); end
  def test_outputs_summary_table_g48; assert_equal("15%", worksheet.outputs_summary_table_g48); end
  def test_outputs_summary_table_c49; assert_equal("Home/building insulation  (rate of heat loss in GW / M ha*℃)", worksheet.outputs_summary_table_c49); end
  def test_outputs_summary_table_d49; assert_equal("GW / M ha*℃", worksheet.outputs_summary_table_d49); end
  def test_outputs_summary_table_e49; assert_equal("16.1", worksheet.outputs_summary_table_e49); end
  def test_outputs_summary_table_f49; assert_equal("10.2", worksheet.outputs_summary_table_f49); end
  def test_outputs_summary_table_g49; assert_equal("-37%", worksheet.outputs_summary_table_g49); end
  def test_outputs_summary_table_c50; assert_equal("% urban households using heat-pumps for space heating", worksheet.outputs_summary_table_c50); end
  def test_outputs_summary_table_d50; assert_equal("% of hhds (from all urban households with access to electricity)", worksheet.outputs_summary_table_d50); end
  def test_outputs_summary_table_e50; assert_equal("2.0%", worksheet.outputs_summary_table_e50); end
  def test_outputs_summary_table_f50; assert_equal("3.0%", worksheet.outputs_summary_table_f50); end
  def test_outputs_summary_table_g50; assert_equal("50%", worksheet.outputs_summary_table_g50); end
  def test_outputs_summary_table_c51; assert_equal("% urban households using electric-powered space heating", worksheet.outputs_summary_table_c51); end
  def test_outputs_summary_table_d51; assert_equal("% of hhds (from all urban households with access to electricity)", worksheet.outputs_summary_table_d51); end
  def test_outputs_summary_table_e51; assert_equal("8.0%", worksheet.outputs_summary_table_e51); end
  def test_outputs_summary_table_f51; assert_equal("8.0%", worksheet.outputs_summary_table_f51); end
  def test_outputs_summary_table_g51; assert_equal("0%", worksheet.outputs_summary_table_g51); end
  def test_outputs_summary_table_c52; assert_equal("% urban households using solar-powered space heating", worksheet.outputs_summary_table_c52); end
  def test_outputs_summary_table_d52; assert_equal("% of hhds (from all urban households with access to electricity)", worksheet.outputs_summary_table_d52); end
  def test_outputs_summary_table_e52; assert_equal("0.0%", worksheet.outputs_summary_table_e52); end
  def test_outputs_summary_table_f52; assert_equal("0.3%", worksheet.outputs_summary_table_f52); end
  def test_outputs_summary_table_g52; assert_equal("", worksheet.outputs_summary_table_g52); end
  def test_outputs_summary_table_b54; assert_equal("Manufacturing", worksheet.outputs_summary_table_b54); end
  def test_outputs_summary_table_c54; assert_equal("Iron, steel and aluminium output (Gt)", worksheet.outputs_summary_table_c54); end
  def test_outputs_summary_table_d54; assert_equal("Gt", worksheet.outputs_summary_table_d54); end
  def test_outputs_summary_table_e54; assert_equal("1.5", worksheet.outputs_summary_table_e54); end
  def test_outputs_summary_table_f54; assert_equal("2.8", worksheet.outputs_summary_table_f54); end
  def test_outputs_summary_table_g54; assert_equal("82%", worksheet.outputs_summary_table_g54); end
  def test_outputs_summary_table_c55; assert_equal("Paper and other output (Gt)", worksheet.outputs_summary_table_c55); end
  def test_outputs_summary_table_d55; assert_equal("Gt", worksheet.outputs_summary_table_d55); end
  def test_outputs_summary_table_e55; assert_equal("0.6", worksheet.outputs_summary_table_e55); end
  def test_outputs_summary_table_f55; assert_equal("0.9", worksheet.outputs_summary_table_f55); end
  def test_outputs_summary_table_g55; assert_equal("45%", worksheet.outputs_summary_table_g55); end
  def test_outputs_summary_table_c56; assert_equal("Chemicals output (Gt)", worksheet.outputs_summary_table_c56); end
  def test_outputs_summary_table_d56; assert_equal("Gt", worksheet.outputs_summary_table_d56); end
  def test_outputs_summary_table_e56; assert_equal("0.7", worksheet.outputs_summary_table_e56); end
  def test_outputs_summary_table_f56; assert_equal("1.3", worksheet.outputs_summary_table_f56); end
  def test_outputs_summary_table_g56; assert_equal("79%", worksheet.outputs_summary_table_g56); end
  def test_outputs_summary_table_c57; assert_equal("Cement output (Gt)", worksheet.outputs_summary_table_c57); end
  def test_outputs_summary_table_d57; assert_equal("Gt", worksheet.outputs_summary_table_d57); end
  def test_outputs_summary_table_e57; assert_equal("3.6", worksheet.outputs_summary_table_e57); end
  def test_outputs_summary_table_f57; assert_equal("6.4", worksheet.outputs_summary_table_f57); end
  def test_outputs_summary_table_g57; assert_equal("76%", worksheet.outputs_summary_table_g57); end
  def test_outputs_summary_table_c58; assert_equal("Timber output (Gt)", worksheet.outputs_summary_table_c58); end
  def test_outputs_summary_table_d58; assert_equal("Gt", worksheet.outputs_summary_table_d58); end
  def test_outputs_summary_table_e58; assert_equal("0.8", worksheet.outputs_summary_table_e58); end
  def test_outputs_summary_table_f58; assert_equal("1.3", worksheet.outputs_summary_table_f58); end
  def test_outputs_summary_table_g58; assert_equal("64%", worksheet.outputs_summary_table_g58); end
  def test_outputs_summary_table_c59; assert_equal("Global Oxygen steel technology (% decrease in energy demand from 2011)", worksheet.outputs_summary_table_c59); end
  def test_outputs_summary_table_d59; assert_equal("% decrease in energy demand from 2011", worksheet.outputs_summary_table_d59); end
  def test_outputs_summary_table_e59; assert_equal("0.0%", worksheet.outputs_summary_table_e59); end
  def test_outputs_summary_table_f59; assert_equal("2.5%", worksheet.outputs_summary_table_f59); end
  def test_outputs_summary_table_g59; assert_equal("", worksheet.outputs_summary_table_g59); end
  def test_outputs_summary_table_c60; assert_equal("Global Pulp & paper: Pulp technology (% decrease in energy demand from 2011)", worksheet.outputs_summary_table_c60); end
  def test_outputs_summary_table_d60; assert_equal("% decrease in energy demand from 2011", worksheet.outputs_summary_table_d60); end
  def test_outputs_summary_table_e60; assert_equal("0.0%", worksheet.outputs_summary_table_e60); end
  def test_outputs_summary_table_f60; assert_equal("18.0%", worksheet.outputs_summary_table_f60); end
  def test_outputs_summary_table_g60; assert_equal("", worksheet.outputs_summary_table_g60); end
  def test_outputs_summary_table_c61; assert_equal("Global Chemicals: High Value Chemicals  technology (% decrease in energy demand from 2011)", worksheet.outputs_summary_table_c61); end
  def test_outputs_summary_table_d61; assert_equal("% decrease in energy demand from 2011", worksheet.outputs_summary_table_d61); end
  def test_outputs_summary_table_e61; assert_equal("0.0%", worksheet.outputs_summary_table_e61); end
  def test_outputs_summary_table_f61; assert_equal("0.0%", worksheet.outputs_summary_table_f61); end
  def test_outputs_summary_table_g61; assert_equal("", worksheet.outputs_summary_table_g61); end
  def test_outputs_summary_table_c62; assert_equal("Global Cement technology (% decrease in energy demand from 2011)", worksheet.outputs_summary_table_c62); end
  def test_outputs_summary_table_d62; assert_equal("% decrease in energy demand from 2011", worksheet.outputs_summary_table_d62); end
  def test_outputs_summary_table_e62; assert_equal("0.0%", worksheet.outputs_summary_table_e62); end
  def test_outputs_summary_table_f62; assert_equal("7.4%", worksheet.outputs_summary_table_f62); end
  def test_outputs_summary_table_g62; assert_equal("", worksheet.outputs_summary_table_g62); end
  def test_outputs_summary_table_c63; assert_equal("% of manufacturing emissions captured by CCS", worksheet.outputs_summary_table_c63); end
  def test_outputs_summary_table_d63; assert_equal("%", worksheet.outputs_summary_table_d63); end
  def test_outputs_summary_table_e63; assert_equal("0.0%", worksheet.outputs_summary_table_e63); end
  def test_outputs_summary_table_f63; assert_equal("0.0%", worksheet.outputs_summary_table_f63); end
  def test_outputs_summary_table_g63; assert_equal("", worksheet.outputs_summary_table_g63); end
  def test_outputs_summary_table_c64; assert_equal("Demand for consumer packaging (% of 2011 tonne demand)", worksheet.outputs_summary_table_c64); end
  def test_outputs_summary_table_d64; assert_equal("% of 2011 demand (tonnes)", worksheet.outputs_summary_table_d64); end
  def test_outputs_summary_table_e64; assert_equal("100.0%", worksheet.outputs_summary_table_e64); end
  def test_outputs_summary_table_f64; assert_equal("145.3%", worksheet.outputs_summary_table_f64); end
  def test_outputs_summary_table_g64; assert_equal("45%", worksheet.outputs_summary_table_g64); end
  def test_outputs_summary_table_c65; assert_equal("Demand for electrical equipment (% of 2011 tonne demand)", worksheet.outputs_summary_table_c65); end
  def test_outputs_summary_table_d65; assert_equal("% of 2011 demand (tonnes)", worksheet.outputs_summary_table_d65); end
  def test_outputs_summary_table_e65; assert_equal("100.0%", worksheet.outputs_summary_table_e65); end
  def test_outputs_summary_table_f65; assert_equal("226.2%", worksheet.outputs_summary_table_f65); end
  def test_outputs_summary_table_g65; assert_equal("126%", worksheet.outputs_summary_table_g65); end
  def test_outputs_summary_table_c66; assert_equal("Lifespan of refrigerator (years) in urban areas", worksheet.outputs_summary_table_c66); end
  def test_outputs_summary_table_d66; assert_equal("Refrigerator lifespan (years)", worksheet.outputs_summary_table_d66); end
  def test_outputs_summary_table_e66; assert_equal("15", worksheet.outputs_summary_table_e66); end
  def test_outputs_summary_table_f66; assert_equal("12", worksheet.outputs_summary_table_f66); end
  def test_outputs_summary_table_g66; assert_equal("-20%", worksheet.outputs_summary_table_g66); end
  def test_outputs_summary_table_b68; assert_equal("Land", worksheet.outputs_summary_table_b68); end
  def test_outputs_summary_table_c68; assert_equal("Crop yields (EJ per M ha)", worksheet.outputs_summary_table_c68); end
  def test_outputs_summary_table_d68; assert_equal("EJ per M ha", worksheet.outputs_summary_table_d68); end
  def test_outputs_summary_table_e68; assert_equal("0.03", worksheet.outputs_summary_table_e68); end
  def test_outputs_summary_table_f68; assert_equal("0.04", worksheet.outputs_summary_table_f68); end
  def test_outputs_summary_table_g68; assert_equal("30%", worksheet.outputs_summary_table_g68); end
  def test_outputs_summary_table_c69; assert_equal("Livestock yields for cows and other bovines (% increase from 2011 in non-intensive animal yields and carrying capacity of pasture)", worksheet.outputs_summary_table_c69); end
  def test_outputs_summary_table_d69; assert_equal("% increase from 2011 in non-intensive animal yields (animals per area) and carrying capacity of pasture", worksheet.outputs_summary_table_d69); end
  def test_outputs_summary_table_e69; assert_equal("0.0%", worksheet.outputs_summary_table_e69); end
  def test_outputs_summary_table_f69; assert_equal("30.0%", worksheet.outputs_summary_table_f69); end
  def test_outputs_summary_table_g69; assert_equal("", worksheet.outputs_summary_table_g69); end
  def test_outputs_summary_table_c70; assert_equal("Bioenergy yields (Increase in energy crop yields (NPP) and change in crop mix from base year)", worksheet.outputs_summary_table_c70); end
  def test_outputs_summary_table_d70; assert_equal("Increase in energy crop yields (NPP) and change in crop mix from base year", worksheet.outputs_summary_table_d70); end
  def test_outputs_summary_table_e70; assert_equal("21.1%", worksheet.outputs_summary_table_e70); end
  def test_outputs_summary_table_f70; assert_equal("36.1%", worksheet.outputs_summary_table_f70); end
  def test_outputs_summary_table_g70; assert_equal("71%", worksheet.outputs_summary_table_g70); end
  def test_outputs_summary_table_c71; assert_equal("% of productive land used for bioenergy", worksheet.outputs_summary_table_c71); end
  def test_outputs_summary_table_d71; assert_equal("% of all productive land (M ha)", worksheet.outputs_summary_table_d71); end
  def test_outputs_summary_table_e71; assert_equal(:na, worksheet.outputs_summary_table_e71); end
  def test_outputs_summary_table_f71; assert_equal(:na, worksheet.outputs_summary_table_f71); end
  def test_outputs_summary_table_g71; assert_equal(:na, worksheet.outputs_summary_table_g71); end
  def test_outputs_summary_table_c72; assert_equal("% of productive land used for food (livestock and food crops)", worksheet.outputs_summary_table_c72); end
  def test_outputs_summary_table_d72; assert_equal("% of all productive land (M ha)", worksheet.outputs_summary_table_d72); end
  def test_outputs_summary_table_e72; assert_equal(:na, worksheet.outputs_summary_table_e72); end
  def test_outputs_summary_table_f72; assert_equal(:na, worksheet.outputs_summary_table_f72); end
  def test_outputs_summary_table_g72; assert_equal(:na, worksheet.outputs_summary_table_g72); end
  def test_outputs_summary_table_c73; assert_equal("% of productive land used for commercial forestry", worksheet.outputs_summary_table_c73); end
  def test_outputs_summary_table_d73; assert_equal("% of all productive land (M ha)", worksheet.outputs_summary_table_d73); end
  def test_outputs_summary_table_e73; assert_equal(:na, worksheet.outputs_summary_table_e73); end
  def test_outputs_summary_table_f73; assert_equal(:na, worksheet.outputs_summary_table_f73); end
  def test_outputs_summary_table_g73; assert_equal(:na, worksheet.outputs_summary_table_g73); end
  def test_outputs_summary_table_c74; assert_equal("% of productive land used for native forest", worksheet.outputs_summary_table_c74); end
  def test_outputs_summary_table_d74; assert_equal("% of all productive land (M ha)", worksheet.outputs_summary_table_d74); end
  def test_outputs_summary_table_e74; assert_equal(:na, worksheet.outputs_summary_table_e74); end
  def test_outputs_summary_table_f74; assert_equal(:na, worksheet.outputs_summary_table_f74); end
  def test_outputs_summary_table_g74; assert_equal(:na, worksheet.outputs_summary_table_g74); end
  def test_outputs_summary_table_b76; assert_equal("Food", worksheet.outputs_summary_table_b76); end
  def test_outputs_summary_table_c76; assert_equal("Calories consumed per head (kCal)", worksheet.outputs_summary_table_c76); end
  def test_outputs_summary_table_d76; assert_equal("kCal", worksheet.outputs_summary_table_d76); end
  def test_outputs_summary_table_e76; assert_equal("2,170", worksheet.outputs_summary_table_e76); end
  def test_outputs_summary_table_f76; assert_equal("2,340", worksheet.outputs_summary_table_f76); end
  def test_outputs_summary_table_g76; assert_equal("8%", worksheet.outputs_summary_table_g76); end
  def test_outputs_summary_table_c77; assert_equal("Calories from meat (kCal)", worksheet.outputs_summary_table_c77); end
  def test_outputs_summary_table_d77; assert_equal("kCal", worksheet.outputs_summary_table_d77); end
  def test_outputs_summary_table_e77; assert_equal("191", worksheet.outputs_summary_table_e77); end
  def test_outputs_summary_table_f77; assert_equal("208", worksheet.outputs_summary_table_f77); end
  def test_outputs_summary_table_g77; assert_equal("9%", worksheet.outputs_summary_table_g77); end
  def test_outputs_summary_table_b79; assert_equal("Cost", worksheet.outputs_summary_table_b79); end
  def test_outputs_summary_table_c79; assert_equal("Cost in 2050 - point estimate ($bn)", worksheet.outputs_summary_table_c79); end
  def test_outputs_summary_table_d79; assert_equal("$bn", worksheet.outputs_summary_table_d79); end
  def test_outputs_summary_table_e79; assert_equal("n / a", worksheet.outputs_summary_table_e79); end
  def test_outputs_summary_table_f79; assert_equal("23176.1", worksheet.outputs_summary_table_f79); end
  def test_outputs_summary_table_g79; assert_equal("", worksheet.outputs_summary_table_g79); end
  def test_outputs_summary_table_c80; assert_equal("Cost in 2050 - high estimate ($bn)", worksheet.outputs_summary_table_c80); end
  def test_outputs_summary_table_d80; assert_equal("$bn", worksheet.outputs_summary_table_d80); end
  def test_outputs_summary_table_e80; assert_equal("n / a", worksheet.outputs_summary_table_e80); end
  def test_outputs_summary_table_f80; assert_equal("29994.8", worksheet.outputs_summary_table_f80); end
  def test_outputs_summary_table_g80; assert_equal("", worksheet.outputs_summary_table_g80); end
  def test_outputs_summary_table_c81; assert_equal("Cost in 2050 - low estimate ($bn)", worksheet.outputs_summary_table_c81); end
  def test_outputs_summary_table_d81; assert_equal("$bn", worksheet.outputs_summary_table_d81); end
  def test_outputs_summary_table_e81; assert_equal("n / a", worksheet.outputs_summary_table_e81); end
  def test_outputs_summary_table_f81; assert_equal("17075.0", worksheet.outputs_summary_table_f81); end
  def test_outputs_summary_table_g81; assert_equal("", worksheet.outputs_summary_table_g81); end
  def test_outputs_summary_table_c82; assert_equal("Fuel costs as % of total costs", worksheet.outputs_summary_table_c82); end
  def test_outputs_summary_table_d82; assert_equal("% ($bn)", worksheet.outputs_summary_table_d82); end
  def test_outputs_summary_table_e82; assert_equal("n / a", worksheet.outputs_summary_table_e82); end
  def test_outputs_summary_table_f82; assert_equal("16.9%", worksheet.outputs_summary_table_f82); end
  def test_outputs_summary_table_g82; assert_equal("", worksheet.outputs_summary_table_g82); end
  def test_outputs_summary_table_c83; assert_equal("Tax levied by fossil fuel exporters in 2050 ($bn)", worksheet.outputs_summary_table_c83); end
  def test_outputs_summary_table_d83; assert_equal("$bn", worksheet.outputs_summary_table_d83); end
  def test_outputs_summary_table_e83; assert_equal("n / a", worksheet.outputs_summary_table_e83); end
  def test_outputs_summary_table_f83; assert_equal("5982.7", worksheet.outputs_summary_table_f83); end
  def test_outputs_summary_table_g83; assert_equal("", worksheet.outputs_summary_table_g83); end
  def test_outputs_summary_table_b85; assert_equal("Emissions saved", worksheet.outputs_summary_table_b85); end
  def test_outputs_summary_table_c85; assert_equal("Emissions saved by speculative GHG removal technologies (Gt CO2e)", worksheet.outputs_summary_table_c85); end
  def test_outputs_summary_table_d85; assert_equal("Gt CO2e", worksheet.outputs_summary_table_d85); end
  def test_outputs_summary_table_e85; assert_equal("0.000", worksheet.outputs_summary_table_e85); end
  def test_outputs_summary_table_f85; assert_equal("0.000", worksheet.outputs_summary_table_f85); end
  def test_outputs_summary_table_g85; assert_equal("", worksheet.outputs_summary_table_g85); end
  def test_outputs_summary_table_d90; assert_equal("Unit", worksheet.outputs_summary_table_d90); end
  def test_outputs_summary_table_e90; assert_equal("2011", worksheet.outputs_summary_table_e90); end
  def test_outputs_summary_table_f90; assert_equal("2050", worksheet.outputs_summary_table_f90); end
  def test_outputs_summary_table_g90; assert_equal("% increase", worksheet.outputs_summary_table_g90); end
  def test_outputs_summary_table_b91; assert_equal("Emissions and temperature", worksheet.outputs_summary_table_b91); end
  def test_outputs_summary_table_c91; assert_equal("Cumulative emissions by each year (Gt CO2e)", worksheet.outputs_summary_table_c91); end
  def test_outputs_summary_table_d91; assert_equal("Gt CO2e", worksheet.outputs_summary_table_d91); end
  def test_outputs_summary_table_e91; assert_equal("1,890", worksheet.outputs_summary_table_e91); end
  def test_outputs_summary_table_f91; assert_equal("3,840", worksheet.outputs_summary_table_f91); end
  def test_outputs_summary_table_g91; assert_equal("", worksheet.outputs_summary_table_g91); end
  def test_outputs_summary_table_c92; assert_equal("Post-2050 emissions trajectory", worksheet.outputs_summary_table_c92); end
  def test_outputs_summary_table_d92; assert_equal("% emissions increase every year: a proportion of average yearly change for the previous 15 year period", worksheet.outputs_summary_table_d92); end
  def test_outputs_summary_table_e92; assert_equal("105.9%", worksheet.outputs_summary_table_e92); end
  def test_outputs_summary_table_g92; assert_equal("", worksheet.outputs_summary_table_g92); end
  def test_outputs_summary_table_b94; assert_equal("Demographics and long term", worksheet.outputs_summary_table_b94); end
  def test_outputs_summary_table_c94; assert_equal("Urban population (billions of people)", worksheet.outputs_summary_table_c94); end
  def test_outputs_summary_table_d94; assert_equal("billions of people", worksheet.outputs_summary_table_d94); end
  def test_outputs_summary_table_e94; assert_equal("3.6", worksheet.outputs_summary_table_e94); end
  def test_outputs_summary_table_f94; assert_equal("6.3", worksheet.outputs_summary_table_f94); end
  def test_outputs_summary_table_g94; assert_equal("75%", worksheet.outputs_summary_table_g94); end
  def test_outputs_summary_table_c95; assert_equal("Rural population (billions of people)", worksheet.outputs_summary_table_c95); end
  def test_outputs_summary_table_d95; assert_equal("billions of people", worksheet.outputs_summary_table_d95); end
  def test_outputs_summary_table_e95; assert_equal("3.3", worksheet.outputs_summary_table_e95); end
  def test_outputs_summary_table_f95; assert_equal("3.2", worksheet.outputs_summary_table_f95); end
  def test_outputs_summary_table_g95; assert_equal("-4%", worksheet.outputs_summary_table_g95); end
  def test_outputs_summary_table_b97; assert_equal("Electricity", worksheet.outputs_summary_table_b97); end
  def test_outputs_summary_table_c97; assert_equal("Electricity demand (kWh per capita)", worksheet.outputs_summary_table_c97); end
  def test_outputs_summary_table_d97; assert_equal("kWh per capita", worksheet.outputs_summary_table_d97); end
  def test_outputs_summary_table_e97; assert_equal("2,814", worksheet.outputs_summary_table_e97); end
  def test_outputs_summary_table_f97; assert_equal("4,074", worksheet.outputs_summary_table_f97); end
  def test_outputs_summary_table_g97; assert_equal("45%", worksheet.outputs_summary_table_g97); end
  def test_outputs_summary_table_c98; assert_equal("Offshore wind capacity (GW)", worksheet.outputs_summary_table_c98); end
  def test_outputs_summary_table_d98; assert_equal("GW", worksheet.outputs_summary_table_d98); end
  def test_outputs_summary_table_e98; assert_equal("4", worksheet.outputs_summary_table_e98); end
  def test_outputs_summary_table_f98; assert_equal("273", worksheet.outputs_summary_table_f98); end
  def test_outputs_summary_table_g98; assert_equal("6559%", worksheet.outputs_summary_table_g98); end
  def test_outputs_summary_table_c99; assert_equal("Onshore wind capacity (GW)", worksheet.outputs_summary_table_c99); end
  def test_outputs_summary_table_d99; assert_equal("GW", worksheet.outputs_summary_table_d99); end
  def test_outputs_summary_table_e99; assert_equal("234", worksheet.outputs_summary_table_e99); end
  def test_outputs_summary_table_f99; assert_equal("1,117", worksheet.outputs_summary_table_f99); end
  def test_outputs_summary_table_g99; assert_equal("378%", worksheet.outputs_summary_table_g99); end
  def test_outputs_summary_table_c100; assert_equal("Solar PV capacity (GW)", worksheet.outputs_summary_table_c100); end
  def test_outputs_summary_table_d100; assert_equal("GW", worksheet.outputs_summary_table_d100); end
  def test_outputs_summary_table_e100; assert_equal("70", worksheet.outputs_summary_table_e100); end
  def test_outputs_summary_table_f100; assert_equal("727", worksheet.outputs_summary_table_f100); end
  def test_outputs_summary_table_g100; assert_equal("943%", worksheet.outputs_summary_table_g100); end
  def test_outputs_summary_table_c101; assert_equal("CSP capacity (GW)", worksheet.outputs_summary_table_c101); end
  def test_outputs_summary_table_d101; assert_equal("GW", worksheet.outputs_summary_table_d101); end
  def test_outputs_summary_table_e101; assert_equal("2", worksheet.outputs_summary_table_e101); end
  def test_outputs_summary_table_f101; assert_equal("155", worksheet.outputs_summary_table_f101); end
  def test_outputs_summary_table_g101; assert_equal("9600%", worksheet.outputs_summary_table_g101); end
  def test_outputs_summary_table_c102; assert_equal("Unabated (GW)", worksheet.outputs_summary_table_c102); end
  def test_outputs_summary_table_d102; assert_equal("GW", worksheet.outputs_summary_table_d102); end
  def test_outputs_summary_table_e102; assert_equal("3,763", worksheet.outputs_summary_table_e102); end
  def test_outputs_summary_table_f102; assert_equal("8,381", worksheet.outputs_summary_table_f102); end
  def test_outputs_summary_table_g102; assert_equal("123%", worksheet.outputs_summary_table_g102); end
  def test_outputs_summary_table_b104; assert_equal("Transport", worksheet.outputs_summary_table_b104); end
  def test_outputs_summary_table_c104; assert_equal("Light road (number of vehicles)", worksheet.outputs_summary_table_c104); end
  def test_outputs_summary_table_d104; assert_equal("Number of vehicles", worksheet.outputs_summary_table_d104); end
  def test_outputs_summary_table_e104; assert_equal("1,419,297,059", worksheet.outputs_summary_table_e104); end
  def test_outputs_summary_table_f104; assert_equal("3,685,839,007", worksheet.outputs_summary_table_f104); end
  def test_outputs_summary_table_g104; assert_equal("160%", worksheet.outputs_summary_table_g104); end
  def test_outputs_summary_table_c105; assert_equal("Heavy road (number of vehicles)", worksheet.outputs_summary_table_c105); end
  def test_outputs_summary_table_d105; assert_equal("Number of vehicles", worksheet.outputs_summary_table_d105); end
  def test_outputs_summary_table_e105; assert_equal("15,217,209", worksheet.outputs_summary_table_e105); end
  def test_outputs_summary_table_f105; assert_equal("25,968,690", worksheet.outputs_summary_table_f105); end
  def test_outputs_summary_table_g105; assert_equal("71%", worksheet.outputs_summary_table_g105); end
  def test_outputs_summary_table_c106; assert_equal("Rail (number of vehicles)", worksheet.outputs_summary_table_c106); end
  def test_outputs_summary_table_d106; assert_equal("Number of vehicles", worksheet.outputs_summary_table_d106); end
  def test_outputs_summary_table_e106; assert_equal("52,229", worksheet.outputs_summary_table_e106); end
  def test_outputs_summary_table_f106; assert_equal("107,768", worksheet.outputs_summary_table_f106); end
  def test_outputs_summary_table_g106; assert_equal("106%", worksheet.outputs_summary_table_g106); end
  def test_outputs_summary_table_c107; assert_equal("Plane (number of vehicles)", worksheet.outputs_summary_table_c107); end
  def test_outputs_summary_table_d107; assert_equal("Number of vehicles", worksheet.outputs_summary_table_d107); end
  def test_outputs_summary_table_e107; assert_equal("24,997", worksheet.outputs_summary_table_e107); end
  def test_outputs_summary_table_f107; assert_equal("68,839", worksheet.outputs_summary_table_f107); end
  def test_outputs_summary_table_g107; assert_equal("175%", worksheet.outputs_summary_table_g107); end
  def test_outputs_summary_table_c108; assert_equal("Air freight (as % of international freight tonne-km)", worksheet.outputs_summary_table_c108); end
  def test_outputs_summary_table_d108; assert_equal("% of international freight tonne-km", worksheet.outputs_summary_table_d108); end
  def test_outputs_summary_table_e108; assert_equal("0.2%", worksheet.outputs_summary_table_e108); end
  def test_outputs_summary_table_f108; assert_equal("0.3%", worksheet.outputs_summary_table_f108); end
  def test_outputs_summary_table_g108; assert_equal("28%", worksheet.outputs_summary_table_g108); end
  def test_outputs_summary_table_c109; assert_equal("car.passenger.urban.ICE.liquid", worksheet.outputs_summary_table_c109); end
  def test_outputs_summary_table_d109; assert_equal("% of urban cars", worksheet.outputs_summary_table_d109); end
  def test_outputs_summary_table_e109; assert_equal("98.8%", worksheet.outputs_summary_table_e109); end
  def test_outputs_summary_table_f109; assert_equal("91.0%", worksheet.outputs_summary_table_f109); end
  def test_outputs_summary_table_g109; assert_equal("", worksheet.outputs_summary_table_g109); end
  def test_outputs_summary_table_c110; assert_equal("car.passenger.urban.ICE.gas", worksheet.outputs_summary_table_c110); end
  def test_outputs_summary_table_d110; assert_equal("% of urban cars", worksheet.outputs_summary_table_d110); end
  def test_outputs_summary_table_e110; assert_equal("1.0%", worksheet.outputs_summary_table_e110); end
  def test_outputs_summary_table_f110; assert_equal("2.0%", worksheet.outputs_summary_table_f110); end
  def test_outputs_summary_table_g110; assert_equal("", worksheet.outputs_summary_table_g110); end
  def test_outputs_summary_table_c111; assert_equal("car.passenger.urban.PH", worksheet.outputs_summary_table_c111); end
  def test_outputs_summary_table_d111; assert_equal("% of urban cars", worksheet.outputs_summary_table_d111); end
  def test_outputs_summary_table_e111; assert_equal("0.0%", worksheet.outputs_summary_table_e111); end
  def test_outputs_summary_table_f111; assert_equal("5.0%", worksheet.outputs_summary_table_f111); end
  def test_outputs_summary_table_g111; assert_equal("", worksheet.outputs_summary_table_g111); end
  def test_outputs_summary_table_c112; assert_equal("car.passenger.urban.EV", worksheet.outputs_summary_table_c112); end
  def test_outputs_summary_table_d112; assert_equal("% of urban cars", worksheet.outputs_summary_table_d112); end
  def test_outputs_summary_table_e112; assert_equal("0.2%", worksheet.outputs_summary_table_e112); end
  def test_outputs_summary_table_f112; assert_equal("2.0%", worksheet.outputs_summary_table_f112); end
  def test_outputs_summary_table_g112; assert_equal("", worksheet.outputs_summary_table_g112); end
  def test_outputs_summary_table_c113; assert_equal("car.passenger.urban.H2", worksheet.outputs_summary_table_c113); end
  def test_outputs_summary_table_d113; assert_equal("% of urban cars", worksheet.outputs_summary_table_d113); end
  def test_outputs_summary_table_e113; assert_equal("0.0%", worksheet.outputs_summary_table_e113); end
  def test_outputs_summary_table_f113; assert_equal("0.0%", worksheet.outputs_summary_table_f113); end
  def test_outputs_summary_table_g113; assert_equal("", worksheet.outputs_summary_table_g113); end
  def test_outputs_summary_table_b115; assert_equal("Buildings", worksheet.outputs_summary_table_b115); end
  def test_outputs_summary_table_c115; assert_equal("Global Urban solid boiler used by people with access to electricity for space heating", worksheet.outputs_summary_table_c115); end
  def test_outputs_summary_table_d115; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d115); end
  def test_outputs_summary_table_e115; assert_equal("2%", worksheet.outputs_summary_table_e115); end
  def test_outputs_summary_table_f115; assert_equal("2%", worksheet.outputs_summary_table_f115); end
  def test_outputs_summary_table_g115; assert_equal("-13%", worksheet.outputs_summary_table_g115); end
  def test_outputs_summary_table_c116; assert_equal("Global urban liquid boiler used by people with access to electricity for space heating", worksheet.outputs_summary_table_c116); end
  def test_outputs_summary_table_d116; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d116); end
  def test_outputs_summary_table_e116; assert_equal("14%", worksheet.outputs_summary_table_e116); end
  def test_outputs_summary_table_f116; assert_equal("10%", worksheet.outputs_summary_table_f116); end
  def test_outputs_summary_table_g116; assert_equal("-29%", worksheet.outputs_summary_table_g116); end
  def test_outputs_summary_table_c117; assert_equal("Global urban gas boiler used by people with access to electricity for space heating", worksheet.outputs_summary_table_c117); end
  def test_outputs_summary_table_d117; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d117); end
  def test_outputs_summary_table_e117; assert_equal("55%", worksheet.outputs_summary_table_e117); end
  def test_outputs_summary_table_f117; assert_equal("38%", worksheet.outputs_summary_table_f117); end
  def test_outputs_summary_table_g117; assert_equal("-32%", worksheet.outputs_summary_table_g117); end
  def test_outputs_summary_table_c118; assert_equal("Global urban heat pump used by people with access to electricity for space heating", worksheet.outputs_summary_table_c118); end
  def test_outputs_summary_table_d118; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d118); end
  def test_outputs_summary_table_e118; assert_equal("2%", worksheet.outputs_summary_table_e118); end
  def test_outputs_summary_table_f118; assert_equal("3%", worksheet.outputs_summary_table_f118); end
  def test_outputs_summary_table_g118; assert_equal("50%", worksheet.outputs_summary_table_g118); end
  def test_outputs_summary_table_c119; assert_equal("Global urban electricity heater used by people with access to electricity for space heating", worksheet.outputs_summary_table_c119); end
  def test_outputs_summary_table_d119; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d119); end
  def test_outputs_summary_table_e119; assert_equal("8%", worksheet.outputs_summary_table_e119); end
  def test_outputs_summary_table_f119; assert_equal("8%", worksheet.outputs_summary_table_f119); end
  def test_outputs_summary_table_g119; assert_equal("0%", worksheet.outputs_summary_table_g119); end
  def test_outputs_summary_table_c120; assert_equal("Global urban solar heater used by people with access to electricity for space heating", worksheet.outputs_summary_table_c120); end
  def test_outputs_summary_table_d120; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d120); end
  def test_outputs_summary_table_e120; assert_equal("0%", worksheet.outputs_summary_table_e120); end
  def test_outputs_summary_table_f120; assert_equal("0%", worksheet.outputs_summary_table_f120); end
  def test_outputs_summary_table_g120; assert_equal("", worksheet.outputs_summary_table_g120); end
  def test_outputs_summary_table_c121; assert_equal("Global urban chp used by people with access to electricity for space heating", worksheet.outputs_summary_table_c121); end
  def test_outputs_summary_table_d121; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d121); end
  def test_outputs_summary_table_e121; assert_equal("2%", worksheet.outputs_summary_table_e121); end
  def test_outputs_summary_table_f121; assert_equal("4%", worksheet.outputs_summary_table_f121); end
  def test_outputs_summary_table_g121; assert_equal("75%", worksheet.outputs_summary_table_g121); end
  def test_outputs_summary_table_c122; assert_equal("Global urban district heating used by people with access to electricity for space heating", worksheet.outputs_summary_table_c122); end
  def test_outputs_summary_table_d122; assert_equal("% of households (from urban households with electricity access)", worksheet.outputs_summary_table_d122); end
  def test_outputs_summary_table_e122; assert_equal("17%", worksheet.outputs_summary_table_e122); end
  def test_outputs_summary_table_f122; assert_equal("36%", worksheet.outputs_summary_table_f122); end
  def test_outputs_summary_table_g122; assert_equal("112%", worksheet.outputs_summary_table_g122); end
  def test_outputs_summary_table_c123; assert_equal("% urban households using hydrocarbons (and all district heating) for space heating", worksheet.outputs_summary_table_c123); end
  def test_outputs_summary_table_d123; assert_equal("% of hhds (from all urban households with access to electricity)", worksheet.outputs_summary_table_d123); end
  def test_outputs_summary_table_e123; assert_equal("90%", worksheet.outputs_summary_table_e123); end
  def test_outputs_summary_table_f123; assert_equal("89%", worksheet.outputs_summary_table_f123); end
  def test_outputs_summary_table_g123; assert_equal("-1%", worksheet.outputs_summary_table_g123); end
  def test_outputs_summary_table_b125; assert_equal("Manufacturing", worksheet.outputs_summary_table_b125); end
  def test_outputs_summary_table_c125; assert_equal("Electrical equipment (% of 2011 demand (tonnes))", worksheet.outputs_summary_table_c125); end
  def test_outputs_summary_table_d125; assert_equal("% of 2011 demand (tonnes)", worksheet.outputs_summary_table_d125); end
  def test_outputs_summary_table_e125; assert_equal("100%", worksheet.outputs_summary_table_e125); end
  def test_outputs_summary_table_f125; assert_equal("226%", worksheet.outputs_summary_table_f125); end
  def test_outputs_summary_table_g125; assert_equal("126%", worksheet.outputs_summary_table_g125); end
  def test_outputs_summary_table_c126; assert_equal("Consumer packaging (% of 2011 demand (tonnes))", worksheet.outputs_summary_table_c126); end
  def test_outputs_summary_table_d126; assert_equal("% of 2011 demand (tonnes)", worksheet.outputs_summary_table_d126); end
  def test_outputs_summary_table_e126; assert_equal("100%", worksheet.outputs_summary_table_e126); end
  def test_outputs_summary_table_f126; assert_equal("145%", worksheet.outputs_summary_table_f126); end
  def test_outputs_summary_table_g126; assert_equal("45%", worksheet.outputs_summary_table_g126); end
  def test_outputs_summary_table_c127; assert_equal("Metal goods (% of 2011 demand (tonnes))", worksheet.outputs_summary_table_c127); end
  def test_outputs_summary_table_d127; assert_equal("% of 2011 demand (tonnes)", worksheet.outputs_summary_table_d127); end
  def test_outputs_summary_table_e127; assert_equal("100%", worksheet.outputs_summary_table_e127); end
  def test_outputs_summary_table_f127; assert_equal("159%", worksheet.outputs_summary_table_f127); end
  def test_outputs_summary_table_g127; assert_equal("59%", worksheet.outputs_summary_table_g127); end
  def test_outputs_summary_table_c128; assert_equal("IPCC emissions sector G.X2.A (Gt CO2)", worksheet.outputs_summary_table_c128); end
  def test_outputs_summary_table_d128; assert_equal("Gt CO2", worksheet.outputs_summary_table_d128); end
  def test_outputs_summary_table_e128; assert_equal("0.0", worksheet.outputs_summary_table_e128); end
  def test_outputs_summary_table_f128; assert_equal("0.0", worksheet.outputs_summary_table_f128); end
  def test_outputs_summary_table_g128; assert_equal("", worksheet.outputs_summary_table_g128); end
  def test_outputs_summary_table_c129; assert_equal("IPCC emissions sector G.X2.B (Gt CO2)", worksheet.outputs_summary_table_c129); end
  def test_outputs_summary_table_d129; assert_equal("Gt CO2", worksheet.outputs_summary_table_d129); end
  def test_outputs_summary_table_e129; assert_equal("0.0", worksheet.outputs_summary_table_e129); end
  def test_outputs_summary_table_f129; assert_equal("0.0", worksheet.outputs_summary_table_f129); end
  def test_outputs_summary_table_g129; assert_equal("", worksheet.outputs_summary_table_g129); end
  def test_outputs_summary_table_c130; assert_equal("IPCC emissions sector G.1A (Gt CO2)", worksheet.outputs_summary_table_c130); end
  def test_outputs_summary_table_d130; assert_equal("Gt CO2", worksheet.outputs_summary_table_d130); end
  def test_outputs_summary_table_e130; assert_equal("6.4", worksheet.outputs_summary_table_e130); end
  def test_outputs_summary_table_f130; assert_equal("11.1", worksheet.outputs_summary_table_f130); end
  def test_outputs_summary_table_g130; assert_equal("74%", worksheet.outputs_summary_table_g130); end
  def test_outputs_summary_table_c131; assert_equal("IPCC emissions sector G.2 (Gt CO2)", worksheet.outputs_summary_table_c131); end
  def test_outputs_summary_table_d131; assert_equal("Gt CO2", worksheet.outputs_summary_table_d131); end
  def test_outputs_summary_table_e131; assert_equal("2.4", worksheet.outputs_summary_table_e131); end
  def test_outputs_summary_table_f131; assert_equal("4.4", worksheet.outputs_summary_table_f131); end
  def test_outputs_summary_table_g131; assert_equal("86%", worksheet.outputs_summary_table_g131); end
  def test_outputs_summary_table_b133; assert_equal("Land", worksheet.outputs_summary_table_b133); end
  def test_outputs_summary_table_c133; assert_equal("Productive land for forest", worksheet.outputs_summary_table_c133); end
  def test_outputs_summary_table_d133; assert_equal("% of unallocated land", worksheet.outputs_summary_table_d133); end
  def test_outputs_summary_table_e133; assert_equal("18%", worksheet.outputs_summary_table_e133); end
  def test_outputs_summary_table_f133; assert_equal("18%", worksheet.outputs_summary_table_f133); end
  def test_outputs_summary_table_g133; assert_equal("0%", worksheet.outputs_summary_table_g133); end
  def test_outputs_summary_table_c134; assert_equal("Productive land for bioenergy", worksheet.outputs_summary_table_c134); end
  def test_outputs_summary_table_d134; assert_equal("% of unallocated land", worksheet.outputs_summary_table_d134); end
  def test_outputs_summary_table_e134; assert_equal("78%", worksheet.outputs_summary_table_e134); end
  def test_outputs_summary_table_f134; assert_equal("78%", worksheet.outputs_summary_table_f134); end
  def test_outputs_summary_table_g134; assert_equal("0%", worksheet.outputs_summary_table_g134); end
  def test_outputs_summary_table_c135; assert_equal("Land for animals (M ha)", worksheet.outputs_summary_table_c135); end
  def test_outputs_summary_table_d135; assert_equal("M ha", worksheet.outputs_summary_table_d135); end
  def test_outputs_summary_table_e135; assert_equal("3,363", worksheet.outputs_summary_table_e135); end
  def test_outputs_summary_table_f135; assert_equal("3,046", worksheet.outputs_summary_table_f135); end
  def test_outputs_summary_table_g135; assert_equal("-9%", worksheet.outputs_summary_table_g135); end
  def test_outputs_summary_table_c136; assert_equal("Land for food crops (M ha)", worksheet.outputs_summary_table_c136); end
  def test_outputs_summary_table_d136; assert_equal("M ha", worksheet.outputs_summary_table_d136); end
  def test_outputs_summary_table_e136; assert_equal("1,443", worksheet.outputs_summary_table_e136); end
  def test_outputs_summary_table_f136; assert_equal("1,667", worksheet.outputs_summary_table_f136); end
  def test_outputs_summary_table_g136; assert_equal("15%", worksheet.outputs_summary_table_g136); end
  def test_outputs_summary_table_c137; assert_equal("Land for non-food crops  (M ha)", worksheet.outputs_summary_table_c137); end
  def test_outputs_summary_table_d137; assert_equal("M ha", worksheet.outputs_summary_table_d137); end
  def test_outputs_summary_table_e137; assert_equal("60", worksheet.outputs_summary_table_e137); end
  def test_outputs_summary_table_f137; assert_equal("60", worksheet.outputs_summary_table_f137); end
  def test_outputs_summary_table_g137; assert_equal("0%", worksheet.outputs_summary_table_g137); end
  def test_outputs_summary_table_c138; assert_equal("Native forest (M ha)", worksheet.outputs_summary_table_c138); end
  def test_outputs_summary_table_d138; assert_equal("M ha", worksheet.outputs_summary_table_d138); end
  def test_outputs_summary_table_e138; assert_equal("3,753", worksheet.outputs_summary_table_e138); end
  def test_outputs_summary_table_f138; assert_equal("3,579", worksheet.outputs_summary_table_f138); end
  def test_outputs_summary_table_g138; assert_equal("-5%", worksheet.outputs_summary_table_g138); end
  def test_outputs_summary_table_c139; assert_equal("Commercial forest (M ha)", worksheet.outputs_summary_table_c139); end
  def test_outputs_summary_table_d139; assert_equal("M ha", worksheet.outputs_summary_table_d139); end
  def test_outputs_summary_table_e139; assert_equal("274", worksheet.outputs_summary_table_e139); end
  def test_outputs_summary_table_f139; assert_equal("419", worksheet.outputs_summary_table_f139); end
  def test_outputs_summary_table_g139; assert_equal("53%", worksheet.outputs_summary_table_g139); end
  def test_outputs_summary_table_c140; assert_equal("Land for bioenergy (M ha)", worksheet.outputs_summary_table_c140); end
  def test_outputs_summary_table_d140; assert_equal("M ha", worksheet.outputs_summary_table_d140); end
  def test_outputs_summary_table_e140; assert_equal("45", worksheet.outputs_summary_table_e140); end
  def test_outputs_summary_table_f140; assert_equal("45", worksheet.outputs_summary_table_f140); end
  def test_outputs_summary_table_g140; assert_equal("0%", worksheet.outputs_summary_table_g140); end
  def test_outputs_summary_table_c141; assert_equal("Unused productive land (M ha)", worksheet.outputs_summary_table_c141); end
  def test_outputs_summary_table_d141; assert_equal("M ha", worksheet.outputs_summary_table_d141); end
  def test_outputs_summary_table_e141; assert_equal(:na, worksheet.outputs_summary_table_e141); end
  def test_outputs_summary_table_f141; assert_equal(:na, worksheet.outputs_summary_table_f141); end
  def test_outputs_summary_table_g141; assert_equal(:na, worksheet.outputs_summary_table_g141); end
  def test_outputs_summary_table_c142; assert_equal("Settlements and infrastructure (M ha)", worksheet.outputs_summary_table_c142); end
  def test_outputs_summary_table_d142; assert_equal("M ha", worksheet.outputs_summary_table_d142); end
  def test_outputs_summary_table_e142; assert_equal("245", worksheet.outputs_summary_table_e142); end
  def test_outputs_summary_table_f142; assert_equal("368", worksheet.outputs_summary_table_f142); end
  def test_outputs_summary_table_g142; assert_equal("50%", worksheet.outputs_summary_table_g142); end
  def test_outputs_summary_table_c143; assert_equal("Desert, ice etc (M ha)", worksheet.outputs_summary_table_c143); end
  def test_outputs_summary_table_d143; assert_equal("M ha", worksheet.outputs_summary_table_d143); end
  def test_outputs_summary_table_e143; assert_equal("3,836", worksheet.outputs_summary_table_e143); end
  def test_outputs_summary_table_f143; assert_equal("3,836", worksheet.outputs_summary_table_f143); end
  def test_outputs_summary_table_g143; assert_equal("0%", worksheet.outputs_summary_table_g143); end
  def test_outputs_summary_table_c144; assert_equal("Total productive land (all excluding desert, ice) (M ha)", worksheet.outputs_summary_table_c144); end
  def test_outputs_summary_table_d144; assert_equal("M ha", worksheet.outputs_summary_table_d144); end
  def test_outputs_summary_table_e144; assert_equal(:na, worksheet.outputs_summary_table_e144); end
  def test_outputs_summary_table_f144; assert_equal(:na, worksheet.outputs_summary_table_f144); end
  def test_outputs_summary_table_g144; assert_equal(:na, worksheet.outputs_summary_table_g144); end
  def test_outputs_summary_table_c145; assert_equal("% of land used for food (livestock)", worksheet.outputs_summary_table_c145); end
  def test_outputs_summary_table_d145; assert_equal("% of all productive land ()", worksheet.outputs_summary_table_d145); end
  def test_outputs_summary_table_e145; assert_equal(:na, worksheet.outputs_summary_table_e145); end
  def test_outputs_summary_table_f145; assert_equal(:na, worksheet.outputs_summary_table_f145); end
  def test_outputs_summary_table_g145; assert_equal(:na, worksheet.outputs_summary_table_g145); end
  def test_outputs_summary_table_c146; assert_equal("Emissions saved by speculative GHG removal technologies (Gt CO2)", worksheet.outputs_summary_table_c146); end
  def test_outputs_summary_table_d146; assert_equal("Gt CO2", worksheet.outputs_summary_table_d146); end
  def test_outputs_summary_table_e146; assert_equal("0.0", worksheet.outputs_summary_table_e146); end
  def test_outputs_summary_table_f146; assert_equal("0.0", worksheet.outputs_summary_table_f146); end
  def test_outputs_summary_table_g146; assert_equal("", worksheet.outputs_summary_table_g146); end
  def test_outputs_summary_table_b149; assert_equal("Cost", worksheet.outputs_summary_table_b149); end
  def test_outputs_summary_table_c149; assert_equal("Cost in 2050 - point estimate ($bn)", worksheet.outputs_summary_table_c149); end
  def test_outputs_summary_table_d149; assert_equal("$bn", worksheet.outputs_summary_table_d149); end
  def test_outputs_summary_table_e149; assert_equal("n / a", worksheet.outputs_summary_table_e149); end
  def test_outputs_summary_table_f149; assert_equal("3907.3", worksheet.outputs_summary_table_f149); end
  def test_outputs_summary_table_g149; assert_equal("", worksheet.outputs_summary_table_g149); end
  def test_outputs_summary_table_c150; assert_equal("Fuel tax rate - coal", worksheet.outputs_summary_table_c150); end
  def test_outputs_summary_table_d150; assert_equal("%", worksheet.outputs_summary_table_d150); end
  def test_outputs_summary_table_e150; assert_equal("n / a", worksheet.outputs_summary_table_e150); end
  def test_outputs_summary_table_f150; assert_equal("39.0%", worksheet.outputs_summary_table_f150); end
  def test_outputs_summary_table_g150; assert_equal("", worksheet.outputs_summary_table_g150); end
  def test_outputs_summary_table_c151; assert_equal("Fuel tax rate - oil", worksheet.outputs_summary_table_c151); end
  def test_outputs_summary_table_d151; assert_equal("%", worksheet.outputs_summary_table_d151); end
  def test_outputs_summary_table_e151; assert_equal("n / a", worksheet.outputs_summary_table_e151); end
  def test_outputs_summary_table_f151; assert_equal("67.0%", worksheet.outputs_summary_table_f151); end
  def test_outputs_summary_table_g151; assert_equal("", worksheet.outputs_summary_table_g151); end
  def test_outputs_summary_table_c152; assert_equal("Fuel tax rate - gas", worksheet.outputs_summary_table_c152); end
  def test_outputs_summary_table_d152; assert_equal("%", worksheet.outputs_summary_table_d152); end
  def test_outputs_summary_table_e152; assert_equal("n / a", worksheet.outputs_summary_table_e152); end
  def test_outputs_summary_table_f152; assert_equal("60.0%", worksheet.outputs_summary_table_f152); end
  def test_outputs_summary_table_g152; assert_equal("", worksheet.outputs_summary_table_g152); end
  def test_outputs_summary_table_c153; assert_equal("Fuel cost (excluding tax) - coal", worksheet.outputs_summary_table_c153); end
  def test_outputs_summary_table_d153; assert_equal("$bn", worksheet.outputs_summary_table_d153); end
  def test_outputs_summary_table_e153; assert_equal("n / a", worksheet.outputs_summary_table_e153); end
  def test_outputs_summary_table_f153; assert_equal("532.2", worksheet.outputs_summary_table_f153); end
  def test_outputs_summary_table_g153; assert_equal("", worksheet.outputs_summary_table_g153); end
  def test_outputs_summary_table_c154; assert_equal("Fuel cost (excluding tax) - oil", worksheet.outputs_summary_table_c154); end
  def test_outputs_summary_table_d154; assert_equal("$bn", worksheet.outputs_summary_table_d154); end
  def test_outputs_summary_table_e154; assert_equal("n / a", worksheet.outputs_summary_table_e154); end
  def test_outputs_summary_table_f154; assert_equal("2269.6", worksheet.outputs_summary_table_f154); end
  def test_outputs_summary_table_g154; assert_equal("", worksheet.outputs_summary_table_g154); end
  def test_outputs_summary_table_c155; assert_equal("Fuel cost (excluding tax) - gas", worksheet.outputs_summary_table_c155); end
  def test_outputs_summary_table_d155; assert_equal("$bn", worksheet.outputs_summary_table_d155); end
  def test_outputs_summary_table_e155; assert_equal("n / a", worksheet.outputs_summary_table_e155); end
  def test_outputs_summary_table_f155; assert_equal("689.7", worksheet.outputs_summary_table_f155); end
  def test_outputs_summary_table_g155; assert_equal("", worksheet.outputs_summary_table_g155); end
  def test_outputs_summary_table_c156; assert_equal("Tax amount paid to exporters - coal", worksheet.outputs_summary_table_c156); end
  def test_outputs_summary_table_d156; assert_equal("$bn", worksheet.outputs_summary_table_d156); end
  def test_outputs_summary_table_e156; assert_equal("n / a", worksheet.outputs_summary_table_e156); end
  def test_outputs_summary_table_f156; assert_equal("340.3", worksheet.outputs_summary_table_f156); end
  def test_outputs_summary_table_g156; assert_equal("", worksheet.outputs_summary_table_g156); end
  def test_outputs_summary_table_c157; assert_equal("Tax amount paid to exporters - oil", worksheet.outputs_summary_table_c157); end
  def test_outputs_summary_table_d157; assert_equal("$bn", worksheet.outputs_summary_table_d157); end
  def test_outputs_summary_table_e157; assert_equal("n / a", worksheet.outputs_summary_table_e157); end
  def test_outputs_summary_table_f157; assert_equal("4607.9", worksheet.outputs_summary_table_f157); end
  def test_outputs_summary_table_g157; assert_equal("", worksheet.outputs_summary_table_g157); end
  def test_outputs_summary_table_c158; assert_equal("Tax amount paid to exporters - gas", worksheet.outputs_summary_table_c158); end
  def test_outputs_summary_table_d158; assert_equal("$bn", worksheet.outputs_summary_table_d158); end
  def test_outputs_summary_table_e158; assert_equal("n / a", worksheet.outputs_summary_table_e158); end
  def test_outputs_summary_table_f158; assert_equal("1034.6", worksheet.outputs_summary_table_f158); end
  def test_outputs_summary_table_g158; assert_equal("", worksheet.outputs_summary_table_g158); end
  def test_outputs_summary_table_c159; assert_equal("Checking calculations below", worksheet.outputs_summary_table_c159); end
  def test_outputs_summary_table_c160; assert_equal("Fuel amount paid (if tax added back in) - coal", worksheet.outputs_summary_table_c160); end
  def test_outputs_summary_table_d160; assert_equal("$bn", worksheet.outputs_summary_table_d160); end
  def test_outputs_summary_table_f160; assert_equal("872.5", worksheet.outputs_summary_table_f160); end
  def test_outputs_summary_table_c161; assert_equal("Fuel amount paid (if tax added back in) - oil", worksheet.outputs_summary_table_c161); end
  def test_outputs_summary_table_d161; assert_equal("$bn", worksheet.outputs_summary_table_d161); end
  def test_outputs_summary_table_f161; assert_equal("6877.4", worksheet.outputs_summary_table_f161); end
  def test_outputs_summary_table_c162; assert_equal("Fuel amount paid (if tax added back in) - gas", worksheet.outputs_summary_table_c162); end
  def test_outputs_summary_table_d162; assert_equal("$bn", worksheet.outputs_summary_table_d162); end
  def test_outputs_summary_table_f162; assert_equal("1724.3", worksheet.outputs_summary_table_f162); end
  def test_outputs_summary_table_c163; assert_equal("Checking - coal", worksheet.outputs_summary_table_c163); end
  def test_outputs_summary_table_d163; assert_equal("%", worksheet.outputs_summary_table_d163); end
  def test_outputs_summary_table_f163; assert_equal("0.4", worksheet.outputs_summary_table_f163); end
  def test_outputs_summary_table_c164; assert_equal("Checking - oil", worksheet.outputs_summary_table_c164); end
  def test_outputs_summary_table_d164; assert_equal("%", worksheet.outputs_summary_table_d164); end
  def test_outputs_summary_table_f164; assert_equal("0.7", worksheet.outputs_summary_table_f164); end
  def test_outputs_summary_table_c165; assert_equal("Checking - gas", worksheet.outputs_summary_table_c165); end
  def test_outputs_summary_table_d165; assert_equal("%", worksheet.outputs_summary_table_d165); end
  def test_outputs_summary_table_f165; assert_equal("0.6", worksheet.outputs_summary_table_f165); end
  def test_outputs_summary_graphs_c47; assert_equal("WARNING: Cumulative CO2 emissions by 2100 exceed 3010 GtCO2, the amount associated with a 50% chance of keeping global mean temperature increase below 2C by 2100.  Reduce emissions by increasing effort across more levers.", worksheet.outputs_summary_graphs_c47); end
  def test_outputs_summary_graphs_c55; assert_equal("No warning on bio crop oversupply ", worksheet.outputs_summary_graphs_c55); end
  def test_outputs_summary_graphs_c51; assert_equal("No warning on electricity oversupply", worksheet.outputs_summary_graphs_c51); end
  def test_outputs_summary_graphs_c58; assert_equal("No warning on CO2 concentrations being below pre-industrial levels", worksheet.outputs_summary_graphs_c58); end
  def test_outputs_summary_graphs_c52; assert_equal("No warning on coal consumption", worksheet.outputs_summary_graphs_c52); end
  def test_outputs_summary_graphs_c57; assert_equal("No warning on forest area change", worksheet.outputs_summary_graphs_c57); end
  def test_outputs_summary_graphs_c50; assert_equal("WARNING - your pathway increases the dependence on fossil fuels from 2011 to 2050. A greater dependence of on fossil fuels in the global primary energy supply mix could mean greater import dependence for some countries and greater exposure to possibly volatile fossil fuel prices.  Click on energy tab to view fossil fuel dependence.", worksheet.outputs_summary_graphs_c50); end
  def test_outputs_summary_graphs_c54; assert_equal("No warning on gas consumption", worksheet.outputs_summary_graphs_c54); end
  def test_outputs_summary_graphs_c48; assert_equal("No warning on GGR", worksheet.outputs_summary_graphs_c48); end
  def test_outputs_summary_graphs_c56; assert_equal("No warning on land use", worksheet.outputs_summary_graphs_c56); end
  def test_outputs_summary_graphs_c49; assert_equal("No warning on level 4s", worksheet.outputs_summary_graphs_c49); end
  def test_outputs_summary_graphs_c53; assert_equal("WARNING: your pathway consumes more oil than stated in a published estimate of economically viable reserves, by 2050. This means your pathway will consume oil which is not economic with 2011 prices and technology.  Click on 'resources' tab for more info", worksheet.outputs_summary_graphs_c53); end
end
